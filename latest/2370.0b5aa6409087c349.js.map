{"version":3,"file":"2370.0b5aa6409087c349.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-geo/dist/LayerTree/LayerTree.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-geo/dist/constants.js"],"sourcesContent":["import './LayerTree.less';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Tree } from 'antd';\nimport _isFunction from 'lodash/isFunction';\nimport { getUid } from 'ol';\nimport OlLayerGroup from 'ol/layer/Group';\nimport { unByKey } from 'ol/Observable';\nimport Logger from '@terrestris/base-util/dist/Logger';\nimport MapUtil from '@terrestris/ol-util/dist/MapUtil/MapUtil';\nimport useMap from '@terrestris/react-util/dist/Hooks/useMap/useMap';\nimport { CSS_PREFIX } from '../constants';\nconst defaultClassName = `${CSS_PREFIX}layertree`;\nconst LayerTree = ({ className, layerGroup, nodeTitleRenderer, filterFunction, onLayerVisibilityChanged, checkable = true, draggable = true, ...passThroughProps }) => {\n    const [checkedKeys, setCheckedKeys] = useState([]);\n    const [treeData, setTreeData] = useState([]);\n    const map = useMap();\n    const getVisibleLayerKeys = useCallback(() => {\n        if (!map) {\n            return [];\n        }\n        const lGroup = layerGroup ? MapUtil.getAllLayers(layerGroup) : MapUtil.getAllLayers(map);\n        let visibleLayers = lGroup\n            .filter(layer => !(layer instanceof OlLayerGroup) && layer.getVisible());\n        if (filterFunction) {\n            visibleLayers = visibleLayers.filter(filterFunction);\n        }\n        return visibleLayers.map(getUid);\n    }, [filterFunction, layerGroup, map]);\n    const getTreeNodeTitle = useCallback((layer) => {\n        if (_isFunction(nodeTitleRenderer)) {\n            return nodeTitleRenderer(layer);\n        }\n        else {\n            return layer.get('name');\n        }\n    }, [nodeTitleRenderer]);\n    const treeNodeFromLayer = useCallback((layer) => {\n        if (!map) {\n            return;\n        }\n        let childNodes = undefined;\n        if (filterFunction && [layer].filter(filterFunction).length === 0) {\n            return;\n        }\n        if (layer instanceof OlLayerGroup) {\n            let childLayers = layer.getLayers().getArray();\n            if (filterFunction) {\n                childLayers = childLayers.filter(filterFunction);\n            }\n            childNodes = childLayers\n                .map(childLayer => treeNodeFromLayer(childLayer))\n                .filter(childLayer => childLayer !== undefined)\n                .toReversed();\n        }\n        return {\n            key: getUid(layer),\n            title: (React.createElement(\"div\", { draggable: true, onClick: e => e.stopPropagation() }, getTreeNodeTitle(layer))),\n            className: MapUtil.layerInResolutionRange(layer, map) ? '' : 'out-of-range',\n            // Required to identify a group layer/node.\n            children: childNodes\n        };\n    }, [map, getTreeNodeTitle, filterFunction]);\n    const treeNodesFromLayerGroup = useCallback(() => {\n        if (!map) {\n            return [];\n        }\n        const lGroup = layerGroup ? layerGroup : map.getLayerGroup();\n        return lGroup.getLayers().getArray()\n            .map(l => treeNodeFromLayer(l))\n            .filter(n => n !== undefined)\n            .toReversed();\n    }, [layerGroup, map, treeNodeFromLayer]);\n    const onChangeResolution = useCallback(() => {\n        setTreeData(treeNodesFromLayerGroup());\n    }, [treeNodesFromLayerGroup]);\n    const setLayerVisibility = useCallback((layer, visible) => {\n        if (layer instanceof OlLayerGroup) {\n            layer.getLayers().forEach(subLayer => {\n                setLayerVisibility(subLayer, visible);\n            });\n        }\n        else {\n            layer.setVisible(visible);\n        }\n    }, []);\n    const updateCheckedKeys = useCallback(() => {\n        setCheckedKeys(getVisibleLayerKeys());\n    }, [getVisibleLayerKeys]);\n    const updateTree = useCallback(() => {\n        setTreeData(treeNodesFromLayerGroup());\n        updateCheckedKeys();\n    }, [updateCheckedKeys, treeNodesFromLayerGroup]);\n    useEffect(() => {\n        updateTree();\n    }, [updateTree]);\n    const registerLayerListeners = useCallback((layer) => {\n        if (filterFunction && [layer].filter(filterFunction).length === 0) {\n            return [];\n        }\n        const keys = [];\n        keys.push(layer.on('propertychange', updateTree));\n        if (layer instanceof OlLayerGroup) {\n            const layerCollection = layer.getLayers();\n            keys.push(layerCollection.on('add', updateTree));\n            keys.push(layerCollection.on('remove', updateTree));\n            keys.push(layer.on('change:layers', updateTree));\n            for (const lay of layerCollection.getArray()) {\n                keys.push(...registerLayerListeners(lay));\n            }\n        }\n        else {\n            keys.push(layer.on('change:visible', updateCheckedKeys));\n        }\n        return keys;\n    }, [filterFunction, updateTree, updateCheckedKeys]);\n    const registerAllLayerListeners = useCallback(() => {\n        if (!map) {\n            return [];\n        }\n        const lGroup = layerGroup ? layerGroup : map.getLayerGroup();\n        return registerLayerListeners(lGroup);\n    }, [layerGroup, map, registerLayerListeners]);\n    // Reregister all layer listeners if the treeData changes, this is e.g. required if a layer becomes\n    // a child of a layer group that isn't part of the treeData yet.\n    useEffect(() => {\n        const keys = registerAllLayerListeners();\n        return () => {\n            unByKey(keys);\n        };\n    }, [treeData, registerAllLayerListeners]);\n    useEffect(() => {\n        if (!map) {\n            return;\n        }\n        const key = map.getView().on('change:resolution', onChangeResolution);\n        return () => {\n            unByKey(key);\n        };\n    }, [map, onChangeResolution]);\n    const onCheck = useCallback((_, info) => {\n        if (!map) {\n            return;\n        }\n        const key = info.node.key;\n        const checked = info.checked;\n        if (!key) {\n            return;\n        }\n        const layer = MapUtil.getLayerByOlUid(map, key);\n        if (!layer) {\n            Logger.error('Layer is not defined');\n            return;\n        }\n        setLayerVisibility(layer, checked);\n        if (_isFunction(onLayerVisibilityChanged)) {\n            onLayerVisibilityChanged(layer, checked);\n        }\n    }, [map, setLayerVisibility, onLayerVisibilityChanged]);\n    const onDrop = useCallback((info) => {\n        const dropKey = info.node.key;\n        const dragKey = info.dragNode.key;\n        const dropPos = info.node.pos.split('-');\n        const dropPosition = info.dropPosition;\n        // The drop position relative to the drop node, inside 0, top -1, bottom 1.\n        const dropPositionRelative = dropPosition - parseInt(dropPos[dropPos.length - 1], 10);\n        // Reorder layers\n        if (!map) {\n            return;\n        }\n        const dragLayer = MapUtil.getLayerByOlUid(map, dragKey);\n        if (!dragLayer) {\n            Logger.error('dragLayer is not defined');\n            return;\n        }\n        const dropLayer = MapUtil.getLayerByOlUid(map, dropKey);\n        if (!dropLayer) {\n            Logger.error('dropLayer is not defined');\n            return;\n        }\n        const dragInfo = MapUtil.getLayerPositionInfo(dragLayer, map);\n        if (!dragInfo || !dragInfo?.groupLayer) {\n            return;\n        }\n        const dropInfo = MapUtil.getLayerPositionInfo(dropLayer, map);\n        if (!dropInfo || !dropInfo?.groupLayer) {\n            return;\n        }\n        const dragCollection = dragInfo.groupLayer.getLayers();\n        const dropCollection = dropInfo.groupLayer.getLayers();\n        dragCollection.remove(dragLayer);\n        const dropLayerIndex = dropCollection.getArray().findIndex(l => l === dropLayer);\n        // Drop on the top of the drop node/layer.\n        if (dropPositionRelative === -1) {\n            if (dropPosition === dropCollection.getLength() - 1) {\n                dropCollection.push(dragLayer);\n            }\n            else {\n                dropCollection.insertAt(dropLayerIndex + 1, dragLayer);\n            }\n            // Drop on node (= to a layer group).\n        }\n        else if (dropPositionRelative === 0) {\n            if (dropLayer instanceof OlLayerGroup) {\n                dropLayer.getLayers().push(dragLayer);\n            }\n            // Drop on the bottom of the drop node/layer.\n        }\n        else if (dropPositionRelative === 1) {\n            dropCollection.insertAt(dropLayerIndex, dragLayer);\n        }\n    }, [map]);\n    const allowDrop = useCallback((options) => {\n        const dropNode = options.dropNode;\n        const dropPositionRelative = options.dropPosition;\n        // Don't allow dropping on a layer node.\n        return !(dropPositionRelative === 0 && !dropNode.children);\n    }, []);\n    const finalClassName = className\n        ? `${className} ${defaultClassName}`\n        : defaultClassName;\n    return (React.createElement(Tree, { className: finalClassName, checkedKeys: checkedKeys, onCheck: onCheck, onDrop: onDrop, allowDrop: allowDrop, selectable: false, checkable: checkable, draggable: draggable, treeData: treeData, ...passThroughProps }));\n};\nexport default LayerTree;\n//# sourceMappingURL=LayerTree.js.map","const CSS_PREFIX = 'react-geo-';\nexport { CSS_PREFIX };\n//# sourceMappingURL=constants.js.map"],"names":["m","e","l","parseInt","d"],"mappings":"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"}