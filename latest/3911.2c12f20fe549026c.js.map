{"version":3,"file":"3911.2c12f20fe549026c.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/ol/math.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/sphere.js"],"sourcesContent":["/**\n * @module ol/math\n */\n\n/**\n * Takes a number and clamps it to within the provided bounds.\n * @param {number} value The input number.\n * @param {number} min The minimum value to return.\n * @param {number} max The maximum value to return.\n * @return {number} The input number if it is within bounds, or the nearest\n *     number within the bounds.\n */\nexport function clamp(value, min, max) {\n  return Math.min(Math.max(value, min), max);\n}\n\n/**\n * Returns the square of the closest distance between the point (x, y) and the\n * line segment (x1, y1) to (x2, y2).\n * @param {number} x X.\n * @param {number} y Y.\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */\nexport function squaredSegmentDistance(x, y, x1, y1, x2, y2) {\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  if (dx !== 0 || dy !== 0) {\n    const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n    if (t > 1) {\n      x1 = x2;\n      y1 = y2;\n    } else if (t > 0) {\n      x1 += dx * t;\n      y1 += dy * t;\n    }\n  }\n  return squaredDistance(x, y, x1, y1);\n}\n\n/**\n * Returns the square of the distance between the points (x1, y1) and (x2, y2).\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */\nexport function squaredDistance(x1, y1, x2, y2) {\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  return dx * dx + dy * dy;\n}\n\n/**\n * Solves system of linear equations using Gaussian elimination method.\n *\n * @param {Array<Array<number>>} mat Augmented matrix (n x n + 1 column)\n *                                     in row-major order.\n * @return {Array<number>|null} The resulting vector.\n */\nexport function solveLinearSystem(mat) {\n  const n = mat.length;\n\n  for (let i = 0; i < n; i++) {\n    // Find max in the i-th column (ignoring i - 1 first rows)\n    let maxRow = i;\n    let maxEl = Math.abs(mat[i][i]);\n    for (let r = i + 1; r < n; r++) {\n      const absValue = Math.abs(mat[r][i]);\n      if (absValue > maxEl) {\n        maxEl = absValue;\n        maxRow = r;\n      }\n    }\n\n    if (maxEl === 0) {\n      return null; // matrix is singular\n    }\n\n    // Swap max row with i-th (current) row\n    const tmp = mat[maxRow];\n    mat[maxRow] = mat[i];\n    mat[i] = tmp;\n\n    // Subtract the i-th row to make all the remaining rows 0 in the i-th column\n    for (let j = i + 1; j < n; j++) {\n      const coef = -mat[j][i] / mat[i][i];\n      for (let k = i; k < n + 1; k++) {\n        if (i == k) {\n          mat[j][k] = 0;\n        } else {\n          mat[j][k] += coef * mat[i][k];\n        }\n      }\n    }\n  }\n\n  // Solve Ax=b for upper triangular matrix A (mat)\n  const x = new Array(n);\n  for (let l = n - 1; l >= 0; l--) {\n    x[l] = mat[l][n] / mat[l][l];\n    for (let m = l - 1; m >= 0; m--) {\n      mat[m][n] -= mat[m][l] * x[l];\n    }\n  }\n  return x;\n}\n\n/**\n * Converts radians to to degrees.\n *\n * @param {number} angleInRadians Angle in radians.\n * @return {number} Angle in degrees.\n */\nexport function toDegrees(angleInRadians) {\n  return (angleInRadians * 180) / Math.PI;\n}\n\n/**\n * Converts degrees to radians.\n *\n * @param {number} angleInDegrees Angle in degrees.\n * @return {number} Angle in radians.\n */\nexport function toRadians(angleInDegrees) {\n  return (angleInDegrees * Math.PI) / 180;\n}\n\n/**\n * Returns the modulo of a / b, depending on the sign of b.\n *\n * @param {number} a Dividend.\n * @param {number} b Divisor.\n * @return {number} Modulo.\n */\nexport function modulo(a, b) {\n  const r = a % b;\n  return r * b < 0 ? r + b : r;\n}\n\n/**\n * Calculates the linearly interpolated value of x between a and b.\n *\n * @param {number} a Number\n * @param {number} b Number\n * @param {number} x Value to be interpolated.\n * @return {number} Interpolated value.\n */\nexport function lerp(a, b, x) {\n  return a + x * (b - a);\n}\n\n/**\n * Returns a number with a limited number of decimal digits.\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The input number with a limited number of decimal digits.\n */\nexport function toFixed(n, decimals) {\n  const factor = Math.pow(10, decimals);\n  return Math.round(n * factor) / factor;\n}\n\n/**\n * Rounds a number to the nearest integer value considering only the given number\n * of decimal digits (with rounding on the final digit).\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The nearest integer.\n */\nexport function round(n, decimals) {\n  return Math.round(toFixed(n, decimals));\n}\n\n/**\n * Rounds a number to the next smaller integer considering only the given number\n * of decimal digits (with rounding on the final digit).\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The next smaller integer.\n */\nexport function floor(n, decimals) {\n  return Math.floor(toFixed(n, decimals));\n}\n\n/**\n * Rounds a number to the next bigger integer considering only the given number\n * of decimal digits (with rounding on the final digit).\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The next bigger integer.\n */\nexport function ceil(n, decimals) {\n  return Math.ceil(toFixed(n, decimals));\n}\n\n/**\n * Wraps a number between some minimum and maximum values.\n * @param {number} n The number to wrap.\n * @param {number} min The minimum of the range (inclusive).\n * @param {number} max The maximum of the range (exclusive).\n * @return {number} The wrapped number.\n */\nexport function wrap(n, min, max) {\n  if (n >= min && n < max) {\n    return n;\n  }\n  const range = max - min;\n  return ((((n - min) % range) + range) % range) + min;\n}\n","/**\n * @module ol/sphere\n */\nimport {toDegrees, toRadians} from './math.js';\n\n/**\n * Object literal with options for the {@link getLength} or {@link getArea}\n * functions.\n * @typedef {Object} SphereMetricOptions\n * @property {import(\"./proj.js\").ProjectionLike} [projection='EPSG:3857']\n * Projection of the  geometry.  By default, the geometry is assumed to be in\n * Web Mercator.\n * @property {number} [radius=6371008.8] Sphere radius.  By default, the\n * [mean Earth radius](https://en.wikipedia.org/wiki/Earth_radius#Mean_radius)\n * for the WGS84 ellipsoid is used.\n */\n\n/**\n * The mean Earth radius (1/3 * (2a + b)) for the WGS84 ellipsoid.\n * https://en.wikipedia.org/wiki/Earth_radius#Mean_radius\n * @type {number}\n */\nexport const DEFAULT_RADIUS = 6371008.8;\n\n/**\n * Get the great circle distance (in meters) between two geographic coordinates.\n * @param {Array} c1 Starting coordinate.\n * @param {Array} c2 Ending coordinate.\n * @param {number} [radius] The sphere radius to use.  Defaults to the Earth's\n *     mean radius using the WGS84 ellipsoid.\n * @return {number} The great circle distance between the points (in meters).\n * @api\n */\nexport function getDistance(c1, c2, radius) {\n  radius = radius || DEFAULT_RADIUS;\n  const lat1 = toRadians(c1[1]);\n  const lat2 = toRadians(c2[1]);\n  const deltaLatBy2 = (lat2 - lat1) / 2;\n  const deltaLonBy2 = toRadians(c2[0] - c1[0]) / 2;\n  const a =\n    Math.sin(deltaLatBy2) * Math.sin(deltaLatBy2) +\n    Math.sin(deltaLonBy2) *\n      Math.sin(deltaLonBy2) *\n      Math.cos(lat1) *\n      Math.cos(lat2);\n  return 2 * radius * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n}\n\n/**\n * Get the cumulative great circle length of linestring coordinates (geographic).\n * @param {Array} coordinates Linestring coordinates.\n * @param {number} radius The sphere radius to use.\n * @return {number} The length (in meters).\n */\nfunction getLengthInternal(coordinates, radius) {\n  let length = 0;\n  for (let i = 0, ii = coordinates.length; i < ii - 1; ++i) {\n    length += getDistance(coordinates[i], coordinates[i + 1], radius);\n  }\n  return length;\n}\n\n/**\n * Get the spherical length of a geometry.  This length is the sum of the\n * great circle distances between coordinates.  For polygons, the length is\n * the sum of all rings.  For points, the length is zero.  For multi-part\n * geometries, the length is the sum of the length of each part.\n * @param {import(\"./geom/Geometry.js\").default} geometry A geometry.\n * @param {SphereMetricOptions} [options] Options for the\n * length calculation.  By default, geometries are assumed to be in 'EPSG:3857'.\n * You can change this by providing a `projection` option.\n * @return {number} The spherical length (in meters).\n * @api\n */\nexport function getLength(geometry, options) {\n  options = options || {};\n  const radius = options.radius || DEFAULT_RADIUS;\n  const projection = options.projection || 'EPSG:3857';\n  const type = geometry.getType();\n  if (type !== 'GeometryCollection') {\n    geometry = geometry.clone().transform(projection, 'EPSG:4326');\n  }\n  let length = 0;\n  let coordinates, coords, i, ii, j, jj;\n  switch (type) {\n    case 'Point':\n    case 'MultiPoint': {\n      break;\n    }\n    case 'LineString':\n    case 'LinearRing': {\n      coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (\n        geometry\n      ).getCoordinates();\n      length = getLengthInternal(coordinates, radius);\n      break;\n    }\n    case 'MultiLineString':\n    case 'Polygon': {\n      coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (\n        geometry\n      ).getCoordinates();\n      for (i = 0, ii = coordinates.length; i < ii; ++i) {\n        length += getLengthInternal(coordinates[i], radius);\n      }\n      break;\n    }\n    case 'MultiPolygon': {\n      coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (\n        geometry\n      ).getCoordinates();\n      for (i = 0, ii = coordinates.length; i < ii; ++i) {\n        coords = coordinates[i];\n        for (j = 0, jj = coords.length; j < jj; ++j) {\n          length += getLengthInternal(coords[j], radius);\n        }\n      }\n      break;\n    }\n    case 'GeometryCollection': {\n      const geometries =\n        /** @type {import(\"./geom/GeometryCollection.js\").default} */ (\n          geometry\n        ).getGeometries();\n      for (i = 0, ii = geometries.length; i < ii; ++i) {\n        length += getLength(geometries[i], options);\n      }\n      break;\n    }\n    default: {\n      throw new Error('Unsupported geometry type: ' + type);\n    }\n  }\n  return length;\n}\n\n/**\n * Returns the spherical area for a list of coordinates.\n *\n * [Reference](https://trs.jpl.nasa.gov/handle/2014/40409)\n * Robert. G. Chamberlain and William H. Duquette, \"Some Algorithms for\n * Polygons on a Sphere\", JPL Publication 07-03, Jet Propulsion\n * Laboratory, Pasadena, CA, June 2007\n *\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates List of coordinates of a linear\n * ring. If the ring is oriented clockwise, the area will be positive,\n * otherwise it will be negative.\n * @param {number} radius The sphere radius.\n * @return {number} Area (in square meters).\n */\nfunction getAreaInternal(coordinates, radius) {\n  let area = 0;\n  const len = coordinates.length;\n  let x1 = coordinates[len - 1][0];\n  let y1 = coordinates[len - 1][1];\n  for (let i = 0; i < len; i++) {\n    const x2 = coordinates[i][0];\n    const y2 = coordinates[i][1];\n    area +=\n      toRadians(x2 - x1) *\n      (2 + Math.sin(toRadians(y1)) + Math.sin(toRadians(y2)));\n    x1 = x2;\n    y1 = y2;\n  }\n  return (area * radius * radius) / 2.0;\n}\n\n/**\n * Get the spherical area of a geometry.  This is the area (in meters) assuming\n * that polygon edges are segments of great circles on a sphere.\n * @param {import(\"./geom/Geometry.js\").default} geometry A geometry.\n * @param {SphereMetricOptions} [options] Options for the area\n *     calculation.  By default, geometries are assumed to be in 'EPSG:3857'.\n *     You can change this by providing a `projection` option.\n * @return {number} The spherical area (in square meters).\n * @api\n */\nexport function getArea(geometry, options) {\n  options = options || {};\n  const radius = options.radius || DEFAULT_RADIUS;\n  const projection = options.projection || 'EPSG:3857';\n  const type = geometry.getType();\n  if (type !== 'GeometryCollection') {\n    geometry = geometry.clone().transform(projection, 'EPSG:4326');\n  }\n  let area = 0;\n  let coordinates, coords, i, ii, j, jj;\n  switch (type) {\n    case 'Point':\n    case 'MultiPoint':\n    case 'LineString':\n    case 'MultiLineString':\n    case 'LinearRing': {\n      break;\n    }\n    case 'Polygon': {\n      coordinates = /** @type {import(\"./geom/Polygon.js\").default} */ (\n        geometry\n      ).getCoordinates();\n      area = Math.abs(getAreaInternal(coordinates[0], radius));\n      for (i = 1, ii = coordinates.length; i < ii; ++i) {\n        area -= Math.abs(getAreaInternal(coordinates[i], radius));\n      }\n      break;\n    }\n    case 'MultiPolygon': {\n      coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (\n        geometry\n      ).getCoordinates();\n      for (i = 0, ii = coordinates.length; i < ii; ++i) {\n        coords = coordinates[i];\n        area += Math.abs(getAreaInternal(coords[0], radius));\n        for (j = 1, jj = coords.length; j < jj; ++j) {\n          area -= Math.abs(getAreaInternal(coords[j], radius));\n        }\n      }\n      break;\n    }\n    case 'GeometryCollection': {\n      const geometries =\n        /** @type {import(\"./geom/GeometryCollection.js\").default} */ (\n          geometry\n        ).getGeometries();\n      for (i = 0, ii = geometries.length; i < ii; ++i) {\n        area += getArea(geometries[i], options);\n      }\n      break;\n    }\n    default: {\n      throw new Error('Unsupported geometry type: ' + type);\n    }\n  }\n  return area;\n}\n\n/**\n * Returns the coordinate at the given distance and bearing from `c1`.\n *\n * @param {import(\"./coordinate.js\").Coordinate} c1 The origin point (`[lon, lat]` in degrees).\n * @param {number} distance The great-circle distance between the origin\n *     point and the target point.\n * @param {number} bearing The bearing (in radians).\n * @param {number} [radius] The sphere radius to use.  Defaults to the Earth's\n *     mean radius using the WGS84 ellipsoid.\n * @return {import(\"./coordinate.js\").Coordinate} The target point.\n */\nexport function offset(c1, distance, bearing, radius) {\n  radius = radius || DEFAULT_RADIUS;\n  const lat1 = toRadians(c1[1]);\n  const lon1 = toRadians(c1[0]);\n  const dByR = distance / radius;\n  const lat = Math.asin(\n    Math.sin(lat1) * Math.cos(dByR) +\n      Math.cos(lat1) * Math.sin(dByR) * Math.cos(bearing),\n  );\n  const lon =\n    lon1 +\n    Math.atan2(\n      Math.sin(bearing) * Math.sin(dByR) * Math.cos(lat1),\n      Math.cos(dByR) - Math.sin(lat1) * Math.sin(lat),\n    );\n  return [toDegrees(lon), toDegrees(lat)];\n}\n"],"names":["Math","n","Array","l","r","Error"],"mappings":"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"}