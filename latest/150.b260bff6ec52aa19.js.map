{"version":3,"file":"150.b260bff6ec52aa19.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/ol/Disposable.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/array.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/events/Event.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/events/EventType.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/events/Target.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/functions.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/node_modules/quickselect/index.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/node_modules/rbush/index.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/obj.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/util.js"],"sourcesContent":["/**\n * @module ol/Disposable\n */\n\n/**\n * @classdesc\n * Objects that need to clean up after themselves.\n */\nclass Disposable {\n  constructor() {\n    /**\n     * The object has already been disposed.\n     * @type {boolean}\n     * @protected\n     */\n    this.disposed = false;\n  }\n\n  /**\n   * Clean up.\n   */\n  dispose() {\n    if (!this.disposed) {\n      this.disposed = true;\n      this.disposeInternal();\n    }\n  }\n\n  /**\n   * Extension point for disposable objects.\n   * @protected\n   */\n  disposeInternal() {}\n}\n\nexport default Disposable;\n","/**\n * @module ol/array\n */\n\n/**\n * Performs a binary search on the provided sorted list and returns the index of the item if found. If it can't be found it'll return -1.\n * https://github.com/darkskyapp/binary-search\n *\n * @param {Array<*>} haystack Items to search through.\n * @param {*} needle The item to look for.\n * @param {Function} [comparator] Comparator function.\n * @return {number} The index of the item if found, -1 if not.\n */\nexport function binarySearch(haystack, needle, comparator) {\n  let mid, cmp;\n  comparator = comparator || ascending;\n  let low = 0;\n  let high = haystack.length;\n  let found = false;\n\n  while (low < high) {\n    /* Note that \"(low + high) >>> 1\" may overflow, and results in a typecast\n     * to double (which gives the wrong results). */\n    mid = low + ((high - low) >> 1);\n    cmp = +comparator(haystack[mid], needle);\n\n    if (cmp < 0.0) {\n      /* Too low. */\n      low = mid + 1;\n    } else {\n      /* Key found or too high */\n      high = mid;\n      found = !cmp;\n    }\n  }\n\n  /* Key not found. */\n  return found ? low : ~low;\n}\n\n/**\n * Compare function sorting arrays in ascending order.  Safe to use for numeric values.\n * @param {*} a The first object to be compared.\n * @param {*} b The second object to be compared.\n * @return {number} A negative number, zero, or a positive number as the first\n *     argument is less than, equal to, or greater than the second.\n */\nexport function ascending(a, b) {\n  return a > b ? 1 : a < b ? -1 : 0;\n}\n\n/**\n * Compare function sorting arrays in descending order.  Safe to use for numeric values.\n * @param {*} a The first object to be compared.\n * @param {*} b The second object to be compared.\n * @return {number} A negative number, zero, or a positive number as the first\n *     argument is greater than, equal to, or less than the second.\n */\nexport function descending(a, b) {\n  return a < b ? 1 : a > b ? -1 : 0;\n}\n\n/**\n * {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution} can use a function\n * of this type to determine which nearest resolution to use.\n *\n * This function takes a `{number}` representing a value between two array entries,\n * a `{number}` representing the value of the nearest higher entry and\n * a `{number}` representing the value of the nearest lower entry\n * as arguments and returns a `{number}`. If a negative number or zero is returned\n * the lower value will be used, if a positive number is returned the higher value\n * will be used.\n * @typedef {function(number, number, number): number} NearestDirectionFunction\n * @api\n */\n\n/**\n * @param {Array<number>} arr Array in descending order.\n * @param {number} target Target.\n * @param {number|NearestDirectionFunction} direction\n *    0 means return the nearest,\n *    > 0 means return the largest nearest,\n *    < 0 means return the smallest nearest.\n * @return {number} Index.\n */\nexport function linearFindNearest(arr, target, direction) {\n  if (arr[0] <= target) {\n    return 0;\n  }\n\n  const n = arr.length;\n  if (target <= arr[n - 1]) {\n    return n - 1;\n  }\n\n  if (typeof direction === 'function') {\n    for (let i = 1; i < n; ++i) {\n      const candidate = arr[i];\n      if (candidate === target) {\n        return i;\n      }\n      if (candidate < target) {\n        if (direction(target, arr[i - 1], candidate) > 0) {\n          return i - 1;\n        }\n        return i;\n      }\n    }\n    return n - 1;\n  }\n\n  if (direction > 0) {\n    for (let i = 1; i < n; ++i) {\n      if (arr[i] < target) {\n        return i - 1;\n      }\n    }\n    return n - 1;\n  }\n\n  if (direction < 0) {\n    for (let i = 1; i < n; ++i) {\n      if (arr[i] <= target) {\n        return i;\n      }\n    }\n    return n - 1;\n  }\n\n  for (let i = 1; i < n; ++i) {\n    if (arr[i] == target) {\n      return i;\n    }\n    if (arr[i] < target) {\n      if (arr[i - 1] - target < target - arr[i]) {\n        return i - 1;\n      }\n      return i;\n    }\n  }\n  return n - 1;\n}\n\n/**\n * @param {Array<*>} arr Array.\n * @param {number} begin Begin index.\n * @param {number} end End index.\n */\nexport function reverseSubArray(arr, begin, end) {\n  while (begin < end) {\n    const tmp = arr[begin];\n    arr[begin] = arr[end];\n    arr[end] = tmp;\n    ++begin;\n    --end;\n  }\n}\n\n/**\n * @param {Array<VALUE>} arr The array to modify.\n * @param {!Array<VALUE>|VALUE} data The elements or arrays of elements to add to arr.\n * @template VALUE\n */\nexport function extend(arr, data) {\n  const extension = Array.isArray(data) ? data : [data];\n  const length = extension.length;\n  for (let i = 0; i < length; i++) {\n    arr[arr.length] = extension[i];\n  }\n}\n\n/**\n * @param {Array<VALUE>} arr The array to modify.\n * @param {VALUE} obj The element to remove.\n * @template VALUE\n * @return {boolean} If the element was removed.\n */\nexport function remove(arr, obj) {\n  const i = arr.indexOf(obj);\n  const found = i > -1;\n  if (found) {\n    arr.splice(i, 1);\n  }\n  return found;\n}\n\n/**\n * @param {Array<any>|Uint8ClampedArray} arr1 The first array to compare.\n * @param {Array<any>|Uint8ClampedArray} arr2 The second array to compare.\n * @return {boolean} Whether the two arrays are equal.\n */\nexport function equals(arr1, arr2) {\n  const len1 = arr1.length;\n  if (len1 !== arr2.length) {\n    return false;\n  }\n  for (let i = 0; i < len1; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Sort the passed array such that the relative order of equal elements is preserved.\n * See https://en.wikipedia.org/wiki/Sorting_algorithm#Stability for details.\n * @param {Array<*>} arr The array to sort (modifies original).\n * @param {!function(*, *): number} compareFnc Comparison function.\n * @api\n */\nexport function stableSort(arr, compareFnc) {\n  const length = arr.length;\n  const tmp = Array(arr.length);\n  let i;\n  for (i = 0; i < length; i++) {\n    tmp[i] = {index: i, value: arr[i]};\n  }\n  tmp.sort(function (a, b) {\n    return compareFnc(a.value, b.value) || a.index - b.index;\n  });\n  for (i = 0; i < arr.length; i++) {\n    arr[i] = tmp[i].value;\n  }\n}\n\n/**\n * @param {Array<*>} arr The array to test.\n * @param {Function} [func] Comparison function.\n * @param {boolean} [strict] Strictly sorted (default false).\n * @return {boolean} Return index.\n */\nexport function isSorted(arr, func, strict) {\n  const compare = func || ascending;\n  return arr.every(function (currentVal, index) {\n    if (index === 0) {\n      return true;\n    }\n    const res = compare(arr[index - 1], currentVal);\n    return !(res > 0 || (strict && res === 0));\n  });\n}\n","/**\n * @module ol/events/Event\n */\n\n/**\n * @classdesc\n * Stripped down implementation of the W3C DOM Level 2 Event interface.\n * See https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-interface.\n *\n * This implementation only provides `type` and `target` properties, and\n * `stopPropagation` and `preventDefault` methods. It is meant as base class\n * for higher level events defined in the library, and works with\n * {@link module:ol/events/Target~Target}.\n */\nclass BaseEvent {\n  /**\n   * @param {string} type Type.\n   */\n  constructor(type) {\n    /**\n     * @type {boolean}\n     */\n    this.propagationStopped;\n\n    /**\n     * @type {boolean}\n     */\n    this.defaultPrevented;\n\n    /**\n     * The event type.\n     * @type {string}\n     * @api\n     */\n    this.type = type;\n\n    /**\n     * The event target.\n     * @type {Object}\n     * @api\n     */\n    this.target = null;\n  }\n\n  /**\n   * Prevent default. This means that no emulated `click`, `singleclick` or `doubleclick` events\n   * will be fired.\n   * @api\n   */\n  preventDefault() {\n    this.defaultPrevented = true;\n  }\n\n  /**\n   * Stop event propagation.\n   * @api\n   */\n  stopPropagation() {\n    this.propagationStopped = true;\n  }\n}\n\n/**\n * @param {Event|import(\"./Event.js\").default} evt Event\n */\nexport function stopPropagation(evt) {\n  evt.stopPropagation();\n}\n\n/**\n * @param {Event|import(\"./Event.js\").default} evt Event\n */\nexport function preventDefault(evt) {\n  evt.preventDefault();\n}\n\nexport default BaseEvent;\n","/**\n * @module ol/events/EventType\n */\n\n/**\n * @enum {string}\n * @const\n */\nexport default {\n  /**\n   * Generic change event. Triggered when the revision counter is increased.\n   * @event module:ol/events/Event~BaseEvent#change\n   * @api\n   */\n  CHANGE: 'change',\n\n  /**\n   * Generic error event. Triggered when an error occurs.\n   * @event module:ol/events/Event~BaseEvent#error\n   * @api\n   */\n  ERROR: 'error',\n\n  BLUR: 'blur',\n  CLEAR: 'clear',\n  CONTEXTMENU: 'contextmenu',\n  CLICK: 'click',\n  DBLCLICK: 'dblclick',\n  DRAGENTER: 'dragenter',\n  DRAGOVER: 'dragover',\n  DROP: 'drop',\n  FOCUS: 'focus',\n  KEYDOWN: 'keydown',\n  KEYPRESS: 'keypress',\n  LOAD: 'load',\n  RESIZE: 'resize',\n  TOUCHMOVE: 'touchmove',\n  WHEEL: 'wheel',\n};\n","/**\n * @module ol/events/Target\n */\nimport Disposable from '../Disposable.js';\nimport {VOID} from '../functions.js';\nimport {clear} from '../obj.js';\nimport Event from './Event.js';\n\n/**\n * @typedef {EventTarget|Target} EventTargetLike\n */\n\n/**\n * @classdesc\n * A simplified implementation of the W3C DOM Level 2 EventTarget interface.\n * See https://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-EventTarget.\n *\n * There are two important simplifications compared to the specification:\n *\n * 1. The handling of `useCapture` in `addEventListener` and\n *    `removeEventListener`. There is no real capture model.\n * 2. The handling of `stopPropagation` and `preventDefault` on `dispatchEvent`.\n *    There is no event target hierarchy. When a listener calls\n *    `stopPropagation` or `preventDefault` on an event object, it means that no\n *    more listeners after this one will be called. Same as when the listener\n *    returns false.\n */\nclass Target extends Disposable {\n  /**\n   * @param {*} [target] Default event target for dispatched events.\n   */\n  constructor(target) {\n    super();\n\n    /**\n     * @private\n     * @type {*}\n     */\n    this.eventTarget_ = target;\n\n    /**\n     * @private\n     * @type {Object<string, number>|null}\n     */\n    this.pendingRemovals_ = null;\n\n    /**\n     * @private\n     * @type {Object<string, number>|null}\n     */\n    this.dispatching_ = null;\n\n    /**\n     * @private\n     * @type {Object<string, Array<import(\"../events.js\").Listener>>|null}\n     */\n    this.listeners_ = null;\n  }\n\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../events.js\").Listener} listener Listener.\n   */\n  addEventListener(type, listener) {\n    if (!type || !listener) {\n      return;\n    }\n    const listeners = this.listeners_ || (this.listeners_ = {});\n    const listenersForType = listeners[type] || (listeners[type] = []);\n    if (!listenersForType.includes(listener)) {\n      listenersForType.push(listener);\n    }\n  }\n\n  /**\n   * Dispatches an event and calls all listeners listening for events\n   * of this type. The event parameter can either be a string or an\n   * Object with a `type` property.\n   *\n   * @param {import(\"./Event.js\").default|string} event Event object.\n   * @return {boolean|undefined} `false` if anyone called preventDefault on the\n   *     event object or if any of the listeners returned false.\n   * @api\n   */\n  dispatchEvent(event) {\n    const isString = typeof event === 'string';\n    const type = isString ? event : event.type;\n    const listeners = this.listeners_ && this.listeners_[type];\n    if (!listeners) {\n      return;\n    }\n\n    const evt = isString ? new Event(event) : /** @type {Event} */ (event);\n    if (!evt.target) {\n      evt.target = this.eventTarget_ || this;\n    }\n    const dispatching = this.dispatching_ || (this.dispatching_ = {});\n    const pendingRemovals =\n      this.pendingRemovals_ || (this.pendingRemovals_ = {});\n    if (!(type in dispatching)) {\n      dispatching[type] = 0;\n      pendingRemovals[type] = 0;\n    }\n    ++dispatching[type];\n    let propagate;\n    for (let i = 0, ii = listeners.length; i < ii; ++i) {\n      if ('handleEvent' in listeners[i]) {\n        propagate = /** @type {import(\"../events.js\").ListenerObject} */ (\n          listeners[i]\n        ).handleEvent(evt);\n      } else {\n        propagate = /** @type {import(\"../events.js\").ListenerFunction} */ (\n          listeners[i]\n        ).call(this, evt);\n      }\n      if (propagate === false || evt.propagationStopped) {\n        propagate = false;\n        break;\n      }\n    }\n    if (--dispatching[type] === 0) {\n      let pr = pendingRemovals[type];\n      delete pendingRemovals[type];\n      while (pr--) {\n        this.removeEventListener(type, VOID);\n      }\n      delete dispatching[type];\n    }\n    return propagate;\n  }\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    this.listeners_ && clear(this.listeners_);\n  }\n\n  /**\n   * Get the listeners for a specified event type. Listeners are returned in the\n   * order that they will be called in.\n   *\n   * @param {string} type Type.\n   * @return {Array<import(\"../events.js\").Listener>|undefined} Listeners.\n   */\n  getListeners(type) {\n    return (this.listeners_ && this.listeners_[type]) || undefined;\n  }\n\n  /**\n   * @param {string} [type] Type. If not provided,\n   *     `true` will be returned if this event target has any listeners.\n   * @return {boolean} Has listeners.\n   */\n  hasListener(type) {\n    if (!this.listeners_) {\n      return false;\n    }\n    return type\n      ? type in this.listeners_\n      : Object.keys(this.listeners_).length > 0;\n  }\n\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../events.js\").Listener} listener Listener.\n   */\n  removeEventListener(type, listener) {\n    if (!this.listeners_) {\n      return;\n    }\n    const listeners = this.listeners_[type];\n    if (!listeners) {\n      return;\n    }\n    const index = listeners.indexOf(listener);\n    if (index !== -1) {\n      if (this.pendingRemovals_ && type in this.pendingRemovals_) {\n        // make listener a no-op, and remove later in #dispatchEvent()\n        listeners[index] = VOID;\n        ++this.pendingRemovals_[type];\n      } else {\n        listeners.splice(index, 1);\n        if (listeners.length === 0) {\n          delete this.listeners_[type];\n        }\n      }\n    }\n  }\n}\n\nexport default Target;\n","/**\n * @module ol/functions\n */\n\nimport {equals as arrayEquals} from './array.js';\n\n/**\n * Always returns true.\n * @return {boolean} true.\n */\nexport function TRUE() {\n  return true;\n}\n\n/**\n * Always returns false.\n * @return {boolean} false.\n */\nexport function FALSE() {\n  return false;\n}\n\n/**\n * A reusable function, used e.g. as a default for callbacks.\n *\n * @return {void} Nothing.\n */\nexport function VOID() {}\n\n/**\n * Wrap a function in another function that remembers the last return.  If the\n * returned function is called twice in a row with the same arguments and the same\n * this object, it will return the value from the first call in the second call.\n *\n * @param {function(...any): ReturnType} fn The function to memoize.\n * @return {function(...any): ReturnType} The memoized function.\n * @template ReturnType\n */\nexport function memoizeOne(fn) {\n  /** @type {ReturnType} */\n  let lastResult;\n\n  /** @type {Array<any>|undefined} */\n  let lastArgs;\n\n  let lastThis;\n\n  /**\n   * @this {*} Only need to know if `this` changed, don't care what type\n   * @return {ReturnType} Memoized value\n   */\n  return function () {\n    const nextArgs = Array.prototype.slice.call(arguments);\n    if (!lastArgs || this !== lastThis || !arrayEquals(nextArgs, lastArgs)) {\n      lastThis = this;\n      lastArgs = nextArgs;\n      lastResult = fn.apply(this, arguments);\n    }\n    return lastResult;\n  };\n}\n\n/**\n * @template T\n * @param {function(): (T | Promise<T>)} getter A function that returns a value or a promise for a value.\n * @return {Promise<T>} A promise for the value.\n */\nexport function toPromise(getter) {\n  function promiseGetter() {\n    let value;\n    try {\n      value = getter();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    if (value instanceof Promise) {\n      return value;\n    }\n    return Promise.resolve(value);\n  }\n  return promiseGetter();\n}\n","\n/**\n * Rearranges items so that all items in the [left, k] are the smallest.\n * The k-th element will have the (k - left + 1)-th smallest value in [left, right].\n *\n * @template T\n * @param {T[]} arr the array to partially sort (in place)\n * @param {number} k middle index for partial sorting (as defined above)\n * @param {number} [left=0] left index of the range to sort\n * @param {number} [right=arr.length-1] right index\n * @param {(a: T, b: T) => number} [compare = (a, b) => a - b] compare function\n */\nexport default function quickselect(arr, k, left = 0, right = arr.length - 1, compare = defaultCompare) {\n\n    while (right > left) {\n        if (right - left > 600) {\n            const n = right - left + 1;\n            const m = k - left + 1;\n            const z = Math.log(n);\n            const s = 0.5 * Math.exp(2 * z / 3);\n            const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n            const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n            const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n            quickselect(arr, k, newLeft, newRight, compare);\n        }\n\n        const t = arr[k];\n        let i = left;\n        /** @type {number} */\n        let j = right;\n\n        swap(arr, left, k);\n        if (compare(arr[right], t) > 0) swap(arr, left, right);\n\n        while (i < j) {\n            swap(arr, i, j);\n            i++;\n            j--;\n            while (compare(arr[i], t) < 0) i++;\n            while (compare(arr[j], t) > 0) j--;\n        }\n\n        if (compare(arr[left], t) === 0) swap(arr, left, j);\n        else {\n            j++;\n            swap(arr, j, right);\n        }\n\n        if (j <= k) left = j + 1;\n        if (k <= j) right = j - 1;\n    }\n}\n\n/**\n * @template T\n * @param {T[]} arr\n * @param {number} i\n * @param {number} j\n */\nfunction swap(arr, i, j) {\n    const tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\n/**\n * @template T\n * @param {T} a\n * @param {T} b\n * @returns {number}\n */\nfunction defaultCompare(a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n}\n","import quickselect from 'quickselect';\n\nexport default class RBush {\n    constructor(maxEntries = 9) {\n        // max entries in a node is 9 by default; min node fill is 40% for best performance\n        this._maxEntries = Math.max(4, maxEntries);\n        this._minEntries = Math.max(2, Math.ceil(this._maxEntries * 0.4));\n        this.clear();\n    }\n\n    all() {\n        return this._all(this.data, []);\n    }\n\n    search(bbox) {\n        let node = this.data;\n        const result = [];\n\n        if (!intersects(bbox, node)) return result;\n\n        const toBBox = this.toBBox;\n        const nodesToSearch = [];\n\n        while (node) {\n            for (let i = 0; i < node.children.length; i++) {\n                const child = node.children[i];\n                const childBBox = node.leaf ? toBBox(child) : child;\n\n                if (intersects(bbox, childBBox)) {\n                    if (node.leaf) result.push(child);\n                    else if (contains(bbox, childBBox)) this._all(child, result);\n                    else nodesToSearch.push(child);\n                }\n            }\n            node = nodesToSearch.pop();\n        }\n\n        return result;\n    }\n\n    collides(bbox) {\n        let node = this.data;\n\n        if (!intersects(bbox, node)) return false;\n\n        const nodesToSearch = [];\n        while (node) {\n            for (let i = 0; i < node.children.length; i++) {\n                const child = node.children[i];\n                const childBBox = node.leaf ? this.toBBox(child) : child;\n\n                if (intersects(bbox, childBBox)) {\n                    if (node.leaf || contains(bbox, childBBox)) return true;\n                    nodesToSearch.push(child);\n                }\n            }\n            node = nodesToSearch.pop();\n        }\n\n        return false;\n    }\n\n    load(data) {\n        if (!(data && data.length)) return this;\n\n        if (data.length < this._minEntries) {\n            for (let i = 0; i < data.length; i++) {\n                this.insert(data[i]);\n            }\n            return this;\n        }\n\n        // recursively build the tree with the given data from scratch using OMT algorithm\n        let node = this._build(data.slice(), 0, data.length - 1, 0);\n\n        if (!this.data.children.length) {\n            // save as is if tree is empty\n            this.data = node;\n\n        } else if (this.data.height === node.height) {\n            // split root if trees have the same height\n            this._splitRoot(this.data, node);\n\n        } else {\n            if (this.data.height < node.height) {\n                // swap trees if inserted one is bigger\n                const tmpNode = this.data;\n                this.data = node;\n                node = tmpNode;\n            }\n\n            // insert the small tree into the large tree at appropriate level\n            this._insert(node, this.data.height - node.height - 1, true);\n        }\n\n        return this;\n    }\n\n    insert(item) {\n        if (item) this._insert(item, this.data.height - 1);\n        return this;\n    }\n\n    clear() {\n        this.data = createNode([]);\n        return this;\n    }\n\n    remove(item, equalsFn) {\n        if (!item) return this;\n\n        let node = this.data;\n        const bbox = this.toBBox(item);\n        const path = [];\n        const indexes = [];\n        let i, parent, goingUp;\n\n        // depth-first iterative tree traversal\n        while (node || path.length) {\n\n            if (!node) { // go up\n                node = path.pop();\n                parent = path[path.length - 1];\n                i = indexes.pop();\n                goingUp = true;\n            }\n\n            if (node.leaf) { // check current node\n                const index = findItem(item, node.children, equalsFn);\n\n                if (index !== -1) {\n                    // item found, remove the item and condense tree upwards\n                    node.children.splice(index, 1);\n                    path.push(node);\n                    this._condense(path);\n                    return this;\n                }\n            }\n\n            if (!goingUp && !node.leaf && contains(node, bbox)) { // go down\n                path.push(node);\n                indexes.push(i);\n                i = 0;\n                parent = node;\n                node = node.children[0];\n\n            } else if (parent) { // go right\n                i++;\n                node = parent.children[i];\n                goingUp = false;\n\n            } else node = null; // nothing found\n        }\n\n        return this;\n    }\n\n    toBBox(item) { return item; }\n\n    compareMinX(a, b) { return a.minX - b.minX; }\n    compareMinY(a, b) { return a.minY - b.minY; }\n\n    toJSON() { return this.data; }\n\n    fromJSON(data) {\n        this.data = data;\n        return this;\n    }\n\n    _all(node, result) {\n        const nodesToSearch = [];\n        while (node) {\n            if (node.leaf) result.push(...node.children);\n            else nodesToSearch.push(...node.children);\n\n            node = nodesToSearch.pop();\n        }\n        return result;\n    }\n\n    _build(items, left, right, height) {\n\n        const N = right - left + 1;\n        let M = this._maxEntries;\n        let node;\n\n        if (N <= M) {\n            // reached leaf level; return leaf\n            node = createNode(items.slice(left, right + 1));\n            calcBBox(node, this.toBBox);\n            return node;\n        }\n\n        if (!height) {\n            // target height of the bulk-loaded tree\n            height = Math.ceil(Math.log(N) / Math.log(M));\n\n            // target number of root entries to maximize storage utilization\n            M = Math.ceil(N / Math.pow(M, height - 1));\n        }\n\n        node = createNode([]);\n        node.leaf = false;\n        node.height = height;\n\n        // split the items into M mostly square tiles\n\n        const N2 = Math.ceil(N / M);\n        const N1 = N2 * Math.ceil(Math.sqrt(M));\n\n        multiSelect(items, left, right, N1, this.compareMinX);\n\n        for (let i = left; i <= right; i += N1) {\n\n            const right2 = Math.min(i + N1 - 1, right);\n\n            multiSelect(items, i, right2, N2, this.compareMinY);\n\n            for (let j = i; j <= right2; j += N2) {\n\n                const right3 = Math.min(j + N2 - 1, right2);\n\n                // pack each entry recursively\n                node.children.push(this._build(items, j, right3, height - 1));\n            }\n        }\n\n        calcBBox(node, this.toBBox);\n\n        return node;\n    }\n\n    _chooseSubtree(bbox, node, level, path) {\n        while (true) {\n            path.push(node);\n\n            if (node.leaf || path.length - 1 === level) break;\n\n            let minArea = Infinity;\n            let minEnlargement = Infinity;\n            let targetNode;\n\n            for (let i = 0; i < node.children.length; i++) {\n                const child = node.children[i];\n                const area = bboxArea(child);\n                const enlargement = enlargedArea(bbox, child) - area;\n\n                // choose entry with the least area enlargement\n                if (enlargement < minEnlargement) {\n                    minEnlargement = enlargement;\n                    minArea = area < minArea ? area : minArea;\n                    targetNode = child;\n\n                } else if (enlargement === minEnlargement) {\n                    // otherwise choose one with the smallest area\n                    if (area < minArea) {\n                        minArea = area;\n                        targetNode = child;\n                    }\n                }\n            }\n\n            node = targetNode || node.children[0];\n        }\n\n        return node;\n    }\n\n    _insert(item, level, isNode) {\n        const bbox = isNode ? item : this.toBBox(item);\n        const insertPath = [];\n\n        // find the best node for accommodating the item, saving all nodes along the path too\n        const node = this._chooseSubtree(bbox, this.data, level, insertPath);\n\n        // put the item into the node\n        node.children.push(item);\n        extend(node, bbox);\n\n        // split on node overflow; propagate upwards if necessary\n        while (level >= 0) {\n            if (insertPath[level].children.length > this._maxEntries) {\n                this._split(insertPath, level);\n                level--;\n            } else break;\n        }\n\n        // adjust bboxes along the insertion path\n        this._adjustParentBBoxes(bbox, insertPath, level);\n    }\n\n    // split overflowed node into two\n    _split(insertPath, level) {\n        const node = insertPath[level];\n        const M = node.children.length;\n        const m = this._minEntries;\n\n        this._chooseSplitAxis(node, m, M);\n\n        const splitIndex = this._chooseSplitIndex(node, m, M);\n\n        const newNode = createNode(node.children.splice(splitIndex, node.children.length - splitIndex));\n        newNode.height = node.height;\n        newNode.leaf = node.leaf;\n\n        calcBBox(node, this.toBBox);\n        calcBBox(newNode, this.toBBox);\n\n        if (level) insertPath[level - 1].children.push(newNode);\n        else this._splitRoot(node, newNode);\n    }\n\n    _splitRoot(node, newNode) {\n        // split root node\n        this.data = createNode([node, newNode]);\n        this.data.height = node.height + 1;\n        this.data.leaf = false;\n        calcBBox(this.data, this.toBBox);\n    }\n\n    _chooseSplitIndex(node, m, M) {\n        let index;\n        let minOverlap = Infinity;\n        let minArea = Infinity;\n\n        for (let i = m; i <= M - m; i++) {\n            const bbox1 = distBBox(node, 0, i, this.toBBox);\n            const bbox2 = distBBox(node, i, M, this.toBBox);\n\n            const overlap = intersectionArea(bbox1, bbox2);\n            const area = bboxArea(bbox1) + bboxArea(bbox2);\n\n            // choose distribution with minimum overlap\n            if (overlap < minOverlap) {\n                minOverlap = overlap;\n                index = i;\n\n                minArea = area < minArea ? area : minArea;\n\n            } else if (overlap === minOverlap) {\n                // otherwise choose distribution with minimum area\n                if (area < minArea) {\n                    minArea = area;\n                    index = i;\n                }\n            }\n        }\n\n        return index || M - m;\n    }\n\n    // sorts node children by the best axis for split\n    _chooseSplitAxis(node, m, M) {\n        const compareMinX = node.leaf ? this.compareMinX : compareNodeMinX;\n        const compareMinY = node.leaf ? this.compareMinY : compareNodeMinY;\n        const xMargin = this._allDistMargin(node, m, M, compareMinX);\n        const yMargin = this._allDistMargin(node, m, M, compareMinY);\n\n        // if total distributions margin value is minimal for x, sort by minX,\n        // otherwise it's already sorted by minY\n        if (xMargin < yMargin) node.children.sort(compareMinX);\n    }\n\n    // total margin of all possible split distributions where each node is at least m full\n    _allDistMargin(node, m, M, compare) {\n        node.children.sort(compare);\n\n        const toBBox = this.toBBox;\n        const leftBBox = distBBox(node, 0, m, toBBox);\n        const rightBBox = distBBox(node, M - m, M, toBBox);\n        let margin = bboxMargin(leftBBox) + bboxMargin(rightBBox);\n\n        for (let i = m; i < M - m; i++) {\n            const child = node.children[i];\n            extend(leftBBox, node.leaf ? toBBox(child) : child);\n            margin += bboxMargin(leftBBox);\n        }\n\n        for (let i = M - m - 1; i >= m; i--) {\n            const child = node.children[i];\n            extend(rightBBox, node.leaf ? toBBox(child) : child);\n            margin += bboxMargin(rightBBox);\n        }\n\n        return margin;\n    }\n\n    _adjustParentBBoxes(bbox, path, level) {\n        // adjust bboxes along the given tree path\n        for (let i = level; i >= 0; i--) {\n            extend(path[i], bbox);\n        }\n    }\n\n    _condense(path) {\n        // go through the path, removing empty nodes and updating bboxes\n        for (let i = path.length - 1, siblings; i >= 0; i--) {\n            if (path[i].children.length === 0) {\n                if (i > 0) {\n                    siblings = path[i - 1].children;\n                    siblings.splice(siblings.indexOf(path[i]), 1);\n\n                } else this.clear();\n\n            } else calcBBox(path[i], this.toBBox);\n        }\n    }\n}\n\nfunction findItem(item, items, equalsFn) {\n    if (!equalsFn) return items.indexOf(item);\n\n    for (let i = 0; i < items.length; i++) {\n        if (equalsFn(item, items[i])) return i;\n    }\n    return -1;\n}\n\n// calculate node's bbox from bboxes of its children\nfunction calcBBox(node, toBBox) {\n    distBBox(node, 0, node.children.length, toBBox, node);\n}\n\n// min bounding rectangle of node children from k to p-1\nfunction distBBox(node, k, p, toBBox, destNode) {\n    if (!destNode) destNode = createNode(null);\n    destNode.minX = Infinity;\n    destNode.minY = Infinity;\n    destNode.maxX = -Infinity;\n    destNode.maxY = -Infinity;\n\n    for (let i = k; i < p; i++) {\n        const child = node.children[i];\n        extend(destNode, node.leaf ? toBBox(child) : child);\n    }\n\n    return destNode;\n}\n\nfunction extend(a, b) {\n    a.minX = Math.min(a.minX, b.minX);\n    a.minY = Math.min(a.minY, b.minY);\n    a.maxX = Math.max(a.maxX, b.maxX);\n    a.maxY = Math.max(a.maxY, b.maxY);\n    return a;\n}\n\nfunction compareNodeMinX(a, b) { return a.minX - b.minX; }\nfunction compareNodeMinY(a, b) { return a.minY - b.minY; }\n\nfunction bboxArea(a)   { return (a.maxX - a.minX) * (a.maxY - a.minY); }\nfunction bboxMargin(a) { return (a.maxX - a.minX) + (a.maxY - a.minY); }\n\nfunction enlargedArea(a, b) {\n    return (Math.max(b.maxX, a.maxX) - Math.min(b.minX, a.minX)) *\n           (Math.max(b.maxY, a.maxY) - Math.min(b.minY, a.minY));\n}\n\nfunction intersectionArea(a, b) {\n    const minX = Math.max(a.minX, b.minX);\n    const minY = Math.max(a.minY, b.minY);\n    const maxX = Math.min(a.maxX, b.maxX);\n    const maxY = Math.min(a.maxY, b.maxY);\n\n    return Math.max(0, maxX - minX) *\n           Math.max(0, maxY - minY);\n}\n\nfunction contains(a, b) {\n    return a.minX <= b.minX &&\n           a.minY <= b.minY &&\n           b.maxX <= a.maxX &&\n           b.maxY <= a.maxY;\n}\n\nfunction intersects(a, b) {\n    return b.minX <= a.maxX &&\n           b.minY <= a.maxY &&\n           b.maxX >= a.minX &&\n           b.maxY >= a.minY;\n}\n\nfunction createNode(children) {\n    return {\n        children,\n        height: 1,\n        leaf: true,\n        minX: Infinity,\n        minY: Infinity,\n        maxX: -Infinity,\n        maxY: -Infinity\n    };\n}\n\n// sort an array so that items come in groups of n unsorted items, with groups sorted between each other;\n// combines selection algorithm with binary divide & conquer approach\n\nfunction multiSelect(arr, left, right, n, compare) {\n    const stack = [left, right];\n\n    while (stack.length) {\n        right = stack.pop();\n        left = stack.pop();\n\n        if (right - left <= n) continue;\n\n        const mid = left + Math.ceil((right - left) / n / 2) * n;\n        quickselect(arr, mid, left, right, compare);\n\n        stack.push(left, mid, mid, right);\n    }\n}\n","/**\n * @module ol/obj\n */\n\n/**\n * Removes all properties from an object.\n * @param {Object<string, unknown>} object The object to clear.\n */\nexport function clear(object) {\n  for (const property in object) {\n    delete object[property];\n  }\n}\n\n/**\n * Determine if an object has any properties.\n * @param {Object} object The object to check.\n * @return {boolean} The object is empty.\n */\nexport function isEmpty(object) {\n  let property;\n  for (property in object) {\n    return false;\n  }\n  return !property;\n}\n","/**\n * @module ol/util\n */\n\n/**\n * @return {never} Any return.\n */\nexport function abstract() {\n  throw new Error('Unimplemented abstract method.');\n}\n\n/**\n * Counter for getUid.\n * @type {number}\n * @private\n */\nlet uidCounter_ = 0;\n\n/**\n * Gets a unique ID for an object. This mutates the object so that further calls\n * with the same object as a parameter returns the same value. Unique IDs are generated\n * as a strictly increasing sequence. Adapted from goog.getUid.\n *\n * @param {Object} obj The object to get the unique ID for.\n * @return {string} The unique ID for the object.\n * @api\n */\nexport function getUid(obj) {\n  return obj.ol_uid || (obj.ol_uid = String(++uidCounter_));\n}\n\n/**\n * OpenLayers version.\n * @type {string}\n */\nexport const VERSION = '10.6.1';\n"],"names":["e","l","h","Array","i","t","Object","arguments","Promise","Math","c","n","a","Error","String"],"mappings":"oJAmCAA,EAAA,EA3BA,MACE,aAAc,CAMZ,IAAI,CAAC,QAAQ,CAAG,EAClB,CAKA,SAAU,CACH,IAAI,CAAC,QAAQ,GAChB,IAAI,CAAC,QAAQ,CAAG,GAChB,IAAI,CAAC,eAAe,GAExB,CAMA,iBAAkB,CAAC,CACrB,C,wBCpBO,SAAS,EAAa,CAAQ,CAAE,CAAM,CAAE,CAAU,MACnD,EAAK,EACT,EAAa,GAAc,EAC3B,IAAIC,EAAM,EACNC,EAAO,EAAS,MAAM,CACtB,EAAQ,GAEZ,KAAOD,EAAMC,GAMP,AAFJ,GAAM,CAAC,EAAW,CAAQ,CAD1B,EAAMD,EAAO,CAACC,EAAOD,GAAQ,GACE,CAAE,EAAM,EAE7B,EAERA,EAAM,EAAM,GAGZC,EAAO,EACP,EAAQ,CAAC,GAKb,OAAO,EAAQD,EAAM,CAACA,CACxB,CASO,SAAS,EAAU,CAAC,CAAE,CAAC,EAC5B,OAAO,EAAI,EAAI,EAAI,EAAI,EAAI,GAAK,CAClC,CASO,SAAS,EAAW,CAAC,CAAE,CAAC,EAC7B,OAAO,EAAI,EAAI,EAAI,EAAI,EAAI,GAAK,CAClC,CAyBO,SAASA,EAAkB,CAAG,CAAE,CAAM,CAAE,CAAS,EACtD,GAAI,CAAG,CAAC,EAAE,EAAI,EACZ,OAAO,EAGT,IAAM,EAAI,EAAI,MAAM,CACpB,GAAI,GAAU,CAAG,CAAC,EAAI,EAAE,CACtB,OAAO,EAAI,EAGb,GAAI,AAAqB,YAArB,OAAO,EAA0B,CACnC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,EAAE,EAAG,CAC1B,IAAM,EAAY,CAAG,CAAC,EAAE,CACxB,GAAI,IAAc,EAChB,OAAO,EAET,GAAI,EAAY,EAAQ,CACtB,GAAI,EAAU,EAAQ,CAAG,CAAC,EAAI,EAAE,CAAE,GAAa,EAC7C,OAAO,EAAI,EAEb,OAAO,CACT,CACF,CACA,OAAO,EAAI,CACb,CAEA,GAAI,EAAY,EAAG,CACjB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,EAAE,EACvB,GAAI,CAAG,CAAC,EAAE,CAAG,EACX,OAAO,EAAI,EAGf,OAAO,EAAI,CACb,CAEA,GAAI,EAAY,EAAG,CACjB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,EAAE,EACvB,GAAI,CAAG,CAAC,EAAE,EAAI,EACZ,OAAO,EAGX,OAAO,EAAI,CACb,CAEA,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,EAAE,EAAG,CAC1B,GAAI,CAAG,CAAC,EAAE,EAAI,EACZ,OAAO,EAET,GAAI,CAAG,CAAC,EAAE,CAAG,EAAQ,CACnB,GAAI,CAAG,CAAC,EAAI,EAAE,CAAG,EAAS,EAAS,CAAG,CAAC,EAAE,CACvC,OAAO,EAAI,EAEb,OAAO,CACT,CACF,CACA,OAAO,EAAI,CACb,CAOO,SAAS,EAAgB,CAAG,CAAE,CAAK,CAAE,CAAG,EAC7C,KAAO,EAAQ,GAAK,CAClB,IAAM,EAAM,CAAG,CAAC,EAAM,AACtB,EAAG,CAAC,EAAM,CAAG,CAAG,CAAC,EAAI,CACrB,CAAG,CAAC,EAAI,CAAG,EACX,EAAE,EACF,EAAE,CACJ,CACF,CAOO,SAAS,EAAO,CAAG,CAAE,CAAI,EAC9B,IAAM,EAAYE,MAAM,OAAO,CAAC,GAAQ,EAAO,CAAC,EAAK,CAC/C,EAAS,EAAU,MAAM,CAC/B,IAAK,IAAI,EAAI,EAAG,EAAI,EAAQ,IAC1B,CAAG,CAAC,EAAI,MAAM,CAAC,CAAG,CAAS,CAAC,EAAE,AAElC,CAsBO,SAAS,EAAO,CAAI,CAAE,CAAI,EAC/B,IAAM,EAAO,EAAK,MAAM,CACxB,GAAI,IAAS,EAAK,MAAM,CACtB,MAAO,GAET,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAMA,IACxB,GAAI,CAAI,CAACA,EAAE,GAAK,CAAI,CAACA,EAAE,CACrB,MAAO,GAGX,MAAO,EACT,CA8BO,SAAS,EAAS,CAAG,CAAE,CAAI,CAAE,CAAM,EACxC,IAAM,EAAU,GAAQ,EACxB,OAAO,EAAI,KAAK,CAAC,SAAU,CAAU,CAAE,CAAK,EAC1C,GAAI,AAAU,IAAV,EACF,MAAO,GAET,IAAM,EAAM,EAAQ,CAAG,CAAC,EAAQ,EAAE,CAAE,GACpC,MAAO,CAAE,GAAM,GAAM,GAAU,AAAQ,IAAR,CAAS,CAC1C,EACF,C,+NChLO,SAAS,EAAgB,CAAG,EACjC,EAAI,eAAe,EACrB,CAKO,SAAS,EAAe,CAAG,EAChC,EAAI,cAAc,EACpB,C,yFAEAJ,EAAA,QA9DA,MAIE,YAAYK,CAAI,CAAE,CAIhB,IAAI,CAAC,kBAAkB,CAKvB,IAAI,CAAC,gBAAgB,CAOrB,IAAI,CAAC,IAAI,CAAGA,EAOZ,IAAI,CAAC,MAAM,CAAG,IAChB,CAOA,gBAAiB,CACf,IAAI,CAAC,gBAAgB,CAAG,EAC1B,CAMA,iBAAkB,CAChB,IAAI,CAAC,kBAAkB,CAAG,EAC5B,CACF,C,+BCpDAL,EAAA,QAAe,CAMb,OAAQ,SAOR,MAAO,QAEP,KAAM,OACN,MAAO,QACP,YAAa,cACb,MAAO,QACP,SAAU,WACV,UAAW,YACX,SAAU,WACV,KAAM,OACN,MAAO,QACP,QAAS,UACT,SAAU,WACV,KAAM,OACN,OAAQ,SACR,UAAW,YACX,MAAO,OACT,C,sECXA,OAAM,UAAe,GAAU,CAI7B,YAAYK,CAAM,CAAE,CAClB,KAAK,GAML,IAAI,CAAC,YAAY,CAAGA,EAMpB,IAAI,CAAC,gBAAgB,CAAG,KAMxB,IAAI,CAAC,YAAY,CAAG,KAMpB,IAAI,CAAC,UAAU,CAAG,IACpB,CAMA,iBAAiBA,CAAI,CAAE,CAAQ,CAAE,CAC/B,GAAI,CAACA,GAAQ,CAAC,EACZ,OAEF,IAAM,EAAY,IAAI,CAAC,UAAU,EAAK,KAAI,CAAC,UAAU,CAAG,CAAC,GACnD,EAAmB,CAAS,CAACA,EAAK,EAAK,EAAS,CAACA,EAAK,CAAG,EAAE,AAAD,CAC5D,CAAC,EAAiB,QAAQ,CAAC,IAC7B,EAAiB,IAAI,CAAC,EAE1B,CAYA,cAAc,CAAK,CAAE,CACnB,IAmBI,EAnBE,EAAW,AAAiB,UAAjB,OAAO,EAClB,EAAO,EAAW,EAAQ,EAAM,IAAI,CACpC,EAAY,IAAI,CAAC,UAAU,EAAI,IAAI,CAAC,UAAU,CAAC,EAAK,CAC1D,GAAI,CAAC,EACH,OAGF,IAAM,EAAM,EAAW,IAAI,SAAK,CAAC,GAA+B,CAC5D,AAAC,GAAI,MAAM,EACb,GAAI,MAAM,CAAG,IAAI,CAAC,YAAY,EAAI,IAAI,AAAD,EAEvC,IAAM,EAAc,IAAI,CAAC,YAAY,EAAK,KAAI,CAAC,YAAY,CAAG,CAAC,GACzD,EACJ,IAAI,CAAC,gBAAgB,EAAK,KAAI,CAAC,gBAAgB,CAAG,CAAC,GAC/C,KAAQ,IACZ,CAAW,CAAC,EAAK,CAAG,EACpB,CAAe,CAAC,EAAK,CAAG,GAE1B,EAAE,CAAW,CAAC,EAAK,CAEnB,IAAK,IAAI,EAAI,EAAG,EAAK,EAAU,MAAM,CAAE,EAAI,EAAI,EAAE,EAU/C,GAAI,AAAc,MARhB,EADE,gBAAiB,CAAS,CAAC,EAAE,CACkC,AAC/D,CAAS,CAAC,EAAE,CACZ,WAAW,CAAC,GAEqD,AACjE,CAAS,CAAC,EAAE,CACZ,IAAI,CAAC,IAAI,CAAE,KAEY,EAAI,kBAAkB,CAAE,CACjD,EAAY,GACZ,KACF,CAEF,GAAI,AAAwB,GAAxB,EAAE,CAAW,CAAC,EAAK,CAAQ,CAC7B,IAAI,EAAK,CAAe,CAAC,EAAK,CAE9B,IADA,OAAO,CAAe,CAAC,EAAK,CACrB,KACL,IAAI,CAAC,mBAAmB,CAAC,EAAM,MAAI,CAErC,QAAO,CAAW,CAAC,EAAK,AAC1B,CACA,OAAO,CACT,CAMA,iBAAkB,CAChB,IAAI,CAAC,UAAU,EAAI,QAAM,IAAI,CAAC,UAAU,CAC1C,CASA,aAAaA,CAAI,CAAE,CACjB,OAAO,AAAC,IAAI,CAAC,UAAU,EAAI,IAAI,CAAC,UAAU,CAACA,EAAK,EAAK,MACvD,CAOA,YAAYA,CAAI,CAAE,OAChB,CAAI,CAAC,IAAI,CAAC,UAAU,EAGbA,CAAAA,EACHA,KAAQ,IAAI,CAAC,UAAU,CACvBC,OAAO,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,MAAM,CAAG,EAC5C,CAMA,oBAAoBD,CAAI,CAAE,CAAQ,CAAE,CAClC,GAAI,CAAC,IAAI,CAAC,UAAU,CAClB,OAEF,IAAM,EAAY,IAAI,CAAC,UAAU,CAACA,EAAK,CACvC,GAAI,CAAC,EACH,OAEF,IAAMD,EAAQ,EAAU,OAAO,CAAC,EAClB,MAAVA,IACE,IAAI,CAAC,gBAAgB,EAAIC,KAAQ,IAAI,CAAC,gBAAgB,EAExD,CAAS,CAACD,EAAM,CAAG,MAAI,CACvB,EAAE,IAAI,CAAC,gBAAgB,CAACC,EAAK,GAE7B,EAAU,MAAM,CAACD,EAAO,GACpB,AAAqB,IAArB,EAAU,MAAM,EAClB,OAAO,IAAI,CAAC,UAAU,CAACC,EAAK,EAIpC,CACF,CAEAL,EAAA,EAAe,C,qMCtLR,SAAS,IACd,MAAO,EACT,CAMO,SAAS,IACd,MAAO,EACT,CAOO,SAAS,IAAQ,CAWjB,SAAS,EAAW,CAAE,EAE3B,IAAI,EAGA,EAEA,EAMJ,OAAO,WACL,IAAM,EAAWG,MAAM,SAAS,CAAC,KAAK,CAAC,IAAI,CAACI,WAM5C,OALK,GAAY,IAAI,GAAK,GAAa,SAAY,EAAU,KAC3D,EAAW,IAAI,CACf,EAAW,EACX,EAAa,EAAG,KAAK,CAAC,IAAI,CAAEA,YAEvB,CACT,CACF,CAOO,SAAS,EAAU,CAAM,EAE5B,IAAI,EACJ,GAAI,CACF,EAAQ,GACV,CAAE,MAAO,EAAK,CACZ,OAAOC,QAAQ,MAAM,CAAC,EACxB,QACA,AAAI,aAAiBA,QACZ,EAEFA,QAAQ,OAAO,CAAC,EAG3B,C,sBCtBA,SAAS,EAAK,CAAG,CAAE,CAAC,CAAE,CAAC,EACnB,IAAM,EAAM,CAAG,CAAC,EAAE,AAClB,EAAG,CAAC,EAAE,CAAG,CAAG,CAAC,EAAE,CACf,CAAG,CAAC,EAAE,CAAG,CACb,C,+BC7De,OAAM,EACjB,YAAY,EAAa,CAAC,CAAE,CAExB,IAAI,CAAC,WAAW,CAAGC,KAAK,GAAG,CAAC,EAAG,GAC/B,IAAI,CAAC,WAAW,CAAGA,KAAK,GAAG,CAAC,EAAGA,KAAK,IAAI,CAAC,AAAmB,GAAnB,IAAI,CAAC,WAAW,GACzD,IAAI,CAAC,KAAK,EACd,CAEA,KAAM,CACF,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAE,EAAE,CAClC,CAEA,OAAO,CAAI,CAAE,CACT,IAAI,EAAO,IAAI,CAAC,IAAI,CACd,EAAS,EAAE,CAEjB,GAAI,CAAC,EAAW,EAAM,GAAO,OAAO,EAEpC,IAAM,EAAS,IAAI,CAAC,MAAM,CACpB,EAAgB,EAAE,CAExB,KAAO,GAAM,CACT,IAAK,IAAI,EAAI,EAAG,EAAI,EAAK,QAAQ,CAAC,MAAM,CAAE,IAAK,CAC3C,IAAM,EAAQ,EAAK,QAAQ,CAAC,EAAE,CACxB,EAAY,EAAK,IAAI,CAAG,EAAO,GAAS,EAE1C,EAAW,EAAM,KACb,EAAK,IAAI,CAAE,EAAO,IAAI,CAAC,GAClBC,EAAS,EAAM,GAAY,IAAI,CAAC,IAAI,CAAC,EAAO,GAChD,EAAc,IAAI,CAAC,GAEhC,CACA,EAAO,EAAc,GAAG,EAC5B,CAEA,OAAO,CACX,CAEA,SAAS,CAAI,CAAE,CACX,IAAI,EAAO,IAAI,CAAC,IAAI,CAEpB,GAAI,CAAC,EAAW,EAAM,GAAO,MAAO,GAEpC,IAAMC,EAAgB,EAAE,CACxB,KAAO,GAAM,CACT,IAAK,IAAIP,EAAI,EAAGA,EAAI,EAAK,QAAQ,CAAC,MAAM,CAAEA,IAAK,CAC3C,IAAM,EAAQ,EAAK,QAAQ,CAACA,EAAE,CACxB,EAAY,EAAK,IAAI,CAAG,IAAI,CAAC,MAAM,CAAC,GAAS,EAEnD,GAAI,EAAW,EAAM,GAAY,CAC7B,GAAI,EAAK,IAAI,EAAIM,EAAS,EAAM,GAAY,MAAO,GACnDC,EAAc,IAAI,CAAC,EACvB,CACJ,CACA,EAAOA,EAAc,GAAG,EAC5B,CAEA,MAAO,EACX,CAEA,KAAK,CAAI,CAAE,CACP,GAAI,CAAE,IAAQ,EAAK,MAAM,AAAD,EAAI,OAAO,IAAI,CAEvC,GAAI,EAAK,MAAM,CAAG,IAAI,CAAC,WAAW,CAAE,CAChC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAK,MAAM,CAAE,IAC7B,IAAI,CAAC,MAAM,CAAC,CAAI,CAAC,EAAE,EAEvB,OAAO,IAAI,AACf,CAGA,IAAI,EAAO,IAAI,CAAC,MAAM,CAAC,EAAK,KAAK,GAAI,EAAG,EAAK,MAAM,CAAG,EAAG,GAEzD,GAAK,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAIvB,GAAI,IAAI,CAAC,IAAI,CAAC,MAAM,GAAK,EAAK,MAAM,CAEvC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAE,OAExB,CACH,GAAI,IAAI,CAAC,IAAI,CAAC,MAAM,CAAG,EAAK,MAAM,CAAE,CAEhC,IAAMN,EAAU,IAAI,CAAC,IAAI,AACzB,KAAI,CAAC,IAAI,CAAG,EACZ,EAAOA,CACX,CAGA,IAAI,CAAC,OAAO,CAAC,EAAM,IAAI,CAAC,IAAI,CAAC,MAAM,CAAG,EAAK,MAAM,CAAG,EAAG,GAC3D,MAhBI,IAAI,CAAC,IAAI,CAAG,EAkBhB,OAAO,IAAI,AACf,CAEA,OAAO,CAAI,CAAE,CAET,OADI,GAAM,IAAI,CAAC,OAAO,CAAC,EAAM,IAAI,CAAC,IAAI,CAAC,MAAM,CAAG,GACzC,IAAI,AACf,CAEA,OAAQ,CAEJ,OADA,IAAI,CAAC,IAAI,CAAG,EAAW,EAAE,EAClB,IAAI,AACf,CAEA,OAAO,CAAI,CAAEL,CAAQ,CAAE,KAOf,EAAG,EAAQ,EANf,GAAI,CAAC,EAAM,OAAO,IAAI,CAEtB,IAAI,EAAO,IAAI,CAAC,IAAI,CACd,EAAO,IAAI,CAAC,MAAM,CAAC,GACnB,EAAO,EAAE,CACT,EAAU,EAAE,CAIlB,KAAO,GAAQ,EAAK,MAAM,EAAE,CASxB,GAPK,IACD,EAAO,EAAK,GAAG,GACf,EAAS,CAAI,CAAC,EAAK,MAAM,CAAG,EAAE,CAC9B,EAAI,EAAQ,GAAG,GACf,EAAU,IAGV,EAAK,IAAI,CAAE,CACX,IAAM,EAAQ,AAyR9B,SAAkB,CAAI,CAAE,CAAK,CAAE,CAAQ,EACnC,GAAI,CAAC,EAAU,OAAO,EAAM,OAAO,CAAC,GAEpC,IAAK,IAAII,EAAI,EAAGA,EAAI,EAAM,MAAM,CAAEA,IAC9B,GAAI,EAAS,EAAM,CAAK,CAACA,EAAE,EAAG,OAAOA,EAEzC,OAAO,EACX,EAhSuC,EAAM,EAAK,QAAQ,CAAEJ,GAE5C,GAAI,AAAU,KAAV,EAAc,CAEd,EAAK,QAAQ,CAAC,MAAM,CAAC,EAAO,GAC5B,EAAK,IAAI,CAAC,GACV,IAAI,CAAC,SAAS,CAAC,GACf,KACJ,CACJ,CAEI,CAAC,GAAW,CAAC,EAAK,IAAI,EAAIU,EAAS,EAAM,IACzC,EAAK,IAAI,CAAC,GACV,EAAQ,IAAI,CAAC,GACb,EAAI,EACJ,EAAS,EACT,EAAO,EAAK,QAAQ,CAAC,EAAE,EAEhB,GACP,IACA,EAAO,EAAO,QAAQ,CAAC,EAAE,CACzB,EAAU,IAEP,EAAO,IAClB,CAEA,OAAO,IAAI,AACf,CAEA,OAAO,CAAI,CAAE,CAAE,OAAO,CAAM,CAE5B,YAAY,CAAC,CAAE,CAAC,CAAE,CAAE,OAAO,EAAE,IAAI,CAAG,EAAE,IAAI,AAAE,CAC5C,YAAY,CAAC,CAAE,CAAC,CAAE,CAAE,OAAO,EAAE,IAAI,CAAG,EAAE,IAAI,AAAE,CAE5C,QAAS,CAAE,OAAO,IAAI,CAAC,IAAI,AAAE,CAE7B,SAAS,CAAI,CAAE,CAEX,OADA,IAAI,CAAC,IAAI,CAAG,EACL,IAAI,AACf,CAEA,KAAK,CAAI,CAAE,CAAM,CAAE,CACf,IAAMC,EAAgB,EAAE,CACxB,KAAO,GACC,EAAK,IAAI,CAAE,EAAO,IAAI,IAAI,EAAK,QAAQ,EACtCA,EAAc,IAAI,IAAI,EAAK,QAAQ,EAExC,EAAOA,EAAc,GAAG,GAE5B,OAAO,CACX,CAEA,OAAO,CAAK,CAAE,CAAI,CAAE,CAAK,CAAE,CAAM,CAAE,CAE/B,IAEI,EAFE,EAAI,EAAQ,EAAO,EACrB,EAAI,IAAI,CAAC,WAAW,CAGxB,GAAI,GAAK,EAIL,OADA,EADA,EAAO,EAAW,EAAM,KAAK,CAAC,EAAM,EAAQ,IAC7B,IAAI,CAAC,MAAM,EACnB,EAGN,IAED,EAASF,KAAK,IAAI,CAACA,KAAK,GAAG,CAAC,GAAKA,KAAK,GAAG,CAAC,IAG1C,EAAIA,KAAK,IAAI,CAAC,EAAIA,KAAK,GAAG,CAAC,EAAG,EAAS,KAI3C,AADA,GAAO,EAAW,EAAE,GACf,IAAI,CAAG,GACZ,EAAK,MAAM,CAAG,EAId,IAAM,EAAKA,KAAK,IAAI,CAAC,EAAI,GACnB,EAAK,EAAKA,KAAK,IAAI,CAACA,KAAK,IAAI,CAAC,IAEpC,EAAY,EAAO,EAAM,EAAO,EAAI,IAAI,CAAC,WAAW,EAEpD,IAAK,IAAI,EAAI,EAAM,GAAK,EAAO,GAAK,EAAI,CAEpC,IAAM,EAASA,KAAK,GAAG,CAAC,EAAI,EAAK,EAAG,GAEpC,EAAY,EAAO,EAAG,EAAQ,EAAI,IAAI,CAAC,WAAW,EAElD,IAAK,IAAI,EAAI,EAAG,GAAK,EAAQ,GAAK,EAAI,CAElC,IAAM,EAASA,KAAK,GAAG,CAAC,EAAI,EAAK,EAAG,GAGpC,EAAK,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,EAAO,EAAG,EAAQ,EAAS,GAC9D,CACJ,CAIA,OAFA,EAAS,EAAM,IAAI,CAAC,MAAM,EAEnB,CACX,CAEA,eAAe,CAAI,CAAE,CAAI,CAAE,CAAK,CAAE,CAAI,CAAE,CACpC,OAAa,KAOL,EAJJ,GAFA,EAAK,IAAI,CAAC,GAEN,EAAK,IAAI,EAAI,EAAK,MAAM,CAAG,IAAM,EAAO,MAE5C,IAAI,EAAU,IACV,EAAiB,IAGrB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAK,QAAQ,CAAC,MAAM,CAAE,IAAK,KAmNrC,EAAG,EAlNT,IAAM,EAAQ,EAAK,QAAQ,CAAC,EAAE,CACxBG,EAAO,EAAS,GAChB,EAAc,CAgNd,EAhN2B,EAiNrCH,CAAAA,KAAK,GAAG,CAAC,CADI,EAhN8B,GAiNhC,IAAI,CAAE,EAAE,IAAI,EAAIA,KAAK,GAAG,CAAC,EAAE,IAAI,CAAE,EAAE,IAAI,GAClDA,CAAAA,KAAK,GAAG,CAAC,EAAE,IAAI,CAAE,EAAE,IAAI,EAAIA,KAAK,GAAG,CAAC,EAAE,IAAI,CAAE,EAAE,IAAI,GAlNEG,CAAG,CAG/C,GAAc,GACd,EAAiB,EACjB,EAAUA,EAAO,EAAUA,EAAO,EAClC,EAAa,GAEN,IAAgB,GAEnBA,EAAO,IACP,EAAUA,EACV,EAAa,EAGzB,CAEA,EAAO,GAAc,EAAK,QAAQ,CAAC,EAAE,AACzC,CAEA,OAAO,CACX,CAEA,QAAQ,CAAI,CAAE,CAAK,CAAE,CAAM,CAAE,CACzB,IAAM,EAAO,EAAS,EAAO,IAAI,CAAC,MAAM,CAAC,GACnC,EAAa,EAAE,CAGf,EAAO,IAAI,CAAC,cAAc,CAAC,EAAM,IAAI,CAAC,IAAI,CAAE,EAAO,GAOzD,IAJA,EAAK,QAAQ,CAAC,IAAI,CAAC,GACnB,EAAO,EAAM,GAGN,GAAS,GACZ,GAAI,CAAU,CAAC,EAAM,CAAC,QAAQ,CAAC,MAAM,CAAG,IAAI,CAAC,WAAW,CACpD,IAAI,CAAC,MAAM,CAAC,EAAY,GACxB,SACG,MAIX,IAAI,CAAC,mBAAmB,CAAC,EAAM,EAAY,EAC/C,CAGA,OAAO,CAAU,CAAE,CAAK,CAAE,CACtB,IAAMD,EAAO,CAAU,CAAC,EAAM,CACxB,EAAIA,EAAK,QAAQ,CAAC,MAAM,CACxB,EAAI,IAAI,CAAC,WAAW,CAE1B,IAAI,CAAC,gBAAgB,CAACA,EAAM,EAAG,GAE/B,IAAM,EAAa,IAAI,CAAC,iBAAiB,CAACA,EAAM,EAAG,GAE7C,EAAU,EAAWA,EAAK,QAAQ,CAAC,MAAM,CAAC,EAAYA,EAAK,QAAQ,CAAC,MAAM,CAAG,GACnF,GAAQ,MAAM,CAAGA,EAAK,MAAM,CAC5B,EAAQ,IAAI,CAAGA,EAAK,IAAI,CAExB,EAASA,EAAM,IAAI,CAAC,MAAM,EAC1B,EAAS,EAAS,IAAI,CAAC,MAAM,EAEzB,EAAO,CAAU,CAAC,EAAQ,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,GAC1C,IAAI,CAAC,UAAU,CAACA,EAAM,EAC/B,CAEA,WAAW,CAAI,CAAE,CAAO,CAAE,CAEtB,IAAI,CAAC,IAAI,CAAG,EAAW,CAAC,EAAM,EAAQ,EACtC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAG,EAAK,MAAM,CAAG,EACjC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAG,GACjB,EAAS,IAAI,CAAC,IAAI,CAAE,IAAI,CAAC,MAAM,CACnC,CAEA,kBAAkB,CAAI,CAAE,CAAC,CAAE,CAAC,CAAE,CAE1B,IADIP,EACA,EAAa,IACb,EAAU,IAEd,IAAK,IAAI,EAAI,EAAG,GAAK,EAAI,EAAG,IAAK,CAC7B,IAAM,EAAQ,EAAS,EAAM,EAAG,EAAG,IAAI,CAAC,MAAM,EACxC,EAAQ,EAAS,EAAM,EAAG,EAAG,IAAI,CAAC,MAAM,EAExC,EAAU,AAiI5B,SAA0B,CAAC,CAAE,CAAC,EAC1B,IAAM,EAAOK,KAAK,GAAG,CAAC,EAAE,IAAI,CAAE,EAAE,IAAI,EAC9B,EAAOA,KAAK,GAAG,CAAC,EAAE,IAAI,CAAE,EAAE,IAAI,EAIpC,OAAOA,KAAK,GAAG,CAAC,EAAG,AAHNA,KAAK,GAAG,CAAC,EAAE,IAAI,CAAE,EAAE,IAAI,EAGV,GACnBA,KAAK,GAAG,CAAC,EAAG,AAHNA,KAAK,GAAG,CAAC,EAAE,IAAI,CAAE,EAAE,IAAI,EAGV,EAC9B,EAzI6C,EAAO,GAClC,EAAO,EAAS,GAAS,EAAS,EAGpC,GAAU,GACV,EAAa,EACbL,EAAQ,EAER,EAAU,EAAO,EAAU,EAAO,GAE3B,IAAY,GAEf,EAAO,IACP,EAAU,EACVA,EAAQ,EAGpB,CAEA,OAAOA,GAAS,EAAI,CACxB,CAGA,iBAAiB,CAAI,CAAE,CAAC,CAAE,CAAC,CAAE,CACzB,IAAM,EAAc,EAAK,IAAI,CAAG,IAAI,CAAC,WAAW,CAAG,EAC7C,EAAc,EAAK,IAAI,CAAG,IAAI,CAAC,WAAW,CAAG,CAM/C,CALY,IAAI,CAAC,cAAc,CAAC,EAAM,EAAG,EAAG,GAChC,IAAI,CAAC,cAAc,CAAC,EAAM,EAAG,EAAG,IAIzB,EAAK,QAAQ,CAAC,IAAI,CAAC,EAC9C,CAGA,eAAe,CAAI,CAAE,CAAC,CAAE,CAAC,CAAE,CAAO,CAAE,CAChC,EAAK,QAAQ,CAAC,IAAI,CAAC,GAEnB,IAAM,EAAS,IAAI,CAAC,MAAM,CACpB,EAAW,EAAS,EAAM,EAAG,EAAG,GAChC,EAAY,EAAS,EAAM,EAAI,EAAG,EAAG,GACvC,EAAS,EAAW,GAAY,EAAW,GAE/C,IAAK,IAAIA,EAAI,EAAGA,EAAI,EAAI,EAAGA,IAAK,CAC5B,IAAM,EAAQ,EAAK,QAAQ,CAACA,EAAE,CAC9B,EAAO,EAAU,EAAK,IAAI,CAAG,EAAO,GAAS,GAC7C,GAAU,EAAW,EACzB,CAEA,IAAK,IAAIA,EAAI,EAAI,EAAI,EAAGA,GAAK,EAAGA,IAAK,CACjC,IAAM,EAAQ,EAAK,QAAQ,CAACA,EAAE,CAC9B,EAAO,EAAW,EAAK,IAAI,CAAG,EAAO,GAAS,GAC9C,GAAU,EAAW,EACzB,CAEA,OAAO,CACX,CAEA,oBAAoB,CAAI,CAAE,CAAI,CAAE,CAAK,CAAE,CAEnC,IAAK,IAAIA,EAAI,EAAOA,GAAK,EAAGA,IACxB,EAAO,CAAI,CAACA,EAAE,CAAE,EAExB,CAEA,UAAU,CAAI,CAAE,CAEZ,IAAK,IAAI,EAAI,EAAK,MAAM,CAAG,EAAG,EAAU,GAAK,EAAG,IACxC,AAA4B,IAA5B,CAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,MAAM,CACnB,EAAI,EAEJ,AADA,GAAW,CAAI,CAAC,EAAI,EAAE,CAAC,QAAQ,AAAD,EACrB,MAAM,CAAC,EAAS,OAAO,CAAC,CAAI,CAAC,EAAE,EAAG,GAExC,IAAI,CAAC,KAAK,GAEd,EAAS,CAAI,CAAC,EAAE,CAAE,IAAI,CAAC,MAAM,CAE5C,CACJ,CAYA,SAAS,EAAS,CAAI,CAAE,CAAM,EAC1B,EAAS,EAAM,EAAG,EAAK,QAAQ,CAAC,MAAM,CAAE,EAAQ,EACpD,CAGA,SAAS,EAAS,CAAI,CAAE,CAAC,CAAE,CAAC,CAAE,CAAM,CAAE,CAAQ,EACtC,AAAC,GAAU,GAAW,EAAW,KAAI,EACzC,EAAS,IAAI,CAAG,IAChB,EAAS,IAAI,CAAG,IAChB,EAAS,IAAI,CAAG,CAAC,IACjB,EAAS,IAAI,CAAG,CAAC,IAEjB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IAAK,CACxB,IAAM,EAAQ,EAAK,QAAQ,CAAC,EAAE,CAC9B,EAAO,EAAU,EAAK,IAAI,CAAG,EAAO,GAAS,EACjD,CAEA,OAAO,CACX,CAEA,SAAS,EAAO,CAAC,CAAE,CAAC,EAKhB,OAJA,EAAE,IAAI,CAAGK,KAAK,GAAG,CAAC,EAAE,IAAI,CAAE,EAAE,IAAI,EAChC,EAAE,IAAI,CAAGA,KAAK,GAAG,CAAC,EAAE,IAAI,CAAE,EAAE,IAAI,EAChC,EAAE,IAAI,CAAGA,KAAK,GAAG,CAAC,EAAE,IAAI,CAAE,EAAE,IAAI,EAChC,EAAE,IAAI,CAAGA,KAAK,GAAG,CAAC,EAAE,IAAI,CAAE,EAAE,IAAI,EACzB,CACX,CAEA,SAAS,EAAgB,CAAC,CAAE,CAAC,EAAI,OAAO,EAAE,IAAI,CAAG,EAAE,IAAI,AAAE,CACzD,SAAS,EAAgB,CAAC,CAAE,CAAC,EAAI,OAAO,EAAE,IAAI,CAAG,EAAE,IAAI,AAAE,CAEzD,SAAS,EAAS,CAAC,EAAM,MAAO,AAAC,GAAE,IAAI,CAAG,EAAE,IAAI,AAAD,EAAM,GAAE,IAAI,CAAG,EAAE,IAAI,AAAD,CAAI,CACvE,SAAS,EAAW,CAAC,EAAI,OAAO,AAAC,EAAE,IAAI,CAAG,EAAE,IAAI,CAAK,GAAE,IAAI,CAAG,EAAE,IAAI,AAAD,CAAI,CAiBvE,SAASC,EAAS,CAAC,CAAE,CAAC,EAClB,OAAO,EAAE,IAAI,EAAI,EAAE,IAAI,EAChB,EAAE,IAAI,EAAI,EAAE,IAAI,EAChB,EAAE,IAAI,EAAI,EAAE,IAAI,EAChB,EAAE,IAAI,EAAI,EAAE,IAAI,AAC3B,CAEA,SAAS,EAAW,CAAC,CAAE,CAAC,EACpB,OAAO,EAAE,IAAI,EAAI,EAAE,IAAI,EAChB,EAAE,IAAI,EAAI,EAAE,IAAI,EAChB,EAAE,IAAI,EAAI,EAAE,IAAI,EAChB,EAAE,IAAI,EAAI,EAAE,IAAI,AAC3B,CAEA,SAAS,EAAW,CAAQ,EACxB,MAAO,CACH,WACA,OAAQ,EACR,KAAM,GACN,KAAM,IACN,KAAM,IACN,KAAM,CAAC,IACP,KAAM,CAAC,GACX,CACJ,CAKA,SAAS,EAAY,CAAG,CAAE,CAAI,CAAE,CAAK,CAAE,CAAC,CAAE,CAAO,EAC7C,IAAM,EAAQ,CAAC,EAAM,EAAM,CAE3B,KAAO,EAAM,MAAM,EAAE,CAIjB,GAHA,GAAQ,EAAM,GAAG,EAAC,EAClB,GAAO,EAAM,GAAG,EAAC,GAEG,EAAG,SAEvB,IAAM,EAAM,EAAOD,KAAK,IAAI,CAAC,AAAC,GAAQ,CAAG,EAAK,EAAI,GAAK,GACvD,AD/eO,SAAS,EAAY,CAAG,CAAE,CAAC,CAAE,EAAO,CAAC,CAAE,EAAQ,EAAI,MAAM,CAAG,CAAC,CAAE,EA2D9E,SAAwB,CAAC,CAAE,CAAC,EACxB,OAAO,EAAI,EAAI,GAAK,IAAI,EAC5B,CA7DsG,EAElG,KAAO,EAAQ,GAAM,CACjB,GAAI,EAAQ,EAAO,IAAK,CACpB,IAAM,EAAI,EAAQ,EAAO,EACnB,EAAI,EAAI,EAAO,EACf,EAAIA,KAAK,GAAG,CAAC,GACb,EAAI,GAAMA,KAAK,GAAG,CAAC,EAAI,EAAI,GAC3B,EAAK,GAAMA,KAAK,IAAI,CAAC,EAAI,EAAK,GAAI,GAAK,GAAM,GAAI,EAAI,EAAI,EAAI,GAAK,GAClE,EAAUA,KAAK,GAAG,CAAC,EAAMA,KAAK,KAAK,CAAC,EAAI,EAAI,EAAI,EAAI,IACpD,EAAWA,KAAK,GAAG,CAAC,EAAOA,KAAK,KAAK,CAAC,EAAI,AAAC,GAAI,GAAK,EAAI,EAAI,IAClE,EAAY,EAAK,EAAG,EAAS,EAAU,EAC3C,CAEA,IAAM,EAAI,CAAG,CAAC,EAAE,CACZ,EAAI,EAEJ,EAAI,EAKR,IAHA,EAAK,EAAK,EAAM,GACZ,EAAQ,CAAG,CAAC,EAAM,CAAE,GAAK,GAAG,EAAK,EAAK,EAAM,GAEzC,EAAI,GAAG,CAIV,IAHA,EAAK,EAAK,EAAG,GACb,IACA,IACO,AAAqB,EAArB,EAAQ,CAAG,CAAC,EAAE,CAAE,IAAQ,IAC/B,KAAO,EAAQ,CAAG,CAAC,EAAE,CAAE,GAAK,GAAG,GACnC,CAEI,AAA0B,IAA1B,EAAQ,CAAG,CAAC,EAAK,CAAE,GAAU,EAAK,EAAK,EAAM,GAG7C,EAAK,IAAK,EAAG,GAGb,GAAK,GAAG,GAAO,EAAI,GACnB,GAAK,GAAG,GAAQ,EAAI,EAC5B,CACJ,ECwcoB,EAAK,EAAK,EAAM,EAAO,GAEnC,EAAM,IAAI,CAAC,EAAM,EAAK,EAAK,EAC/B,CACJ,C,wBCvfO,SAAS,EAAM,CAAM,EAC1B,IAAK,IAAM,KAAY,EACrB,OAAO,CAAM,CAAC,EAAS,AAE3B,CAOO,SAAS,EAAQ,CAAM,EAC5B,IAAI,EACJ,IAAK,KAAY,EACf,MAAO,GAET,MAAO,CAAC,CACV,C,8EClBO,SAAS,IACd,MAAM,AAAII,MAAM,iCAClB,C,uGAOA,IAAI,EAAc,EAWX,SAAS,EAAO,CAAG,EACxB,OAAO,EAAI,MAAM,EAAK,GAAI,MAAM,CAAGC,OAAO,EAAE,EAAW,CACzD,CAMO,IAAM,EAAU,Q"}