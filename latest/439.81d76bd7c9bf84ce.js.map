{"version":3,"file":"439.81d76bd7c9bf84ce.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/ol/tilegrid/common.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/tilegrid/WMTS.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/geom/flat/contains.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/asserts.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/geom/flat/intersectsextent.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/tilegrid.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/geom/flat/segments.js"],"sourcesContent":["/**\n * @module ol/tilegrid/common\n */\n\n/**\n * Default maximum zoom for default tile grids.\n * @type {number}\n */\nexport const DEFAULT_MAX_ZOOM = 42;\n\n/**\n * Default tile size.\n * @type {number}\n */\nexport const DEFAULT_TILE_SIZE = 256;\n","/**\n * @module ol/tilegrid/WMTS\n */\n\nimport {get as getProjection} from '../proj.js';\nimport TileGrid from './TileGrid.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the tile grid. No tiles\n * outside this extent will be requested by {@link module:ol/source/Tile~TileSource} sources.\n * When no `origin` or `origins` are configured, the `origin` will be set to the\n * top-left corner of the extent.\n * @property {import(\"../coordinate.js\").Coordinate} [origin] The tile grid origin, i.e.\n * where the `x` and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left\n * to right and downwards. If not specified, `extent` or `origins` must be provided.\n * @property {Array<import(\"../coordinate.js\").Coordinate>} [origins] Tile grid origins,\n * i.e. where the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If\n * given, the array length should match the length of the `resolutions` array, i.e.\n * each resolution can have a different origin. Tile coordinates increase left to\n * right and downwards. If not specified, `extent` or `origin` must be provided.\n * @property {!Array<number>} resolutions Resolutions. The array index of each\n * resolution needs to match the zoom level. This means that even if a `minZoom`\n * is configured, the resolutions array will have a length of `maxZoom + 1`\n * @property {!Array<string>} matrixIds matrix IDs. The length of this array needs\n * to match the length of the `resolutions` array.\n * @property {Array<import(\"../size.js\").Size>} [sizes] Number of tile rows and columns\n * of the grid for each zoom level. The values here are the `TileMatrixWidth` and\n * `TileMatrixHeight` advertised in the GetCapabilities response of the WMTS, and\n * define each zoom level's extent together with the `origin` or `origins`.\n * A grid `extent` can be configured in addition, and will further limit the extent for\n * which tile requests are made by sources. If the bottom-left corner of\n * an extent is used as `origin` or `origins`, then the `y` value must be\n * negative because OpenLayers tile coordinates use the top left as the origin.\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * @property {Array<number|import(\"../size.js\").Size>} [tileSizes] Tile sizes. The length of\n * this array needs to match the length of the `resolutions` array.\n */\n\n/**\n * @classdesc\n * Set the grid pattern for sources accessing WMTS tiled-image servers.\n * @api\n */\nclass WMTSTileGrid extends TileGrid {\n  /**\n   * @param {Options} options WMTS options.\n   */\n  constructor(options) {\n    super({\n      extent: options.extent,\n      origin: options.origin,\n      origins: options.origins,\n      resolutions: options.resolutions,\n      tileSize: options.tileSize,\n      tileSizes: options.tileSizes,\n      sizes: options.sizes,\n    });\n\n    /**\n     * @private\n     * @type {!Array<string>}\n     */\n    this.matrixIds_ = options.matrixIds;\n  }\n\n  /**\n   * @param {number} z Z.\n   * @return {string} MatrixId..\n   */\n  getMatrixId(z) {\n    return this.matrixIds_[z];\n  }\n\n  /**\n   * Get the list of matrix identifiers.\n   * @return {Array<string>} MatrixIds.\n   * @api\n   */\n  getMatrixIds() {\n    return this.matrixIds_;\n  }\n}\n\nexport default WMTSTileGrid;\n\n/**\n * Create a tile grid from a WMTS capabilities matrix set and an\n * optional TileMatrixSetLimits.\n * @param {Object} matrixSet An object representing a matrixSet in the\n *     capabilities document.\n * @param {import(\"../extent.js\").Extent} [extent] An optional extent to restrict the tile\n *     ranges the server provides.\n * @param {Array<Object>} [matrixLimits] An optional object representing\n *     the available matrices for tileGrid.\n * @return {WMTSTileGrid} WMTS tileGrid instance.\n * @api\n */\nexport function createFromCapabilitiesMatrixSet(\n  matrixSet,\n  extent,\n  matrixLimits,\n) {\n  /** @type {!Array<number>} */\n  const resolutions = [];\n  /** @type {!Array<string>} */\n  const matrixIds = [];\n  /** @type {!Array<import(\"../coordinate.js\").Coordinate>} */\n  const origins = [];\n  /** @type {!Array<number|import(\"../size.js\").Size>} */\n  const tileSizes = [];\n  /** @type {!Array<import(\"../size.js\").Size>} */\n  const sizes = [];\n\n  matrixLimits = matrixLimits !== undefined ? matrixLimits : [];\n\n  const supportedCRSPropName = 'SupportedCRS';\n  const matrixIdsPropName = 'TileMatrix';\n  const identifierPropName = 'Identifier';\n  const scaleDenominatorPropName = 'ScaleDenominator';\n  const topLeftCornerPropName = 'TopLeftCorner';\n  const tileWidthPropName = 'TileWidth';\n  const tileHeightPropName = 'TileHeight';\n\n  const code = matrixSet[supportedCRSPropName];\n  const projection = getProjection(code);\n  const metersPerUnit = projection.getMetersPerUnit();\n  // swap origin x and y coordinates if axis orientation is lat/long\n  const switchOriginXY = projection.getAxisOrientation().startsWith('ne');\n\n  matrixSet[matrixIdsPropName].sort(function (a, b) {\n    return b[scaleDenominatorPropName] - a[scaleDenominatorPropName];\n  });\n\n  matrixSet[matrixIdsPropName].forEach(function (elt) {\n    let matrixAvailable;\n    // use of matrixLimits to filter TileMatrices from GetCapabilities\n    // TileMatrixSet from unavailable matrix levels.\n    if (matrixLimits.length > 0) {\n      matrixAvailable = matrixLimits.find(function (elt_ml) {\n        if (elt[identifierPropName] == elt_ml[matrixIdsPropName]) {\n          return true;\n        }\n        // Fallback for tileMatrix identifiers that don't get prefixed\n        // by their tileMatrixSet identifiers.\n        if (!elt[identifierPropName].includes(':')) {\n          return (\n            matrixSet[identifierPropName] + ':' + elt[identifierPropName] ===\n            elt_ml[matrixIdsPropName]\n          );\n        }\n        return false;\n      });\n    } else {\n      matrixAvailable = true;\n    }\n\n    if (matrixAvailable) {\n      matrixIds.push(elt[identifierPropName]);\n      const resolution =\n        (elt[scaleDenominatorPropName] * 0.28e-3) / metersPerUnit;\n      const tileWidth = elt[tileWidthPropName];\n      const tileHeight = elt[tileHeightPropName];\n      if (switchOriginXY) {\n        origins.push([\n          elt[topLeftCornerPropName][1],\n          elt[topLeftCornerPropName][0],\n        ]);\n      } else {\n        origins.push(elt[topLeftCornerPropName]);\n      }\n      resolutions.push(resolution);\n      tileSizes.push(\n        tileWidth == tileHeight ? tileWidth : [tileWidth, tileHeight],\n      );\n      sizes.push([elt['MatrixWidth'], elt['MatrixHeight']]);\n    }\n  });\n\n  return new WMTSTileGrid({\n    extent: extent,\n    origins: origins,\n    resolutions: resolutions,\n    matrixIds: matrixIds,\n    tileSizes: tileSizes,\n    sizes: sizes,\n  });\n}\n","/**\n * @module ol/geom/flat/contains\n */\nimport {forEachCorner} from '../../extent.js';\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} Contains extent.\n */\nexport function linearRingContainsExtent(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  extent,\n) {\n  const outside = forEachCorner(\n    extent,\n    /**\n     * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @return {boolean} Contains (x, y).\n     */\n    function (coordinate) {\n      return !linearRingContainsXY(\n        flatCoordinates,\n        offset,\n        end,\n        stride,\n        coordinate[0],\n        coordinate[1],\n      );\n    },\n  );\n  return !outside;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {boolean} Contains (x, y).\n */\nexport function linearRingContainsXY(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  x,\n  y,\n) {\n  // https://geomalgorithms.com/a03-_inclusion.html\n  // Copyright 2000 softSurfer, 2012 Dan Sunday\n  // This code may be freely used and modified for any purpose\n  // providing that this copyright notice is included with it.\n  // SoftSurfer makes no warranty for this code, and cannot be held\n  // liable for any real or imagined damage resulting from its use.\n  // Users of this code must verify correctness for their application.\n  let wn = 0;\n  let x1 = flatCoordinates[end - stride];\n  let y1 = flatCoordinates[end - stride + 1];\n  for (; offset < end; offset += stride) {\n    const x2 = flatCoordinates[offset];\n    const y2 = flatCoordinates[offset + 1];\n    if (y1 <= y) {\n      if (y2 > y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0) {\n        wn++;\n      }\n    } else if (y2 <= y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) < 0) {\n      wn--;\n    }\n    x1 = x2;\n    y1 = y2;\n  }\n  return wn !== 0;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {boolean} Contains (x, y).\n */\nexport function linearRingsContainsXY(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  x,\n  y,\n) {\n  if (ends.length === 0) {\n    return false;\n  }\n  if (!linearRingContainsXY(flatCoordinates, offset, ends[0], stride, x, y)) {\n    return false;\n  }\n  for (let i = 1, ii = ends.length; i < ii; ++i) {\n    if (\n      linearRingContainsXY(flatCoordinates, ends[i - 1], ends[i], stride, x, y)\n    ) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {boolean} Contains (x, y).\n */\nexport function linearRingssContainsXY(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  x,\n  y,\n) {\n  if (endss.length === 0) {\n    return false;\n  }\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    if (linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) {\n      return true;\n    }\n    offset = ends[ends.length - 1];\n  }\n  return false;\n}\n","/**\n * @module ol/asserts\n */\n\n/**\n * @param {*} assertion Assertion we expected to be truthy.\n * @param {string} errorMessage Error message.\n */\nexport function assert(assertion, errorMessage) {\n  if (!assertion) {\n    throw new Error(errorMessage);\n  }\n}\n","/**\n * @module ol/geom/flat/intersectsextent\n */\nimport {\n  createEmpty,\n  extendFlatCoordinates,\n  intersects,\n  intersectsSegment,\n} from '../../extent.js';\nimport {linearRingContainsExtent, linearRingContainsXY} from './contains.js';\nimport {forEach as forEachSegment} from './segments.js';\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @param {import('../../extent.js').Extent} [coordinatesExtent] Coordinates extent\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLineString(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  extent,\n  coordinatesExtent,\n) {\n  coordinatesExtent =\n    coordinatesExtent ??\n    extendFlatCoordinates(createEmpty(), flatCoordinates, offset, end, stride);\n  if (!intersects(extent, coordinatesExtent)) {\n    return false;\n  }\n  if (\n    (coordinatesExtent[0] >= extent[0] && coordinatesExtent[2] <= extent[2]) ||\n    (coordinatesExtent[1] >= extent[1] && coordinatesExtent[3] <= extent[3])\n  ) {\n    return true;\n  }\n  return forEachSegment(\n    flatCoordinates,\n    offset,\n    end,\n    stride,\n    /**\n     * @param {import(\"../../coordinate.js\").Coordinate} point1 Start point.\n     * @param {import(\"../../coordinate.js\").Coordinate} point2 End point.\n     * @return {boolean} `true` if the segment and the extent intersect,\n     *     `false` otherwise.\n     */\n    function (point1, point2) {\n      return intersectsSegment(extent, point1, point2);\n    },\n  );\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLineStringArray(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  extent,\n) {\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    if (\n      intersectsLineString(flatCoordinates, offset, ends[i], stride, extent)\n    ) {\n      return true;\n    }\n    offset = ends[i];\n  }\n  return false;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLinearRing(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  extent,\n) {\n  if (intersectsLineString(flatCoordinates, offset, end, stride, extent)) {\n    return true;\n  }\n  if (\n    linearRingContainsXY(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      extent[0],\n      extent[1],\n    )\n  ) {\n    return true;\n  }\n  if (\n    linearRingContainsXY(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      extent[0],\n      extent[3],\n    )\n  ) {\n    return true;\n  }\n  if (\n    linearRingContainsXY(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      extent[2],\n      extent[1],\n    )\n  ) {\n    return true;\n  }\n  if (\n    linearRingContainsXY(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      extent[2],\n      extent[3],\n    )\n  ) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLinearRingArray(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  extent,\n) {\n  if (!intersectsLinearRing(flatCoordinates, offset, ends[0], stride, extent)) {\n    return false;\n  }\n  if (ends.length === 1) {\n    return true;\n  }\n  for (let i = 1, ii = ends.length; i < ii; ++i) {\n    if (\n      linearRingContainsExtent(\n        flatCoordinates,\n        ends[i - 1],\n        ends[i],\n        stride,\n        extent,\n      )\n    ) {\n      if (\n        !intersectsLineString(\n          flatCoordinates,\n          ends[i - 1],\n          ends[i],\n          stride,\n          extent,\n        )\n      ) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLinearRingMultiArray(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  extent,\n) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    if (\n      intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent)\n    ) {\n      return true;\n    }\n    offset = ends[ends.length - 1];\n  }\n  return false;\n}\n","/**\n * @module ol/tilegrid\n */\nimport {\n  containsCoordinate,\n  createOrUpdate,\n  getCorner,\n  getHeight,\n  getWidth,\n} from './extent.js';\nimport {METERS_PER_UNIT, get as getProjection} from './proj.js';\nimport {toSize} from './size.js';\nimport TileGrid from './tilegrid/TileGrid.js';\nimport {DEFAULT_MAX_ZOOM, DEFAULT_TILE_SIZE} from './tilegrid/common.js';\n\nexport {TileGrid};\nexport {default as WMTS} from './tilegrid/WMTS.js';\n\n/**\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {!TileGrid} Default tile grid for the\n * passed projection.\n */\nexport function getForProjection(projection) {\n  let tileGrid = projection.getDefaultTileGrid();\n  if (!tileGrid) {\n    tileGrid = createForProjection(projection);\n    projection.setDefaultTileGrid(tileGrid);\n  }\n  return tileGrid;\n}\n\n/**\n * @param {TileGrid} tileGrid Tile grid.\n * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {import(\"./tilecoord.js\").TileCoord} Tile coordinate.\n */\nexport function wrapX(tileGrid, tileCoord, projection) {\n  const z = tileCoord[0];\n  const center = tileGrid.getTileCoordCenter(tileCoord);\n  const projectionExtent = extentFromProjection(projection);\n  if (!containsCoordinate(projectionExtent, center)) {\n    const worldWidth = getWidth(projectionExtent);\n    const worldsAway = Math.ceil(\n      (projectionExtent[0] - center[0]) / worldWidth,\n    );\n    center[0] += worldWidth * worldsAway;\n    return tileGrid.getTileCoordForCoordAndZ(center, z);\n  }\n  return tileCoord;\n}\n\n/**\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} [maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {import(\"./extent.js\").Corner} [corner] Extent corner (default is `'top-left'`).\n * @return {!TileGrid} TileGrid instance.\n */\nexport function createForExtent(extent, maxZoom, tileSize, corner) {\n  corner = corner !== undefined ? corner : 'top-left';\n\n  const resolutions = resolutionsFromExtent(extent, maxZoom, tileSize);\n\n  return new TileGrid({\n    extent: extent,\n    origin: getCorner(extent, corner),\n    resolutions: resolutions,\n    tileSize: tileSize,\n  });\n}\n\n/**\n * @typedef {Object} XYZOptions\n * @property {import(\"./extent.js\").Extent} [extent] Extent for the tile grid. The origin for an XYZ tile grid is the\n * top-left corner of the extent. If `maxResolution` is not provided the zero level of the grid is defined by the resolution\n * at which one tile fits in the provided extent. If not provided, the extent of the EPSG:3857 projection is used.\n * @property {number} [maxResolution] Resolution at level zero.\n * @property {number} [maxZoom] Maximum zoom. The default is `42`. This determines the number of levels\n * in the grid set. For example, a `maxZoom` of 21 means there are 22 levels in the grid set.\n * @property {number} [minZoom=0] Minimum zoom.\n * @property {number|import(\"./size.js\").Size} [tileSize=[256, 256]] Tile size in pixels.\n */\n\n/**\n * Creates a tile grid with a standard XYZ tiling scheme.\n * @param {XYZOptions} [options] Tile grid options.\n * @return {!TileGrid} Tile grid instance.\n * @api\n */\nexport function createXYZ(options) {\n  const xyzOptions = options || {};\n\n  const extent = xyzOptions.extent || getProjection('EPSG:3857').getExtent();\n\n  const gridOptions = {\n    extent: extent,\n    minZoom: xyzOptions.minZoom,\n    tileSize: xyzOptions.tileSize,\n    resolutions: resolutionsFromExtent(\n      extent,\n      xyzOptions.maxZoom,\n      xyzOptions.tileSize,\n      xyzOptions.maxResolution,\n    ),\n  };\n  return new TileGrid(gridOptions);\n}\n\n/**\n * Create a resolutions array from an extent.  A zoom factor of 2 is assumed.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} [maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {number} [maxResolution] Resolution at level zero.\n * @return {!Array<number>} Resolutions array.\n */\nfunction resolutionsFromExtent(extent, maxZoom, tileSize, maxResolution) {\n  maxZoom = maxZoom !== undefined ? maxZoom : DEFAULT_MAX_ZOOM;\n  tileSize = toSize(tileSize !== undefined ? tileSize : DEFAULT_TILE_SIZE);\n\n  const height = getHeight(extent);\n  const width = getWidth(extent);\n\n  maxResolution =\n    maxResolution > 0\n      ? maxResolution\n      : Math.max(width / tileSize[0], height / tileSize[1]);\n\n  const length = maxZoom + 1;\n  const resolutions = new Array(length);\n  for (let z = 0; z < length; ++z) {\n    resolutions[z] = maxResolution / Math.pow(2, z);\n  }\n  return resolutions;\n}\n\n/**\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\n * @param {number} [maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {import(\"./extent.js\").Corner} [corner] Extent corner (default is `'top-left'`).\n * @return {!TileGrid} TileGrid instance.\n */\nexport function createForProjection(projection, maxZoom, tileSize, corner) {\n  const extent = extentFromProjection(projection);\n  return createForExtent(extent, maxZoom, tileSize, corner);\n}\n\n/**\n * Generate a tile grid extent from a projection.  If the projection has an\n * extent, it is used.  If not, a global extent is assumed.\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\n * @return {import(\"./extent.js\").Extent} Extent.\n */\nexport function extentFromProjection(projection) {\n  projection = getProjection(projection);\n  let extent = projection.getExtent();\n  if (!extent) {\n    const half =\n      (180 * METERS_PER_UNIT.degrees) / projection.getMetersPerUnit();\n    extent = createOrUpdate(-half, -half, half, half);\n  }\n  return extent;\n}\n","/**\n * @module ol/geom/flat/segments\n */\n\n/**\n * This function calls `callback` for each segment of the flat coordinates\n * array. If the callback returns a truthy value the function returns that\n * value immediately. Otherwise the function returns `false`.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {function(import(\"../../coordinate.js\").Coordinate, import(\"../../coordinate.js\").Coordinate): T} callback Function\n *     called for each segment.\n * @return {T|boolean} Value.\n * @template T\n */\nexport function forEach(flatCoordinates, offset, end, stride, callback) {\n  let ret;\n  offset += stride;\n  for (; offset < end; offset += stride) {\n    ret = callback(\n      flatCoordinates.slice(offset - stride, offset),\n      flatCoordinates.slice(offset, offset + stride),\n    );\n    if (ret) {\n      return ret;\n    }\n  }\n  return false;\n}\n"],"names":["e","m","Error","t","Math","l","Array"],"mappings":"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"}