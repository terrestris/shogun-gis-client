{"version":3,"file":"2648.504e23b3c2c50098.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/ol-util/dist/PermalinkUtil/PermalinkUtil.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-util/dist/Hooks/useMap/useMap.js"],"sourcesContent":["import _isEmpty from 'lodash/isEmpty';\nimport _isNil from 'lodash/isNil';\nimport { getUid } from 'ol';\nimport OlLayerGroup from 'ol/layer/Group';\nimport OlImageLayer from 'ol/layer/Image';\nimport OlTileLayer from 'ol/layer/Tile';\nimport MapUtil from '../MapUtil/MapUtil';\n/**\n * Helper class for some operations related to permalink function.\n *\n * @class\n */\nexport class PermalinkUtil {\n    /**\n     * Creates a permalink based on the given map state. It will contain\n     * the current view state of the map (center and zoom) as well as\n     * the current (filtered) list of layers.\n     *\n     * @param {OlMap} map The OpenLayers map\n     * @param {string} separator The separator for the layers list and center\n     *                           coordinates in the link. Default is to ';'.\n     * @param {(layer: OlBaseLayer) => string} identifier Function to generate the identifier of the\n     *                              layer in the link. Default is the name\n     *                              (given by the associated property) of\n     *                              the layer.\n     * @param {(layer: OlBaseLayer) => boolean} filter Function to filter layers that should be\n     *                          added to the link. Default is to add all\n     *                          visible layers of type ol/layer/Tile.\n     * @param {string[]} customAttributes Custom layer attributes which will be saved in the permalink for each layer.\n     * @return {string} The permalink.\n     */\n    static getLink = (map, separator = ';', identifier = (l) => l?.get('name'), filter = (l) => !_isNil(l) &&\n        (l instanceof OlTileLayer || l instanceof OlImageLayer) && l.getVisible(), customAttributes = []) => {\n        const center = map.getView().getCenter()?.join(separator) ?? '';\n        const zoom = map.getView().getZoom()?.toString() ?? '';\n        const layers = map.getAllLayers();\n        const visibleOnes = layers\n            .filter(filter)\n            .map(identifier)\n            .join(separator);\n        const link = new URL(window.location.href);\n        if (customAttributes.length > 0) {\n            const customLayerAttributes = [];\n            layers.forEach((layer) => {\n                const config = {};\n                customAttributes.forEach((attribute) => {\n                    if (!_isNil(layer.get(attribute))) {\n                        config[attribute] = layer.get(attribute);\n                    }\n                });\n                if (!_isEmpty(config)) {\n                    customLayerAttributes.push(config);\n                }\n            });\n            const customLayerAttributesString = JSON.stringify(customLayerAttributes);\n            link.searchParams.set('customLayerAttributes', customLayerAttributesString);\n        }\n        link.searchParams.set('center', center);\n        link.searchParams.set('zoom', zoom);\n        link.searchParams.set('layers', visibleOnes);\n        return link.href;\n    };\n    /**\n     * Applies an existing permalink to the given map.\n     *\n     * @param {OlMap} map The OpenLayers map.\n     * @param {string} separator The separator of the layers list and center\n     *                           coordinates in the link. Default is to ';'.\n     * @param {(layer: OlBaseLayer) => string} identifier Function to generate the identifier of the\n     *                              layer in the link. Default is the name\n     *                              (given by the associated property) of\n     *                              the layer.\n     * @param {(layer: OlBaseLayer) => boolean} filter Function to filter layers that should be\n     *                          handled by the link. Default is to consider all\n     *                          current map layers of type ol/layer/Tile.\n     * @return {string | null} The customLayerAttributes, if defined. Otherwise null.\n     */\n    static applyLink = (map, separator = ';', identifier = l => l?.get('name'), filter = (layer) => layer instanceof OlTileLayer || layer instanceof OlImageLayer) => {\n        const url = new URL(window.location.href);\n        const center = url.searchParams.get('center');\n        const zoom = url.searchParams.get('zoom');\n        const layers = url.searchParams.get('layers');\n        const customLayerAttributes = url.searchParams.get('customLayerAttributes');\n        const allLayers = MapUtil.getAllLayers(map);\n        if (layers) {\n            const layersSplitted = layers.split(separator);\n            allLayers\n                .filter(filter)\n                .forEach(l => {\n                const visible = layersSplitted.includes(identifier(l));\n                l.setVisible(visible);\n                // also make all parent folders / groups visible so\n                // that the layer becomes visible in map\n                if (visible) {\n                    PermalinkUtil.setParentsVisible(map, map.getLayerGroup().getLayers(), getUid(l));\n                }\n            });\n        }\n        if (center) {\n            map.getView().setCenter([\n                parseFloat(center.split(separator)[0]),\n                parseFloat(center.split(separator)[1])\n            ]);\n        }\n        if (zoom) {\n            map.getView().setZoom(parseInt(zoom, 10));\n        }\n        if (customLayerAttributes) {\n            return customLayerAttributes;\n        }\n        return null;\n    };\n    /**\n     * Search through the given Ol-Collection for the given id and\n     * set all parenting groups visible.\n     * @param {OlMap} map The openlayers map\n     * @param {OlCollection<OlBaseLayer>} coll The Openlayers Collection\n     * @param {string} id Ther layer ol uid to search for\n     */\n    static setParentsVisible = (map, coll, id) => {\n        coll.forEach(el => {\n            if (el instanceof OlLayerGroup) {\n                const layers = MapUtil.getLayersByGroup(map, el);\n                if (layers.map(layer => getUid(layer)).includes(id)) {\n                    el.setVisible(true);\n                }\n                PermalinkUtil.setParentsVisible(map, el.getLayers(), id);\n            }\n        });\n    };\n}\nexport default PermalinkUtil;\n//# sourceMappingURL=PermalinkUtil.js.map","import { useContext } from 'react';\nimport MapContext from '../../Context/MapContext/MapContext';\nexport const useMap = () => {\n    return useContext(MapContext);\n};\nexport default useMap;\n//# sourceMappingURL=useMap.js.map"],"names":["PermalinkUtil","map","separator","identifier","l","filter","customAttributes","center","zoom","layers","visibleOnes","link","URL","window","customLayerAttributes","layer","config","attribute","customLayerAttributesString","JSON","url","allLayers","layersSplitted","visible","parseFloat","parseInt","coll","id","el","useMap"],"mappings":"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"}