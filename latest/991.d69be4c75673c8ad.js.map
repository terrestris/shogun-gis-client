{"version":3,"file":"991.d69be4c75673c8ad.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/ol/geom/Geometry.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/geom/flat/transform.js"],"sourcesContent":["/**\n * @module ol/geom/Geometry\n */\nimport BaseObject from '../Object.js';\nimport {abstract} from '../util.js';\nimport {\n  compose as composeTransform,\n  create as createTransform,\n} from '../transform.js';\nimport {\n  createEmpty,\n  createOrUpdateEmpty,\n  getHeight,\n  returnOrUpdate,\n} from '../extent.js';\nimport {get as getProjection, getTransform} from '../proj.js';\nimport {memoizeOne} from '../functions.js';\nimport {transform2D} from './flat/transform.js';\n\n/**\n * @typedef {'XY' | 'XYZ' | 'XYM' | 'XYZM'} GeometryLayout\n * The coordinate layout for geometries, indicating whether a 3rd or 4th z ('Z')\n * or measure ('M') coordinate is available.\n */\n\n/**\n * @typedef {'Point' | 'LineString' | 'LinearRing' | 'Polygon' | 'MultiPoint' | 'MultiLineString' | 'MultiPolygon' | 'GeometryCollection' | 'Circle'} Type\n * The geometry type.  One of `'Point'`, `'LineString'`, `'LinearRing'`,\n * `'Polygon'`, `'MultiPoint'`, `'MultiLineString'`, `'MultiPolygon'`,\n * `'GeometryCollection'`, or `'Circle'`.\n */\n\n/**\n * @type {import(\"../transform.js\").Transform}\n */\nconst tmpTransform = createTransform();\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for vector geometries.\n *\n * To get notified of changes to the geometry, register a listener for the\n * generic `change` event on your geometry instance.\n *\n * @abstract\n * @api\n */\nclass Geometry extends BaseObject {\n  constructor() {\n    super();\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.extent_ = createEmpty();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.extentRevision_ = -1;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.simplifiedGeometryRevision = 0;\n\n    /**\n     * Get a transformed and simplified version of the geometry.\n     * @abstract\n     * @param {number} revision The geometry revision.\n     * @param {number} squaredTolerance Squared tolerance.\n     * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\n     * @return {Geometry} Simplified geometry.\n     */\n    this.simplifyTransformedInternal = memoizeOne(\n      (revision, squaredTolerance, transform) => {\n        if (!transform) {\n          return this.getSimplifiedGeometry(squaredTolerance);\n        }\n        const clone = this.clone();\n        clone.applyTransform(transform);\n        return clone.getSimplifiedGeometry(squaredTolerance);\n      },\n    );\n  }\n\n  /**\n   * Get a transformed and simplified version of the geometry.\n   * @abstract\n   * @param {number} squaredTolerance Squared tolerance.\n   * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\n   * @return {Geometry} Simplified geometry.\n   */\n  simplifyTransformed(squaredTolerance, transform) {\n    return this.simplifyTransformedInternal(\n      this.getRevision(),\n      squaredTolerance,\n      transform,\n    );\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @abstract\n   * @return {!Geometry} Clone.\n   */\n  clone() {\n    return abstract();\n  }\n\n  /**\n   * @abstract\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    return abstract();\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n  containsXY(x, y) {\n    const coord = this.getClosestPoint([x, y]);\n    return coord[0] === x && coord[1] === y;\n  }\n\n  /**\n   * Return the closest point of the geometry to the passed point as\n   * {@link module:ol/coordinate~Coordinate coordinate}.\n   * @param {import(\"../coordinate.js\").Coordinate} point Point.\n   * @param {import(\"../coordinate.js\").Coordinate} [closestPoint] Closest point.\n   * @return {import(\"../coordinate.js\").Coordinate} Closest point.\n   * @api\n   */\n  getClosestPoint(point, closestPoint) {\n    closestPoint = closestPoint ? closestPoint : [NaN, NaN];\n    this.closestPointXY(point[0], point[1], closestPoint, Infinity);\n    return closestPoint;\n  }\n\n  /**\n   * Returns true if this geometry includes the specified coordinate. If the\n   * coordinate is on the boundary of the geometry, returns false.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {boolean} Contains coordinate.\n   * @api\n   */\n  intersectsCoordinate(coordinate) {\n    return this.containsXY(coordinate[0], coordinate[1]);\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  computeExtent(extent) {\n    return abstract();\n  }\n\n  /**\n   * Get the extent of the geometry.\n   * @param {import(\"../extent.js\").Extent} [extent] Extent.\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */\n  getExtent(extent) {\n    if (this.extentRevision_ != this.getRevision()) {\n      const extent = this.computeExtent(this.extent_);\n      if (isNaN(extent[0]) || isNaN(extent[1])) {\n        createOrUpdateEmpty(extent);\n      }\n      this.extentRevision_ = this.getRevision();\n    }\n    return returnOrUpdate(this.extent_, extent);\n  }\n\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} angle Rotation angle in radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n  rotate(angle, anchor) {\n    abstract();\n  }\n\n  /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   */\n  scale(sx, sy, anchor) {\n    abstract();\n  }\n\n  /**\n   * Create a simplified version of this geometry.  For linestrings, this uses\n   * the [Douglas Peucker](https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm)\n   * algorithm.  For polygons, a quantization-based\n   * simplification is used to preserve topology.\n   * @param {number} tolerance The tolerance distance for simplification.\n   * @return {Geometry} A new, simplified version of the original geometry.\n   * @api\n   */\n  simplify(tolerance) {\n    return this.getSimplifiedGeometry(tolerance * tolerance);\n  }\n\n  /**\n   * Create a simplified version of this geometry using the Douglas Peucker\n   * algorithm.\n   * See https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm.\n   * @abstract\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {Geometry} Simplified geometry.\n   */\n  getSimplifiedGeometry(squaredTolerance) {\n    return abstract();\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @abstract\n   * @return {Type} Geometry type.\n   */\n  getType() {\n    return abstract();\n  }\n\n  /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @abstract\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   */\n  applyTransform(transformFn) {\n    abstract();\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   */\n  intersectsExtent(extent) {\n    return abstract();\n  }\n\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @abstract\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n  translate(deltaX, deltaY) {\n    abstract();\n  }\n\n  /**\n   * Transform each coordinate of the geometry from one coordinate reference\n   * system to another. The geometry is modified in place.\n   * For example, a line will be transformed to a line and a circle to a circle.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} source The current projection.  Can be a\n   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n   * @param {import(\"../proj.js\").ProjectionLike} destination The desired projection.  Can be a\n   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n   * @return {this} This geometry.  Note that original geometry is\n   *     modified in place.\n   * @api\n   */\n  transform(source, destination) {\n    /** @type {import(\"../proj/Projection.js\").default} */\n    const sourceProj = getProjection(source);\n    const transformFn =\n      sourceProj.getUnits() == 'tile-pixels'\n        ? function (inCoordinates, outCoordinates, stride) {\n            const pixelExtent = sourceProj.getExtent();\n            const projectedExtent = sourceProj.getWorldExtent();\n            const scale = getHeight(projectedExtent) / getHeight(pixelExtent);\n            composeTransform(\n              tmpTransform,\n              projectedExtent[0],\n              projectedExtent[3],\n              scale,\n              -scale,\n              0,\n              0,\n              0,\n            );\n            const transformed = transform2D(\n              inCoordinates,\n              0,\n              inCoordinates.length,\n              stride,\n              tmpTransform,\n              outCoordinates,\n            );\n            const projTransform = getTransform(sourceProj, destination);\n            if (projTransform) {\n              return projTransform(transformed, transformed, stride);\n            }\n            return transformed;\n          }\n        : getTransform(sourceProj, destination);\n    this.applyTransform(transformFn);\n    return this;\n  }\n}\n\nexport default Geometry;\n","/**\n * @module ol/geom/flat/transform\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../transform.js\").Transform} transform Transform.\n * @param {Array<number>} [dest] Destination.\n * @param {number} [destinationStride] Stride of destination coordinates; if unspecified, assumed to be 2.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function transform2D(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  transform,\n  dest,\n  destinationStride,\n) {\n  dest = dest ? dest : [];\n  destinationStride = destinationStride ? destinationStride : 2;\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    const x = flatCoordinates[j];\n    const y = flatCoordinates[j + 1];\n    dest[i++] = transform[0] * x + transform[2] * y + transform[4];\n    dest[i++] = transform[1] * x + transform[3] * y + transform[5];\n\n    for (let k = 2; k < destinationStride; k++) {\n      dest[i++] = flatCoordinates[j + k];\n    }\n  }\n\n  if (dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} angle Angle.\n * @param {Array<number>} anchor Rotation anchor point.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function rotate(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  angle,\n  anchor,\n  dest,\n) {\n  dest = dest ? dest : [];\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n  const anchorX = anchor[0];\n  const anchorY = anchor[1];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    const deltaX = flatCoordinates[j] - anchorX;\n    const deltaY = flatCoordinates[j + 1] - anchorY;\n    dest[i++] = anchorX + deltaX * cos - deltaY * sin;\n    dest[i++] = anchorY + deltaX * sin + deltaY * cos;\n    for (let k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n  if (dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n\n/**\n * Scale the coordinates.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} sx Scale factor in the x-direction.\n * @param {number} sy Scale factor in the y-direction.\n * @param {Array<number>} anchor Scale anchor point.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function scale(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  sx,\n  sy,\n  anchor,\n  dest,\n) {\n  dest = dest ? dest : [];\n  const anchorX = anchor[0];\n  const anchorY = anchor[1];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    const deltaX = flatCoordinates[j] - anchorX;\n    const deltaY = flatCoordinates[j + 1] - anchorY;\n    dest[i++] = anchorX + sx * deltaX;\n    dest[i++] = anchorY + sy * deltaY;\n    for (let k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n  if (dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} deltaX Delta X.\n * @param {number} deltaY Delta Y.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function translate(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  deltaX,\n  deltaY,\n  dest,\n) {\n  dest = dest ? dest : [];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    dest[i++] = flatCoordinates[j] + deltaX;\n    dest[i++] = flatCoordinates[j + 1] + deltaY;\n    for (let k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n  if (dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n"],"names":["tmpTransform","Geometry","revision","squaredTolerance","transform","clone","x","y","closestPoint","minSquaredDistance","coord","point","NaN","Infinity","coordinate","extent","isNaN","angle","anchor","sx","sy","tolerance","transformFn","deltaX","deltaY","source","destination","sourceProj","inCoordinates","outCoordinates","stride","pixelExtent","projectedExtent","scale","transformed","projTransform","transform2D","flatCoordinates","offset","end","dest","destinationStride","i","j","k","rotate","cos","Math","sin","anchorX","anchorY","translate"],"mappings":"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"}