{"version":3,"file":"8548.9d1f3e1060c4b6b5.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/ol/source/WMTS.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/util.js"],"sourcesContent":["/**\n * @module ol/source/WMTS\n */\n\nimport {containsExtent} from '../extent.js';\nimport {equivalent, get as getProjection, transformExtent} from '../proj.js';\nimport {createFromCapabilitiesMatrixSet} from '../tilegrid/WMTS.js';\nimport {createFromTileUrlFunctions} from '../tileurlfunction.js';\nimport {appendParams, expandUrl} from '../uri.js';\nimport TileImage from './TileImage.js';\n\n/**\n * Request encoding. One of 'KVP', 'REST'.\n * @typedef {'KVP' | 'REST'} RequestEncoding\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../tilegrid/WMTS.js\").default} tileGrid Tile grid.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {RequestEncoding} [requestEncoding='KVP'] Request encoding.\n * @property {string} layer Layer name as advertised in the WMTS capabilities.\n * @property {string} style Style name as advertised in the WMTS capabilities.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass]  Class used to instantiate image tiles. Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service.\n * For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {string} [format='image/jpeg'] Image format. Only used when `requestEncoding` is `'KVP'`.\n * @property {string} [version='1.0.0'] WMTS version.\n * @property {string} matrixSet Matrix set.\n * @property {!Object} [dimensions] Additional \"dimensions\" for tile requests.\n * This is an object with properties named like the advertised WMTS dimensions.\n * @property {string} [url]  A URL for the service.\n * For the RESTful request encoding, this is a URL\n * template.  For KVP encoding, it is normal URL. A `{?-?}` template pattern,\n * for example `subdomain{a-f}.domain.com`, may be used instead of defining\n * each one separately in the `urls` option.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {Array<string>} [urls] An array of URLs.\n * Requests will be distributed among the URLs in this array.\n * @property {boolean} [wrapX=false] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data from WMTS servers.\n * @api\n */\nclass WMTS extends TileImage {\n  /**\n   * @param {Options} options WMTS options.\n   */\n  constructor(options) {\n    // TODO: add support for TileMatrixLimits\n\n    const requestEncoding =\n      options.requestEncoding !== undefined ? options.requestEncoding : 'KVP';\n\n    // FIXME: should we create a default tileGrid?\n    // we could issue a getCapabilities xhr to retrieve missing configuration\n    const tileGrid = options.tileGrid;\n\n    let urls = options.urls;\n    if (urls === undefined && options.url !== undefined) {\n      urls = expandUrl(options.url);\n    }\n\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: options.tileClass,\n      tileGrid: tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      urls: urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : false,\n      transition: options.transition,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.version_ = options.version !== undefined ? options.version : '1.0.0';\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.format_ = options.format !== undefined ? options.format : 'image/jpeg';\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.dimensions_ =\n      options.dimensions !== undefined ? options.dimensions : {};\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.layer_ = options.layer;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.matrixSet_ = options.matrixSet;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.style_ = options.style;\n\n    // FIXME: should we guess this requestEncoding from options.url(s)\n    //        structure? that would mean KVP only if a template is not provided.\n\n    /**\n     * @private\n     * @type {RequestEncoding}\n     */\n    this.requestEncoding_ = requestEncoding;\n\n    this.setKey(this.getKeyForDimensions_());\n\n    if (urls && urls.length > 0) {\n      this.tileUrlFunction = createFromTileUrlFunctions(\n        urls.map(this.createFromWMTSTemplate.bind(this)),\n      );\n    }\n  }\n\n  /**\n   * Set the URLs to use for requests.\n   * URLs may contain OGC conform URL Template Variables: {TileMatrix}, {TileRow}, {TileCol}.\n   * @param {Array<string>} urls URLs.\n   * @override\n   */\n  setUrls(urls) {\n    this.urls = urls;\n    const key = urls.join('\\n');\n    this.setTileUrlFunction(\n      createFromTileUrlFunctions(\n        urls.map(this.createFromWMTSTemplate.bind(this)),\n      ),\n      key,\n    );\n  }\n\n  /**\n   * Get the dimensions, i.e. those passed to the constructor through the\n   * \"dimensions\" option, and possibly updated using the updateDimensions\n   * method.\n   * @return {!Object} Dimensions.\n   * @api\n   */\n  getDimensions() {\n    return this.dimensions_;\n  }\n\n  /**\n   * Return the image format of the WMTS source.\n   * @return {string} Format.\n   * @api\n   */\n  getFormat() {\n    return this.format_;\n  }\n\n  /**\n   * Return the layer of the WMTS source.\n   * @return {string} Layer.\n   * @api\n   */\n  getLayer() {\n    return this.layer_;\n  }\n\n  /**\n   * Return the matrix set of the WMTS source.\n   * @return {string} MatrixSet.\n   * @api\n   */\n  getMatrixSet() {\n    return this.matrixSet_;\n  }\n\n  /**\n   * Return the request encoding, either \"KVP\" or \"REST\".\n   * @return {RequestEncoding} Request encoding.\n   * @api\n   */\n  getRequestEncoding() {\n    return this.requestEncoding_;\n  }\n\n  /**\n   * Return the style of the WMTS source.\n   * @return {string} Style.\n   * @api\n   */\n  getStyle() {\n    return this.style_;\n  }\n\n  /**\n   * Return the version of the WMTS source.\n   * @return {string} Version.\n   * @api\n   */\n  getVersion() {\n    return this.version_;\n  }\n\n  /**\n   * @private\n   * @return {string} The key for the current dimensions.\n   */\n  getKeyForDimensions_() {\n    const res = this.urls ? this.urls.slice(0) : [];\n    for (const key in this.dimensions_) {\n      res.push(key + '-' + this.dimensions_[key]);\n    }\n    return res.join('/');\n  }\n\n  /**\n   * Update the dimensions.\n   * @param {Object} dimensions Dimensions.\n   * @api\n   */\n  updateDimensions(dimensions) {\n    Object.assign(this.dimensions_, dimensions);\n    this.setKey(this.getKeyForDimensions_());\n  }\n\n  /**\n   * @param {string} template Template.\n   * @return {import(\"../Tile.js\").UrlFunction} Tile URL function.\n   */\n  createFromWMTSTemplate(template) {\n    const requestEncoding = this.requestEncoding_;\n\n    // context property names are lower case to allow for a case insensitive\n    // replacement as some services use different naming conventions\n    const context = {\n      'layer': this.layer_,\n      'style': this.style_,\n      'tilematrixset': this.matrixSet_,\n    };\n\n    if (requestEncoding == 'KVP') {\n      Object.assign(context, {\n        'Service': 'WMTS',\n        'Request': 'GetTile',\n        'Version': this.version_,\n        'Format': this.format_,\n      });\n    }\n\n    // TODO: we may want to create our own appendParams function so that params\n    // order conforms to wmts spec guidance, and so that we can avoid to escape\n    // special template params\n\n    template =\n      requestEncoding == 'KVP'\n        ? appendParams(template, context)\n        : template.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n            return p.toLowerCase() in context ? context[p.toLowerCase()] : m;\n          });\n\n    const tileGrid = /** @type {import(\"../tilegrid/WMTS.js\").default} */ (\n      this.tileGrid\n    );\n    const dimensions = this.dimensions_;\n\n    return (\n      /**\n       * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n       * @param {number} pixelRatio Pixel ratio.\n       * @param {import(\"../proj/Projection.js\").default} projection Projection.\n       * @return {string|undefined} Tile URL.\n       */\n      function (tileCoord, pixelRatio, projection) {\n        if (!tileCoord) {\n          return undefined;\n        }\n        const localContext = {\n          'TileMatrix': tileGrid.getMatrixId(tileCoord[0]),\n          'TileCol': tileCoord[1],\n          'TileRow': tileCoord[2],\n        };\n        Object.assign(localContext, dimensions);\n        let url = template;\n        if (requestEncoding == 'KVP') {\n          url = appendParams(url, localContext);\n        } else {\n          url = url.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n            return encodeURIComponent(localContext[p]);\n          });\n        }\n        return url;\n      }\n    );\n  }\n}\n\nexport default WMTS;\n\n/**\n * Generate source options from a capabilities object.\n * @param {Object} wmtsCap An object representing the capabilities document.\n * @param {!Object} config Configuration properties for the layer.  Defaults for\n *                  the layer will apply if not provided.\n *\n * Required config properties:\n *  - layer - {string} The layer identifier.\n *\n * Optional config properties:\n *  - matrixSet - {string} The matrix set identifier, required if there is\n *       more than one matrix set in the layer capabilities.\n *  - projection - {string} The desired CRS when no matrixSet is specified.\n *       eg: \"EPSG:3857\". If the desired projection is not available,\n *       an error is thrown.\n *  - requestEncoding - {string} url encoding format for the layer. Default is\n *       the first tile url format found in the GetCapabilities response.\n *  - style - {string} The name of the style\n *  - format - {string} Image format for the layer. Default is the first\n *       format returned in the GetCapabilities response.\n *  - crossOrigin - {string|null|undefined} Cross origin. Default is `undefined`.\n * @return {Options|null} WMTS source options object or `null` if the layer was not found.\n * @api\n */\nexport function optionsFromCapabilities(wmtsCap, config) {\n  const layers = wmtsCap['Contents']['Layer'];\n  const l = layers?.find(function (elt) {\n    return elt['Identifier'] == config['layer'];\n  });\n  if (!l) {\n    return null;\n  }\n  const tileMatrixSets = wmtsCap['Contents']['TileMatrixSet'];\n  let idx;\n  if (l['TileMatrixSetLink'].length > 1) {\n    if ('projection' in config) {\n      idx = l['TileMatrixSetLink'].findIndex(function (elt) {\n        const tileMatrixSet = tileMatrixSets.find(function (el) {\n          return el['Identifier'] == elt['TileMatrixSet'];\n        });\n        const supportedCRS = tileMatrixSet['SupportedCRS'];\n        const proj1 = getProjection(supportedCRS);\n        const proj2 = getProjection(config['projection']);\n        if (proj1 && proj2) {\n          return equivalent(proj1, proj2);\n        }\n        return supportedCRS == config['projection'];\n      });\n    } else {\n      idx = l['TileMatrixSetLink'].findIndex(function (elt) {\n        return elt['TileMatrixSet'] == config['matrixSet'];\n      });\n    }\n  } else {\n    idx = 0;\n  }\n  if (idx < 0) {\n    idx = 0;\n  }\n  const matrixSet =\n    /** @type {string} */\n    (l['TileMatrixSetLink'][idx]['TileMatrixSet']);\n  const matrixLimits =\n    /** @type {Array<Object>} */\n    (l['TileMatrixSetLink'][idx]['TileMatrixSetLimits']);\n\n  let format = /** @type {string} */ (l['Format'][0]);\n  if ('format' in config) {\n    format = config['format'];\n  }\n  idx = l['Style'].findIndex(function (elt) {\n    if ('style' in config) {\n      return elt['Title'] == config['style'];\n    }\n    return elt['isDefault'];\n  });\n  if (idx < 0) {\n    idx = 0;\n  }\n  const style = /** @type {string} */ (l['Style'][idx]['Identifier']);\n\n  const dimensions = {};\n  if ('Dimension' in l) {\n    l['Dimension'].forEach(function (elt, index, array) {\n      const key = elt['Identifier'];\n      let value = elt['Default'];\n      if (value === undefined) {\n        value = elt['Value'][0];\n      }\n      dimensions[key] = value;\n    });\n  }\n\n  const matrixSets = wmtsCap['Contents']['TileMatrixSet'];\n  const matrixSetObj = matrixSets.find(function (elt) {\n    return elt['Identifier'] == matrixSet;\n  });\n\n  let projection;\n  const code = matrixSetObj['SupportedCRS'];\n  if (code) {\n    projection = getProjection(code);\n  }\n  if ('projection' in config) {\n    const projConfig = getProjection(config['projection']);\n    if (projConfig) {\n      if (!projection || equivalent(projConfig, projection)) {\n        projection = projConfig;\n      }\n    }\n  }\n\n  let wrapX = false;\n  const switchXY = projection.getAxisOrientation().startsWith('ne');\n\n  let matrix = matrixSetObj.TileMatrix[0];\n\n  // create default matrixLimit\n  let selectedMatrixLimit = {\n    MinTileCol: 0,\n    MinTileRow: 0,\n    // subtract one to end up at tile top left\n    MaxTileCol: matrix.MatrixWidth - 1,\n    MaxTileRow: matrix.MatrixHeight - 1,\n  };\n\n  //in case of matrix limits, use matrix limits to calculate extent\n  if (matrixLimits) {\n    selectedMatrixLimit = matrixLimits[matrixLimits.length - 1];\n    const m = matrixSetObj.TileMatrix.find(\n      (tileMatrixValue) =>\n        tileMatrixValue.Identifier === selectedMatrixLimit.TileMatrix ||\n        matrixSetObj.Identifier + ':' + tileMatrixValue.Identifier ===\n          selectedMatrixLimit.TileMatrix,\n    );\n    if (m) {\n      matrix = m;\n    }\n  }\n\n  const resolution =\n    (matrix.ScaleDenominator * 0.00028) / projection.getMetersPerUnit(); // WMTS 1.0.0: standardized rendering pixel size\n  const origin = switchXY\n    ? [matrix.TopLeftCorner[1], matrix.TopLeftCorner[0]]\n    : matrix.TopLeftCorner;\n  const tileSpanX = matrix.TileWidth * resolution;\n  const tileSpanY = matrix.TileHeight * resolution;\n  let matrixSetExtent = matrixSetObj['BoundingBox'];\n  if (matrixSetExtent && switchXY) {\n    matrixSetExtent = [\n      matrixSetExtent[1],\n      matrixSetExtent[0],\n      matrixSetExtent[3],\n      matrixSetExtent[2],\n    ];\n  }\n  let extent = [\n    origin[0] + tileSpanX * selectedMatrixLimit.MinTileCol,\n    // add one to get proper bottom/right coordinate\n    origin[1] - tileSpanY * (1 + selectedMatrixLimit.MaxTileRow),\n    origin[0] + tileSpanX * (1 + selectedMatrixLimit.MaxTileCol),\n    origin[1] - tileSpanY * selectedMatrixLimit.MinTileRow,\n  ];\n\n  if (\n    matrixSetExtent !== undefined &&\n    !containsExtent(matrixSetExtent, extent)\n  ) {\n    const wgs84BoundingBox = l['WGS84BoundingBox'];\n    const wgs84ProjectionExtent = getProjection('EPSG:4326').getExtent();\n    extent = matrixSetExtent;\n    if (wgs84BoundingBox) {\n      wrapX =\n        wgs84BoundingBox[0] === wgs84ProjectionExtent[0] &&\n        wgs84BoundingBox[2] === wgs84ProjectionExtent[2];\n    } else {\n      const wgs84MatrixSetExtent = transformExtent(\n        matrixSetExtent,\n        matrixSetObj['SupportedCRS'],\n        'EPSG:4326',\n      );\n      // Ignore slight deviation from the correct x limits\n      wrapX =\n        wgs84MatrixSetExtent[0] - 1e-10 <= wgs84ProjectionExtent[0] &&\n        wgs84MatrixSetExtent[2] + 1e-10 >= wgs84ProjectionExtent[2];\n    }\n  }\n\n  const tileGrid = createFromCapabilitiesMatrixSet(\n    matrixSetObj,\n    extent,\n    matrixLimits,\n  );\n\n  /** @type {!Array<string>} */\n  const urls = [];\n  let requestEncoding = config['requestEncoding'];\n  requestEncoding = requestEncoding !== undefined ? requestEncoding : '';\n\n  if (\n    'OperationsMetadata' in wmtsCap &&\n    'GetTile' in wmtsCap['OperationsMetadata']\n  ) {\n    const gets = wmtsCap['OperationsMetadata']['GetTile']['DCP']['HTTP']['Get'];\n\n    for (let i = 0, ii = gets.length; i < ii; ++i) {\n      if (gets[i]['Constraint']) {\n        const constraint = gets[i]['Constraint'].find(function (element) {\n          return element['name'] == 'GetEncoding';\n        });\n        const encodings = constraint['AllowedValues']['Value'];\n\n        if (requestEncoding === '') {\n          // requestEncoding not provided, use the first encoding from the list\n          requestEncoding = encodings[0];\n        }\n        if (requestEncoding === 'KVP') {\n          if (encodings.includes('KVP')) {\n            urls.push(/** @type {string} */ (gets[i]['href']));\n          }\n        } else {\n          break;\n        }\n      } else if (gets[i]['href']) {\n        requestEncoding = 'KVP';\n        urls.push(/** @type {string} */ (gets[i]['href']));\n      }\n    }\n  }\n  if (urls.length === 0) {\n    requestEncoding = 'REST';\n    l['ResourceURL'].forEach(function (element) {\n      if (element['resourceType'] === 'tile') {\n        format = element['format'];\n        urls.push(/** @type {string} */ (element['template']));\n      }\n    });\n  }\n\n  return {\n    urls: urls,\n    layer: config['layer'],\n    matrixSet: matrixSet,\n    format: format,\n    projection: projection,\n    requestEncoding: requestEncoding,\n    tileGrid: tileGrid,\n    style: style,\n    dimensions: dimensions,\n    wrapX: wrapX,\n    crossOrigin: config['crossOrigin'],\n  };\n}\n","/**\n * @module ol/util\n */\n\n/**\n * @return {never} Any return.\n */\nexport function abstract() {\n  throw new Error('Unimplemented abstract method.');\n}\n\n/**\n * Counter for getUid.\n * @type {number}\n * @private\n */\nlet uidCounter_ = 0;\n\n/**\n * Gets a unique ID for an object. This mutates the object so that further calls\n * with the same object as a parameter returns the same value. Unique IDs are generated\n * as a strictly increasing sequence. Adapted from goog.getUid.\n *\n * @param {Object} obj The object to get the unique ID for.\n * @return {string} The unique ID for the object.\n * @api\n */\nexport function getUid(obj) {\n  return obj.ol_uid || (obj.ol_uid = String(++uidCounter_));\n}\n\n/**\n * OpenLayers version.\n * @type {string}\n */\nexport const VERSION = '10.6.0';\n"],"names":["Object","u","encodeURIComponent","i","l","e","f","Error","String"],"mappings":"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"}