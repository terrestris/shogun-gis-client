{"version":3,"file":"7382.364a9bd82053264d.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/ol/geom/Geometry.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/geom/SimpleGeometry.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/geom/flat/transform.js"],"sourcesContent":["/**\n * @module ol/geom/Geometry\n */\nimport BaseObject from '../Object.js';\nimport {\n  createEmpty,\n  createOrUpdateEmpty,\n  getHeight,\n  returnOrUpdate,\n} from '../extent.js';\nimport {memoizeOne} from '../functions.js';\nimport {get as getProjection, getTransform} from '../proj.js';\nimport {\n  compose as composeTransform,\n  create as createTransform,\n} from '../transform.js';\nimport {abstract} from '../util.js';\nimport {transform2D} from './flat/transform.js';\n\n/**\n * @typedef {'XY' | 'XYZ' | 'XYM' | 'XYZM'} GeometryLayout\n * The coordinate layout for geometries, indicating whether a 3rd or 4th z ('Z')\n * or measure ('M') coordinate is available.\n */\n\n/**\n * @typedef {'Point' | 'LineString' | 'LinearRing' | 'Polygon' | 'MultiPoint' | 'MultiLineString' | 'MultiPolygon' | 'GeometryCollection' | 'Circle'} Type\n * The geometry type.  One of `'Point'`, `'LineString'`, `'LinearRing'`,\n * `'Polygon'`, `'MultiPoint'`, `'MultiLineString'`, `'MultiPolygon'`,\n * `'GeometryCollection'`, or `'Circle'`.\n */\n\n/**\n * @type {import(\"../transform.js\").Transform}\n */\nconst tmpTransform = createTransform();\n\n/** @type {import('../coordinate.js').Coordinate} */\nconst tmpPoint = [NaN, NaN];\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for vector geometries.\n *\n * To get notified of changes to the geometry, register a listener for the\n * generic `change` event on your geometry instance.\n *\n * @abstract\n * @api\n */\nclass Geometry extends BaseObject {\n  constructor() {\n    super();\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.extent_ = createEmpty();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.extentRevision_ = -1;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.simplifiedGeometryRevision = 0;\n\n    /**\n     * Get a transformed and simplified version of the geometry.\n     * @abstract\n     * @param {number} revision The geometry revision.\n     * @param {number} squaredTolerance Squared tolerance.\n     * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\n     * @return {Geometry} Simplified geometry.\n     */\n    this.simplifyTransformedInternal = memoizeOne(\n      (revision, squaredTolerance, transform) => {\n        if (!transform) {\n          return this.getSimplifiedGeometry(squaredTolerance);\n        }\n        const clone = this.clone();\n        clone.applyTransform(transform);\n        return clone.getSimplifiedGeometry(squaredTolerance);\n      },\n    );\n  }\n\n  /**\n   * Get a transformed and simplified version of the geometry.\n   * @abstract\n   * @param {number} squaredTolerance Squared tolerance.\n   * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\n   * @return {Geometry} Simplified geometry.\n   */\n  simplifyTransformed(squaredTolerance, transform) {\n    return this.simplifyTransformedInternal(\n      this.getRevision(),\n      squaredTolerance,\n      transform,\n    );\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @abstract\n   * @return {!Geometry} Clone.\n   */\n  clone() {\n    return abstract();\n  }\n\n  /**\n   * @abstract\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    return abstract();\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n  containsXY(x, y) {\n    return this.closestPointXY(x, y, tmpPoint, Number.MIN_VALUE) === 0;\n  }\n\n  /**\n   * Return the closest point of the geometry to the passed point as\n   * {@link module:ol/coordinate~Coordinate coordinate}.\n   * @param {import(\"../coordinate.js\").Coordinate} point Point.\n   * @param {import(\"../coordinate.js\").Coordinate} [closestPoint] Closest point.\n   * @return {import(\"../coordinate.js\").Coordinate} Closest point.\n   * @api\n   */\n  getClosestPoint(point, closestPoint) {\n    closestPoint = closestPoint ? closestPoint : [NaN, NaN];\n    this.closestPointXY(point[0], point[1], closestPoint, Infinity);\n    return closestPoint;\n  }\n\n  /**\n   * Returns true if this geometry includes the specified coordinate. If the\n   * coordinate is on the boundary of the geometry, returns false.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {boolean} Contains coordinate.\n   * @api\n   */\n  intersectsCoordinate(coordinate) {\n    return this.containsXY(coordinate[0], coordinate[1]);\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  computeExtent(extent) {\n    return abstract();\n  }\n\n  /**\n   * Get the extent of the geometry.\n   * @param {import(\"../extent.js\").Extent} [extent] Extent.\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */\n  getExtent(extent) {\n    if (this.extentRevision_ != this.getRevision()) {\n      const extent = this.computeExtent(this.extent_);\n      if (isNaN(extent[0]) || isNaN(extent[1])) {\n        createOrUpdateEmpty(extent);\n      }\n      this.extentRevision_ = this.getRevision();\n    }\n    return returnOrUpdate(this.extent_, extent);\n  }\n\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} angle Rotation angle in radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n  rotate(angle, anchor) {\n    abstract();\n  }\n\n  /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   */\n  scale(sx, sy, anchor) {\n    abstract();\n  }\n\n  /**\n   * Create a simplified version of this geometry.  For linestrings, this uses\n   * the [Douglas Peucker](https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm)\n   * algorithm.  For polygons, a quantization-based\n   * simplification is used to preserve topology.\n   * @param {number} tolerance The tolerance distance for simplification.\n   * @return {Geometry} A new, simplified version of the original geometry.\n   * @api\n   */\n  simplify(tolerance) {\n    return this.getSimplifiedGeometry(tolerance * tolerance);\n  }\n\n  /**\n   * Create a simplified version of this geometry using the Douglas Peucker\n   * algorithm.\n   * See https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm.\n   * @abstract\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {Geometry} Simplified geometry.\n   */\n  getSimplifiedGeometry(squaredTolerance) {\n    return abstract();\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @abstract\n   * @return {Type} Geometry type.\n   */\n  getType() {\n    return abstract();\n  }\n\n  /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @abstract\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   */\n  applyTransform(transformFn) {\n    abstract();\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   */\n  intersectsExtent(extent) {\n    return abstract();\n  }\n\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @abstract\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n  translate(deltaX, deltaY) {\n    abstract();\n  }\n\n  /**\n   * Transform each coordinate of the geometry from one coordinate reference\n   * system to another. The geometry is modified in place.\n   * For example, a line will be transformed to a line and a circle to a circle.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} source The current projection.  Can be a\n   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n   * @param {import(\"../proj.js\").ProjectionLike} destination The desired projection.  Can be a\n   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n   * @return {this} This geometry.  Note that original geometry is\n   *     modified in place.\n   * @api\n   */\n  transform(source, destination) {\n    /** @type {import(\"../proj/Projection.js\").default} */\n    const sourceProj = getProjection(source);\n    const transformFn =\n      sourceProj.getUnits() == 'tile-pixels'\n        ? function (inCoordinates, outCoordinates, stride) {\n            const pixelExtent = sourceProj.getExtent();\n            const projectedExtent = sourceProj.getWorldExtent();\n            const scale = getHeight(projectedExtent) / getHeight(pixelExtent);\n            composeTransform(\n              tmpTransform,\n              projectedExtent[0],\n              projectedExtent[3],\n              scale,\n              -scale,\n              0,\n              0,\n              0,\n            );\n            const transformed = transform2D(\n              inCoordinates,\n              0,\n              inCoordinates.length,\n              stride,\n              tmpTransform,\n              outCoordinates,\n            );\n            const projTransform = getTransform(sourceProj, destination);\n            if (projTransform) {\n              return projTransform(transformed, transformed, stride);\n            }\n            return transformed;\n          }\n        : getTransform(sourceProj, destination);\n    this.applyTransform(transformFn);\n    return this;\n  }\n}\n\nexport default Geometry;\n","/**\n * @module ol/geom/SimpleGeometry\n */\nimport {createOrUpdateFromFlatCoordinates, getCenter} from '../extent.js';\nimport {abstract} from '../util.js';\nimport Geometry from './Geometry.js';\nimport {rotate, scale, transform2D, translate} from './flat/transform.js';\n\n/**\n * @classdesc\n * Abstract base class; only used for creating subclasses; do not instantiate\n * in apps, as cannot be rendered.\n *\n * @abstract\n * @api\n */\nclass SimpleGeometry extends Geometry {\n  constructor() {\n    super();\n\n    /**\n     * @protected\n     * @type {import(\"./Geometry.js\").GeometryLayout}\n     */\n    this.layout = 'XY';\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.stride = 2;\n\n    /**\n     * @protected\n     * @type {Array<number>}\n     */\n    this.flatCoordinates;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   * @override\n   */\n  computeExtent(extent) {\n    return createOrUpdateFromFlatCoordinates(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      extent,\n    );\n  }\n\n  /**\n   * @abstract\n   * @return {Array<*> | null} Coordinates.\n   */\n  getCoordinates() {\n    return abstract();\n  }\n\n  /**\n   * Return the first coordinate of the geometry.\n   * @return {import(\"../coordinate.js\").Coordinate} First coordinate.\n   * @api\n   */\n  getFirstCoordinate() {\n    return this.flatCoordinates.slice(0, this.stride);\n  }\n\n  /**\n   * @return {Array<number>} Flat coordinates.\n   */\n  getFlatCoordinates() {\n    return this.flatCoordinates;\n  }\n\n  /**\n   * Return the last coordinate of the geometry.\n   * @return {import(\"../coordinate.js\").Coordinate} Last point.\n   * @api\n   */\n  getLastCoordinate() {\n    return this.flatCoordinates.slice(\n      this.flatCoordinates.length - this.stride,\n    );\n  }\n\n  /**\n   * Return the {@link import(\"./Geometry.js\").GeometryLayout layout} of the geometry.\n   * @return {import(\"./Geometry.js\").GeometryLayout} Layout.\n   * @api\n   */\n  getLayout() {\n    return this.layout;\n  }\n\n  /**\n   * Create a simplified version of this geometry using the Douglas Peucker algorithm.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {SimpleGeometry} Simplified geometry.\n   * @override\n   */\n  getSimplifiedGeometry(squaredTolerance) {\n    if (this.simplifiedGeometryRevision !== this.getRevision()) {\n      this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n      this.simplifiedGeometryRevision = this.getRevision();\n    }\n    // If squaredTolerance is negative or if we know that simplification will not\n    // have any effect then just return this.\n    if (\n      squaredTolerance < 0 ||\n      (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&\n        squaredTolerance <= this.simplifiedGeometryMaxMinSquaredTolerance)\n    ) {\n      return this;\n    }\n\n    const simplifiedGeometry =\n      this.getSimplifiedGeometryInternal(squaredTolerance);\n    const simplifiedFlatCoordinates = simplifiedGeometry.getFlatCoordinates();\n    if (simplifiedFlatCoordinates.length < this.flatCoordinates.length) {\n      return simplifiedGeometry;\n    }\n    // Simplification did not actually remove any coordinates.  We now know\n    // that any calls to getSimplifiedGeometry with a squaredTolerance less\n    // than or equal to the current squaredTolerance will also not have any\n    // effect.  This allows us to short circuit simplification (saving CPU\n    // cycles) and prevents the cache of simplified geometries from filling\n    // up with useless identical copies of this geometry (saving memory).\n    this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n    return this;\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {SimpleGeometry} Simplified geometry.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    return this;\n  }\n\n  /**\n   * @return {number} Stride.\n   */\n  getStride() {\n    return this.stride;\n  }\n\n  /**\n   * @param {import(\"./Geometry.js\").GeometryLayout} layout Layout.\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   */\n  setFlatCoordinates(layout, flatCoordinates) {\n    this.stride = getStrideForLayout(layout);\n    this.layout = layout;\n    this.flatCoordinates = flatCoordinates;\n  }\n\n  /**\n   * @abstract\n   * @param {!Array<*>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  setCoordinates(coordinates, layout) {\n    abstract();\n  }\n\n  /**\n   * @param {import(\"./Geometry.js\").GeometryLayout|undefined} layout Layout.\n   * @param {Array<*>} coordinates Coordinates.\n   * @param {number} nesting Nesting.\n   * @protected\n   */\n  setLayout(layout, coordinates, nesting) {\n    let stride;\n    if (layout) {\n      stride = getStrideForLayout(layout);\n    } else {\n      for (let i = 0; i < nesting; ++i) {\n        if (coordinates.length === 0) {\n          this.layout = 'XY';\n          this.stride = 2;\n          return;\n        }\n        coordinates = /** @type {Array<unknown>} */ (coordinates[0]);\n      }\n      stride = coordinates.length;\n      layout = getLayoutForStride(stride);\n    }\n    this.layout = layout;\n    this.stride = stride;\n  }\n\n  /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   * @api\n   * @override\n   */\n  applyTransform(transformFn) {\n    if (this.flatCoordinates) {\n      transformFn(\n        this.flatCoordinates,\n        this.flatCoordinates,\n        this.layout.startsWith('XYZ') ? 3 : 2,\n        this.stride,\n      );\n      this.changed();\n    }\n  }\n\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @param {number} angle Rotation angle in counter-clockwise radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   * @override\n   */\n  rotate(angle, anchor) {\n    const flatCoordinates = this.getFlatCoordinates();\n    if (flatCoordinates) {\n      const stride = this.getStride();\n      rotate(\n        flatCoordinates,\n        0,\n        flatCoordinates.length,\n        stride,\n        angle,\n        anchor,\n        flatCoordinates,\n      );\n      this.changed();\n    }\n  }\n\n  /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   * @override\n   */\n  scale(sx, sy, anchor) {\n    if (sy === undefined) {\n      sy = sx;\n    }\n    if (!anchor) {\n      anchor = getCenter(this.getExtent());\n    }\n    const flatCoordinates = this.getFlatCoordinates();\n    if (flatCoordinates) {\n      const stride = this.getStride();\n      scale(\n        flatCoordinates,\n        0,\n        flatCoordinates.length,\n        stride,\n        sx,\n        sy,\n        anchor,\n        flatCoordinates,\n      );\n      this.changed();\n    }\n  }\n\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   * @override\n   */\n  translate(deltaX, deltaY) {\n    const flatCoordinates = this.getFlatCoordinates();\n    if (flatCoordinates) {\n      const stride = this.getStride();\n      translate(\n        flatCoordinates,\n        0,\n        flatCoordinates.length,\n        stride,\n        deltaX,\n        deltaY,\n        flatCoordinates,\n      );\n      this.changed();\n    }\n  }\n}\n\n/**\n * @param {number} stride Stride.\n * @return {import(\"./Geometry.js\").GeometryLayout} layout Layout.\n */\nexport function getLayoutForStride(stride) {\n  let layout;\n  if (stride == 2) {\n    layout = 'XY';\n  } else if (stride == 3) {\n    layout = 'XYZ';\n  } else if (stride == 4) {\n    layout = 'XYZM';\n  }\n  return /** @type {import(\"./Geometry.js\").GeometryLayout} */ (layout);\n}\n\n/**\n * @param {import(\"./Geometry.js\").GeometryLayout} layout Layout.\n * @return {number} Stride.\n */\nexport function getStrideForLayout(layout) {\n  let stride;\n  if (layout == 'XY') {\n    stride = 2;\n  } else if (layout == 'XYZ' || layout == 'XYM') {\n    stride = 3;\n  } else if (layout == 'XYZM') {\n    stride = 4;\n  }\n  return /** @type {number} */ (stride);\n}\n\n/**\n * @param {SimpleGeometry} simpleGeometry Simple geometry.\n * @param {import(\"../transform.js\").Transform} transform Transform.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed flat coordinates.\n */\nexport function transformGeom2D(simpleGeometry, transform, dest) {\n  const flatCoordinates = simpleGeometry.getFlatCoordinates();\n  if (!flatCoordinates) {\n    return null;\n  }\n  const stride = simpleGeometry.getStride();\n  return transform2D(\n    flatCoordinates,\n    0,\n    flatCoordinates.length,\n    stride,\n    transform,\n    dest,\n  );\n}\n\nexport default SimpleGeometry;\n","/**\n * @module ol/geom/flat/transform\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../transform.js\").Transform} transform Transform.\n * @param {Array<number>} [dest] Destination.\n * @param {number} [destinationStride] Stride of destination coordinates; if unspecified, assumed to be 2.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function transform2D(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  transform,\n  dest,\n  destinationStride,\n) {\n  dest = dest ? dest : [];\n  destinationStride = destinationStride ? destinationStride : 2;\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    const x = flatCoordinates[j];\n    const y = flatCoordinates[j + 1];\n    dest[i++] = transform[0] * x + transform[2] * y + transform[4];\n    dest[i++] = transform[1] * x + transform[3] * y + transform[5];\n\n    for (let k = 2; k < destinationStride; k++) {\n      dest[i++] = flatCoordinates[j + k];\n    }\n  }\n\n  if (dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} angle Angle.\n * @param {Array<number>} anchor Rotation anchor point.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function rotate(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  angle,\n  anchor,\n  dest,\n) {\n  dest = dest ? dest : [];\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n  const anchorX = anchor[0];\n  const anchorY = anchor[1];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    const deltaX = flatCoordinates[j] - anchorX;\n    const deltaY = flatCoordinates[j + 1] - anchorY;\n    dest[i++] = anchorX + deltaX * cos - deltaY * sin;\n    dest[i++] = anchorY + deltaX * sin + deltaY * cos;\n    for (let k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n  if (dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n\n/**\n * Scale the coordinates.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} sx Scale factor in the x-direction.\n * @param {number} sy Scale factor in the y-direction.\n * @param {Array<number>} anchor Scale anchor point.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function scale(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  sx,\n  sy,\n  anchor,\n  dest,\n) {\n  dest = dest ? dest : [];\n  const anchorX = anchor[0];\n  const anchorY = anchor[1];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    const deltaX = flatCoordinates[j] - anchorX;\n    const deltaY = flatCoordinates[j + 1] - anchorY;\n    dest[i++] = anchorX + sx * deltaX;\n    dest[i++] = anchorY + sy * deltaY;\n    for (let k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n  if (dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} deltaX Delta X.\n * @param {number} deltaY Delta Y.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function translate(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  deltaX,\n  deltaY,\n  dest,\n) {\n  dest = dest ? dest : [];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    dest[i++] = flatCoordinates[j] + deltaX;\n    dest[i++] = flatCoordinates[j + 1] + deltaY;\n    for (let k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n  if (dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n"],"names":["tmpTransform","tmpPoint","NaN","Geometry","revision","squaredTolerance","transform","clone","x","y","closestPoint","minSquaredDistance","Number","point","Infinity","coordinate","extent","isNaN","angle","anchor","sx","sy","tolerance","transformFn","deltaX","deltaY","source","destination","sourceProj","inCoordinates","outCoordinates","stride","pixelExtent","projectedExtent","scale","transformed","projTransform","SimpleGeometry","simplifiedGeometry","simplifiedFlatCoordinates","layout","flatCoordinates","getStrideForLayout","coordinates","nesting","i","getLayoutForStride","undefined","transformGeom2D","simpleGeometry","dest","transform2D","offset","end","destinationStride","j","k","rotate","cos","Math","sin","anchorX","anchorY","translate"],"mappings":"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"}