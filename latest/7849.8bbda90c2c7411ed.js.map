{"version":3,"file":"7849.8bbda90c2c7411ed.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/ol/MapBrowserEvent.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/MapBrowserEventType.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/MapEvent.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/easing.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/events/condition.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/geom/Circle.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/geom/GeometryCollection.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/interaction/Draw.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/interaction/Interaction.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/interaction/Pointer.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/interaction/Property.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/util.js"],"sourcesContent":["/**\n * @module ol/MapBrowserEvent\n */\nimport MapEvent from './MapEvent.js';\n\n/**\n * @classdesc\n * Events emitted as map browser events are instances of this type.\n * See {@link module:ol/Map~Map} for which events trigger a map browser event.\n * @template {UIEvent} EVENT\n */\nclass MapBrowserEvent extends MapEvent {\n  /**\n   * @param {string} type Event type.\n   * @param {import(\"./Map.js\").default} map Map.\n   * @param {EVENT} originalEvent Original event.\n   * @param {boolean} [dragging] Is the map currently being dragged?\n   * @param {import(\"./Map.js\").FrameState} [frameState] Frame state.\n   * @param {Array<PointerEvent>} [activePointers] Active pointers.\n   */\n  constructor(type, map, originalEvent, dragging, frameState, activePointers) {\n    super(type, map, frameState);\n\n    /**\n     * The original browser event.\n     * @const\n     * @type {EVENT}\n     * @api\n     */\n    this.originalEvent = originalEvent;\n\n    /**\n     * The map pixel relative to the viewport corresponding to the original browser event.\n     * @type {?import(\"./pixel.js\").Pixel}\n     * @private\n     */\n    this.pixel_ = null;\n\n    /**\n     * The coordinate in the user projection corresponding to the original browser event.\n     * @type {?import(\"./coordinate.js\").Coordinate}\n     * @private\n     */\n    this.coordinate_ = null;\n\n    /**\n     * Indicates if the map is currently being dragged. Only set for\n     * `POINTERDRAG` and `POINTERMOVE` events. Default is `false`.\n     *\n     * @type {boolean}\n     * @api\n     */\n    this.dragging = dragging !== undefined ? dragging : false;\n\n    /**\n     * @type {Array<PointerEvent>|undefined}\n     */\n    this.activePointers = activePointers;\n  }\n\n  /**\n   * The map pixel relative to the viewport corresponding to the original event.\n   * @type {import(\"./pixel.js\").Pixel}\n   * @api\n   */\n  get pixel() {\n    if (!this.pixel_) {\n      this.pixel_ = this.map.getEventPixel(this.originalEvent);\n    }\n    return this.pixel_;\n  }\n  set pixel(pixel) {\n    this.pixel_ = pixel;\n  }\n\n  /**\n   * The coordinate corresponding to the original browser event.  This will be in the user\n   * projection if one is set.  Otherwise it will be in the view projection.\n   * @type {import(\"./coordinate.js\").Coordinate}\n   * @api\n   */\n  get coordinate() {\n    if (!this.coordinate_) {\n      this.coordinate_ = this.map.getCoordinateFromPixel(this.pixel);\n    }\n    return this.coordinate_;\n  }\n  set coordinate(coordinate) {\n    this.coordinate_ = coordinate;\n  }\n\n  /**\n   * Prevents the default browser action.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/event.preventDefault.\n   * @api\n   * @override\n   */\n  preventDefault() {\n    super.preventDefault();\n    if ('preventDefault' in this.originalEvent) {\n      /** @type {UIEvent} */ (this.originalEvent).preventDefault();\n    }\n  }\n\n  /**\n   * Prevents further propagation of the current event.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/event.stopPropagation.\n   * @api\n   * @override\n   */\n  stopPropagation() {\n    super.stopPropagation();\n    if ('stopPropagation' in this.originalEvent) {\n      /** @type {UIEvent} */ (this.originalEvent).stopPropagation();\n    }\n  }\n}\n\nexport default MapBrowserEvent;\n","/**\n * @module ol/MapBrowserEventType\n */\nimport EventType from './events/EventType.js';\n\n/**\n * Constants for event names.\n * @enum {string}\n */\nexport default {\n  /**\n   * A true single click with no dragging and no double click. Note that this\n   * event is delayed by 250 ms to ensure that it is not a double click.\n   * @event module:ol/MapBrowserEvent~MapBrowserEvent#singleclick\n   * @api\n   */\n  SINGLECLICK: 'singleclick',\n\n  /**\n   * A click with no dragging. A double click will fire two of this.\n   * @event module:ol/MapBrowserEvent~MapBrowserEvent#click\n   * @api\n   */\n  CLICK: EventType.CLICK,\n\n  /**\n   * A true double click, with no dragging.\n   * @event module:ol/MapBrowserEvent~MapBrowserEvent#dblclick\n   * @api\n   */\n  DBLCLICK: EventType.DBLCLICK,\n\n  /**\n   * Triggered when a pointer is dragged.\n   * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointerdrag\n   * @api\n   */\n  POINTERDRAG: 'pointerdrag',\n\n  /**\n   * Triggered when a pointer is moved. Note that on touch devices this is\n   * triggered when the map is panned, so is not the same as mousemove.\n   * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointermove\n   * @api\n   */\n  POINTERMOVE: 'pointermove',\n\n  POINTERDOWN: 'pointerdown',\n  POINTERUP: 'pointerup',\n  POINTEROVER: 'pointerover',\n  POINTEROUT: 'pointerout',\n  POINTERENTER: 'pointerenter',\n  POINTERLEAVE: 'pointerleave',\n  POINTERCANCEL: 'pointercancel',\n};\n\n/***\n * @typedef {'singleclick'|'click'|'dblclick'|'pointerdrag'|'pointermove'} Types\n */\n","/**\n * @module ol/MapEvent\n */\nimport Event from './events/Event.js';\n\n/**\n * @classdesc\n * Events emitted as map events are instances of this type.\n * See {@link module:ol/Map~Map} for which events trigger a map event.\n */\nclass MapEvent extends Event {\n  /**\n   * @param {string} type Event type.\n   * @param {import(\"./Map.js\").default} map Map.\n   * @param {?import(\"./Map.js\").FrameState} [frameState] Frame state.\n   */\n  constructor(type, map, frameState) {\n    super(type);\n\n    /**\n     * The map where the event occurred.\n     * @type {import(\"./Map.js\").default}\n     * @api\n     */\n    this.map = map;\n\n    /**\n     * The frame state at the time of the event.\n     * @type {?import(\"./Map.js\").FrameState}\n     * @api\n     */\n    this.frameState = frameState !== undefined ? frameState : null;\n  }\n}\n\nexport default MapEvent;\n","/**\n * @module ol/easing\n */\n\n/**\n * Start slow and speed up.\n * @param {number} t Input between 0 and 1.\n * @return {number} Output between 0 and 1.\n * @api\n */\nexport function easeIn(t) {\n  return Math.pow(t, 3);\n}\n\n/**\n * Start fast and slow down.\n * @param {number} t Input between 0 and 1.\n * @return {number} Output between 0 and 1.\n * @api\n */\nexport function easeOut(t) {\n  return 1 - easeIn(1 - t);\n}\n\n/**\n * Start slow, speed up, and then slow down again.\n * @param {number} t Input between 0 and 1.\n * @return {number} Output between 0 and 1.\n * @api\n */\nexport function inAndOut(t) {\n  return 3 * t * t - 2 * t * t * t;\n}\n\n/**\n * Maintain a constant speed over time.\n * @param {number} t Input between 0 and 1.\n * @return {number} Output between 0 and 1.\n * @api\n */\nexport function linear(t) {\n  return t;\n}\n\n/**\n * Start slow, speed up, and at the very end slow down again.  This has the\n * same general behavior as {@link module:ol/easing.inAndOut}, but the final\n * slowdown is delayed.\n * @param {number} t Input between 0 and 1.\n * @return {number} Output between 0 and 1.\n * @api\n */\nexport function upAndDown(t) {\n  if (t < 0.5) {\n    return inAndOut(2 * t);\n  }\n  return 1 - inAndOut(2 * (t - 0.5));\n}\n","/**\n * @module ol/events/condition\n */\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport {assert} from '../asserts.js';\nimport {FALSE, TRUE} from '../functions.js';\nimport {MAC, WEBKIT} from '../has.js';\n\n/**\n * A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * `{boolean}`. If the condition is met, true should be returned.\n *\n * @typedef {function(this: ?, import(\"../MapBrowserEvent.js\").default): boolean} Condition\n */\n\n/**\n * Creates a condition function that passes when all provided conditions pass.\n * @param {...Condition} var_args Conditions to check.\n * @return {Condition} Condition function.\n */\nexport function all(var_args) {\n  const conditions = arguments;\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @return {boolean} All conditions passed.\n   */\n  return function (event) {\n    let pass = true;\n    for (let i = 0, ii = conditions.length; i < ii; ++i) {\n      pass = pass && conditions[i](event);\n      if (!pass) {\n        break;\n      }\n    }\n    return pass;\n  };\n}\n\n/**\n * Return `true` if only the alt-key is pressed, `false` otherwise (e.g. when\n * additionally the shift-key is pressed).\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the alt key is pressed.\n * @api\n */\nexport const altKeyOnly = function (mapBrowserEvent) {\n  const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (\n    mapBrowserEvent.originalEvent\n  );\n  return (\n    originalEvent.altKey &&\n    !(originalEvent.metaKey || originalEvent.ctrlKey) &&\n    !originalEvent.shiftKey\n  );\n};\n\n/**\n * Return `true` if only the alt-key and shift-key is pressed, `false` otherwise\n * (e.g. when additionally the platform-modifier-key is pressed).\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the alt and shift keys are pressed.\n * @api\n */\nexport const altShiftKeysOnly = function (mapBrowserEvent) {\n  const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (\n    mapBrowserEvent.originalEvent\n  );\n  return (\n    originalEvent.altKey &&\n    !(originalEvent.metaKey || originalEvent.ctrlKey) &&\n    originalEvent.shiftKey\n  );\n};\n\n/**\n * Return `true` if the map has the focus. This condition requires a map target\n * element with a `tabindex` attribute, e.g. `<div id=\"map\" tabindex=\"1\">`.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} event Map browser event.\n * @return {boolean} The map has the focus.\n * @api\n */\nexport const focus = function (event) {\n  const targetElement = event.map.getTargetElement();\n  const rootNode = targetElement.getRootNode();\n  const activeElement = event.map.getOwnerDocument().activeElement;\n\n  return rootNode instanceof ShadowRoot\n    ? rootNode.host.contains(activeElement)\n    : targetElement.contains(activeElement);\n};\n\n/**\n * Return `true` if the map has the focus or no 'tabindex' attribute set.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} event Map browser event.\n * @return {boolean} The map container has the focus or no 'tabindex' attribute.\n */\nexport const focusWithTabindex = function (event) {\n  const targetElement = event.map.getTargetElement();\n  const rootNode = targetElement.getRootNode();\n  const tabIndexCandidate =\n    rootNode instanceof ShadowRoot ? rootNode.host : targetElement;\n\n  return tabIndexCandidate.hasAttribute('tabindex') ? focus(event) : true;\n};\n\n/**\n * Return always true.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True.\n * @api\n */\nexport const always = TRUE;\n\n/**\n * Return `true` if the event is a `click` event, `false` otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event is a map `click` event.\n * @api\n */\nexport const click = function (mapBrowserEvent) {\n  return mapBrowserEvent.type == MapBrowserEventType.CLICK;\n};\n\n/**\n * Return `true` if the event has an \"action\"-producing mouse button.\n *\n * By definition, this includes left-click on windows/linux, and left-click\n * without the ctrl key on Macs.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} The result.\n */\nexport const mouseActionButton = function (mapBrowserEvent) {\n  const originalEvent = /** @type {MouseEvent} */ (\n    mapBrowserEvent.originalEvent\n  );\n  return originalEvent.button == 0 && !(WEBKIT && MAC && originalEvent.ctrlKey);\n};\n\n/**\n * Return always false.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} False.\n * @api\n */\nexport const never = FALSE;\n\n/**\n * Return `true` if the browser event is a `pointermove` event, `false`\n * otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the browser event is a `pointermove` event.\n * @api\n */\nexport const pointerMove = function (mapBrowserEvent) {\n  return mapBrowserEvent.type == 'pointermove';\n};\n\n/**\n * Return `true` if the event is a map `singleclick` event, `false` otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event is a map `singleclick` event.\n * @api\n */\nexport const singleClick = function (mapBrowserEvent) {\n  return mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK;\n};\n\n/**\n * Return `true` if the event is a map `dblclick` event, `false` otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event is a map `dblclick` event.\n * @api\n */\nexport const doubleClick = function (mapBrowserEvent) {\n  return mapBrowserEvent.type == MapBrowserEventType.DBLCLICK;\n};\n\n/**\n * Return `true` if no modifier key (alt-, shift- or platform-modifier-key) is\n * pressed.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True only if there no modifier keys are pressed.\n * @api\n */\nexport const noModifierKeys = function (mapBrowserEvent) {\n  const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (\n    mapBrowserEvent.originalEvent\n  );\n  return (\n    !originalEvent.altKey &&\n    !(originalEvent.metaKey || originalEvent.ctrlKey) &&\n    !originalEvent.shiftKey\n  );\n};\n\n/**\n * Return `true` if only the platform-modifier-key (the meta-key on Mac,\n * ctrl-key otherwise) is pressed, `false` otherwise (e.g. when additionally\n * the shift-key is pressed).\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the platform modifier key is pressed.\n * @api\n */\nexport const platformModifierKeyOnly = function (mapBrowserEvent) {\n  const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (\n    mapBrowserEvent.originalEvent\n  );\n  return (\n    !originalEvent.altKey &&\n    (MAC ? originalEvent.metaKey : originalEvent.ctrlKey) &&\n    !originalEvent.shiftKey\n  );\n};\n\n/**\n * Return `true` if the platform-modifier-key (the meta-key on Mac,\n * ctrl-key otherwise) is pressed.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the platform modifier key is pressed.\n * @api\n */\nexport const platformModifierKey = function (mapBrowserEvent) {\n  const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (\n    mapBrowserEvent.originalEvent\n  );\n  return MAC ? originalEvent.metaKey : originalEvent.ctrlKey;\n};\n\n/**\n * Return `true` if only the shift-key is pressed, `false` otherwise (e.g. when\n * additionally the alt-key is pressed).\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the shift key is pressed.\n * @api\n */\nexport const shiftKeyOnly = function (mapBrowserEvent) {\n  const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (\n    mapBrowserEvent.originalEvent\n  );\n  return (\n    !originalEvent.altKey &&\n    !(originalEvent.metaKey || originalEvent.ctrlKey) &&\n    originalEvent.shiftKey\n  );\n};\n\n/**\n * Return `true` if the target element is not editable, i.e. not an `input`,\n * `select`, or `textarea` element and no `contenteditable` attribute is\n * set or inherited, `false` otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True only if the target element is not editable.\n * @api\n */\nexport const targetNotEditable = function (mapBrowserEvent) {\n  const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (\n    mapBrowserEvent.originalEvent\n  );\n  const tagName = /** @type {Element} */ (originalEvent.target).tagName;\n  return (\n    tagName !== 'INPUT' &&\n    tagName !== 'SELECT' &&\n    tagName !== 'TEXTAREA' &&\n    // `isContentEditable` is only available on `HTMLElement`, but it may also be a\n    // different type like `SVGElement`.\n    // @ts-ignore\n    !originalEvent.target.isContentEditable\n  );\n};\n\n/**\n * Return `true` if the event originates from a mouse device.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a mouse device.\n * @api\n */\nexport const mouseOnly = function (mapBrowserEvent) {\n  const pointerEvent = /** @type {import(\"../MapBrowserEvent\").default} */ (\n    mapBrowserEvent\n  ).originalEvent;\n  assert(\n    pointerEvent !== undefined,\n    'mapBrowserEvent must originate from a pointer event',\n  );\n  // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\n  return pointerEvent.pointerType == 'mouse';\n};\n\n/**\n * Return `true` if the event originates from a touchable device.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a touchable device.\n * @api\n */\nexport const touchOnly = function (mapBrowserEvent) {\n  const pointerEvt = /** @type {import(\"../MapBrowserEvent\").default} */ (\n    mapBrowserEvent\n  ).originalEvent;\n  assert(\n    pointerEvt !== undefined,\n    'mapBrowserEvent must originate from a pointer event',\n  );\n  // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\n  return pointerEvt.pointerType === 'touch';\n};\n\n/**\n * Return `true` if the event originates from a digital pen.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a digital pen.\n * @api\n */\nexport const penOnly = function (mapBrowserEvent) {\n  const pointerEvt = /** @type {import(\"../MapBrowserEvent\").default} */ (\n    mapBrowserEvent\n  ).originalEvent;\n  assert(\n    pointerEvt !== undefined,\n    'mapBrowserEvent must originate from a pointer event',\n  );\n  // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\n  return pointerEvt.pointerType === 'pen';\n};\n\n/**\n * Return `true` if the event originates from a primary pointer in\n * contact with the surface or if the left mouse button is pressed.\n * See https://www.w3.org/TR/pointerevents/#button-states.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a primary pointer.\n * @api\n */\nexport const primaryAction = function (mapBrowserEvent) {\n  const pointerEvent = /** @type {import(\"../MapBrowserEvent\").default} */ (\n    mapBrowserEvent\n  ).originalEvent;\n  assert(\n    pointerEvent !== undefined,\n    'mapBrowserEvent must originate from a pointer event',\n  );\n  return pointerEvent.isPrimary && pointerEvent.button === 0;\n};\n","/**\n * @module ol/geom/Circle\n */\nimport {createOrUpdate, forEachCorner, intersects} from '../extent.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {deflateCoordinate} from './flat/deflate.js';\nimport {rotate} from './flat/transform.js';\n\n/**\n * @classdesc\n * Circle geometry.\n *\n * @api\n */\nclass Circle extends SimpleGeometry {\n  /**\n   * @param {!import(\"../coordinate.js\").Coordinate} center Center.\n   *     For internal use, flat coordinates in combination with `layout` and no\n   *     `radius` are also accepted.\n   * @param {number} [radius] Radius in units of the projection.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  constructor(center, radius, layout) {\n    super();\n    if (layout !== undefined && radius === undefined) {\n      this.setFlatCoordinates(layout, center);\n    } else {\n      radius = radius ? radius : 0;\n      this.setCenterAndRadius(center, radius, layout);\n    }\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Circle} Clone.\n   * @api\n   * @override\n   */\n  clone() {\n    const circle = new Circle(\n      this.flatCoordinates.slice(),\n      undefined,\n      this.layout,\n    );\n    circle.applyProperties(this);\n    return circle;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   * @override\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    const flatCoordinates = this.flatCoordinates;\n    const dx = x - flatCoordinates[0];\n    const dy = y - flatCoordinates[1];\n    const squaredDistance = dx * dx + dy * dy;\n    if (squaredDistance < minSquaredDistance) {\n      if (squaredDistance === 0) {\n        for (let i = 0; i < this.stride; ++i) {\n          closestPoint[i] = flatCoordinates[i];\n        }\n      } else {\n        const delta = this.getRadius() / Math.sqrt(squaredDistance);\n        closestPoint[0] = flatCoordinates[0] + delta * dx;\n        closestPoint[1] = flatCoordinates[1] + delta * dy;\n        for (let i = 2; i < this.stride; ++i) {\n          closestPoint[i] = flatCoordinates[i];\n        }\n      }\n      closestPoint.length = this.stride;\n      return squaredDistance;\n    }\n    return minSquaredDistance;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   * @override\n   */\n  containsXY(x, y) {\n    const flatCoordinates = this.flatCoordinates;\n    const dx = x - flatCoordinates[0];\n    const dy = y - flatCoordinates[1];\n    return dx * dx + dy * dy <= this.getRadiusSquared_();\n  }\n\n  /**\n   * Return the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.\n   * @return {import(\"../coordinate.js\").Coordinate} Center.\n   * @api\n   */\n  getCenter() {\n    return this.flatCoordinates.slice(0, this.stride);\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   * @override\n   */\n  computeExtent(extent) {\n    const flatCoordinates = this.flatCoordinates;\n    const radius = flatCoordinates[this.stride] - flatCoordinates[0];\n    return createOrUpdate(\n      flatCoordinates[0] - radius,\n      flatCoordinates[1] - radius,\n      flatCoordinates[0] + radius,\n      flatCoordinates[1] + radius,\n      extent,\n    );\n  }\n\n  /**\n   * Return the radius of the circle.\n   * @return {number} Radius.\n   * @api\n   */\n  getRadius() {\n    return Math.sqrt(this.getRadiusSquared_());\n  }\n\n  /**\n   * @private\n   * @return {number} Radius squared.\n   */\n  getRadiusSquared_() {\n    const dx = this.flatCoordinates[this.stride] - this.flatCoordinates[0];\n    const dy = this.flatCoordinates[this.stride + 1] - this.flatCoordinates[1];\n    return dx * dx + dy * dy;\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   * @override\n   */\n  getType() {\n    return 'Circle';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   * @override\n   */\n  intersectsExtent(extent) {\n    const circleExtent = this.getExtent();\n    if (intersects(extent, circleExtent)) {\n      const center = this.getCenter();\n\n      if (extent[0] <= center[0] && extent[2] >= center[0]) {\n        return true;\n      }\n      if (extent[1] <= center[1] && extent[3] >= center[1]) {\n        return true;\n      }\n\n      return forEachCorner(extent, this.intersectsCoordinate.bind(this));\n    }\n    return false;\n  }\n\n  /**\n   * Set the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.\n   * @param {import(\"../coordinate.js\").Coordinate} center Center.\n   * @api\n   */\n  setCenter(center) {\n    const stride = this.stride;\n    const radius = this.flatCoordinates[stride] - this.flatCoordinates[0];\n    const flatCoordinates = center.slice();\n    flatCoordinates[stride] = flatCoordinates[0] + radius;\n    for (let i = 1; i < stride; ++i) {\n      flatCoordinates[stride + i] = center[i];\n    }\n    this.setFlatCoordinates(this.layout, flatCoordinates);\n    this.changed();\n  }\n\n  /**\n   * Set the center (as {@link module:ol/coordinate~Coordinate coordinate}) and the radius (as\n   * number) of the circle.\n   * @param {!import(\"../coordinate.js\").Coordinate} center Center.\n   * @param {number} radius Radius.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCenterAndRadius(center, radius, layout) {\n    this.setLayout(layout, center, 0);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    /** @type {Array<number>} */\n    const flatCoordinates = this.flatCoordinates;\n    let offset = deflateCoordinate(flatCoordinates, 0, center, this.stride);\n    flatCoordinates[offset++] = flatCoordinates[0] + radius;\n    for (let i = 1, ii = this.stride; i < ii; ++i) {\n      flatCoordinates[offset++] = flatCoordinates[i];\n    }\n    flatCoordinates.length = offset;\n    this.changed();\n  }\n\n  /**\n   * @override\n   */\n  getCoordinates() {\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  setCoordinates(coordinates, layout) {}\n\n  /**\n   * Set the radius of the circle. The radius is in the units of the projection.\n   * @param {number} radius Radius.\n   * @api\n   */\n  setRadius(radius) {\n    this.flatCoordinates[this.stride] = this.flatCoordinates[0] + radius;\n    this.changed();\n  }\n\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @param {number} angle Rotation angle in counter-clockwise radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   * @override\n   */\n  rotate(angle, anchor) {\n    const center = this.getCenter();\n    const stride = this.getStride();\n    this.setCenter(\n      rotate(center, 0, center.length, stride, angle, anchor, center),\n    );\n    this.changed();\n  }\n}\n\n/**\n * Transform each coordinate of the circle from one coordinate reference system\n * to another. The geometry is modified in place.\n * If you do not want the geometry modified in place, first clone() it and\n * then use this function on the clone.\n *\n * Internally a circle is currently represented by two points: the center of\n * the circle `[cx, cy]`, and the point to the right of the circle\n * `[cx + r, cy]`. This `transform` function just transforms these two points.\n * So the resulting geometry is also a circle, and that circle does not\n * correspond to the shape that would be obtained by transforming every point\n * of the original circle.\n *\n * @param {import(\"../proj.js\").ProjectionLike} source The current projection.  Can be a\n *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n * @param {import(\"../proj.js\").ProjectionLike} destination The desired projection.  Can be a\n *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n * @return {Circle} This geometry.  Note that original geometry is\n *     modified in place.\n * @function\n * @api\n */\nCircle.prototype.transform;\nexport default Circle;\n","/**\n * @module ol/geom/GeometryCollection\n */\nimport EventType from '../events/EventType.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport {\n  closestSquaredDistanceXY,\n  createOrUpdateEmpty,\n  extend,\n  getCenter,\n} from '../extent.js';\nimport Geometry from './Geometry.js';\n\n/**\n * @classdesc\n * An array of {@link module:ol/geom/Geometry~Geometry} objects.\n *\n * @api\n */\nclass GeometryCollection extends Geometry {\n  /**\n   * @param {Array<Geometry>} geometries Geometries.\n   */\n  constructor(geometries) {\n    super();\n\n    /**\n     * @private\n     * @type {Array<Geometry>}\n     */\n    this.geometries_ = geometries;\n\n    /**\n     * @private\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     */\n    this.changeEventsKeys_ = [];\n\n    this.listenGeometriesChange_();\n  }\n\n  /**\n   * @private\n   */\n  unlistenGeometriesChange_() {\n    this.changeEventsKeys_.forEach(unlistenByKey);\n    this.changeEventsKeys_.length = 0;\n  }\n\n  /**\n   * @private\n   */\n  listenGeometriesChange_() {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      this.changeEventsKeys_.push(\n        listen(geometries[i], EventType.CHANGE, this.changed, this),\n      );\n    }\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!GeometryCollection} Clone.\n   * @api\n   * @override\n   */\n  clone() {\n    const geometryCollection = new GeometryCollection(\n      cloneGeometries(this.geometries_),\n    );\n    geometryCollection.applyProperties(this);\n    return geometryCollection;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   * @override\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      minSquaredDistance = geometries[i].closestPointXY(\n        x,\n        y,\n        closestPoint,\n        minSquaredDistance,\n      );\n    }\n    return minSquaredDistance;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   * @override\n   */\n  containsXY(x, y) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].containsXY(x, y)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   * @override\n   */\n  computeExtent(extent) {\n    createOrUpdateEmpty(extent);\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      extend(extent, geometries[i].getExtent());\n    }\n    return extent;\n  }\n\n  /**\n   * Return the geometries that make up this geometry collection.\n   * @return {Array<Geometry>} Geometries.\n   * @api\n   */\n  getGeometries() {\n    return cloneGeometries(this.geometries_);\n  }\n\n  /**\n   * @return {Array<Geometry>} Geometries.\n   */\n  getGeometriesArray() {\n    return this.geometries_;\n  }\n\n  /**\n   * @return {Array<Geometry>} Geometries.\n   */\n  getGeometriesArrayRecursive() {\n    /** @type {Array<Geometry>} */\n    let geometriesArray = [];\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].getType() === this.getType()) {\n        geometriesArray = geometriesArray.concat(\n          /** @type {GeometryCollection} */ (\n            geometries[i]\n          ).getGeometriesArrayRecursive(),\n        );\n      } else {\n        geometriesArray.push(geometries[i]);\n      }\n    }\n    return geometriesArray;\n  }\n\n  /**\n   * Create a simplified version of this geometry using the Douglas Peucker algorithm.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {GeometryCollection} Simplified GeometryCollection.\n   * @override\n   */\n  getSimplifiedGeometry(squaredTolerance) {\n    if (this.simplifiedGeometryRevision !== this.getRevision()) {\n      this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n      this.simplifiedGeometryRevision = this.getRevision();\n    }\n    if (\n      squaredTolerance < 0 ||\n      (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&\n        squaredTolerance < this.simplifiedGeometryMaxMinSquaredTolerance)\n    ) {\n      return this;\n    }\n\n    const simplifiedGeometries = [];\n    const geometries = this.geometries_;\n    let simplified = false;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      const geometry = geometries[i];\n      const simplifiedGeometry =\n        geometry.getSimplifiedGeometry(squaredTolerance);\n      simplifiedGeometries.push(simplifiedGeometry);\n      if (simplifiedGeometry !== geometry) {\n        simplified = true;\n      }\n    }\n    if (simplified) {\n      const simplifiedGeometryCollection = new GeometryCollection(\n        simplifiedGeometries,\n      );\n      return simplifiedGeometryCollection;\n    }\n    this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n    return this;\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   * @override\n   */\n  getType() {\n    return 'GeometryCollection';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   * @override\n   */\n  intersectsExtent(extent) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].intersectsExtent(extent)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  isEmpty() {\n    return this.geometries_.length === 0;\n  }\n\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @param {number} angle Rotation angle in radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   * @override\n   */\n  rotate(angle, anchor) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].rotate(angle, anchor);\n    }\n    this.changed();\n  }\n\n  /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   * @override\n   */\n  scale(sx, sy, anchor) {\n    if (!anchor) {\n      anchor = getCenter(this.getExtent());\n    }\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].scale(sx, sy, anchor);\n    }\n    this.changed();\n  }\n\n  /**\n   * Set the geometries that make up this geometry collection.\n   * @param {Array<Geometry>} geometries Geometries.\n   * @api\n   */\n  setGeometries(geometries) {\n    this.setGeometriesArray(cloneGeometries(geometries));\n  }\n\n  /**\n   * @param {Array<Geometry>} geometries Geometries.\n   */\n  setGeometriesArray(geometries) {\n    this.unlistenGeometriesChange_();\n    this.geometries_ = geometries;\n    this.listenGeometriesChange_();\n    this.changed();\n  }\n\n  /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   * @api\n   * @override\n   */\n  applyTransform(transformFn) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].applyTransform(transformFn);\n    }\n    this.changed();\n  }\n\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   * @override\n   */\n  translate(deltaX, deltaY) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].translate(deltaX, deltaY);\n    }\n    this.changed();\n  }\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    this.unlistenGeometriesChange_();\n    super.disposeInternal();\n  }\n}\n\n/**\n * @param {Array<Geometry>} geometries Geometries.\n * @return {Array<Geometry>} Cloned geometries.\n */\nfunction cloneGeometries(geometries) {\n  return geometries.map((geometry) => geometry.clone());\n}\n\nexport default GeometryCollection;\n","/**\n * @module ol/interaction/Draw\n */\nimport Feature from '../Feature.js';\nimport MapBrowserEvent from '../MapBrowserEvent.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport {\n  distance,\n  squaredDistance as squaredCoordinateDistance,\n} from '../coordinate.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport {\n  always,\n  never,\n  noModifierKeys,\n  shiftKeyOnly,\n} from '../events/condition.js';\nimport {\n  boundingExtent,\n  getBottomLeft,\n  getBottomRight,\n  getTopLeft,\n  getTopRight,\n} from '../extent.js';\nimport {FALSE, TRUE} from '../functions.js';\nimport Circle from '../geom/Circle.js';\nimport GeometryCollection from '../geom/GeometryCollection.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon, {fromCircle, makeRegular} from '../geom/Polygon.js';\nimport {getStrideForLayout} from '../geom/SimpleGeometry.js';\nimport VectorLayer from '../layer/Vector.js';\nimport {clamp, squaredDistance, toFixed} from '../math.js';\nimport {fromUserCoordinate, getUserProjection} from '../proj.js';\nimport VectorSource from '../source/Vector.js';\nimport {createEditingStyle} from '../style/Style.js';\nimport PointerInteraction from './Pointer.js';\nimport InteractionProperty from './Property.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../geom/Geometry.js\").Type} type Geometry type of\n * the geometries being drawn with this instance.\n * @property {number} [clickTolerance=6] The maximum distance in pixels between\n * \"down\" and \"up\" for a \"up\" event to be considered a \"click\" event and\n * actually add a point/vertex to the geometry being drawn.  The default of `6`\n * was chosen for the draw interaction to behave correctly on mouse as well as\n * on touch devices.\n * @property {import(\"../Collection.js\").default<Feature>} [features]\n * Destination collection for the drawn features.\n * @property {VectorSource} [source] Destination source for\n * the drawn features.\n * @property {number} [dragVertexDelay=500] Delay in milliseconds after pointerdown\n * before the current vertex can be dragged to its exact position.\n * @property {number} [snapTolerance=12] Pixel distance for snapping to the\n * drawing finish. Must be greater than `0`.\n * @property {boolean} [stopClick=false] Stop click, singleclick, and\n * doubleclick events from firing during drawing.\n * @property {number} [maxPoints] The number of points that can be drawn before\n * a polygon ring or line string is finished. By default there is no\n * restriction.\n * @property {number} [minPoints] The number of points that must be drawn\n * before a polygon ring or line string can be finished. Default is `3` for\n * polygon rings and `2` for line strings.\n * @property {import(\"../events/condition.js\").Condition} [finishCondition] A function\n * that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether the drawing can be finished. Not used when drawing\n * POINT or MULTI_POINT geometries.\n * @property {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike} [style]\n * Style for sketch features. The draw interaction can have up to three sketch features, depending on the mode.\n * It will always contain a feature with a `Point` geometry that corresponds to the current cursor position.\n * If the mode is `LineString` or `Polygon`, and there is at least one drawn point, it will also contain a feature with\n * a `LineString` geometry that corresponds to the line between the already drawn points and the current cursor position.\n * If the mode is `Polygon`, and there is at least one drawn point, it will also contain a feature with a `Polygon`\n * geometry that corresponds to the polygon between the already drawn points and the current cursor position\n * (note that this polygon has only two points if only one point is drawn).\n * If the mode is `Circle`, and there is one point drawn, it will also contain a feature with a `Circle` geometry whose\n * center is the drawn point and the radius is determined by the distance between the drawn point and the cursor.\n * @property {GeometryFunction} [geometryFunction]\n * Function that is called when a geometry's coordinates are updated.\n * @property {string} [geometryName] Geometry name to use for features created\n * by the draw interaction.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled.\n * By default {@link module:ol/events/condition.noModifierKeys}, i.e. a click,\n * adds a vertex or deactivates freehand drawing.\n * @property {boolean} [freehand=false] Operate in freehand mode for lines,\n * polygons, and circles.  This makes the interaction always operate in freehand\n * mode and takes precedence over any `freehandCondition` option.\n * @property {import(\"../events/condition.js\").Condition} [freehandCondition]\n * Condition that activates freehand drawing for lines and polygons. This\n * function takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether that event should be handled. The\n * default is {@link module:ol/events/condition.shiftKeyOnly}, meaning that the\n * Shift key activates freehand drawing.\n * @property {boolean|import(\"../events/condition.js\").Condition} [trace=false] Trace a portion of another geometry.\n * Ignored when in freehand mode.\n * @property {VectorSource} [traceSource] Source for features to trace.  If tracing is active and a `traceSource` is\n * not provided, the interaction's `source` will be used.  Tracing requires that the interaction is configured with\n * either a `traceSource` or a `source`.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n * @property {import(\"../geom/Geometry.js\").GeometryLayout} [geometryLayout='XY'] Layout of the\n * feature geometries created by the draw interaction.\n */\n\n/**\n * Coordinate type when drawing points.\n * @typedef {import(\"../coordinate.js\").Coordinate} PointCoordType\n */\n\n/**\n * Coordinate type when drawing lines.\n * @typedef {Array<import(\"../coordinate.js\").Coordinate>} LineCoordType\n */\n\n/**\n * Coordinate type when drawing polygons.\n * @typedef {Array<Array<import(\"../coordinate.js\").Coordinate>>} PolyCoordType\n */\n\n/**\n * Types used for drawing coordinates.\n * @typedef {PointCoordType|LineCoordType|PolyCoordType} SketchCoordType\n */\n\n/**\n * @typedef {Object} TraceState\n * @property {boolean} active Tracing active.\n * @property {import(\"../pixel.js\").Pixel} [startPx] The initially clicked pixel location.\n * @property {Array<TraceTarget>} [targets] Targets available for tracing.\n * @property {number} [targetIndex] The index of the currently traced target.  A value of -1 indicates\n * that no trace target is active.\n */\n\n/**\n * @typedef {Object} TraceTarget\n * @property {Array<import(\"../coordinate.js\").Coordinate>} coordinates Target coordinates.\n * @property {boolean} ring The target coordinates are a linear ring.\n * @property {number} startIndex The index of first traced coordinate.  A fractional index represents an\n * edge intersection.  Index values for rings will wrap (may be negative or larger than coordinates length).\n * @property {number} endIndex The index of last traced coordinate.  Details from startIndex also apply here.\n */\n\n/**\n * Function that takes an array of coordinates and an optional existing geometry\n * and a projection as arguments, and returns a geometry. The optional existing\n * geometry is the geometry that is returned when the function is called without\n * a second argument.\n * @typedef {function(!SketchCoordType, import(\"../geom/SimpleGeometry.js\").default,\n *     import(\"../proj/Projection.js\").default):\n *     import(\"../geom/SimpleGeometry.js\").default} GeometryFunction\n */\n\n/**\n * @typedef {'Point' | 'LineString' | 'Polygon' | 'Circle'} Mode\n * Draw mode.  This collapses multi-part geometry types with their single-part\n * cousins.\n */\n\n/**\n * @enum {string}\n */\nconst DrawEventType = {\n  /**\n   * Triggered upon feature draw start\n   * @event DrawEvent#drawstart\n   * @api\n   */\n  DRAWSTART: 'drawstart',\n  /**\n   * Triggered upon feature draw end\n   * @event DrawEvent#drawend\n   * @api\n   */\n  DRAWEND: 'drawend',\n  /**\n   * Triggered upon feature draw abortion\n   * @event DrawEvent#drawabort\n   * @api\n   */\n  DRAWABORT: 'drawabort',\n};\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Draw~Draw} instances are\n * instances of this type.\n */\nexport class DrawEvent extends Event {\n  /**\n   * @param {DrawEventType} type Type.\n   * @param {Feature} feature The feature drawn.\n   */\n  constructor(type, feature) {\n    super(type);\n\n    /**\n     * The feature being drawn.\n     * @type {Feature}\n     * @api\n     */\n    this.feature = feature;\n  }\n}\n\n/**\n * @param {import(\"../coordinate.js\").Coordinate} coordinate The coordinate.\n * @param {Array<Feature>} features The candidate features.\n * @return {Array<TraceTarget>} The trace targets.\n */\nfunction getTraceTargets(coordinate, features) {\n  /**\n   * @type {Array<TraceTarget>}\n   */\n  const targets = [];\n\n  for (let i = 0; i < features.length; ++i) {\n    const feature = features[i];\n    const geometry = feature.getGeometry();\n    appendGeometryTraceTargets(coordinate, geometry, targets);\n  }\n\n  return targets;\n}\n\n/**\n * @param {import(\"../coordinate.js\").Coordinate} a One coordinate.\n * @param {import(\"../coordinate.js\").Coordinate} b Another coordinate.\n * @return {number} The squared distance between the two coordinates.\n */\nfunction getSquaredDistance(a, b) {\n  return squaredDistance(a[0], a[1], b[0], b[1]);\n}\n\n/**\n * @param {LineCoordType} coordinates The ring coordinates.\n * @param {number} index The index.  May be wrapped.\n * @return {import(\"../coordinate.js\").Coordinate} The coordinate.\n */\nfunction getCoordinate(coordinates, index) {\n  const count = coordinates.length;\n  if (index < 0) {\n    return coordinates[index + count];\n  }\n  if (index >= count) {\n    return coordinates[index - count];\n  }\n  return coordinates[index];\n}\n\n/**\n * Get the cumulative squared distance along a ring path.  The end index index may be \"wrapped\" and it may\n * be less than the start index to indicate the direction of travel.  The start and end index may have\n * a fractional part to indicate a point between two coordinates.\n * @param {LineCoordType} coordinates Ring coordinates.\n * @param {number} startIndex The start index.\n * @param {number} endIndex The end index.\n * @return {number} The cumulative squared distance along the ring path.\n */\nfunction getCumulativeSquaredDistance(coordinates, startIndex, endIndex) {\n  let lowIndex, highIndex;\n  if (startIndex < endIndex) {\n    lowIndex = startIndex;\n    highIndex = endIndex;\n  } else {\n    lowIndex = endIndex;\n    highIndex = startIndex;\n  }\n  const lowWholeIndex = Math.ceil(lowIndex);\n  const highWholeIndex = Math.floor(highIndex);\n\n  if (lowWholeIndex > highWholeIndex) {\n    // both start and end are on the same segment\n    const start = interpolateCoordinate(coordinates, lowIndex);\n    const end = interpolateCoordinate(coordinates, highIndex);\n    return getSquaredDistance(start, end);\n  }\n\n  let sd = 0;\n\n  if (lowIndex < lowWholeIndex) {\n    const start = interpolateCoordinate(coordinates, lowIndex);\n    const end = getCoordinate(coordinates, lowWholeIndex);\n    sd += getSquaredDistance(start, end);\n  }\n\n  if (highWholeIndex < highIndex) {\n    const start = getCoordinate(coordinates, highWholeIndex);\n    const end = interpolateCoordinate(coordinates, highIndex);\n    sd += getSquaredDistance(start, end);\n  }\n\n  for (let i = lowWholeIndex; i < highWholeIndex - 1; ++i) {\n    const start = getCoordinate(coordinates, i);\n    const end = getCoordinate(coordinates, i + 1);\n    sd += getSquaredDistance(start, end);\n  }\n\n  return sd;\n}\n\n/**\n * @param {import(\"../coordinate.js\").Coordinate} coordinate The coordinate.\n * @param {import(\"../geom/Geometry.js\").default} geometry The candidate geometry.\n * @param {Array<TraceTarget>} targets The trace targets.\n */\nfunction appendGeometryTraceTargets(coordinate, geometry, targets) {\n  if (geometry instanceof LineString) {\n    appendTraceTarget(coordinate, geometry.getCoordinates(), false, targets);\n    return;\n  }\n  if (geometry instanceof MultiLineString) {\n    const coordinates = geometry.getCoordinates();\n    for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n      appendTraceTarget(coordinate, coordinates[i], false, targets);\n    }\n    return;\n  }\n  if (geometry instanceof Polygon) {\n    const coordinates = geometry.getCoordinates();\n    for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n      appendTraceTarget(coordinate, coordinates[i], true, targets);\n    }\n    return;\n  }\n  if (geometry instanceof MultiPolygon) {\n    const polys = geometry.getCoordinates();\n    for (let i = 0, ii = polys.length; i < ii; ++i) {\n      const coordinates = polys[i];\n      for (let j = 0, jj = coordinates.length; j < jj; ++j) {\n        appendTraceTarget(coordinate, coordinates[j], true, targets);\n      }\n    }\n    return;\n  }\n  if (geometry instanceof GeometryCollection) {\n    const geometries = geometry.getGeometries();\n    for (let i = 0; i < geometries.length; ++i) {\n      appendGeometryTraceTargets(coordinate, geometries[i], targets);\n    }\n    return;\n  }\n  // other types cannot be traced\n}\n\n/**\n * @typedef {Object} TraceTargetUpdateInfo\n * @property {number} index The new target index.\n * @property {number} endIndex The new segment end index.\n */\n\n/**\n * @type {TraceTargetUpdateInfo}\n */\nconst sharedUpdateInfo = {index: -1, endIndex: NaN};\n\n/**\n * @param {import(\"../coordinate.js\").Coordinate} coordinate The coordinate.\n * @param {TraceState} traceState The trace state.\n * @param {import(\"../Map.js\").default} map The map.\n * @param {number} snapTolerance The snap tolerance.\n * @return {TraceTargetUpdateInfo} Information about the new trace target.  The returned\n * object is reused between calls and must not be modified by the caller.\n */\nfunction getTraceTargetUpdate(coordinate, traceState, map, snapTolerance) {\n  const x = coordinate[0];\n  const y = coordinate[1];\n\n  let closestTargetDistance = Infinity;\n\n  let newTargetIndex = -1;\n  let newEndIndex = NaN;\n\n  for (\n    let targetIndex = 0;\n    targetIndex < traceState.targets.length;\n    ++targetIndex\n  ) {\n    const target = traceState.targets[targetIndex];\n    const coordinates = target.coordinates;\n\n    let minSegmentDistance = Infinity;\n    let endIndex;\n    for (\n      let coordinateIndex = 0;\n      coordinateIndex < coordinates.length - 1;\n      ++coordinateIndex\n    ) {\n      const start = coordinates[coordinateIndex];\n      const end = coordinates[coordinateIndex + 1];\n      const rel = getPointSegmentRelationship(x, y, start, end);\n      if (rel.squaredDistance < minSegmentDistance) {\n        minSegmentDistance = rel.squaredDistance;\n        endIndex = coordinateIndex + rel.along;\n      }\n    }\n\n    if (minSegmentDistance < closestTargetDistance) {\n      closestTargetDistance = minSegmentDistance;\n      if (target.ring && traceState.targetIndex === targetIndex) {\n        // same target, maintain the same trace direction\n        if (target.endIndex > target.startIndex) {\n          // forward trace\n          if (endIndex < target.startIndex) {\n            endIndex += coordinates.length;\n          }\n        } else if (target.endIndex < target.startIndex) {\n          // reverse trace\n          if (endIndex > target.startIndex) {\n            endIndex -= coordinates.length;\n          }\n        }\n      }\n      newEndIndex = endIndex;\n      newTargetIndex = targetIndex;\n    }\n  }\n\n  const newTarget = traceState.targets[newTargetIndex];\n  let considerBothDirections = newTarget.ring;\n  if (traceState.targetIndex === newTargetIndex && considerBothDirections) {\n    // only consider switching trace direction if close to the start\n    const newCoordinate = interpolateCoordinate(\n      newTarget.coordinates,\n      newEndIndex,\n    );\n    const pixel = map.getPixelFromCoordinate(newCoordinate);\n    if (distance(pixel, traceState.startPx) > snapTolerance) {\n      considerBothDirections = false;\n    }\n  }\n\n  if (considerBothDirections) {\n    const coordinates = newTarget.coordinates;\n    const count = coordinates.length;\n    const startIndex = newTarget.startIndex;\n    const endIndex = newEndIndex;\n    if (startIndex < endIndex) {\n      const forwardDistance = getCumulativeSquaredDistance(\n        coordinates,\n        startIndex,\n        endIndex,\n      );\n      const reverseDistance = getCumulativeSquaredDistance(\n        coordinates,\n        startIndex,\n        endIndex - count,\n      );\n      if (reverseDistance < forwardDistance) {\n        newEndIndex -= count;\n      }\n    } else {\n      const reverseDistance = getCumulativeSquaredDistance(\n        coordinates,\n        startIndex,\n        endIndex,\n      );\n      const forwardDistance = getCumulativeSquaredDistance(\n        coordinates,\n        startIndex,\n        endIndex + count,\n      );\n      if (forwardDistance < reverseDistance) {\n        newEndIndex += count;\n      }\n    }\n  }\n\n  sharedUpdateInfo.index = newTargetIndex;\n  sharedUpdateInfo.endIndex = newEndIndex;\n  return sharedUpdateInfo;\n}\n\n/**\n * @param {import(\"../coordinate.js\").Coordinate} coordinate The clicked coordinate.\n * @param {Array<import(\"../coordinate.js\").Coordinate>} coordinates The geometry component coordinates.\n * @param {boolean} ring The coordinates represent a linear ring.\n * @param {Array<TraceTarget>} targets The trace targets.\n */\nfunction appendTraceTarget(coordinate, coordinates, ring, targets) {\n  const x = coordinate[0];\n  const y = coordinate[1];\n  for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n    const start = coordinates[i];\n    const end = coordinates[i + 1];\n    const rel = getPointSegmentRelationship(x, y, start, end);\n    if (rel.squaredDistance === 0) {\n      const index = i + rel.along;\n      targets.push({\n        coordinates: coordinates,\n        ring: ring,\n        startIndex: index,\n        endIndex: index,\n      });\n      return;\n    }\n  }\n}\n\n/**\n * @typedef {Object} PointSegmentRelationship\n * @property {number} along The closest point expressed as a fraction along the segment length.\n * @property {number} squaredDistance The squared distance of the point to the segment.\n */\n\n/**\n * @type {PointSegmentRelationship}\n */\nconst sharedRel = {along: 0, squaredDistance: 0};\n\n/**\n * @param {number} x The point x.\n * @param {number} y The point y.\n * @param {import(\"../coordinate.js\").Coordinate} start The segment start.\n * @param {import(\"../coordinate.js\").Coordinate} end The segment end.\n * @return {PointSegmentRelationship} The point segment relationship.  The returned object is\n * shared between calls and must not be modified by the caller.\n */\nfunction getPointSegmentRelationship(x, y, start, end) {\n  const x1 = start[0];\n  const y1 = start[1];\n  const x2 = end[0];\n  const y2 = end[1];\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  let along = 0;\n  let px = x1;\n  let py = y1;\n  if (dx !== 0 || dy !== 0) {\n    along = clamp(((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy), 0, 1);\n    px += dx * along;\n    py += dy * along;\n  }\n\n  sharedRel.along = along;\n  sharedRel.squaredDistance = toFixed(squaredDistance(x, y, px, py), 10);\n  return sharedRel;\n}\n\n/**\n * @param {LineCoordType} coordinates The coordinates.\n * @param {number} index The index.  May be fractional and may wrap.\n * @return {import(\"../coordinate.js\").Coordinate} The interpolated coordinate.\n */\nfunction interpolateCoordinate(coordinates, index) {\n  const count = coordinates.length;\n\n  let startIndex = Math.floor(index);\n  const along = index - startIndex;\n  if (startIndex >= count) {\n    startIndex -= count;\n  } else if (startIndex < 0) {\n    startIndex += count;\n  }\n\n  let endIndex = startIndex + 1;\n  if (endIndex >= count) {\n    endIndex -= count;\n  }\n\n  const start = coordinates[startIndex];\n  const x0 = start[0];\n  const y0 = start[1];\n  const end = coordinates[endIndex];\n  const dx = end[0] - x0;\n  const dy = end[1] - y0;\n\n  return [x0 + dx * along, y0 + dy * along];\n}\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<'drawabort'|'drawend'|'drawstart', DrawEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active'|'drawabort'|'drawend'|'drawstart', Return>} DrawOnSignature\n */\n\n/**\n * @classdesc\n * Interaction for drawing feature geometries.\n *\n * @fires DrawEvent\n * @api\n */\nclass Draw extends PointerInteraction {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    const pointerOptions = /** @type {import(\"./Pointer.js\").Options} */ (\n      options\n    );\n    if (!pointerOptions.stopDown) {\n      pointerOptions.stopDown = FALSE;\n    }\n\n    super(pointerOptions);\n\n    /***\n     * @type {DrawOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {DrawOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {DrawOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.shouldHandle_ = false;\n\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     * @private\n     */\n    this.downPx_ = null;\n\n    /**\n     * @type {ReturnType<typeof setTimeout>}\n     * @private\n     */\n    this.downTimeout_;\n\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n    this.lastDragTime_;\n\n    /**\n     * Pointer type of the last pointermove event\n     * @type {string}\n     * @private\n     */\n    this.pointerType_;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.freehand_ = false;\n\n    /**\n     * Target source for drawn features.\n     * @type {VectorSource|null}\n     * @private\n     */\n    this.source_ = options.source ? options.source : null;\n\n    /**\n     * Target collection for drawn features.\n     * @type {import(\"../Collection.js\").default<Feature>|null}\n     * @private\n     */\n    this.features_ = options.features ? options.features : null;\n\n    /**\n     * Pixel distance for snapping.\n     * @type {number}\n     * @private\n     */\n    this.snapTolerance_ = options.snapTolerance ? options.snapTolerance : 12;\n\n    /**\n     * Geometry type.\n     * @type {import(\"../geom/Geometry.js\").Type}\n     * @private\n     */\n    this.type_ = /** @type {import(\"../geom/Geometry.js\").Type} */ (\n      options.type\n    );\n\n    /**\n     * Drawing mode (derived from geometry type.\n     * @type {Mode}\n     * @private\n     */\n    this.mode_ = getMode(this.type_);\n\n    /**\n     * Stop click, singleclick, and doubleclick events from firing during drawing.\n     * Default is `false`.\n     * @type {boolean}\n     * @private\n     */\n    this.stopClick_ = !!options.stopClick;\n\n    /**\n     * The number of points that must be drawn before a polygon ring or line\n     * string can be finished.  The default is 3 for polygon rings and 2 for\n     * line strings.\n     * @type {number}\n     * @private\n     */\n    this.minPoints_ = options.minPoints\n      ? options.minPoints\n      : this.mode_ === 'Polygon'\n        ? 3\n        : 2;\n\n    /**\n     * The number of points that can be drawn before a polygon ring or line string\n     * is finished. The default is no restriction.\n     * @type {number}\n     * @private\n     */\n    this.maxPoints_ =\n      this.mode_ === 'Circle'\n        ? 2\n        : options.maxPoints\n          ? options.maxPoints\n          : Infinity;\n\n    /**\n     * A function to decide if a potential finish coordinate is permissible\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.finishCondition_ = options.finishCondition\n      ? options.finishCondition\n      : TRUE;\n\n    /**\n     * @private\n     * @type {import(\"../geom/Geometry.js\").GeometryLayout}\n     */\n    this.geometryLayout_ = options.geometryLayout\n      ? options.geometryLayout\n      : 'XY';\n\n    let geometryFunction = options.geometryFunction;\n    if (!geometryFunction) {\n      const mode = this.mode_;\n      if (mode === 'Circle') {\n        /**\n         * @param {!LineCoordType} coordinates The coordinates.\n         * @param {import(\"../geom/SimpleGeometry.js\").default|undefined} geometry Optional geometry.\n         * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n         * @return {import(\"../geom/SimpleGeometry.js\").default} A geometry.\n         */\n        geometryFunction = (coordinates, geometry, projection) => {\n          const circle = geometry\n            ? /** @type {Circle} */ (geometry)\n            : new Circle([NaN, NaN]);\n          const center = fromUserCoordinate(coordinates[0], projection);\n          const squaredLength = squaredCoordinateDistance(\n            center,\n            fromUserCoordinate(coordinates[coordinates.length - 1], projection),\n          );\n          circle.setCenterAndRadius(\n            center,\n            Math.sqrt(squaredLength),\n            this.geometryLayout_,\n          );\n          const userProjection = getUserProjection();\n          if (userProjection) {\n            circle.transform(projection, userProjection);\n          }\n          return circle;\n        };\n      } else {\n        let Constructor;\n        if (mode === 'Point') {\n          Constructor = Point;\n        } else if (mode === 'LineString') {\n          Constructor = LineString;\n        } else if (mode === 'Polygon') {\n          Constructor = Polygon;\n        }\n        /**\n         * @param {!LineCoordType} coordinates The coordinates.\n         * @param {import(\"../geom/SimpleGeometry.js\").default|undefined} geometry Optional geometry.\n         * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n         * @return {import(\"../geom/SimpleGeometry.js\").default} A geometry.\n         */\n        geometryFunction = (coordinates, geometry, projection) => {\n          if (geometry) {\n            if (mode === 'Polygon') {\n              if (coordinates[0].length) {\n                // Add a closing coordinate to match the first\n                geometry.setCoordinates(\n                  [coordinates[0].concat([coordinates[0][0]])],\n                  this.geometryLayout_,\n                );\n              } else {\n                geometry.setCoordinates([], this.geometryLayout_);\n              }\n            } else {\n              geometry.setCoordinates(coordinates, this.geometryLayout_);\n            }\n          } else {\n            geometry = new Constructor(coordinates, this.geometryLayout_);\n          }\n          return geometry;\n        };\n      }\n    }\n\n    /**\n     * @type {GeometryFunction}\n     * @private\n     */\n    this.geometryFunction_ = geometryFunction;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.dragVertexDelay_ =\n      options.dragVertexDelay !== undefined ? options.dragVertexDelay : 500;\n\n    /**\n     * Finish coordinate for the feature (first point for polygons, last point for\n     * linestrings).\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @private\n     */\n    this.finishCoordinate_ = null;\n\n    /**\n     * Sketch feature.\n     * @type {Feature<import('../geom/SimpleGeometry.js').default>}\n     * @private\n     */\n    this.sketchFeature_ = null;\n\n    /**\n     * Sketch point.\n     * @type {Feature<Point>}\n     * @private\n     */\n    this.sketchPoint_ = null;\n\n    /**\n     * Sketch coordinates. Used when drawing a line or polygon.\n     * @type {SketchCoordType}\n     * @private\n     */\n    this.sketchCoords_ = null;\n\n    /**\n     * Sketch line. Used when drawing polygon.\n     * @type {Feature<LineString>}\n     * @private\n     */\n    this.sketchLine_ = null;\n\n    /**\n     * Sketch line coordinates. Used when drawing a polygon or circle.\n     * @type {LineCoordType}\n     * @private\n     */\n    this.sketchLineCoords_ = null;\n\n    /**\n     * Squared tolerance for handling up events.  If the squared distance\n     * between a down and up event is greater than this tolerance, up events\n     * will not be handled.\n     * @type {number}\n     * @private\n     */\n    this.squaredClickTolerance_ = options.clickTolerance\n      ? options.clickTolerance * options.clickTolerance\n      : 36;\n\n    /**\n     * Draw overlay where our sketch features are drawn.\n     * @type {VectorLayer}\n     * @private\n     */\n    this.overlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: options.wrapX ? options.wrapX : false,\n      }),\n      style: options.style ? options.style : getDefaultStyleFunction(),\n      updateWhileInteracting: true,\n    });\n\n    /**\n     * Name of the geometry attribute for newly created features.\n     * @type {string|undefined}\n     * @private\n     */\n    this.geometryName_ = options.geometryName;\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : noModifierKeys;\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.freehandCondition_;\n    if (options.freehand) {\n      this.freehandCondition_ = always;\n    } else {\n      this.freehandCondition_ = options.freehandCondition\n        ? options.freehandCondition\n        : shiftKeyOnly;\n    }\n\n    /**\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n    this.traceCondition_;\n    this.setTrace(options.trace || false);\n\n    /**\n     * @type {TraceState}\n     * @private\n     */\n    this.traceState_ = {active: false};\n\n    /**\n     * @type {VectorSource|null}\n     * @private\n     */\n    this.traceSource_ = options.traceSource || options.source || null;\n\n    this.addChangeListener(InteractionProperty.ACTIVE, this.updateState_);\n  }\n\n  /**\n   * Toggle tracing mode or set a tracing condition.\n   *\n   * @param {boolean|import(\"../events/condition.js\").Condition} trace A boolean to toggle tracing mode or an event\n   *     condition that will be checked when a feature is clicked to determine if tracing should be active.\n   */\n  setTrace(trace) {\n    let condition;\n    if (!trace) {\n      condition = never;\n    } else if (trace === true) {\n      condition = always;\n    } else {\n      condition = trace;\n    }\n    this.traceCondition_ = condition;\n  }\n\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default} map Map.\n   * @override\n   */\n  setMap(map) {\n    super.setMap(map);\n    this.updateState_();\n  }\n\n  /**\n   * Get the overlay layer that this interaction renders sketch features to.\n   * @return {VectorLayer} Overlay layer.\n   * @api\n   */\n  getOverlay() {\n    return this.overlay_;\n  }\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may actually draw or finish the drawing.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @api\n   * @override\n   */\n  handleEvent(event) {\n    if (event.originalEvent.type === EventType.CONTEXTMENU) {\n      // Avoid context menu for long taps when drawing on mobile\n      event.originalEvent.preventDefault();\n    }\n    this.freehand_ = this.mode_ !== 'Point' && this.freehandCondition_(event);\n    let move = event.type === MapBrowserEventType.POINTERMOVE;\n    let pass = true;\n    if (\n      !this.freehand_ &&\n      this.lastDragTime_ &&\n      event.type === MapBrowserEventType.POINTERDRAG\n    ) {\n      const now = Date.now();\n      if (now - this.lastDragTime_ >= this.dragVertexDelay_) {\n        this.downPx_ = event.pixel;\n        this.shouldHandle_ = !this.freehand_;\n        move = true;\n      } else {\n        this.lastDragTime_ = undefined;\n      }\n      if (this.shouldHandle_ && this.downTimeout_ !== undefined) {\n        clearTimeout(this.downTimeout_);\n        this.downTimeout_ = undefined;\n      }\n    }\n    if (\n      this.freehand_ &&\n      event.type === MapBrowserEventType.POINTERDRAG &&\n      this.sketchFeature_ !== null\n    ) {\n      this.addToDrawing_(event.coordinate);\n      pass = false;\n    } else if (\n      this.freehand_ &&\n      event.type === MapBrowserEventType.POINTERDOWN\n    ) {\n      pass = false;\n    } else if (move && this.getPointerCount() < 2) {\n      pass = event.type === MapBrowserEventType.POINTERMOVE;\n      if (pass && this.freehand_) {\n        this.handlePointerMove_(event);\n        if (this.shouldHandle_) {\n          // Avoid page scrolling when freehand drawing on mobile\n          event.originalEvent.preventDefault();\n        }\n      } else if (\n        event.originalEvent.pointerType === 'mouse' ||\n        (event.type === MapBrowserEventType.POINTERDRAG &&\n          this.downTimeout_ === undefined)\n      ) {\n        this.handlePointerMove_(event);\n      }\n    } else if (event.type === MapBrowserEventType.DBLCLICK) {\n      pass = false;\n    }\n\n    return super.handleEvent(event) && pass;\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @return {boolean} If the event was consumed.\n   * @override\n   */\n  handleDownEvent(event) {\n    this.shouldHandle_ = !this.freehand_;\n\n    if (this.freehand_) {\n      this.downPx_ = event.pixel;\n      if (!this.finishCoordinate_) {\n        this.startDrawing_(event.coordinate);\n      }\n      return true;\n    }\n\n    if (!this.condition_(event)) {\n      this.lastDragTime_ = undefined;\n      return false;\n    }\n\n    this.lastDragTime_ = Date.now();\n    this.downTimeout_ = setTimeout(() => {\n      this.handlePointerMove_(\n        new MapBrowserEvent(\n          MapBrowserEventType.POINTERMOVE,\n          event.map,\n          event.originalEvent,\n          false,\n          event.frameState,\n        ),\n      );\n    }, this.dragVertexDelay_);\n    this.downPx_ = event.pixel;\n    return true;\n  }\n\n  /**\n   * @private\n   */\n  deactivateTrace_() {\n    this.traceState_ = {active: false};\n  }\n\n  /**\n   * Activate or deactivate trace state based on a browser event.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @private\n   */\n  toggleTraceState_(event) {\n    if (!this.traceSource_ || !this.traceCondition_(event)) {\n      return;\n    }\n\n    if (this.traceState_.active) {\n      this.deactivateTrace_();\n      return;\n    }\n\n    const map = this.getMap();\n    const lowerLeft = map.getCoordinateFromPixel([\n      event.pixel[0] - this.snapTolerance_,\n      event.pixel[1] + this.snapTolerance_,\n    ]);\n    const upperRight = map.getCoordinateFromPixel([\n      event.pixel[0] + this.snapTolerance_,\n      event.pixel[1] - this.snapTolerance_,\n    ]);\n    const extent = boundingExtent([lowerLeft, upperRight]);\n    const features = this.traceSource_.getFeaturesInExtent(extent);\n    if (features.length === 0) {\n      return;\n    }\n\n    const targets = getTraceTargets(event.coordinate, features);\n    if (targets.length) {\n      this.traceState_ = {\n        active: true,\n        startPx: event.pixel.slice(),\n        targets: targets,\n        targetIndex: -1,\n      };\n    }\n  }\n\n  /**\n   * @param {TraceTarget} target The trace target.\n   * @param {number} endIndex The new end index of the trace.\n   * @private\n   */\n  addOrRemoveTracedCoordinates_(target, endIndex) {\n    // three cases to handle:\n    //  1. traced in the same direction and points need adding\n    //  2. traced in the same direction and points need removing\n    //  3. traced in a new direction\n    const previouslyForward = target.startIndex <= target.endIndex;\n    const currentlyForward = target.startIndex <= endIndex;\n    if (previouslyForward === currentlyForward) {\n      // same direction\n      if (\n        (previouslyForward && endIndex > target.endIndex) ||\n        (!previouslyForward && endIndex < target.endIndex)\n      ) {\n        // case 1 - add new points\n        this.addTracedCoordinates_(target, target.endIndex, endIndex);\n      } else if (\n        (previouslyForward && endIndex < target.endIndex) ||\n        (!previouslyForward && endIndex > target.endIndex)\n      ) {\n        // case 2 - remove old points\n        this.removeTracedCoordinates_(endIndex, target.endIndex);\n      }\n    } else {\n      // case 3 - remove old points, add new points\n      this.removeTracedCoordinates_(target.startIndex, target.endIndex);\n      this.addTracedCoordinates_(target, target.startIndex, endIndex);\n    }\n  }\n\n  /**\n   * @param {number} fromIndex The start index.\n   * @param {number} toIndex The end index.\n   * @private\n   */\n  removeTracedCoordinates_(fromIndex, toIndex) {\n    if (fromIndex === toIndex) {\n      return;\n    }\n\n    let remove = 0;\n    if (fromIndex < toIndex) {\n      const start = Math.ceil(fromIndex);\n      let end = Math.floor(toIndex);\n      if (end === toIndex) {\n        end -= 1;\n      }\n      remove = end - start + 1;\n    } else {\n      const start = Math.floor(fromIndex);\n      let end = Math.ceil(toIndex);\n      if (end === toIndex) {\n        end += 1;\n      }\n      remove = start - end + 1;\n    }\n\n    if (remove > 0) {\n      this.removeLastPoints_(remove);\n    }\n  }\n\n  /**\n   * @param {TraceTarget} target The trace target.\n   * @param {number} fromIndex The start index.\n   * @param {number} toIndex The end index.\n   * @private\n   */\n  addTracedCoordinates_(target, fromIndex, toIndex) {\n    if (fromIndex === toIndex) {\n      return;\n    }\n\n    const coordinates = [];\n    if (fromIndex < toIndex) {\n      // forward trace\n      const start = Math.ceil(fromIndex);\n      let end = Math.floor(toIndex);\n      if (end === toIndex) {\n        // if end is snapped to a vertex, it will be added later\n        end -= 1;\n      }\n      for (let i = start; i <= end; ++i) {\n        coordinates.push(getCoordinate(target.coordinates, i));\n      }\n    } else {\n      // reverse trace\n      const start = Math.floor(fromIndex);\n      let end = Math.ceil(toIndex);\n      if (end === toIndex) {\n        end += 1;\n      }\n      for (let i = start; i >= end; --i) {\n        coordinates.push(getCoordinate(target.coordinates, i));\n      }\n    }\n    if (coordinates.length) {\n      this.appendCoordinates(coordinates);\n    }\n  }\n\n  /**\n   * Update the trace.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @private\n   */\n  updateTrace_(event) {\n    const traceState = this.traceState_;\n    if (!traceState.active) {\n      return;\n    }\n\n    if (traceState.targetIndex === -1) {\n      // check if we are ready to pick a target\n      if (distance(traceState.startPx, event.pixel) < this.snapTolerance_) {\n        return;\n      }\n    }\n\n    const updatedTraceTarget = getTraceTargetUpdate(\n      event.coordinate,\n      traceState,\n      this.getMap(),\n      this.snapTolerance_,\n    );\n\n    if (traceState.targetIndex !== updatedTraceTarget.index) {\n      // target changed\n      if (traceState.targetIndex !== -1) {\n        // remove points added during previous trace\n        const oldTarget = traceState.targets[traceState.targetIndex];\n        this.removeTracedCoordinates_(oldTarget.startIndex, oldTarget.endIndex);\n      }\n      // add points for the new target\n      const newTarget = traceState.targets[updatedTraceTarget.index];\n      this.addTracedCoordinates_(\n        newTarget,\n        newTarget.startIndex,\n        updatedTraceTarget.endIndex,\n      );\n    } else {\n      // target stayed the same\n      const target = traceState.targets[traceState.targetIndex];\n      this.addOrRemoveTracedCoordinates_(target, updatedTraceTarget.endIndex);\n    }\n\n    // modify the state with updated info\n    traceState.targetIndex = updatedTraceTarget.index;\n    const target = traceState.targets[traceState.targetIndex];\n    target.endIndex = updatedTraceTarget.endIndex;\n\n    // update event coordinate and pixel to match end point of final segment\n    const coordinate = interpolateCoordinate(\n      target.coordinates,\n      target.endIndex,\n    );\n    const pixel = this.getMap().getPixelFromCoordinate(coordinate);\n    event.coordinate = coordinate;\n    event.pixel = [Math.round(pixel[0]), Math.round(pixel[1])];\n  }\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @return {boolean} If the event was consumed.\n   * @override\n   */\n  handleUpEvent(event) {\n    let pass = true;\n\n    if (this.getPointerCount() === 0) {\n      if (this.downTimeout_) {\n        clearTimeout(this.downTimeout_);\n        this.downTimeout_ = undefined;\n      }\n\n      this.handlePointerMove_(event);\n      const tracing = this.traceState_.active;\n      this.toggleTraceState_(event);\n\n      if (this.shouldHandle_) {\n        const startingToDraw = !this.finishCoordinate_;\n        if (startingToDraw) {\n          this.startDrawing_(event.coordinate);\n        }\n        if (!startingToDraw && this.freehand_) {\n          this.finishDrawing();\n        } else if (\n          !this.freehand_ &&\n          (!startingToDraw || this.mode_ === 'Point')\n        ) {\n          if (this.atFinish_(event.pixel, tracing)) {\n            if (this.finishCondition_(event)) {\n              this.finishDrawing();\n            }\n          } else {\n            this.addToDrawing_(event.coordinate);\n          }\n        }\n        pass = false;\n      } else if (this.freehand_) {\n        this.abortDrawing();\n      }\n    }\n\n    if (!pass && this.stopClick_) {\n      event.preventDefault();\n    }\n    return pass;\n  }\n\n  /**\n   * Handle move events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event A move event.\n   * @private\n   */\n  handlePointerMove_(event) {\n    this.pointerType_ = event.originalEvent.pointerType;\n    if (\n      this.downPx_ &&\n      ((!this.freehand_ && this.shouldHandle_) ||\n        (this.freehand_ && !this.shouldHandle_))\n    ) {\n      const downPx = this.downPx_;\n      const clickPx = event.pixel;\n      const dx = downPx[0] - clickPx[0];\n      const dy = downPx[1] - clickPx[1];\n      const squaredDistance = dx * dx + dy * dy;\n      this.shouldHandle_ = this.freehand_\n        ? squaredDistance > this.squaredClickTolerance_\n        : squaredDistance <= this.squaredClickTolerance_;\n      if (!this.shouldHandle_) {\n        return;\n      }\n    }\n\n    if (!this.finishCoordinate_) {\n      this.createOrUpdateSketchPoint_(event.coordinate.slice());\n      return;\n    }\n\n    this.updateTrace_(event);\n    this.modifyDrawing_(event.coordinate);\n  }\n\n  /**\n   * Determine if an event is within the snapping tolerance of the start coord.\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @param {boolean} [tracing] Drawing in trace mode (only stop if at the starting point).\n   * @return {boolean} The event is within the snapping tolerance of the start.\n   * @private\n   */\n  atFinish_(pixel, tracing) {\n    let at = false;\n    if (this.sketchFeature_) {\n      let potentiallyDone = false;\n      let potentiallyFinishCoordinates = [this.finishCoordinate_];\n      const mode = this.mode_;\n      if (mode === 'Point') {\n        at = true;\n      } else if (mode === 'Circle') {\n        at = this.sketchCoords_.length === 2;\n      } else if (mode === 'LineString') {\n        potentiallyDone =\n          !tracing && this.sketchCoords_.length > this.minPoints_;\n      } else if (mode === 'Polygon') {\n        const sketchCoords = /** @type {PolyCoordType} */ (this.sketchCoords_);\n        potentiallyDone = sketchCoords[0].length > this.minPoints_;\n        potentiallyFinishCoordinates = [\n          sketchCoords[0][0],\n          sketchCoords[0][sketchCoords[0].length - 2],\n        ];\n        if (tracing) {\n          potentiallyFinishCoordinates = [sketchCoords[0][0]];\n        } else {\n          potentiallyFinishCoordinates = [\n            sketchCoords[0][0],\n            sketchCoords[0][sketchCoords[0].length - 2],\n          ];\n        }\n      }\n      if (potentiallyDone) {\n        const map = this.getMap();\n        for (let i = 0, ii = potentiallyFinishCoordinates.length; i < ii; i++) {\n          const finishCoordinate = potentiallyFinishCoordinates[i];\n          const finishPixel = map.getPixelFromCoordinate(finishCoordinate);\n          const dx = pixel[0] - finishPixel[0];\n          const dy = pixel[1] - finishPixel[1];\n          const snapTolerance = this.freehand_ ? 1 : this.snapTolerance_;\n          at = Math.sqrt(dx * dx + dy * dy) <= snapTolerance;\n          if (at) {\n            this.finishCoordinate_ = finishCoordinate;\n            break;\n          }\n        }\n      }\n    }\n    return at;\n  }\n\n  /**\n   * @param {import(\"../coordinate\").Coordinate} coordinates Coordinate.\n   * @private\n   */\n  createOrUpdateSketchPoint_(coordinates) {\n    if (!this.sketchPoint_) {\n      this.sketchPoint_ = new Feature(new Point(coordinates));\n      this.updateSketchFeatures_();\n    } else {\n      const sketchPointGeom = this.sketchPoint_.getGeometry();\n      sketchPointGeom.setCoordinates(coordinates);\n    }\n  }\n\n  /**\n   * @param {import(\"../geom/Polygon.js\").default} geometry Polygon geometry.\n   * @private\n   */\n  createOrUpdateCustomSketchLine_(geometry) {\n    if (!this.sketchLine_) {\n      this.sketchLine_ = new Feature();\n    }\n    const ring = geometry.getLinearRing(0);\n    let sketchLineGeom = this.sketchLine_.getGeometry();\n    if (!sketchLineGeom) {\n      sketchLineGeom = new LineString(\n        ring.getFlatCoordinates(),\n        ring.getLayout(),\n      );\n      this.sketchLine_.setGeometry(sketchLineGeom);\n    } else {\n      sketchLineGeom.setFlatCoordinates(\n        ring.getLayout(),\n        ring.getFlatCoordinates(),\n      );\n      sketchLineGeom.changed();\n    }\n  }\n\n  /**\n   * Start the drawing.\n   * @param {import(\"../coordinate.js\").Coordinate} start Start coordinate.\n   * @private\n   */\n  startDrawing_(start) {\n    const projection = this.getMap().getView().getProjection();\n    const stride = getStrideForLayout(this.geometryLayout_);\n    while (start.length < stride) {\n      start.push(0);\n    }\n    this.finishCoordinate_ = start;\n    if (this.mode_ === 'Point') {\n      this.sketchCoords_ = start.slice();\n    } else if (this.mode_ === 'Polygon') {\n      this.sketchCoords_ = [[start.slice(), start.slice()]];\n      this.sketchLineCoords_ = this.sketchCoords_[0];\n    } else {\n      this.sketchCoords_ = [start.slice(), start.slice()];\n    }\n    if (this.sketchLineCoords_) {\n      this.sketchLine_ = new Feature(new LineString(this.sketchLineCoords_));\n    }\n    const geometry = this.geometryFunction_(\n      this.sketchCoords_,\n      undefined,\n      projection,\n    );\n    this.sketchFeature_ = new Feature();\n    if (this.geometryName_) {\n      this.sketchFeature_.setGeometryName(this.geometryName_);\n    }\n    this.sketchFeature_.setGeometry(geometry);\n    this.updateSketchFeatures_();\n    this.dispatchEvent(\n      new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_),\n    );\n  }\n\n  /**\n   * Modify the drawing.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @private\n   */\n  modifyDrawing_(coordinate) {\n    const map = this.getMap();\n    const geometry = this.sketchFeature_.getGeometry();\n    const projection = map.getView().getProjection();\n    const stride = getStrideForLayout(this.geometryLayout_);\n    let coordinates, last;\n    while (coordinate.length < stride) {\n      coordinate.push(0);\n    }\n    if (this.mode_ === 'Point') {\n      last = this.sketchCoords_;\n    } else if (this.mode_ === 'Polygon') {\n      coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];\n      last = coordinates[coordinates.length - 1];\n      if (this.atFinish_(map.getPixelFromCoordinate(coordinate))) {\n        // snap to finish\n        coordinate = this.finishCoordinate_.slice();\n      }\n    } else {\n      coordinates = this.sketchCoords_;\n      last = coordinates[coordinates.length - 1];\n    }\n    last[0] = coordinate[0];\n    last[1] = coordinate[1];\n    this.geometryFunction_(\n      /** @type {!LineCoordType} */ (this.sketchCoords_),\n      geometry,\n      projection,\n    );\n    if (this.sketchPoint_) {\n      const sketchPointGeom = this.sketchPoint_.getGeometry();\n      sketchPointGeom.setCoordinates(coordinate);\n    }\n    if (geometry.getType() === 'Polygon' && this.mode_ !== 'Polygon') {\n      this.createOrUpdateCustomSketchLine_(/** @type {Polygon} */ (geometry));\n    } else if (this.sketchLineCoords_) {\n      const sketchLineGeom = this.sketchLine_.getGeometry();\n      sketchLineGeom.setCoordinates(this.sketchLineCoords_);\n    }\n    this.updateSketchFeatures_();\n  }\n\n  /**\n   * Add a new coordinate to the drawing.\n   * @param {!PointCoordType} coordinate Coordinate\n   * @return {Feature<import(\"../geom/SimpleGeometry.js\").default>} The sketch feature.\n   * @private\n   */\n  addToDrawing_(coordinate) {\n    const geometry = this.sketchFeature_.getGeometry();\n    const projection = this.getMap().getView().getProjection();\n    let done;\n    let coordinates;\n    const mode = this.mode_;\n    if (mode === 'LineString' || mode === 'Circle') {\n      this.finishCoordinate_ = coordinate.slice();\n      coordinates = /** @type {LineCoordType} */ (this.sketchCoords_);\n      if (coordinates.length >= this.maxPoints_) {\n        if (this.freehand_) {\n          coordinates.pop();\n        } else {\n          done = true;\n        }\n      }\n      coordinates.push(coordinate.slice());\n      this.geometryFunction_(coordinates, geometry, projection);\n    } else if (mode === 'Polygon') {\n      coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];\n      if (coordinates.length >= this.maxPoints_) {\n        if (this.freehand_) {\n          coordinates.pop();\n        } else {\n          done = true;\n        }\n      }\n      coordinates.push(coordinate.slice());\n      if (done) {\n        this.finishCoordinate_ = coordinates[0];\n      }\n      this.geometryFunction_(this.sketchCoords_, geometry, projection);\n    }\n    this.createOrUpdateSketchPoint_(coordinate.slice());\n    this.updateSketchFeatures_();\n    if (done) {\n      return this.finishDrawing();\n    }\n    return this.sketchFeature_;\n  }\n\n  /**\n   * @param {number} n The number of points to remove.\n   */\n  removeLastPoints_(n) {\n    if (!this.sketchFeature_) {\n      return;\n    }\n    const geometry = this.sketchFeature_.getGeometry();\n    const projection = this.getMap().getView().getProjection();\n    const mode = this.mode_;\n    for (let i = 0; i < n; ++i) {\n      let coordinates;\n      if (mode === 'LineString' || mode === 'Circle') {\n        coordinates = /** @type {LineCoordType} */ (this.sketchCoords_);\n        coordinates.splice(-2, 1);\n        if (coordinates.length >= 2) {\n          this.finishCoordinate_ = coordinates[coordinates.length - 2].slice();\n          const finishCoordinate = this.finishCoordinate_.slice();\n          coordinates[coordinates.length - 1] = finishCoordinate;\n          this.createOrUpdateSketchPoint_(finishCoordinate);\n        }\n        this.geometryFunction_(coordinates, geometry, projection);\n        if (geometry.getType() === 'Polygon' && this.sketchLine_) {\n          this.createOrUpdateCustomSketchLine_(\n            /** @type {Polygon} */ (geometry),\n          );\n        }\n      } else if (mode === 'Polygon') {\n        coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];\n        coordinates.splice(-2, 1);\n        const sketchLineGeom = this.sketchLine_.getGeometry();\n        if (coordinates.length >= 2) {\n          const finishCoordinate = coordinates[coordinates.length - 2].slice();\n          coordinates[coordinates.length - 1] = finishCoordinate;\n          this.createOrUpdateSketchPoint_(finishCoordinate);\n        }\n        sketchLineGeom.setCoordinates(coordinates);\n        this.geometryFunction_(this.sketchCoords_, geometry, projection);\n      }\n\n      if (coordinates.length === 1) {\n        this.abortDrawing();\n        break;\n      }\n    }\n\n    this.updateSketchFeatures_();\n  }\n\n  /**\n   * Remove last point of the feature currently being drawn. Does not do anything when\n   * drawing POINT or MULTI_POINT geometries.\n   * @api\n   */\n  removeLastPoint() {\n    this.removeLastPoints_(1);\n  }\n\n  /**\n   * Stop drawing and add the sketch feature to the target layer.\n   * The {@link module:ol/interaction/Draw~DrawEventType.DRAWEND} event is\n   * dispatched before inserting the feature.\n   * @return {Feature<import(\"../geom/SimpleGeometry.js\").default>|null} The drawn feature.\n   * @api\n   */\n  finishDrawing() {\n    const sketchFeature = this.abortDrawing_();\n    if (!sketchFeature) {\n      return null;\n    }\n    let coordinates = this.sketchCoords_;\n    const geometry = sketchFeature.getGeometry();\n    const projection = this.getMap().getView().getProjection();\n    if (this.mode_ === 'LineString') {\n      // remove the redundant last point\n      coordinates.pop();\n      this.geometryFunction_(coordinates, geometry, projection);\n    } else if (this.mode_ === 'Polygon') {\n      // remove the redundant last point in ring\n      /** @type {PolyCoordType} */ (coordinates)[0].pop();\n      this.geometryFunction_(coordinates, geometry, projection);\n      coordinates = geometry.getCoordinates();\n    }\n\n    // cast multi-part geometries\n    if (this.type_ === 'MultiPoint') {\n      sketchFeature.setGeometry(\n        new MultiPoint([/** @type {PointCoordType} */ (coordinates)]),\n      );\n    } else if (this.type_ === 'MultiLineString') {\n      sketchFeature.setGeometry(\n        new MultiLineString([/** @type {LineCoordType} */ (coordinates)]),\n      );\n    } else if (this.type_ === 'MultiPolygon') {\n      sketchFeature.setGeometry(\n        new MultiPolygon([/** @type {PolyCoordType} */ (coordinates)]),\n      );\n    }\n\n    // First dispatch event to allow full set up of feature\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWEND, sketchFeature));\n\n    // Then insert feature\n    if (this.features_) {\n      this.features_.push(sketchFeature);\n    }\n    if (this.source_) {\n      this.source_.addFeature(sketchFeature);\n    }\n    return sketchFeature;\n  }\n\n  /**\n   * Stop drawing without adding the sketch feature to the target layer.\n   * @return {Feature<import(\"../geom/SimpleGeometry.js\").default>|null} The sketch feature (or null if none).\n   * @private\n   */\n  abortDrawing_() {\n    this.finishCoordinate_ = null;\n    const sketchFeature = this.sketchFeature_;\n    this.sketchFeature_ = null;\n    this.sketchPoint_ = null;\n    this.sketchLine_ = null;\n    this.overlay_.getSource().clear(true);\n    this.deactivateTrace_();\n    return sketchFeature;\n  }\n\n  /**\n   * Stop drawing without adding the sketch feature to the target layer.\n   * @api\n   */\n  abortDrawing() {\n    const sketchFeature = this.abortDrawing_();\n    if (sketchFeature) {\n      this.dispatchEvent(new DrawEvent(DrawEventType.DRAWABORT, sketchFeature));\n    }\n  }\n\n  /**\n   * Append coordinates to the end of the geometry that is currently being drawn.\n   * This can be used when drawing LineStrings or Polygons. Coordinates will\n   * either be appended to the current LineString or the outer ring of the current\n   * Polygon. If no geometry is being drawn, a new one will be created.\n   * @param {!LineCoordType} coordinates Linear coordinates to be appended to\n   * the coordinate array.\n   * @api\n   */\n  appendCoordinates(coordinates) {\n    const mode = this.mode_;\n    const newDrawing = !this.sketchFeature_;\n    if (newDrawing) {\n      this.startDrawing_(coordinates[0]);\n    }\n    /** @type {LineCoordType} */\n    let sketchCoords;\n    if (mode === 'LineString' || mode === 'Circle') {\n      sketchCoords = /** @type {LineCoordType} */ (this.sketchCoords_);\n    } else if (mode === 'Polygon') {\n      sketchCoords =\n        this.sketchCoords_ && this.sketchCoords_.length\n          ? /** @type {PolyCoordType} */ (this.sketchCoords_)[0]\n          : [];\n    } else {\n      return;\n    }\n\n    if (newDrawing) {\n      sketchCoords.shift();\n    }\n\n    // Remove last coordinate from sketch drawing (this coordinate follows cursor position)\n    sketchCoords.pop();\n\n    // Append coordinate list\n    for (let i = 0; i < coordinates.length; i++) {\n      this.addToDrawing_(coordinates[i]);\n    }\n\n    const ending = coordinates[coordinates.length - 1];\n    // Duplicate last coordinate for sketch drawing (cursor position)\n    this.sketchFeature_ = this.addToDrawing_(ending);\n    this.modifyDrawing_(ending);\n  }\n\n  /**\n   * Initiate draw mode by starting from an existing geometry which will\n   * receive new additional points. This only works on features with\n   * `LineString` geometries, where the interaction will extend lines by adding\n   * points to the end of the coordinates array.\n   * This will change the original feature, instead of drawing a copy.\n   *\n   * The function will dispatch a `drawstart` event.\n   *\n   * @param {!Feature<LineString>} feature Feature to be extended.\n   * @api\n   */\n  extend(feature) {\n    const geometry = feature.getGeometry();\n    const lineString = geometry;\n    this.sketchFeature_ = feature;\n    this.sketchCoords_ = lineString.getCoordinates();\n    const last = this.sketchCoords_[this.sketchCoords_.length - 1];\n    this.finishCoordinate_ = last.slice();\n    this.sketchCoords_.push(last.slice());\n    this.sketchPoint_ = new Feature(new Point(last));\n    this.updateSketchFeatures_();\n    this.dispatchEvent(\n      new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_),\n    );\n  }\n\n  /**\n   * Redraw the sketch features.\n   * @private\n   */\n  updateSketchFeatures_() {\n    const sketchFeatures = [];\n    if (this.sketchFeature_) {\n      sketchFeatures.push(this.sketchFeature_);\n    }\n    if (this.sketchLine_) {\n      sketchFeatures.push(this.sketchLine_);\n    }\n    if (this.sketchPoint_) {\n      sketchFeatures.push(this.sketchPoint_);\n    }\n    const overlaySource = this.overlay_.getSource();\n    overlaySource.clear(true);\n    overlaySource.addFeatures(sketchFeatures);\n  }\n\n  /**\n   * @private\n   */\n  updateState_() {\n    const map = this.getMap();\n    const active = this.getActive();\n    if (!map || !active) {\n      this.abortDrawing();\n    }\n    this.overlay_.setMap(active ? map : null);\n  }\n}\n\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\nfunction getDefaultStyleFunction() {\n  const styles = createEditingStyle();\n  return function (feature, resolution) {\n    return styles[feature.getGeometry().getType()];\n  };\n}\n\n/**\n * Create a `geometryFunction` for `type: 'Circle'` that will create a regular\n * polygon with a user specified number of sides and start angle instead of a\n * {@link import(\"../geom/Circle.js\").Circle} geometry.\n * @param {number} [sides] Number of sides of the regular polygon.\n *     Default is 32.\n * @param {number} [angle] Angle of the first point in counter-clockwise\n *     radians. 0 means East.\n *     Default is the angle defined by the heading from the center of the\n *     regular polygon to the current pointer position.\n * @return {GeometryFunction} Function that draws a polygon.\n * @api\n */\nexport function createRegularPolygon(sides, angle) {\n  return function (coordinates, geometry, projection) {\n    const center = fromUserCoordinate(\n      /** @type {LineCoordType} */ (coordinates)[0],\n      projection,\n    );\n    const end = fromUserCoordinate(\n      /** @type {LineCoordType} */ (coordinates)[coordinates.length - 1],\n      projection,\n    );\n    const radius = Math.sqrt(squaredCoordinateDistance(center, end));\n    geometry = geometry || fromCircle(new Circle(center), sides);\n\n    let internalAngle = angle;\n    if (!angle && angle !== 0) {\n      const x = end[0] - center[0];\n      const y = end[1] - center[1];\n      internalAngle = Math.atan2(y, x);\n    }\n    makeRegular(\n      /** @type {Polygon} */ (geometry),\n      center,\n      radius,\n      internalAngle,\n    );\n\n    const userProjection = getUserProjection();\n    if (userProjection) {\n      geometry.transform(projection, userProjection);\n    }\n    return geometry;\n  };\n}\n\n/**\n * Create a `geometryFunction` that will create a box-shaped polygon (aligned\n * with the coordinate system axes).  Use this with the draw interaction and\n * `type: 'Circle'` to return a box instead of a circle geometry.\n * @return {GeometryFunction} Function that draws a box-shaped polygon.\n * @api\n */\nexport function createBox() {\n  return function (coordinates, geometry, projection) {\n    const extent = boundingExtent(\n      /** @type {LineCoordType} */ ([\n        coordinates[0],\n        coordinates[coordinates.length - 1],\n      ]).map(function (coordinate) {\n        return fromUserCoordinate(coordinate, projection);\n      }),\n    );\n    const boxCoordinates = [\n      [\n        getBottomLeft(extent),\n        getBottomRight(extent),\n        getTopRight(extent),\n        getTopLeft(extent),\n        getBottomLeft(extent),\n      ],\n    ];\n    if (geometry) {\n      geometry.setCoordinates(boxCoordinates);\n    } else {\n      geometry = new Polygon(boxCoordinates);\n    }\n    const userProjection = getUserProjection();\n    if (userProjection) {\n      geometry.transform(projection, userProjection);\n    }\n    return geometry;\n  };\n}\n\n/**\n * Get the drawing mode.  The mode for multi-part geometries is the same as for\n * their single-part cousins.\n * @param {import(\"../geom/Geometry.js\").Type} type Geometry type.\n * @return {Mode} Drawing mode.\n */\nfunction getMode(type) {\n  switch (type) {\n    case 'Point':\n    case 'MultiPoint':\n      return 'Point';\n    case 'LineString':\n    case 'MultiLineString':\n      return 'LineString';\n    case 'Polygon':\n    case 'MultiPolygon':\n      return 'Polygon';\n    case 'Circle':\n      return 'Circle';\n    default:\n      throw new Error('Invalid type: ' + type);\n  }\n}\n\nexport default Draw;\n","/**\n * @module ol/interaction/Interaction\n */\nimport BaseObject from '../Object.js';\nimport {easeOut, linear} from '../easing.js';\nimport InteractionProperty from './Property.js';\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active', Return>} InteractionOnSignature\n */\n\n/**\n * Object literal with config options for interactions.\n * @typedef {Object} InteractionOptions\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleEvent]\n * Method called by the map to notify the interaction that a browser event was\n * dispatched to the map. If the function returns a falsy value, propagation of\n * the event to other interactions in the map's interactions chain will be\n * prevented (this includes functions with no explicit return). The interactions\n * are traversed in reverse order of the interactions collection of the map.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * User actions that change the state of the map. Some are similar to controls,\n * but are not associated with a DOM element.\n * For example, {@link module:ol/interaction/KeyboardZoom~KeyboardZoom} is\n * functionally the same as {@link module:ol/control/Zoom~Zoom}, but triggered\n * by a keyboard event not a button element event.\n * Although interactions do not have a DOM element, some of them do render\n * vectors and so are visible on the screen.\n * @api\n */\nclass Interaction extends BaseObject {\n  /**\n   * @param {InteractionOptions} [options] Options.\n   */\n  constructor(options) {\n    super();\n\n    /***\n     * @type {InteractionOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {InteractionOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {InteractionOnSignature<void>}\n     */\n    this.un;\n\n    if (options && options.handleEvent) {\n      this.handleEvent = options.handleEvent;\n    }\n\n    /**\n     * @private\n     * @type {import(\"../Map.js\").default|null}\n     */\n    this.map_ = null;\n\n    this.setActive(true);\n  }\n\n  /**\n   * Return whether the interaction is currently active.\n   * @return {boolean} `true` if the interaction is active, `false` otherwise.\n   * @observable\n   * @api\n   */\n  getActive() {\n    return /** @type {boolean} */ (this.get(InteractionProperty.ACTIVE));\n  }\n\n  /**\n   * Get the map associated with this interaction.\n   * @return {import(\"../Map.js\").default|null} Map.\n   * @api\n   */\n  getMap() {\n    return this.map_;\n  }\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event}.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @api\n   */\n  handleEvent(mapBrowserEvent) {\n    return true;\n  }\n\n  /**\n   * Activate or deactivate the interaction.\n   * @param {boolean} active Active.\n   * @observable\n   * @api\n   */\n  setActive(active) {\n    this.set(InteractionProperty.ACTIVE, active);\n  }\n\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   */\n  setMap(map) {\n    this.map_ = map;\n  }\n}\n\n/**\n * @param {import(\"../View.js\").default} view View.\n * @param {import(\"../coordinate.js\").Coordinate} delta Delta.\n * @param {number} [duration] Duration.\n */\nexport function pan(view, delta, duration) {\n  const currentCenter = view.getCenterInternal();\n  if (currentCenter) {\n    const center = [currentCenter[0] + delta[0], currentCenter[1] + delta[1]];\n    view.animateInternal({\n      duration: duration !== undefined ? duration : 250,\n      easing: linear,\n      center: view.getConstrainedCenter(center),\n    });\n  }\n}\n\n/**\n * @param {import(\"../View.js\").default} view View.\n * @param {number} delta Delta from previous zoom level.\n * @param {import(\"../coordinate.js\").Coordinate} [anchor] Anchor coordinate in the user projection.\n * @param {number} [duration] Duration.\n */\nexport function zoomByDelta(view, delta, anchor, duration) {\n  const currentZoom = view.getZoom();\n\n  if (currentZoom === undefined) {\n    return;\n  }\n\n  const newZoom = view.getConstrainedZoom(currentZoom + delta);\n  const newResolution = view.getResolutionForZoom(newZoom);\n\n  if (view.getAnimating()) {\n    view.cancelAnimations();\n  }\n  view.animate({\n    resolution: newResolution,\n    anchor: anchor,\n    duration: duration !== undefined ? duration : 250,\n    easing: easeOut,\n  });\n}\n\nexport default Interaction;\n","/**\n * @module ol/interaction/Pointer\n */\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport Interaction from './Interaction.js';\n\n/**\n * @typedef {Object} Options\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleDownEvent]\n * Function handling \"down\" events. If the function returns `true` then a drag\n * sequence is started.\n * @property {function(import(\"../MapBrowserEvent.js\").default):void} [handleDragEvent]\n * Function handling \"drag\" events. This function is called on \"move\" events\n * during a drag sequence.\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleEvent]\n * Method called by the map to notify the interaction that a browser event was\n * dispatched to the map. The function may return `false` to prevent the\n * propagation of the event to other interactions in the map's interactions\n * chain.\n * @property {function(import(\"../MapBrowserEvent.js\").default):void} [handleMoveEvent]\n * Function handling \"move\" events. This function is called on \"move\" events.\n * This functions is also called during a drag sequence, so during a drag\n * sequence both the `handleDragEvent` function and this function are called.\n * If `handleDownEvent` is defined and it returns true this function will not\n * be called during a drag sequence.\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleUpEvent]\n *  Function handling \"up\" events. If the function returns `false` then the\n * current drag sequence is stopped.\n * @property {function(boolean):boolean} [stopDown]\n * Should the down event be propagated to other interactions, or should be\n * stopped?\n */\n\n/**\n * @classdesc\n * Base class that calls user-defined functions on `down`, `move` and `up`\n * events. This class also manages \"drag sequences\".\n *\n * When the `handleDownEvent` user function returns `true` a drag sequence is\n * started. During a drag sequence the `handleDragEvent` user function is\n * called on `move` events. The drag sequence ends when the `handleUpEvent`\n * user function is called and returns `false`.\n * @api\n */\nclass PointerInteraction extends Interaction {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super(\n      /** @type {import(\"./Interaction.js\").InteractionOptions} */ (options),\n    );\n\n    if (options.handleDownEvent) {\n      this.handleDownEvent = options.handleDownEvent;\n    }\n\n    if (options.handleDragEvent) {\n      this.handleDragEvent = options.handleDragEvent;\n    }\n\n    if (options.handleMoveEvent) {\n      this.handleMoveEvent = options.handleMoveEvent;\n    }\n\n    if (options.handleUpEvent) {\n      this.handleUpEvent = options.handleUpEvent;\n    }\n\n    if (options.stopDown) {\n      this.stopDown = options.stopDown;\n    }\n\n    /**\n     * @type {boolean}\n     * @protected\n     */\n    this.handlingDownUpSequence = false;\n\n    /**\n     * @type {Array<PointerEvent>}\n     * @protected\n     */\n    this.targetPointers = [];\n  }\n\n  /**\n   * Returns the current number of pointers involved in the interaction,\n   * e.g. `2` when two fingers are used.\n   * @return {number} The number of pointers.\n   * @api\n   */\n  getPointerCount() {\n    return this.targetPointers.length;\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   * @protected\n   */\n  handleDownEvent(mapBrowserEvent) {\n    return false;\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @protected\n   */\n  handleDragEvent(mapBrowserEvent) {}\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may call into\n   * other functions, if event sequences like e.g. 'drag' or 'down-up' etc. are\n   * detected.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @api\n   * @override\n   */\n  handleEvent(mapBrowserEvent) {\n    if (!mapBrowserEvent.originalEvent) {\n      return true;\n    }\n\n    let stopEvent = false;\n    this.updateTrackedPointers_(mapBrowserEvent);\n    if (this.handlingDownUpSequence) {\n      if (mapBrowserEvent.type == MapBrowserEventType.POINTERDRAG) {\n        this.handleDragEvent(mapBrowserEvent);\n        // prevent page scrolling during dragging\n        mapBrowserEvent.originalEvent.preventDefault();\n      } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {\n        const handledUp = this.handleUpEvent(mapBrowserEvent);\n        this.handlingDownUpSequence =\n          handledUp && this.targetPointers.length > 0;\n      }\n    } else {\n      if (mapBrowserEvent.type == MapBrowserEventType.POINTERDOWN) {\n        const handled = this.handleDownEvent(mapBrowserEvent);\n        this.handlingDownUpSequence = handled;\n        stopEvent = this.stopDown(handled);\n      } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE) {\n        this.handleMoveEvent(mapBrowserEvent);\n      }\n    }\n    return !stopEvent;\n  }\n\n  /**\n   * Handle pointer move events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @protected\n   */\n  handleMoveEvent(mapBrowserEvent) {}\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   * @protected\n   */\n  handleUpEvent(mapBrowserEvent) {\n    return false;\n  }\n\n  /**\n   * This function is used to determine if \"down\" events should be propagated\n   * to other interactions or should be stopped.\n   * @param {boolean} handled Was the event handled by the interaction?\n   * @return {boolean} Should the `down` event be stopped?\n   */\n  stopDown(handled) {\n    return handled;\n  }\n\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @private\n   */\n  updateTrackedPointers_(mapBrowserEvent) {\n    if (mapBrowserEvent.activePointers) {\n      this.targetPointers = mapBrowserEvent.activePointers;\n    }\n  }\n}\n\n/**\n * @param {Array<PointerEvent>} pointerEvents List of events.\n * @return {{clientX: number, clientY: number}} Centroid pixel.\n */\nexport function centroid(pointerEvents) {\n  const length = pointerEvents.length;\n  let clientX = 0;\n  let clientY = 0;\n  for (let i = 0; i < length; i++) {\n    clientX += pointerEvents[i].clientX;\n    clientY += pointerEvents[i].clientY;\n  }\n  return {clientX: clientX / length, clientY: clientY / length};\n}\n\nexport default PointerInteraction;\n","/**\n * @module ol/interaction/Property\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  ACTIVE: 'active',\n};\n","/**\n * @module ol/util\n */\n\n/**\n * @return {never} Any return.\n */\nexport function abstract() {\n  throw new Error('Unimplemented abstract method.');\n}\n\n/**\n * Counter for getUid.\n * @type {number}\n * @private\n */\nlet uidCounter_ = 0;\n\n/**\n * Gets a unique ID for an object. This mutates the object so that further calls\n * with the same object as a parameter returns the same value. Unique IDs are generated\n * as a strictly increasing sequence. Adapted from goog.getUid.\n *\n * @param {Object} obj The object to get the unique ID for.\n * @return {string} The unique ID for the object.\n * @api\n */\nexport function getUid(obj) {\n  return obj.ol_uid || (obj.ol_uid = String(++uidCounter_));\n}\n\n/**\n * OpenLayers version.\n * @type {string}\n */\nexport const VERSION = '10.4.0';\n"],"names":["MapBrowserEvent","type","map","originalEvent","dragging","frameState","activePointers","undefined","pixel","coordinate","MapEvent","easeIn","t","Math","easeOut","inAndOut","linear","upAndDown","all","var_args","conditions","arguments","event","pass","i","ii","altKeyOnly","mapBrowserEvent","altShiftKeysOnly","focus","targetElement","rootNode","activeElement","ShadowRoot","focusWithTabindex","tabIndexCandidate","always","click","mouseActionButton","never","pointerMove","singleClick","doubleClick","noModifierKeys","platformModifierKeyOnly","platformModifierKey","shiftKeyOnly","targetNotEditable","tagName","mouseOnly","pointerEvent","touchOnly","pointerEvt","penOnly","primaryAction","Circle","center","radius","layout","circle","x","y","closestPoint","minSquaredDistance","flatCoordinates","dx","dy","squaredDistance","delta","extent","circleExtent","stride","offset","coordinates","angle","anchor","GeometryCollection","geometries","geometryCollection","cloneGeometries","geometriesArray","squaredTolerance","simplifiedGeometries","simplified","geometry","simplifiedGeometry","sx","sy","transformFn","deltaX","deltaY","DrawEventType","DrawEvent","feature","getSquaredDistance","a","b","getCoordinate","index","count","getCumulativeSquaredDistance","startIndex","endIndex","lowIndex","highIndex","lowWholeIndex","highWholeIndex","interpolateCoordinate","sd","sharedUpdateInfo","NaN","appendTraceTarget","ring","targets","rel","getPointSegmentRelationship","sharedRel","start","end","x1","y1","x2","y2","along","px","py","x0","y0","Draw","options","pointerOptions","getMode","Error","Infinity","geometryFunction","mode","projection","squaredLength","userProjection","Constructor","getDefaultStyleFunction","styles","resolution","trace","condition","move","now","Date","clearTimeout","setTimeout","lowerLeft","upperRight","features","getTraceTargets","appendGeometryTraceTargets","polys","j","jj","target","previouslyForward","fromIndex","toIndex","remove","traceState","updatedTraceTarget","getTraceTargetUpdate","snapTolerance","closestTargetDistance","newTargetIndex","newEndIndex","targetIndex","minSegmentDistance","coordinateIndex","newTarget","considerBothDirections","newCoordinate","forwardDistance","reverseDistance","oldTarget","tracing","startingToDraw","downPx","clickPx","at","potentiallyDone","potentiallyFinishCoordinates","sketchCoords","finishCoordinate","finishPixel","sketchPointGeom","sketchLineGeom","last","done","n","sketchFeature","newDrawing","ending","lineString","sketchFeatures","overlaySource","active","createRegularPolygon","sides","internalAngle","createBox","boxCoordinates","Interaction","pan","view","duration","currentCenter","zoomByDelta","currentZoom","newZoom","newResolution","PointerInteraction","stopEvent","handledUp","handled","centroid","pointerEvents","length","clientX","clientY","abstract","uidCounter_","getUid","obj","String","VERSION"],"mappings":"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"}