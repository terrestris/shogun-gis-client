{"version":3,"file":"681.9cf59ad696cff33d.js","sources":["webpack://@terrestris/shogun-gis-client/./src/hooks/useAppDispatch.ts","webpack://@terrestris/shogun-gis-client/./src/hooks/useAppSelector.ts","webpack://@terrestris/shogun-gis-client/./src/components/AddLayerModal/index.tsx","webpack://@terrestris/shogun-gis-client/./src/hooks/usePlugins.ts","webpack://@terrestris/shogun-gis-client/./src/components/BasicMapComponent/index.tsx","webpack://@terrestris/shogun-gis-client/./src/plugin/index.ts","webpack://@terrestris/shogun-gis-client/./src/components/CookieBanner/index.tsx","webpack://@terrestris/shogun-gis-client/./src/hooks/useExecuteWfsTransaction.ts","webpack://@terrestris/shogun-gis-client/./src/components/FileUpload/index.tsx","webpack://@terrestris/shogun-gis-client/./src/hooks/useConvertImageUrl.ts","webpack://@terrestris/shogun-gis-client/./src/components/ImageUpload/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/ToolMenu/FeatureInfo/FeatureInfoForm/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/ReferenceTable/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/DisplayField/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/EditFeatureDrawer/EditReferenceTable/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/EditFeatureDrawer/EditFeatureForm/index.tsx","webpack://@terrestris/shogun-gis-client/./src/hooks/useExecuteWfsDescribeFeatureType.ts","webpack://@terrestris/shogun-gis-client/./src/hooks/useWriteWfsTransaction.ts","webpack://@terrestris/shogun-gis-client/./src/components/MapDrawer/index.tsx","webpack://@terrestris/shogun-gis-client/./src/hooks/useExecuteGetFeature.ts","webpack://@terrestris/shogun-gis-client/./src/components/Toolbar/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/EditFeatureDrawer/EditFeatureGeometryToolbar/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/EditFeatureDrawer/EditFeatureTabs/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/EditFeatureDrawer/DeleteButton/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/EditFeatureDrawer/ResetButton/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/FeedbackIcon/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/EditFeatureDrawer/SaveButton/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/EditFeatureDrawer/EditFeatureToolbar/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/EditFeatureDrawer/EditFeatureFullForm/index.tsx","webpack://@terrestris/shogun-gis-client/./src/hooks/useExecuteWfsTransactionLock.ts","webpack://@terrestris/shogun-gis-client/./src/hooks/useGetFeatureInfo.ts","webpack://@terrestris/shogun-gis-client/./src/components/EditFeatureDrawer/EditFeatureSwitch/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/EditFeatureDrawer/index.tsx","webpack://@terrestris/shogun-gis-client/./src/hooks/useVersion.ts","webpack://@terrestris/shogun-gis-client/./src/components/ApplicationInfo/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/Footer/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/DocumentationButton/index.tsx","webpack://@terrestris/shogun-gis-client/./src/hooks/searchEngines/useNominatimSearchEngine.ts","webpack://@terrestris/shogun-gis-client/./src/utils/generateSolrQuery.ts","webpack://@terrestris/shogun-gis-client/./src/hooks/useExecuteSolrQuery.ts","webpack://@terrestris/shogun-gis-client/./src/hooks/searchEngines/useSolrSearchEngine.ts","webpack://@terrestris/shogun-gis-client/./src/hooks/searchEngines/useWfsSearchEngine.ts","webpack://@terrestris/shogun-gis-client/./src/components/MultiSearch/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/SearchField/index.tsx","webpack://@terrestris/shogun-gis-client/./src/utils/getGravatarUrl.ts","webpack://@terrestris/shogun-gis-client/./src/components/UserChip/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/UserMenu/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/Header/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/LayerDetailsModal/LayerConfiguration/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/LayerDetailsModal/LayerDetails/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/LayerDetailsModal/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/MapToolbar/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/ToolMenu/Draw/StylingDrawerButton/StylingComponent/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/StylingDrawer/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/LanguageSelector/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/Permalink/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/PrintForm/Serializer/SHOGunMapFishPrintV3WMSSerializer.ts","webpack://@terrestris/shogun-gis-client/./src/components/PrintForm/Serializer/SHOGunMapFishPrintV3TiledWMSSerializer.ts","webpack://@terrestris/shogun-gis-client/./src/components/PrintForm/CustomFieldInput/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/PrintForm/LayoutSelect/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/PrintForm/OutputFormatSelect/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/PrintForm/ResolutionSelect/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/PrintForm/ScaleSelect/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/PrintForm/Shared/Shared.ts","webpack://@terrestris/shogun-gis-client/./src/components/PrintForm/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/ToolMenu/Draw/Attributions/AttributionRow/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/ToolMenu/Draw/Attributions/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/ToolMenu/Draw/DeleteAllButton/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/ToolMenu/Draw/ImportDataModal/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/ToolMenu/Draw/StylingDrawerButton/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/ToolMenu/Draw/index.tsx","webpack://@terrestris/shogun-gis-client/./src/hooks/useHighlightVectorLayer.ts","webpack://@terrestris/shogun-gis-client/./src/components/ToolMenu/FeatureInfo/PaginationToolbar/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/ToolMenu/FeatureInfo/FeatureInfoTabs/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/ToolMenu/FeatureInfo/FeaturePropertyGrid/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/ToolMenu/FeatureInfo/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/WmsTimeSlider/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/ToolMenu/LayerTree/LayerTreeContextMenu/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/ToolMenu/LayerTree/LoadingIndicator/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/ToolMenu/LayerTree/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/ToolMenu/Measure/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/ToolMenu/index.tsx","webpack://@terrestris/shogun-gis-client/./src/components/UploadDataModal/index.tsx","webpack://@terrestris/shogun-gis-client/./src/hooks/useRestoreTransientLayers.ts","webpack://@terrestris/shogun-gis-client/./src/hooks/useQueryParams.ts","webpack://@terrestris/shogun-gis-client/./src/App.tsx"],"sourcesContent":["import {\n  useDispatch\n} from 'react-redux';\n\nimport type {\n  AppDispatch\n} from '../store/store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\n\nexport default useAppDispatch;\n","import {\n  TypedUseSelectorHook,\n  useSelector\n} from 'react-redux';\n\nimport type {\n  RootState\n} from '../store/store';\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n\nexport default useAppSelector;\n","import React, {\n  useState,\n  useEffect\n} from 'react';\n\nimport {\n  Input,\n  Modal,\n  ModalProps,\n  notification,\n  Select,\n  Table,\n  Typography\n} from 'antd';\n\nimport {\n  InputStatus\n} from 'antd/lib/_util/statusUtils';\n\nimport {\n  getUid\n} from 'ol';\nimport OlLayerGroup from 'ol/layer/Group';\nimport ImageLayer from 'ol/layer/Image';\nimport TileLayer from 'ol/layer/Tile';\nimport ImageWMSSource from 'ol/source/ImageWMS';\nimport TileWMSSource from 'ol/source/TileWMS';\n\nimport {\n  useTranslation\n} from 'react-i18next';\n\nimport Logger from '@terrestris/base-util/dist/Logger';\nimport { UrlUtil } from '@terrestris/base-util/dist/UrlUtil/UrlUtil';\nimport CapabilitiesUtil from '@terrestris/ol-util/dist/CapabilitiesUtil/CapabilitiesUtil';\nimport { MapUtil } from '@terrestris/ol-util/dist/MapUtil/MapUtil';\n\nimport SimpleButton from '@terrestris/react-geo/dist/Button/SimpleButton/SimpleButton';\nimport {\n  useMap\n} from '@terrestris/react-util/dist/Hooks/useMap/useMap';\n\nimport useAppDispatch from '../../hooks/useAppDispatch';\nimport useAppSelector from '../../hooks/useAppSelector';\nimport {\n  hide\n} from '../../store/addLayerModal';\n\nimport './index.less';\n\nexport type AddLayerModalProps = Partial<ModalProps>;\n\nexport const AddLayerModal: React.FC<AddLayerModalProps> = ({\n  ...restProps\n}): JSX.Element => {\n  const [loading, setLoading] = useState(false);\n  const [layers, setLayers] = useState<(ImageLayer<ImageWMSSource> | TileLayer<TileWMSSource>)[]>([]);\n  const [selectedRowKeys, setSelectedRowKeys] = useState<React.Key[]>([]);\n  const [validationStatus, setValidationStatus] = useState<InputStatus>('');\n  const [url, setUrl] = useState('https://sgx.geodatenzentrum.de/wms_topplus_open');\n  const [sanitizedUrl, setSanitizedUrl] = useState<string>();\n  const [version, setVersion] = useState<string>('1.3.0');\n\n  const isModalVisible = useAppSelector(state => state.addLayerModal.visible);\n\n  const dispatch = useAppDispatch();\n\n  const map = useMap();\n\n  const {\n    t\n  } = useTranslation();\n\n  useEffect(() => {\n    if (!isModalVisible) {\n      return;\n    }\n    setSanitizedUrl(UrlUtil.createValidGetCapabilitiesRequest(url, 'WMS', version));\n  }, [version, isModalVisible, url]);\n\n  const onUrlChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const value = evt.target.value;\n    setValidationStatus(UrlUtil.isValid(value.trim()) ? '' : 'error');\n    setUrl(evt.target.value);\n  };\n\n  const getCapabilities = async () => {\n    if (!sanitizedUrl) {\n      return;\n    }\n    try {\n      setLoading(true);\n\n      const capabilities = await CapabilitiesUtil.getWmsCapabilities(sanitizedUrl);\n      const externalLayers = CapabilitiesUtil.getLayersFromWmsCapabilities(capabilities, 'Title');\n\n      setLayers(externalLayers);\n    } catch (error) {\n      notification.error({\n        message: t('AddLayerModal.errorMessage'),\n        description: t('AddLayerModal.errorDescription')\n      });\n\n      Logger.error(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const closeModal = () => {\n    setSelectedRowKeys([]);\n    setLayers([]);\n    dispatch(hide());\n  };\n\n  const onAddSelected = () => {\n    const layersToAdd = layers.filter(layer => selectedRowKeys.includes(getUid(layer)));\n    addLayers(layersToAdd);\n  };\n\n  const onAddAll = () => {\n    addLayers(layers);\n  };\n\n  const addLayers = (layersToAdd: (ImageLayer<ImageWMSSource> | TileLayer<TileWMSSource>)[]) => {\n    if (!map) {\n      return;\n    }\n\n    const targetFolderName = t('AddLayerModal.externalWmsFolder');\n    let targetGroup = MapUtil.getLayerByName(map, targetFolderName) as OlLayerGroup;\n    const targetGroupAvailableInMap = !!targetGroup;\n\n    if (!targetGroup) {\n      targetGroup = new OlLayerGroup({\n        layers: []\n      });\n      targetGroup.set('name', targetFolderName);\n    }\n\n    layersToAdd.forEach(layerToAdd => {\n      if (!targetGroup.getLayers().getArray().includes(layerToAdd)) {\n        layerToAdd.set('isExternalLayer', true);\n\n        let layerUrl: string | undefined;\n        if (layerToAdd instanceof ImageLayer) {\n          layerUrl = layerToAdd.getSource()?.getUrl();\n        }\n\n        if (layerToAdd instanceof TileLayer) {\n          const urls = layerToAdd.getSource()?.getUrls();\n          layerUrl = urls?.length === 1 ? urls[0] : undefined;\n        }\n\n        const layerConfig = {\n          name: layerToAdd.get('name'),\n          type: layerToAdd instanceof TileLayer ? 'TILEWMS' : 'WMS',\n          opacity: layerToAdd.getOpacity(),\n          sourceConfig: {\n            layerNames: layerToAdd.getSource()?.getParams().LAYERS,\n            url: layerUrl,\n            useBearerToken: false\n          }\n        };\n        layerToAdd.set('layerConfig', layerConfig);\n        targetGroup.getLayers().push(layerToAdd);\n      }\n    });\n\n    if (!targetGroupAvailableInMap) {\n      const existingGroups = map.getLayerGroup().getLayers();\n      existingGroups.insertAt(existingGroups?.getLength() || 0, targetGroup);\n    }\n\n    closeModal();\n  };\n\n  return (\n    <Modal\n      className=\"add-layer-modal\"\n      title={t('AddLayerModal.title')}\n      open={isModalVisible}\n      onCancel={closeModal}\n      width={600}\n      footer={[\n        <SimpleButton\n          aria-label='add-all'\n          key=\"add-all\"\n          disabled={layers?.length < 1}\n          onClick={onAddAll}\n        >\n          {t('AddLayerModal.addAllLayers')}\n        </SimpleButton>,\n        <SimpleButton\n          aria-label='add-selected'\n          key=\"add-selected\"\n          disabled={selectedRowKeys?.length < 1}\n          onClick={onAddSelected}\n        >\n          {t('AddLayerModal.addSelectedLayers')}\n        </SimpleButton>\n      ]}\n      {...restProps}\n    >\n      <span>{t('AddLayerModal.requestWmsGetCapabilitiesInstruction')}</span>\n      <Input.Search\n        aria-label='input-search'\n        className='url-input'\n        placeholder={t('AddLayerModal.inputPlaceholder')}\n        value={url}\n        onChange={onUrlChange}\n        onSearch={getCapabilities}\n        status={validationStatus}\n        enterButton={true}\n        addonBefore={\n          <Select\n            aria-label='select-version'\n            defaultValue='1.3.0'\n            onChange={setVersion}\n            options={[\n              {\n                value: '1.3.0',\n                label: `${t('AddLayerModal.version')} 1.3.0`\n              },\n              {\n                value: '1.1.1',\n                label: `${t('AddLayerModal.version')} 1.1.1`\n              }\n            ]}\n          >\n          </Select>\n        }\n      />\n      {\n        validationStatus !== '' &&\n        <Typography className='error'>\n          {t('AddLayerModal.invalidUrlErrorMsg')}\n        </Typography>\n      }\n      <Table\n        aria-label='wms-table'\n        loading={loading}\n        columns={[\n          {\n            title: t('AddLayerModal.columnTitle'),\n            render: (text: any, record: any) => {\n              return record.get('title');\n            }\n          }\n        ]}\n        scroll={{\n          y: 250\n        }}\n        rowKey={(record: any) => getUid(record)}\n        rowSelection={{\n          selectedRowKeys,\n          onChange: setSelectedRowKeys\n        }}\n        pagination={false}\n        dataSource={layers}\n      />\n    </Modal>\n  );\n};\n\nexport default AddLayerModal;\n","import { useContext } from 'react';\n\nimport PluginContext from '../context/PluginContext';\n\nimport { ClientPluginInternal } from '../plugin';\n\nexport const usePlugins = (): ClientPluginInternal[] => {\n  return useContext(PluginContext);\n};\n\nexport default usePlugins;\n","import React, {\n  useEffect\n} from 'react';\n\nimport { ObjectEvent as OlObjectEvent } from 'ol/Object';\n\nimport {\n  useTranslation\n} from 'react-i18next';\n\nimport { MapUtil } from '@terrestris/ol-util/dist/MapUtil/MapUtil';\n\nimport {\n  MapComponent,\n  MapComponentProps\n} from '@terrestris/react-geo/dist/Map/MapComponent/MapComponent';\nimport { useMap } from '@terrestris/react-util/dist/Hooks/useMap/useMap';\n\nimport usePlugins from '../../hooks/usePlugins';\n\nimport {\n  isMapIntegration\n} from '../../plugin';\n\nexport const BasicMapComponent: React.FC<Partial<MapComponentProps>> = ({\n  ...restProps\n}): JSX.Element => {\n  const map = useMap();\n  const plugins = usePlugins();\n\n  const {\n    t,\n    i18n\n  } = useTranslation();\n\n  /**\n   * Updates external layer group name when language changes.\n   */\n  useEffect(() => {\n    if (!map) {\n      return;\n    }\n\n    const targetGroups = MapUtil.getLayersByProperty(map, 'isExternalLayerGroup', true);\n    if (targetGroups?.length !== 1) {\n      return;\n    }\n    const targetGroup = targetGroups[0];\n    const oldName = targetGroups[0].get('name');\n    targetGroup.set('name', t('AddLayerModal.externalWmsFolder'));\n    const changeEvent = new OlObjectEvent('change:layers', 'name', oldName);\n    targetGroup.dispatchEvent(changeEvent);\n  }, [i18n.language, map, t]);\n\n  const pluginComponents: JSX.Element[] = [];\n\n  if (plugins) {\n    plugins.forEach(plugin => {\n      if (isMapIntegration(plugin.integration)) {\n        const {\n          key,\n          wrappedComponent: WrappedPluginComponent\n        } = plugin;\n\n        pluginComponents.push(\n          <WrappedPluginComponent\n            key={key}\n          />\n        );\n      }\n    });\n  }\n\n  if (!map) {\n    return <></>;\n  }\n\n  return (\n    <MapComponent\n      map={map}\n      {...restProps}\n    >\n      {\n        pluginComponents\n      }\n    </MapComponent>\n  );\n};\n\nexport default BasicMapComponent;\n","import type { IconDefinition } from '@fortawesome/fontawesome-common-types';\n\nimport type {\n  Middleware,\n  Reducer\n} from '@reduxjs/toolkit';\n\nimport { CollapsePanelProps } from 'antd';\nimport type OlMap from 'ol/Map';\n\nimport { SHOGunAPIClient } from '@terrestris/shogun-util/dist/service/SHOGunAPIClient';\n\nexport type ClientPluginLocale = Record<string, {\n    translation: Record<string, any>;\n  }>;\n\nexport type ClientPluginComponentProps = {\n  map?: OlMap;\n  client?: SHOGunAPIClient;\n};\n\nexport type ClientPluginIntegration = {\n  /**\n   * The main identifier of the integration point of the plugin.\n   */\n  placement: string;\n};\n\nexport type ClientPluginIntegrationToolMenu = ClientPluginIntegration &\n  Omit<CollapsePanelProps, 'key' | 'header'> & {\n    placement: 'tool-menu';\n    /**\n     * The label for the plugin in the tool menu.\n     */\n    label?: string;\n    /**\n     * The insertion index for the plugin in the tool menu, starting from 0 which is on top.\n     */\n    insertionIndex?: number;\n    /**\n     * The icon for the plugin in the tool menu.\n     */\n    icon?: IconDefinition;\n  };\n\nexport type HeaderPlacementOrientation = 'left' | 'center' | 'right';\n\nexport type ClientPluginIntegrationHeader = ClientPluginIntegration & {\n  placement: 'header';\n  /**\n   * The placement orientation for the plugin in the header.\n   */\n  placementOrientation: HeaderPlacementOrientation;\n  /**\n   * The insertion index for the plugin in the header, starting from 0 which is on the left.\n   */\n  insertionIndex?: number;\n};\n\nexport type ClientPluginIntegrationFeatureInfo = ClientPluginIntegration & {\n  placement: 'feature-info';\n  /**\n   * The list of layer names the plugin component should be rendered for. If not\n   * specified, the component will be rendered for all layers.\n   */\n  layers?: string[];\n};\n\nexport type ClientPluginIntegrationMap = ClientPluginIntegration & {\n  placement: 'map';\n};\n\nexport type FooterPlacementOrientation = 'left' | 'right';\n\nexport type ClientPluginIntegrationFooter = ClientPluginIntegration & {\n  placement: 'footer';\n  /**\n  * The placement orientation for the plugin in the footer.\n  */\n  placementOrientation: FooterPlacementOrientation;\n  /**\n  * The insertion index for the plugin in the footer, starting from 0 which is on the left.\n  */\n  insertionIndex?: number;\n};\n\nexport type ClientPluginIntegrationCookieConsent = ClientPluginIntegration & {\n  placement: 'cookie-banner';\n};\n\nexport type ClientPluginIntegrations =\n  | ClientPluginIntegrationToolMenu\n  | ClientPluginIntegrationHeader\n  | ClientPluginIntegrationFeatureInfo\n  | ClientPluginIntegrationMap\n  | ClientPluginIntegrationFooter\n  | ClientPluginIntegrationCookieConsent;\n\nexport type ClientPlugin = {\n  /**\n   * The key of the plugin, usually used for internal references (e.g. element class names) only.\n   */\n  key: string;\n  /**\n   * The definition of the integration point.\n   */\n  integration: ClientPluginIntegrations;\n  /**\n   * The actual component of the plugin.\n   */\n  component: React.FunctionComponent<ClientPluginComponentProps>;\n  /**\n   * The i18n definition to be used in the plugin.\n   */\n  i18n?: ClientPluginLocale;\n  /**\n   * A set of redux reducers to be used in the plugin.\n   */\n  reducers?: Record<string, Reducer>;\n  /**\n   * A set of middlewares that should be added to the store\n   * especially useful for usage of redux-rtk\n   */\n  middlewares?: Middleware[];\n};\n\nexport type ClientPluginInternal = ClientPlugin & {\n  wrappedComponent: React.FunctionComponent<ClientPluginComponentProps>;\n};\n\nexport function isToolMenuIntegration(\n  pluginIntegration: ClientPluginIntegrations\n): pluginIntegration is ClientPluginIntegrationToolMenu {\n  return pluginIntegration && pluginIntegration.placement === 'tool-menu';\n}\n\nexport function isHeaderIntegration(\n  pluginIntegration: ClientPluginIntegrations\n): pluginIntegration is ClientPluginIntegrationHeader {\n  return pluginIntegration && pluginIntegration.placement === 'header';\n}\n\nexport function isFeatureInfoIntegration(\n  pluginIntegration: ClientPluginIntegrations\n): pluginIntegration is ClientPluginIntegrationFeatureInfo {\n  return pluginIntegration && pluginIntegration.placement === 'feature-info';\n}\n\nexport function isMapIntegration(\n  pluginIntegration: ClientPluginIntegrations\n): pluginIntegration is ClientPluginIntegrationMap {\n  return pluginIntegration && pluginIntegration.placement === 'map';\n}\n\nexport function isFooterIntegration(pluginIntegration: ClientPluginIntegrations): pluginIntegration is ClientPluginIntegrationFooter {\n  return pluginIntegration && pluginIntegration.placement === 'footer';\n}\n\nexport function isCookieConsentIntegration(\n  pluginIntegration: ClientPluginIntegrations\n): pluginIntegration is ClientPluginIntegrationCookieConsent {\n  return pluginIntegration && pluginIntegration.placement === 'cookie-banner';\n}\n","import React from 'react';\n\nimport { CookieConsent } from 'react-cookie-consent';\nimport { useTranslation } from 'react-i18next';\n\nimport usePlugins from '../../hooks/usePlugins';\nimport { isCookieConsentIntegration } from '../../plugin';\n\nimport './index.less';\n\nexport const CookieBanner = () => {\n  const plugins = usePlugins();\n\n  const { t } = useTranslation();\n\n  const getPlugin = () => {\n    let cookiePlugin: React.ReactElement | null = null;\n\n    plugins.forEach(plugin => {\n      if (isCookieConsentIntegration(plugin.integration)) {\n        const {\n          key, wrappedComponent: WrappedPluginComponent\n        } = plugin;\n\n        cookiePlugin = <WrappedPluginComponent key={key} />;\n      }\n    });\n\n    return cookiePlugin;\n  };\n\n  return (\n    <CookieConsent\n      disableStyles={true}\n      key=\"default-cookie-consent\"\n      location=\"bottom\"\n      buttonText={t('CookieBanner.button')}\n      cookieName=\"SHOGun-Session-Cookie\"\n      buttonClasses=\"cookie-button\"\n      containerClasses=\"cookie-container\"\n      contentClasses=\"cookie-content\"\n      expires={150}\n    >\n      {getPlugin() ? getPlugin() : t('CookieBanner.info')}\n    </CookieConsent>\n  );\n};\n\nexport default CookieBanner;\n","import {\n  useCallback\n} from 'react';\n\nimport OlSourceImageWMS from 'ol/source/ImageWMS';\nimport OlSourceTileWMS from 'ol/source/TileWMS';\n\nimport {\n  WmsLayer\n} from '@terrestris/ol-util/dist/typeUtils/typeUtils';\n\nimport {\n  getBearerTokenHeader\n} from '@terrestris/shogun-util/dist/security/getBearerTokenHeader';\n\nimport useSHOGunAPIClient from './useSHOGunAPIClient';\n\nexport type ExecuteWfsTransactionOpts = {\n  layer: WmsLayer;\n  transaction: Node;\n};\n\nexport const useExecuteWfsTransaction = () => {\n  const client = useSHOGunAPIClient();\n\n  // TODO Make detection more robust\n  const isFailed = (xmlDoc: Document) => {\n    const errorTagNameCandidates = [\n      'wfs:FAILED',\n      'ows:ExceptionReport'\n    ];\n\n    return errorTagNameCandidates.some(candidate =>\n      xmlDoc.getElementsByTagName(candidate).length > 0);\n  };\n\n  const executeWfsTransaction = useCallback(async (opts: ExecuteWfsTransactionOpts) => {\n    let url;\n\n    const source = opts.layer.getSource();\n    if (source instanceof OlSourceImageWMS) {\n      url = source.getUrl();\n    }\n    if (source instanceof OlSourceTileWMS) {\n      const urls = source.getUrls();\n      url = urls ? urls[0] : undefined;\n    }\n\n    if (!url) {\n      return;\n    }\n\n    if (url.endsWith('?')) {\n      url = url.slice(0, -1);\n    }\n\n    const defaultHeaders = {\n      'Content-Type': 'application/xml'\n    };\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: opts.layer?.get('useBearerToken') ? {\n        ...defaultHeaders,\n        ...getBearerTokenHeader(client?.getKeycloak())\n      } : defaultHeaders,\n      body: new XMLSerializer().serializeToString(opts.transaction)\n    });\n\n    if (!response.ok) {\n      throw new Error('No successful response while executing a WFS-Transaction');\n    }\n\n    const responseText = await response.text();\n\n    const parser = new DOMParser();\n    const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n\n    if (isFailed(xmlDoc)) {\n      throw new Error(`Something failed: ${responseText}`);\n    }\n\n    return responseText;\n  }, [client]);\n\n  return executeWfsTransaction;\n};\n\nexport default useExecuteWfsTransaction;\n","import React from 'react';\n\nimport {\n  Upload,\n  Button\n} from 'antd';\n\nimport {\n  UploadFile,\n  UploadProps\n} from 'antd/lib/upload/interface';\n\nimport _isNil from 'lodash/isNil';\n\nimport {\n  useTranslation\n} from 'react-i18next';\n\nimport ShogunFile from '@terrestris/shogun-util/dist/model/File';\nimport {\n  PropertyFormItemEditConfig\n} from '@terrestris/shogun-util/dist/model/Layer';\nimport {\n  getBearerTokenHeader\n} from '@terrestris/shogun-util/dist/security/getBearerTokenHeader';\nimport {\n  getCsrfTokenHeader\n} from '@terrestris/shogun-util/dist/security/getCsrfTokenHeader';\n\nimport useSHOGunAPIClient from '../../hooks/useSHOGunAPIClient';\n\nexport type FileUploadProps = {\n  fieldConfig?: PropertyFormItemEditConfig;\n  readOnly?: boolean;\n} & Partial<UploadProps>;\n\nexport const FileUpload: React.FC<FileUploadProps> = ({\n  readOnly = false,\n  fieldConfig,\n  ...passThroughProps\n}): JSX.Element => {\n\n  const client = useSHOGunAPIClient();\n  const {\n    t\n  } = useTranslation();\n\n  /**\n   * Workaround which allows to download files that need authentication.\n   */\n  const showPreview = async (file: UploadFile<ShogunFile>) => {\n    if (!client) {\n      return;\n    }\n    const { response } = file;\n    const fileName = response?.fileName;\n    const fileUrl = `/files/${response?.fileUuid}`;\n\n    if (_isNil(fileName) || _isNil(response?.fileUuid)) {\n      return;\n    }\n\n    const anchor = document.createElement('a');\n    document.body.appendChild(anchor);\n\n    const opts = {\n      headers: { ... getBearerTokenHeader(client.getKeycloak())}\n    };\n\n    const result = await fetch(fileUrl, opts);\n    const blob = await result.blob();\n    const objectUrl = window.URL.createObjectURL(blob);\n\n    anchor.href = objectUrl;\n    anchor.download = fileName;\n    anchor.click();\n    window.URL.revokeObjectURL(objectUrl);\n  };\n\n  const removeFile = async (file: UploadFile<ShogunFile>) => {\n    const uuid = file?.response?.fileUuid;\n    if (uuid) {\n      const url = `${client?.getBasePath()}files/${uuid}`;\n      return await fetch(url, {\n        method: 'DELETE',\n        credentials: 'same-origin',\n        headers: {\n          ...getCsrfTokenHeader(),\n          ...getBearerTokenHeader(client?.getKeycloak())\n        }\n      });\n    }\n  };\n\n  if (!client) {\n    return <></>;\n  }\n\n  return (\n    <Upload\n      multiple\n      name='file'\n      action='/files/uploadToFileSystem'\n      withCredentials={true}\n      headers={{\n        ...getCsrfTokenHeader(),\n        ...getBearerTokenHeader(client.getKeycloak())\n      }}\n      onRemove={removeFile}\n      onPreview={showPreview}\n      {...fieldConfig?.fieldProps}\n      {...passThroughProps}\n    >\n      {\n        !readOnly && (\n          <Button>{t('FileUpload.upload')}</Button>\n        )\n      }\n    </Upload>\n  );\n};\n\nexport default FileUpload;\n","import {\n  useCallback\n} from 'react';\n\nimport _isNil from 'lodash/isNil';\n\nimport {\n  getBearerTokenHeader\n} from '@terrestris/shogun-util/dist/security/getBearerTokenHeader';\n\nimport useSHOGunAPIClient from './useSHOGunAPIClient';\n\nexport const useConvertImageUrl = () => {\n  const client = useSHOGunAPIClient();\n\n  const imageUrlToBase64 = useCallback(async (url: string) => {\n    if (_isNil(url)) {\n      return Promise.reject(new Error(`Passed url '${url}' is null or undefined`));\n    }\n\n    const response = await fetch(url, {\n      credentials: 'include',\n      headers: {\n        ...getBearerTokenHeader(client?.getKeycloak())\n      }\n    });\n\n    const blob = await response.blob();\n    return new Promise<string>((onSuccess, onError) => {\n      try {\n        const reader = new FileReader() ;\n        reader.onload = function () { onSuccess(this.result as string); };\n        reader.readAsDataURL(blob);\n      } catch (e) {\n        onError(e);\n      }\n    });\n  }, [client]);\n\n  return imageUrlToBase64;\n};\n\nexport default useConvertImageUrl;\n","import React, {\n  useState\n} from 'react';\n\nimport {\n  faPlus\n} from '@fortawesome/free-solid-svg-icons';\nimport {\n  FontAwesomeIcon\n} from '@fortawesome/react-fontawesome';\n\nimport {\n  Upload,\n  Modal\n} from 'antd';\n\nimport {\n  UploadFile,\n  UploadProps\n} from 'antd/lib/upload/interface';\n\nimport _isNil from 'lodash/isNil';\n\nimport {\n  useTranslation\n} from 'react-i18next';\n\nimport { useAsyncEffect } from '@terrestris/react-util/dist/Hooks/useAsyncEffect/useAsyncEffect';\n\nimport ShogunFile from '@terrestris/shogun-util/dist/model/File';\nimport {\n  PropertyFormItemEditConfig\n} from '@terrestris/shogun-util/dist/model/Layer';\nimport {\n  getBearerTokenHeader\n} from '@terrestris/shogun-util/dist/security/getBearerTokenHeader';\nimport {\n  getCsrfTokenHeader\n} from '@terrestris/shogun-util/dist/security/getCsrfTokenHeader';\n\nimport useConvertImageUrl from '../../hooks/useConvertImageUrl';\nimport useSHOGunAPIClient from '../../hooks/useSHOGunAPIClient';\n\nexport type ImageUploadProps = {\n  fieldConfig?: PropertyFormItemEditConfig;\n  readOnly?: boolean;\n  initialFileList?: UploadFile<any>[];\n} & Partial<UploadProps>;\n\nexport const ImageUpload: React.FC<ImageUploadProps> = ({\n  fieldConfig,\n  readOnly = false,\n  initialFileList,\n  ...passThroughProps\n}): JSX.Element => {\n\n  const [mediaPreviewVisible, setMediaPreviewVisible] = useState<boolean>(false);\n  const [previewImage, setPreviewImage] = useState<string>('');\n  const [defaultFileListWithBlob, setDefaultFileListWithBlob] = useState<UploadFile<ShogunFile>[]>();\n\n  const client = useSHOGunAPIClient();\n  const imageUrlToBase64 = useConvertImageUrl();\n  const {\n    t\n  } = useTranslation();\n\n  useAsyncEffect(async () => {\n    if (!initialFileList || initialFileList.length === 0) {\n      return;\n    }\n    const convertDefaultFileList = async (fileList: UploadFile<ShogunFile>[]) => {\n      const fileListPromises = fileList.map(async (val: any) => ({\n        ...val,\n        thumbUrl: await imageUrlToBase64(`${client?.getBasePath()}imagefiles/${val?.response?.fileUuid}/thumbnail`),\n        url: undefined\n      }));\n      return await Promise.all(fileListPromises);\n    };\n    const fl = await convertDefaultFileList(initialFileList);\n    setDefaultFileListWithBlob(fl);\n  }, [initialFileList?.length]);\n\n  /**\n   * Shows preview of clicked uploaded image.\n   * @param {Object} file Image file object.\n   */\n  const showImagePreview = async (file: UploadFile<ShogunFile>) => {\n    const { response } = file;\n    if (_isNil(response) || _isNil(response?.fileUuid)) {\n      return;\n    }\n    const previewImageUrl = `${client?.getBasePath()}imagefiles/${response.fileUuid}`;\n    const img = await imageUrlToBase64(previewImageUrl);\n    setPreviewImage(img);\n    setMediaPreviewVisible(true);\n  };\n\n  const removeFile = async (file: UploadFile<ShogunFile>) => {\n    const uuid = file?.response?.fileUuid;\n    if (uuid) {\n      const url = `${client?.getBasePath()}imagefiles/${uuid}`;\n      return await fetch(url, {\n        method: 'DELETE',\n        credentials: 'same-origin',\n        headers: {\n          ...getCsrfTokenHeader(),\n          ...getBearerTokenHeader(client?.getKeycloak())\n        }\n      });\n    }\n  };\n\n  if (!client) {\n    return <></>;\n  }\n\n  return (\n    <>\n      <Upload\n        accept=\"image/*\"\n        multiple\n        name=\"file\"\n        action={`${client.getBasePath()}imagefiles/uploadToFileSystem`}\n        withCredentials={true}\n        listType=\"picture-card\"\n        headers={{\n          ...getCsrfTokenHeader(),\n          ...getBearerTokenHeader(client.getKeycloak())\n        }}\n        onRemove={removeFile}\n        onPreview={showImagePreview}\n        fileList={readOnly ? defaultFileListWithBlob : undefined}\n        {...fieldConfig?.fieldProps}\n        {...passThroughProps}\n      >\n        {\n          !readOnly && (\n            <div>\n              <FontAwesomeIcon icon={faPlus} />\n              <div style={{ marginTop: 8 }}>{t('ImageUpload.upload')}</div>\n            </div>\n          )\n        }\n      </Upload>\n      <Modal\n        open={mediaPreviewVisible}\n        footer={null}\n        onCancel={() => setMediaPreviewVisible(false)}\n      >\n        <img\n          alt=\"example\"\n          style={{ width: '100%' }}\n          src={previewImage}\n        />\n      </Modal>\n    </>\n  );\n};\n\nexport default ImageUpload;\n","import React, {\n  useEffect\n} from 'react';\n\nimport {\n  Form,\n  FormProps\n} from 'antd';\n\nimport {\n  useForm\n} from 'antd/lib/form/Form';\n\nimport OlFeature from 'ol/Feature';\n\nimport {\n  PropertyFormItemReadConfig\n} from '@terrestris/shogun-util/dist/model/Layer';\n\nimport DisplayField from '../../../DisplayField';\n\nimport './index.less';\n\nexport type FeatureInfoFormProps = FormProps & {\n  feature: OlFeature;\n  formConfig?: PropertyFormItemReadConfig[];\n};\n\nexport const FeatureInfoForm: React.FC<FeatureInfoFormProps> = ({\n  feature,\n  formConfig,\n  ...passThroughProps\n}): JSX.Element => {\n\n  const [form] = useForm();\n\n  useEffect(() => {\n    form.resetFields();\n    form.setFieldsValue(feature.getProperties());\n  }, [feature, form]);\n\n  const createFormItem = (fieldCfg: PropertyFormItemReadConfig) => {\n    return (\n      <Form.Item\n        key={fieldCfg.propertyName}\n        name={fieldCfg.propertyName}\n        label={fieldCfg.displayName ?? fieldCfg.propertyName}\n      >\n        <DisplayField\n          label={fieldCfg.displayName ?? fieldCfg.propertyName}\n          {...fieldCfg.fieldProps}\n        />\n      </Form.Item>\n    );\n  };\n\n  return (\n    <Form\n      className=\"feature-info-form\"\n      form={form}\n      labelCol={{\n        span: 8\n      }}\n      labelAlign=\"left\"\n      labelWrap\n      {...passThroughProps}\n    >\n      {formConfig?.map(createFormItem)}\n    </Form>\n  );\n\n};\n\nexport default FeatureInfoForm;\n","import React, {\n  useState\n} from 'react';\n\nimport {\n  faBoxOpen\n} from '@fortawesome/free-solid-svg-icons';\nimport {\n  FontAwesomeIcon\n} from '@fortawesome/react-fontawesome';\n\nimport {\n  Button,\n  Modal,\n  Table\n} from 'antd';\n\nimport {\n  TableProps\n} from 'antd/lib/table';\n\nimport OlFeature from 'ol/Feature';\n\nimport {\n  useTranslation\n} from 'react-i18next';\n\nimport Logger from '@terrestris/base-util/dist/Logger';\n\nimport {\n  ReferenceConfig\n} from '../DisplayField';\n\nimport FeatureInfoForm from '../ToolMenu/FeatureInfo/FeatureInfoForm';\n\nimport './index.less';\n\nexport type ReferenceDataType = Record<string, any>;\n\nexport type ReferenceTableProps = TableProps<ReferenceDataType> & {\n  value?: string;\n  referenceConfig?: ReferenceConfig;\n};\n\nexport const ReferenceTable: React.FC<ReferenceTableProps> = ({\n  value,\n  referenceConfig,\n  ...passThroughProps\n}) => {\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n  const [selectedFeature, setSelectedFeature] = useState<OlFeature>();\n\n  const {\n    t\n  } = useTranslation();\n\n  const defaultPropertyName = 'id';\n\n  const resolvePlaceholder = (record: ReferenceDataType) => {\n    if (referenceConfig?.tablePropertyName) {\n      const regex = /{{(.*?)}}/g;\n\n      if (referenceConfig?.tablePropertyName.match(regex)) {\n        let resolved = referenceConfig?.tablePropertyName;\n        let match;\n\n        // eslint-disable-next-line no-cond-assign\n        while (match = regex.exec(referenceConfig?.tablePropertyName)) {\n          resolved = resolved.replace(match[0], record[match[1]]);\n        }\n\n        return resolved;\n      }\n\n      return record[referenceConfig?.tablePropertyName];\n    }\n\n    if (record[defaultPropertyName]) {\n      return record[defaultPropertyName];\n    }\n  };\n\n  const columns = [{\n    width: '100%',\n    render: (val: any, record: ReferenceDataType) => resolvePlaceholder(record) ?\n      resolvePlaceholder(record) :\n      t('ReferenceTable.defaultRowPlaceholder')\n  }, {\n    render: (val: any, record: ReferenceDataType) => {\n      return (\n        <Button\n          onClick={() => onDetailsClick(val, record)}\n          icon={(\n            <FontAwesomeIcon\n              icon={faBoxOpen}\n            />\n          )}\n        />\n      );\n    }\n  }];\n\n  const getDataSource = () => {\n    if (!value) {\n      return [];\n    }\n\n    try {\n      const parsedValue = JSON.parse(value);\n\n      if (Array.isArray(parsedValue)) {\n        return parsedValue;\n      }\n\n      if (parsedValue === null || parsedValue === undefined || typeof parsedValue === 'number' ||\n        typeof parsedValue === 'boolean' || typeof parsedValue === 'string') {\n        Logger.warn('Unsupported value given');\n        return [];\n      }\n\n      if (typeof parsedValue === 'object') {\n        return [parsedValue];\n      }\n    } catch (error) {\n      Logger.warn('Error while parsing the table data ', error);\n      return [];\n    }\n  };\n\n  const getModalTitle = () => {\n    if (!selectedFeature) {\n      return t('ReferenceTable.defaultModalTitle');\n    }\n\n    const placeholder = resolvePlaceholder(selectedFeature.getProperties());\n\n    if (!placeholder) {\n      return t('ReferenceTable.defaultModalTitle');\n    }\n\n    return `${t('ReferenceTable.modalTitle', {\n      referenceValue: placeholder\n    })}`;\n  };\n\n  const onDetailsClick = (val: any, record: ReferenceDataType) => {\n    const feature = new OlFeature();\n    feature.setProperties(record);\n\n    setSelectedFeature(feature);\n    setIsModalOpen(true);\n  };\n\n  const onCancel = async () => {\n    setIsModalOpen(false);\n    setSelectedFeature(undefined);\n  };\n\n  return (\n    <>\n      <Table\n        size=\"small\"\n        showHeader={false}\n        pagination={false}\n        columns={columns}\n        rowKey={defaultPropertyName}\n        dataSource={getDataSource()}\n        {...passThroughProps}\n      />\n      <Modal\n        className=\"reference-table-modal\"\n        open={isModalOpen}\n        maskClosable={false}\n        footer={null}\n        width={600}\n        destroyOnClose={true}\n        title={getModalTitle()}\n        onCancel={onCancel}\n      >\n        {selectedFeature && (\n          <FeatureInfoForm\n            feature={selectedFeature}\n            formConfig={referenceConfig?.featureInfoFormConfig}\n          />\n        )}\n      </Modal>\n    </>\n  );\n};\n\nexport default ReferenceTable;\n","import React from 'react';\n\nimport {\n  Checkbox,\n  Typography,\n  UploadFile\n} from 'antd';\n\nimport isString from 'lodash/isString';\nimport moment, {\n  isMoment\n} from 'moment';\n\nimport {\n  useTranslation\n} from 'react-i18next';\n\nimport Logger from '@terrestris/base-util/dist/Logger';\n\nimport ShogunFile from '@terrestris/shogun-util/dist/model/File';\nimport {\n  PropertyFormItemReadConfig\n} from '@terrestris/shogun-util/dist/model/Layer';\n\nimport { isFileConfig } from '../EditFeatureDrawer/EditFeatureForm';\nimport FileUpload from '../FileUpload';\nimport ImageUpload from '../ImageUpload';\nimport ReferenceTable from '../ReferenceTable';\n\nexport type ValueType = string | number | boolean | moment.Moment | Record<string, any>;\nexport type DataType = 'auto' | 'number' | 'boolean' | 'string' | 'date' | 'url' | 'json';\n\nexport type ReferenceConfig = {\n  tablePropertyName?: string;\n  featureInfoFormConfig?: PropertyFormItemReadConfig[];\n};\n\nexport type DisplayFieldProps = {\n  /**\n   * The data type of the value to display. If set to 'auto' (default),\n   * the component tries to guess the data type based on the value. Otherwise\n   * the component will try to enforce the given data type.\n   */\n  dataType?: DataType;\n  /**\n   * A map of values to display instead of the actual value. The key is the\n   * original value and the value is the value to display instead.\n   */\n  valueMap?: Record<string, ValueType>;\n  format?: string;\n  suffix?: string;\n  value?: ValueType | ValueType[];\n  label?: string;\n  referenceConfig?: ReferenceConfig;\n  /**\n   * If set, it displays the given value instead of the URL.\n   */\n  urlDisplayValue?: string;\n};\n\nexport const DisplayField: React.FC<DisplayFieldProps> = ({\n  dataType = 'auto',\n  valueMap,\n  format = 'DD.MM.YYYY',\n  suffix,\n  value,\n  referenceConfig,\n  urlDisplayValue,\n  ...passThroughProps\n}): JSX.Element => {\n\n  const {\n    i18n\n  } = useTranslation();\n\n  let displayValue: React.ReactNode = '';\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (value && typeof value === 'string' && valueMap?.hasOwnProperty(value)) {\n    value = valueMap[value];\n  }\n\n  if (\n    dataType === 'string' ||\n    (dataType === 'auto' && typeof value === 'string')\n  ) {\n    if (value) {\n      displayValue = value?.toString();\n    }\n  }\n\n  if (\n    dataType === 'boolean' ||\n    (dataType === 'auto' && typeof value === 'boolean' || value === 'false' || value === 'true')\n  ) {\n    return (\n      <Checkbox\n        checked={value !== 'false' && value !== false}\n        disabled\n      />\n    );\n  }\n\n  if (\n    dataType === 'number' ||\n    (dataType === 'auto' && Number.isFinite(value))\n  ) {\n    if (value) {\n      displayValue = new Intl.NumberFormat(i18n.language, {\n        useGrouping: false\n      }).format(Number(value));\n    }\n  }\n\n  if (\n    dataType === 'date' ||\n    (dataType === 'auto' && isMoment(value))\n  ) {\n    if (value) {\n      displayValue = moment(value as string).format(format);\n    }\n  }\n\n  if (dataType === 'auto' && Array.isArray(value)) {\n    displayValue = value.join(', ');\n  }\n\n  const isUrl = (candidate: string) => {\n    const lowerCandidate = candidate.toLowerCase();\n    const protocols = ['http://', 'https://', 'ftp://', 'mailto:'];\n    return protocols.some(protocol => lowerCandidate.startsWith(protocol));\n  };\n\n  if (\n    dataType === 'url' ||\n    (dataType === 'auto' && isString(value) && isUrl(value))\n  ) {\n    if (value) {\n      displayValue = (\n        <a\n          href={value?.toString()}\n          target=\"_blank\"\n          rel='noreferrer'\n        >\n          {urlDisplayValue ? urlDisplayValue : value?.toString()}\n        </a>\n      );\n    }\n  }\n\n  const getUpload = (val: ValueType | ValueType[]): UploadFile<ShogunFile>[] | null => {\n    if (!value) {\n      return null;\n    }\n    let v = typeof val !== 'string' ? JSON.stringify(val) : val;\n\n    try {\n      v = JSON.parse(v);\n    } catch (e) {\n      Logger.trace(e);\n      return null;\n    }\n\n    if (typeof v === 'object' && v !== null && isFileConfig(v[0])) {\n      return v as UploadFile<ShogunFile>[];\n    }\n    return null;\n  };\n\n  const uploadValue = value && getUpload(value);\n\n  if (dataType === 'auto' && uploadValue) {\n    if (uploadValue[0].response?.fileType?.startsWith('image/')) {\n      return (\n        <ImageUpload\n          initialFileList={uploadValue}\n          disabled\n          readOnly\n        />\n      );\n    } else {\n      return (\n        <FileUpload\n          defaultFileList={uploadValue}\n          disabled\n          readOnly\n        />\n      );\n    }\n  }\n\n  const isJson = (val: ValueType | ValueType[]): boolean => {\n    let v = typeof val !== 'string' ? JSON.stringify(val) : val;\n\n    try {\n      v = JSON.parse(v);\n    } catch (e) {\n      Logger.trace(e);\n      return false;\n    }\n\n    return typeof v === 'object' && v !== null;\n  };\n\n  if (\n    dataType === 'json' ||\n    dataType === 'auto' && value && isJson(value)\n  ) {\n    return (\n      <ReferenceTable\n        value={typeof value === 'string' ? value : JSON.stringify(value)}\n        referenceConfig={referenceConfig}\n      />\n    );\n  }\n\n  if (suffix) {\n    displayValue = <>{displayValue} {suffix}</>;\n  }\n\n  return (\n    <Typography.Text\n      className=\"displayfield\"\n      {...passThroughProps}\n    >\n      {displayValue}\n    </Typography.Text>\n  );\n};\n\nexport default DisplayField;\n","import React, {\n  useState\n} from 'react';\n\nimport {\n  faEdit,\n  faTrash,\n  faPlus\n} from '@fortawesome/free-solid-svg-icons';\nimport {\n  FontAwesomeIcon\n} from '@fortawesome/react-fontawesome';\n\nimport {\n  Button,\n  Modal,\n  Popconfirm,\n  Table\n} from 'antd';\n\nimport {\n  FormInstance,\n  useForm\n} from 'antd/lib/form/Form';\n\nimport {\n  ColumnsType,\n  TableProps\n} from 'antd/lib/table';\n\nimport { FileInfoList } from 'hooks/useWriteWfsTransaction';\n\nimport _cloneDeep from 'lodash/cloneDeep';\n\nimport moment from 'moment';\n\nimport OlFeature from 'ol/Feature';\nimport {\n  getUid\n} from 'ol/util';\n\nimport {\n  useTranslation\n} from 'react-i18next';\n\nimport Logger from '@terrestris/base-util/dist/Logger';\n\nimport {\n  PropertyFormItemEditConfig\n} from '@terrestris/shogun-util/dist/model/Layer';\n\nimport useConvertImageUrl from '../../../hooks/useConvertImageUrl';\nimport useSHOGunAPIClient from '../../../hooks/useSHOGunAPIClient';\n\nimport EditFeatureForm from '../../EditFeatureDrawer/EditFeatureForm';\n\nimport './index.less';\n\nexport type EditReferenceDataType = {\n  id?: number;\n  internalId?: number;\n  [key: string]: any;\n};\n\nexport type EditReferenceTableProps = Omit<TableProps<EditReferenceDataType>, 'onChange'> & {\n  parentForm: FormInstance<EditReferenceDataType>;\n  propertyName: string;\n  value?: EditReferenceDataType;\n  tablePropertyName?: string;\n  formConfig?: PropertyFormItemEditConfig[];\n  onChange?: (changedValues: EditReferenceDataType[]) => void;\n};\n\nexport const EditReferenceTable: React.FC<EditReferenceTableProps> = ({\n  parentForm,\n  propertyName,\n  value,\n  tablePropertyName,\n  formConfig,\n  onChange = () => {},\n  ...passThroughProps\n}) => {\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n  const [selectedFeature, setSelectedFeature] = useState<OlFeature>();\n\n  const [form] = useForm<EditReferenceDataType>();\n\n  const {\n    t\n  } = useTranslation();\n\n  const imageUrlToBase64 = useConvertImageUrl();\n  const client = useSHOGunAPIClient();\n\n  const defaultPropertyName = 'id';\n\n  const resolvePlaceholder = (record: EditReferenceDataType): string | number => {\n    if (!tablePropertyName) {\n      return record[defaultPropertyName] ?? '';\n    }\n\n    const regex = /{{(.*?)}}/g;\n\n    if (!tablePropertyName.match(regex)) {\n      return record[tablePropertyName];\n    }\n\n    let resolved = tablePropertyName;\n    let match;\n\n    // eslint-disable-next-line no-cond-assign\n    while (match = regex.exec(tablePropertyName)) {\n      resolved = resolved.replace(match[0], record[match[1]]);\n    }\n\n    return resolved;\n  };\n\n  const columns: ColumnsType<EditReferenceDataType> = [{\n    width: '100%',\n    defaultSortOrder: 'ascend',\n    sorter: (a, b) => {\n      const valA = resolvePlaceholder(a);\n      const valB = resolvePlaceholder(b);\n\n      if (Number.isFinite(valA) && Number.isFinite(valB)) {\n        return (valA as number) - (valB as number);\n      }\n\n      if (typeof valA === 'string' && typeof valB === 'string') {\n        return valA.localeCompare(valB);\n      }\n\n      return 0;\n    },\n    render: (_: any, record: EditReferenceDataType) => resolvePlaceholder(record)\n  }, {\n    render: (_: any, record: EditReferenceDataType) => {\n      return (\n        <Button\n          onClick={() => onDetailsClick(record)}\n          icon={(\n            <FontAwesomeIcon\n              icon={faEdit}\n            />\n          )}\n        />\n      );\n    }\n  }, {\n    render: (_: any, record: EditReferenceDataType) => {\n      return (\n        <Popconfirm\n          title={t('EditReferenceTable.confirmDeleteTitle')}\n          onConfirm={() => onConfirmDelete(record)}\n          placement=\"bottomRight\"\n        >\n          <Button\n            danger={true}\n            icon={(\n              <FontAwesomeIcon\n                icon={faTrash}\n              />\n            )}\n          />\n        </Popconfirm>\n      );\n    }\n  }];\n\n  const getDataSource = () => {\n    if (!value) {\n      return;\n    }\n\n    if (!Array.isArray(value)) {\n      Logger.warn('Reference value must be of of type array.');\n      return;\n    }\n\n    const valueCopy = _cloneDeep(value);\n    valueCopy.forEach(v => {\n      Object.entries(v).forEach(async ([key, val]) => {\n        const isDate = formConfig?.some(cfg => cfg.propertyName === key && cfg.component === 'DATE');\n        if (isDate && val) {\n          const parsedDate = moment(value);\n\n          if (parsedDate.isValid()) {\n            v[key] = moment(val);\n          } else {\n            Logger.warn('Could not parse date');\n            v[key] = null;\n          }\n        }\n\n        const isUpload = formConfig?.some(cfg => cfg.propertyName === key && cfg.component === 'UPLOAD');\n        if (isUpload) {\n          if (Array.isArray(v[key])) {\n            const vMap = v[key]?.map(async (upload: FileInfoList) => ({\n              ...upload,\n              thumbUrl: upload.type.startsWith('image')\n                ? await imageUrlToBase64(\n                  `${client?.getBasePath()}imagefiles/${\n                    upload?.response?.fileUuid\n                  }/thumbnail`\n                )\n                : undefined,\n              url: upload.type.startsWith('image') ? undefined : upload.url\n            }));\n            const result = await Promise.all(vMap);\n            v[key] = result;\n          } else {\n            v[key] = [];\n          }\n        }\n      });\n    });\n\n    const isIdAvailable = valueCopy.every(el => {\n      if (Number.isFinite(el.id)) {\n        return true;\n      }\n\n      if (typeof el.id === 'string' && el.id.length > 0) {\n        return true;\n      }\n\n      return false;\n    });\n\n    if (!isIdAvailable) {\n      Logger.warn('Not all elements in the referenced array contain an id value. ' +\n        'This might result in unexpected behaviour');\n    }\n\n    return valueCopy;\n  };\n\n  const onAddClick = () => {\n    const feature = new OlFeature();\n    // We need to set a temporarily internal id on the feature to have it\n    // detectable while it's not being saved and has no id property set.\n    feature.set('internalId', getUid(feature));\n\n    form.setFieldsValue(feature.getProperties());\n\n    setSelectedFeature(feature);\n    setIsModalOpen(true);\n  };\n\n  const onConfirmDelete = (record: EditReferenceDataType) => {\n    const parentFormValues = parentForm.getFieldsValue();\n\n    if (!parentFormValues[propertyName]) {\n      Logger.warn(`Could not find the property ${propertyName} in the form values`);\n      return;\n    }\n\n    const deleteCandidates = _cloneDeep(parentFormValues[propertyName]);\n\n    if (!Array.isArray(deleteCandidates)) {\n      Logger.warn('The delete candidate is not of required type array');\n      return;\n    }\n\n    const deleteIdx = deleteCandidates.findIndex(deleteCandidate => {\n      if (Number.isFinite(deleteCandidate.id) && (deleteCandidate.id === record.id)) {\n        return true;\n      }\n\n      if (deleteCandidate.internalId && (deleteCandidate.internalId === record.internalId)) {\n        return true;\n      }\n\n      return false;\n    });\n\n    if (deleteIdx === -1) {\n      Logger.warn(`Could not find the index (${record.id}) to delete`);\n      return;\n    }\n\n    deleteCandidates.splice(deleteIdx, 1);\n\n    onChange(deleteCandidates);\n  };\n\n  const onDetailsClick = (record: EditReferenceDataType) => {\n    const feature = new OlFeature();\n    feature.setProperties(record);\n\n    form.setFieldsValue(feature.getProperties());\n\n    setSelectedFeature(feature);\n    setIsModalOpen(true);\n  };\n\n  const updateReferences = () => {\n    const formValues = _cloneDeep<EditReferenceDataType>(form.getFieldsValue(true));\n\n    let existingReferences: EditReferenceDataType[] = [];\n    if (Array.isArray(parentForm.getFieldValue(propertyName))) {\n      existingReferences = _cloneDeep(parentForm.getFieldValue(propertyName));\n    }\n\n    const targetIdx = existingReferences.findIndex(existingReference => {\n      if (Number.isFinite(existingReference.id) && (existingReference.id === formValues.id)) {\n        return true;\n      }\n\n      if (existingReference.internalId && (existingReference.internalId === formValues.internalId)) {\n        return true;\n      }\n\n      return false;\n    });\n\n    if (targetIdx > -1) {\n      // Update\n      existingReferences[targetIdx] = formValues;\n    } else {\n      // Add\n      existingReferences.push(formValues);\n    }\n\n    if (form.isFieldsTouched()) {\n      onChange(existingReferences);\n    }\n  };\n\n  const onCancel = () => {\n    closeModal();\n  };\n\n  const onOk = async () => {\n    try {\n      await form.validateFields();\n    } catch (error) {\n      Logger.warn('Form validation failed: ', error);\n      return;\n    }\n\n    updateReferences();\n\n    closeModal();\n  };\n\n  const closeModal = () => {\n    form.resetFields();\n\n    setIsModalOpen(false);\n    setSelectedFeature(undefined);\n  };\n\n  return (\n    <>\n      <Button\n        className=\"add-reference-button\"\n        onClick={onAddClick}\n        icon={(\n          <FontAwesomeIcon\n            icon={faPlus}\n          />\n        )}\n      />\n      <Table\n        size=\"small\"\n        showHeader={false}\n        pagination={false}\n        columns={columns}\n        rowKey={defaultPropertyName}\n        dataSource={getDataSource()}\n        {...passThroughProps}\n      />\n      <Modal\n        className=\"edit-reference-table-modal\"\n        open={isModalOpen}\n        maskClosable={false}\n        width={600}\n        destroyOnClose={true}\n        title={`${t('EditReferenceTable.modalTitle', {\n          referenceValue: selectedFeature ?\n            resolvePlaceholder(selectedFeature.getProperties() as EditReferenceDataType) :\n            undefined\n        })}`}\n        onCancel={onCancel}\n        onOk={onOk}\n      >\n        {selectedFeature && (\n          <EditFeatureForm\n            form={form}\n            formConfig={formConfig}\n            applyFormDirty={false}\n          />\n        )}\n      </Modal>\n    </>\n  );\n};\n\nexport default EditReferenceTable;\n","import React from 'react';\n\nimport {\n  Input,\n  InputNumber,\n  DatePicker,\n  Select,\n  Switch,\n  Checkbox,\n  Form,\n  FormItemProps\n} from 'antd';\n\nimport {\n  FormInstance,\n  FormProps\n} from 'antd/lib/form/Form';\nimport {\n  UploadChangeParam,\n  UploadFile\n} from 'antd/lib/upload/interface';\n\nimport _debounce from 'lodash/debounce';\nimport _isNil from 'lodash/isNil';\nimport _isObject from 'lodash/isObject';\n\nimport Logger from '@terrestris/base-util/dist/Logger';\nimport ShogunFile from '@terrestris/shogun-util/dist/model/File';\n\nimport {\n  PropertyFormItemEditConfig,\n  PropertyFormItemEditReferenceTableConfig\n} from '@terrestris/shogun-util/dist/model/Layer';\n\nimport useAppDispatch from '../../../hooks/useAppDispatch';\nimport useAppSelector from '../../../hooks/useAppSelector';\nimport useSHOGunAPIClient from '../../../hooks/useSHOGunAPIClient';\nimport {\n  setFormDirty\n} from '../../../store/editFeature';\nimport DisplayField from '../../DisplayField';\nimport FileUpload from '../../FileUpload';\nimport ImageUpload from '../../ImageUpload';\nimport EditReferenceTable from '../EditReferenceTable';\n\nimport './index.less';\n\nexport type EditFeatureFormProps = FormProps & {\n  form: FormInstance;\n  formConfig?: PropertyFormItemEditConfig[];\n  applyFormDirty?: boolean;\n};\n\nexport function isFileConfig(val: any): val is UploadFile<ShogunFile> {\n  if (_isNil(val)) {\n    return false;\n  }\n\n  return val.uid &&\n    !_isNil(val.name) &&\n    !_isNil(val.type) &&\n    !_isNil(val.uid) &&\n    _isObject(val.response) &&\n    !_isNil(val.response.id) &&\n    !_isNil(val.response.fileUuid) &&\n    !_isNil(val.response.fileName) &&\n    !_isNil(val.response.fileType);\n}\n\nexport const EditFeatureForm: React.FC<EditFeatureFormProps> = ({\n  form,\n  formConfig,\n  applyFormDirty = true,\n  ...passThroughProps\n}): JSX.Element => {\n\n  const client = useSHOGunAPIClient();\n  const dispatch = useAppDispatch();\n\n  const formDirty = useAppSelector(\n    state => state.editFeature.formDirty\n  );\n\n  const createFormItem = (fieldCfg: PropertyFormItemEditConfig): React.ReactNode => {\n    let field: React.ReactNode;\n    if (fieldCfg.readOnly) {\n      field = createReadOnlyComponent(fieldCfg);\n    } else if (fieldCfg.component) {\n      field = createFieldComponent(fieldCfg);\n    } else {\n      Logger.warn('FieldConfig is missing `readOnly`, `component` or `dataType` property.');\n      field = (\n        <Input\n          key={fieldCfg.propertyName}\n          placeholder=\"\"\n        />\n      );\n    }\n\n    const formItemProps: FormItemProps = {\n      rules: []\n    };\n\n    formItemProps.rules = [{\n      required: fieldCfg.required\n    }];\n\n    if ((fieldCfg.component === 'SWITCH' || fieldCfg.component === 'CHECKBOX') && !fieldCfg.readOnly) {\n      formItemProps.valuePropName = 'checked';\n    }\n\n    if (fieldCfg.component === 'UPLOAD' && !fieldCfg.readOnly) {\n      formItemProps.valuePropName = 'fileList';\n      /**\n       * Setting `getValueFromEvent` to provide the proper file list to the antd Upload component.\n       */\n      formItemProps.getValueFromEvent = (e: UploadFile<ShogunFile>[] | UploadChangeParam<UploadFile<ShogunFile>>) => {\n        if (Array.isArray(e)) {\n          return e;\n        }\n        return e?.fileList;\n      };\n    }\n\n    return (\n      <Form.Item\n        key={fieldCfg.propertyName}\n        name={fieldCfg.propertyName}\n        label={fieldCfg.displayName ?? fieldCfg.propertyName}\n        {...formItemProps}\n      >\n        {field}\n      </Form.Item>\n    );\n  };\n\n  const createReadOnlyComponent = (fieldConfig: PropertyFormItemEditConfig): React.ReactNode => {\n    return (\n      <DisplayField\n        {...fieldConfig.fieldProps}\n      />\n    );\n  };\n\n  const createFieldComponent = (fieldCfg: PropertyFormItemEditConfig): React.ReactNode => {\n    if (!client) {\n      return;\n    }\n\n    switch (fieldCfg.component) {\n      case 'CHECKBOX':\n        return (\n          <Checkbox\n            {...fieldCfg?.fieldProps}\n          />\n        );\n      case 'DATE':\n        return (\n          <DatePicker\n            {...fieldCfg?.fieldProps}\n          />\n        );\n      case 'DISPLAY':\n        return (\n          <span {...fieldCfg?.fieldProps} />\n        );\n      case 'INPUT':\n        return (\n          <Input\n            {...fieldCfg?.fieldProps}\n          />\n        );\n      case 'NUMBER':\n        return (\n          <InputNumber\n            {...fieldCfg?.fieldProps}\n          />\n        );\n      case 'SELECT':\n        return (\n          <Select\n            allowClear={true}\n            {...fieldCfg?.fieldProps}\n          />\n        );\n      case 'SWITCH':\n        return (\n          <Switch\n            {...fieldCfg?.fieldProps}\n          />\n        );\n      case 'TEXTAREA':\n        return (\n          <Input.TextArea\n            {...fieldCfg?.fieldProps}\n          />\n        );\n      case 'UPLOAD':\n        if (fieldCfg?.fieldProps?.type === 'IMAGE') {\n          return (\n            <ImageUpload\n              {...fieldCfg?.fieldProps}\n            />\n          );\n        } else {\n          return (\n            <FileUpload\n              {...fieldCfg?.fieldProps}\n            />\n          );\n        }\n      case 'REFERENCE_TABLE': {\n        const referenceTableConfig = (fieldCfg as PropertyFormItemEditReferenceTableConfig);\n\n        return (\n          <EditReferenceTable\n            key={referenceTableConfig.propertyName}\n            tablePropertyName={referenceTableConfig.tablePropertyName}\n            propertyName={referenceTableConfig.propertyName}\n            formConfig={referenceTableConfig.editFormConfig}\n            parentForm={form}\n            {...referenceTableConfig.fieldProps}\n          />\n        );\n      }\n      default:\n        Logger.error(`Component type \"${fieldCfg?.component}\" is not supported`);\n        return <></>;\n    }\n  };\n\n  const onValuesChange = async (changedValues: any) => {\n    if (applyFormDirty && changedValues && !formDirty) {\n      dispatch(setFormDirty(true));\n    }\n  };\n\n  return (\n    <Form\n      className=\"edit-feature-form\"\n      form={form}\n      labelCol={{\n        span: 8\n      }}\n      labelAlign=\"left\"\n      labelWrap\n      onValuesChange={_debounce(onValuesChange, 250)}\n      {...passThroughProps}\n    >\n      { formConfig?.map(createFormItem) }\n    </Form>\n  );\n};\n\nexport default EditFeatureForm;\n","import {\n  useCallback\n} from 'react';\n\nimport OlSourceImageWMS from 'ol/source/ImageWMS';\nimport OlSourceTileWMS from 'ol/source/TileWMS';\n\nimport { UrlUtil } from '@terrestris/base-util/dist/UrlUtil/UrlUtil';\n\nimport {\n  WmsLayer\n} from '@terrestris/ol-util/dist/typeUtils/typeUtils';\n\nimport {\n  getBearerTokenHeader\n} from '@terrestris/shogun-util/dist/security/getBearerTokenHeader';\n\nimport useSHOGunAPIClient from './useSHOGunAPIClient';\n\nexport type LocalGeometryType = 'MultiPoint' | 'Point' | 'MultiLineString' | 'LineString' | 'MultiPolygon' | 'Polygon';\nexport type GeometryType = 'gml:MultiPoint' | 'gml:Point' | 'gml:MultiLineString' | 'gml:LineString' | 'gml:MultiPolygon' | 'gml:Polygon';\n\nexport type Property = {\n  localType: 'int' | 'number' | 'string' | 'boolean' | 'date' | LocalGeometryType;\n  maxOccurs: 0 | 1;\n  minOccurs: 0 | 1;\n  name: string;\n  nillable: boolean;\n  type: 'xsd:int' | 'xsd:number' | 'xsd:string' | 'xsd:boolean' | 'xsd:date' | GeometryType;\n};\n\nexport type FeatureType = {\n  typeName: string;\n  properties: Property[];\n};\n\nexport type DescribeFeatureType = {\n  elementFormDefault: string;\n  featureTypes: FeatureType[];\n  targetNamespace: string;\n  targetPrefix: string;\n};\n\ntype DescribeFeatureTypeCache = Record<string, DescribeFeatureType>;\n\nexport const isGeometryType = (propertyType: string): propertyType is GeometryType => {\n  const geometryTypes = [\n    'gml:MultiPoint',\n    'gml:Point',\n    'gml:MultiLineString',\n    'gml:LineString',\n    'gml:MultiPolygon',\n    'gml:Polygon'\n  ];\n\n  return geometryTypes.includes(propertyType);\n};\n\nexport const useExecuteWfsDescribeFeatureType = () => {\n  const client = useSHOGunAPIClient();\n\n  const cacheKey = 'describeFeatureTypeCache';\n\n  const executeWfsDescribeFeatureType = useCallback(async (layer: WmsLayer) => {\n    let url;\n\n    const source = layer.getSource();\n    if (source instanceof OlSourceImageWMS) {\n      url = source.getUrl();\n    }\n    if (source instanceof OlSourceTileWMS) {\n      const urls = source.getUrls();\n      url = urls ? urls[0] : undefined;\n    }\n\n    if (!url) {\n      return;\n    }\n\n    if (url.endsWith('?')) {\n      url = url.slice(0, -1);\n    }\n\n    const typeName: string | undefined = layer.getSource()?.getParams().LAYERS;\n\n    if (!typeName) {\n      return;\n    }\n\n    // TODO localStorage might be a better choice here, but not sure when to invalidate the cache then.\n    const describeFeatureTypeCache = JSON.parse(sessionStorage.getItem(cacheKey) || '{}') as DescribeFeatureTypeCache;\n\n    const cacheEntry = describeFeatureTypeCache[typeName];\n\n    if (cacheEntry) {\n      return cacheEntry;\n    }\n\n    const params = {\n      SERVICE: 'WFS',\n      REQUEST: 'DescribeFeatureType',\n      VERSION: '2.0.0',\n      OUTPUTFORMAT: 'application/json',\n      TYPENAMES: typeName\n    };\n\n    const defaultHeaders = {\n      'Content-Type': 'application/json'\n    };\n\n    const response = await fetch(`${url}?${UrlUtil.objectToRequestString(params)}`, {\n      method: 'GET',\n      headers: layer.get('useBearerToken') ? {\n        ...defaultHeaders,\n        ...getBearerTokenHeader(client?.getKeycloak())\n      } : defaultHeaders\n    });\n\n    if (!response.ok) {\n      throw new Error('No successful response while executing a WFS-DescribeFeature');\n    }\n\n    const responseJson = await response.json() as DescribeFeatureType;\n\n    describeFeatureTypeCache[typeName] = responseJson;\n\n    sessionStorage.setItem(cacheKey, JSON.stringify(describeFeatureTypeCache));\n\n    return responseJson;\n  }, [client]);\n\n  return executeWfsDescribeFeatureType;\n};\n\nexport default useExecuteWfsDescribeFeatureType;\n","import {\n  useCallback\n} from 'react';\n\nimport {\n  FormInstance\n} from 'antd';\n\nimport ClientConfiguration from 'clientConfig';\n\nimport _cloneDeep from 'lodash/cloneDeep';\n\nimport {\n  isMoment\n} from 'moment';\n\nimport {\n  isEmpty\n} from 'ol/extent';\nimport OlFeature from 'ol/Feature';\nimport OlFormatWFS, {\n  WriteTransactionOptions as OlWriteTransactionOptions\n} from 'ol/format/WFS';\n\nimport {\n  WmsLayer\n} from '@terrestris/ol-util/dist/typeUtils/typeUtils';\n\nimport {\n  useMap\n} from '@terrestris/react-util/dist/Hooks/useMap/useMap';\n\nimport {\n  PropertyFormTabConfig,\n  PropertyFormItemEditConfig\n} from '@terrestris/shogun-util/dist/model/Layer';\n\nimport {\n  isFileConfig\n} from '../components/EditFeatureDrawer/EditFeatureForm';\n\nimport useAppSelector from './useAppSelector';\nimport useExecuteWfsDescribeFeatureType, {\n  isGeometryType\n} from './useExecuteWfsDescribeFeatureType';\nimport useSHOGunAPIClient from './useSHOGunAPIClient';\n\nexport type WriteWfsTransactionOpts = {\n  layer: WmsLayer;\n  upsertFeatures?: OlFeature[];\n  deleteFeatures?: OlFeature[];\n  form?: FormInstance;\n};\n\nexport type FileInfoList = {\n  uid: string;\n  lastModified: number;\n  name: string;\n  type: string;\n  url: string;\n  response: {\n    id: number;\n    created: string;\n    fileName: string;\n    fileType: string;\n    fileUuid: string;\n  };\n};\n\nexport const useWriteWfsTransaction = () => {\n  const map = useMap();\n  const executeWfsDescribeFeatureType = useExecuteWfsDescribeFeatureType();\n  const client = useSHOGunAPIClient();\n  const allowedEditMode = useAppSelector(state => state.editFeature.userEditMode);\n\n  const cleanFormValues = useCallback((formValues: Record<string, any>,\n    formConfig: PropertyFormTabConfig<PropertyFormItemEditConfig>[], stringify?: boolean) => {\n    for (const [key, value] of Object.entries(formValues)) {\n      if (Array.isArray(value)) {\n        const cleanedValue = value.map(v => cleanFormValues(v, formConfig));\n        formValues[key] = stringify ? JSON.stringify(cleanedValue) : cleanedValue;\n      }\n\n      // Transform undefined to null values.\n      if (value === undefined) {\n        formValues[key] = null;\n      }\n\n      // Filter out read-only fields.\n      const isReadOnly = formConfig.some(cfg => cfg.children\n        ?.some(child => child.propertyName === key && child.readOnly));\n\n      if (isReadOnly) {\n        delete formValues[key];\n      }\n\n      // Transform moments back to iso string.\n      if (isMoment(value)) {\n        formValues[key] = value.toISOString();\n      }\n\n      if (Array.isArray(value) && value.length > 0 && isFileConfig(value[0])) {\n        const filePath = value[0].response?.fileType?.startsWith('image/') ? 'imagefiles/' : 'files/';\n        const fileInfoList: FileInfoList[] = value.map((val: FileInfoList) => ({\n          uid: val.uid,\n          lastModified: val.lastModified,\n          name: val.name,\n          type: val.type,\n          url: `${client?.getBasePath()}${filePath}${val.response.fileUuid}`,\n          response: {\n            id: val.response?.id,\n            created: val.response?.created,\n            fileName: val.response?.fileName,\n            fileType: val.response?.fileType,\n            fileUuid: val.response?.fileUuid\n          }\n        }));\n        formValues[key] = JSON.stringify(fileInfoList);\n      }\n    }\n\n    return formValues;\n  }, [client]);\n\n  const writeWfsTransaction = useCallback(async (opts: WriteWfsTransactionOpts) => {\n    if (!map) {\n      return;\n    }\n\n    const inserts: OlFeature[] = [];\n    const updates: OlFeature[] = [];\n    const deletes: OlFeature[] = [];\n\n    const describeFeatureType = await executeWfsDescribeFeatureType(opts.layer);\n\n    if (!describeFeatureType) {\n      return;\n    }\n\n    const formConfig = opts.layer.get('editFormConfig') as PropertyFormTabConfig<PropertyFormItemEditConfig>[];\n\n    const geomProperty = describeFeatureType.featureTypes[0]?.properties\n      ?.find(property => isGeometryType(property.type));\n\n    let overallUpdateMode = false;\n\n    if (opts.upsertFeatures) {\n      for (const feature of opts.upsertFeatures) {\n        const feat = new OlFeature();\n\n        const geometry = feature.getGeometry()?.clone();\n\n        if (geometry && !isEmpty(geometry.getExtent()) && allowedEditMode?.includes('EDIT_GEOMETRY')) {\n          const geomPropName = geomProperty?.name ?? 'geom';\n          feat.set(geomPropName, geometry);\n          feat.setGeometryName(geomPropName);\n        }\n\n        if (opts.form) {\n          feat.setProperties(cleanFormValues(_cloneDeep(opts.form?.getFieldsValue()), formConfig, true));\n        }\n\n        const updateMode = !!feature.getId();\n\n        if (updateMode && !overallUpdateMode) {\n          overallUpdateMode = true;\n        }\n\n        if (updateMode) {\n          feat.setId(feature.getId());\n        }\n\n        if (updateMode) {\n          updates.push(feat);\n        } else {\n          inserts.push(feat);\n        }\n      }\n    }\n\n    if (opts.deleteFeatures) {\n      deletes.push(...opts.deleteFeatures);\n    }\n\n    const transactionOpts: OlWriteTransactionOptions = {\n      featureNS: describeFeatureType.targetNamespace,\n      featurePrefix: describeFeatureType.targetPrefix,\n      featureType: opts.layer.getSource()?.getParams().LAYERS,\n      srsName: map.getView().getProjection().getCode(),\n      version: '1.1.0',\n      nativeElements: []\n    };\n\n    const format = new OlFormatWFS();\n\n    const transaction = format.writeTransaction(inserts, updates, deletes, transactionOpts);\n\n    if (overallUpdateMode && ClientConfiguration.wfsLockFeatureEnabled) {\n      const rootNode = transaction.getRootNode() as Element;\n      const lockId = document.createElementNS('http://www.opengis.net/wfs', 'LockId');\n      const lockIdValue = document.createTextNode('GeoServer');\n      lockId.appendChild(lockIdValue);\n      rootNode.appendChild(lockId);\n    }\n\n    return transaction;\n  }, [map, allowedEditMode, executeWfsDescribeFeatureType, cleanFormValues]);\n\n  return writeWfsTransaction;\n};\n\nexport default useWriteWfsTransaction;\n","import React, {\n  useEffect\n} from 'react';\n\nimport {\n  Drawer\n} from 'antd';\n\nimport type {\n  DrawerProps\n} from 'antd/es/drawer';\n\nimport { useMap } from '@terrestris/react-util/dist/Hooks/useMap/useMap';\n\nimport './index.less';\n\nexport type MapDrawerProps = DrawerProps;\n\nexport const MapDrawer: React.FC<MapDrawerProps> = ({\n  open,\n  children,\n  ...passThroughProps\n}) => {\n\n  const map = useMap();\n\n  useEffect(() => {\n    document.querySelectorAll('#map')[0]?.classList.toggle('bisected', !!open);\n  }, [open]);\n\n  const onAfterDrawerOpenChange = () => {\n    map?.updateSize();\n  };\n\n  return (\n    <Drawer\n      rootClassName=\"map-drawer\"\n      mask={false}\n      open={open}\n      placement=\"right\"\n      width={getComputedStyle(document.documentElement).getPropertyValue('--drawerWidth')}\n      afterOpenChange={onAfterDrawerOpenChange}\n      {...passThroughProps}\n    >\n      {children}\n    </Drawer>\n  );\n};\n\nexport default MapDrawer;\n","import {\n  useCallback\n} from 'react';\n\nimport {\n  FeatureCollection\n} from 'geojson';\n\nimport {\n  Extent as OlExtent\n} from 'ol/extent';\nimport OlFormatFilter from 'ol/format/filter/Filter';\nimport OlFormatWFS from 'ol/format/WFS';\nimport OlSourceImageWMS from 'ol/source/ImageWMS';\nimport OlSourceTileWMS from 'ol/source/TileWMS';\n\nimport {\n  WmsLayer\n} from '@terrestris/ol-util/dist/typeUtils/typeUtils';\n\nimport {\n  useMap\n} from '@terrestris/react-util/dist/Hooks/useMap/useMap';\n\nimport {\n  getBearerTokenHeader\n} from '@terrestris/shogun-util/dist/security/getBearerTokenHeader';\n\nimport useExecuteWfsDescribeFeatureType, {\n  isGeometryType\n} from './useExecuteWfsDescribeFeatureType';\nimport useSHOGunAPIClient from './useSHOGunAPIClient';\n\nexport type GetFeatureOpts = {\n  /**\n   * The layer to generate the WFS GetFeature request for.\n   */\n  layer: WmsLayer;\n  /**\n   * The filter to apply to the GetFeature request.\n   */\n  filter?: OlFormatFilter | Element;\n  /**\n   * The properties to return for each feature.\n   */\n  propertyNames?: string[];\n  /**\n   * Maximum number of features to get.\n   */\n  maxFeatures?: number;\n  /**\n   * Extent to use for the BBOX filter. The geometryName option must be set.\n   */\n  bbox?: OlExtent;\n};\n\nexport const useExecuteGetFeature = () => {\n  const client = useSHOGunAPIClient();\n  const map = useMap();\n  const executeWfsDescribeFeatureType = useExecuteWfsDescribeFeatureType();\n\n  const executeGetFeature = useCallback(async (opts: GetFeatureOpts, version = '1.1.0') => {\n    if (!map) {\n      return;\n    }\n\n    const describeFeatureType = await executeWfsDescribeFeatureType(opts.layer);\n\n    if (!describeFeatureType) {\n      return;\n    }\n\n    let url;\n\n    const source = opts.layer.getSource();\n    if (source instanceof OlSourceImageWMS) {\n      url = source.getUrl();\n    }\n    if (source instanceof OlSourceTileWMS) {\n      const urls = source.getUrls();\n      url = urls ? urls[0] : undefined;\n    }\n\n    if (!url) {\n      return;\n    }\n\n    if (url.endsWith('?')) {\n      url = url.slice(0, -1);\n    }\n\n    // We expect a single feature type here since we filter on the feature type\n    // in the describe feature type request.\n    const geomProperty = describeFeatureType.featureTypes[0]?.properties\n      ?.find(property => isGeometryType(property.type));\n\n    const featureRequest = new OlFormatWFS({version: version}).writeGetFeature({\n      srsName: map.getView().getProjection().getCode(),\n      featureNS: describeFeatureType.targetNamespace,\n      featurePrefix: describeFeatureType.targetPrefix,\n      featureTypes: [source?.getParams().LAYERS],\n      outputFormat: 'application/json',\n      maxFeatures: opts.maxFeatures,\n      // Ensure the geometry is always returned.\n      propertyNames: (opts.propertyNames && geomProperty?.name) ? [...opts.propertyNames, geomProperty?.name] : undefined,\n      bbox: opts.bbox,\n      filter: opts.filter instanceof OlFormatFilter ? opts.filter : undefined,\n      geometryName: geomProperty?.name\n    });\n\n    if (featureRequest instanceof Element && opts.filter instanceof Element) {\n      featureRequest.getElementsByTagName('Query')[0].appendChild(opts.filter);\n    }\n\n    const defaultHeaders = {\n      'Content-Type': 'application/json'\n    };\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: opts.layer?.get('useBearerToken') ? {\n        ...defaultHeaders,\n        ...getBearerTokenHeader(client?.getKeycloak())\n      } : defaultHeaders,\n      body: new XMLSerializer().serializeToString(featureRequest)\n    });\n\n    if (!response.ok) {\n      throw new Error('No successful response while executing a WFS-GetFeature');\n    }\n\n    return await response.json() as FeatureCollection;\n  }, [client, executeWfsDescribeFeatureType, map]);\n\n  return executeGetFeature;\n};\n\nexport default useExecuteGetFeature;\n","import * as React from 'react';\n\nimport './index.less';\n\ninterface DefaultProps {\n  alignment: 'horizontal' | 'vertical';\n}\n\nexport interface BaseProps extends Partial<DefaultProps> {\n  className?: string;\n}\n\nexport type ToolbarProps = BaseProps & React.HTMLAttributes<HTMLDivElement>;\n\nconst Toolbar: React.FC<ToolbarProps> = ({\n  alignment = 'horizontal',\n  className = '',\n  children,\n  ...passThroughProps\n}) => {\n  const baseClassName = 'toolbar';\n  const finalClassName = className\n    ? `${className} ${baseClassName}`\n    : baseClassName;\n\n  return (\n    <div\n      className={`${finalClassName} ${alignment}-toolbar`}\n      role=\"toolbar\"\n      {...passThroughProps}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default Toolbar;\n","import React, {\n  useEffect,\n  useMemo,\n  useRef,\n  useState\n} from 'react';\n\nimport {\n  faPencil,\n  faTrash,\n  faDrawPolygon,\n  faUndo\n} from '@fortawesome/free-solid-svg-icons';\nimport {\n  FontAwesomeIcon\n} from '@fortawesome/react-fontawesome';\n\nimport { TooltipPlacement } from 'antd/es/tooltip';\nimport {\n  FeatureCollection,\n  Feature\n} from 'geojson';\nimport { t } from 'i18next';\n\nimport _isEmpty from 'lodash/isEmpty';\n\nimport { isEmpty as isEmptyOlExtent } from 'ol/extent';\nimport OlFormatGeoJson from 'ol/format/GeoJSON';\nimport { DrawEvent as OlDrawEvent } from 'ol/interaction/Draw';\nimport OlLayerVector from 'ol/layer/Vector';\nimport OlSourceVector from 'ol/source/Vector';\n\nimport { DeleteButton } from '@terrestris/react-geo/dist/Button/DeleteButton/DeleteButton';\nimport DrawButton from '@terrestris/react-geo/dist/Button/DrawButton/DrawButton';\nimport { ModifyButton } from '@terrestris/react-geo/dist/Button/ModifyButton/ModifyButton';\nimport SimpleButton from '@terrestris/react-geo/dist/Button/SimpleButton/SimpleButton';\nimport { ToggleGroup } from '@terrestris/react-geo/dist/Button/ToggleGroup/ToggleGroup';\n\nimport { useMap } from '@terrestris/react-util/dist/Hooks/useMap/useMap';\nimport {\n  DigitizeUtil\n} from '@terrestris/react-util/dist/Util/DigitizeUtil';\n\nimport useAppDispatch from '../../../hooks/useAppDispatch';\nimport useAppSelector from '../../../hooks/useAppSelector';\n\nimport {\n  setFormDirty\n} from '../../../store/editFeature';\nimport Toolbar, { ToolbarProps } from '../../Toolbar';\n\nimport './index.less';\n\nexport type EditFeatureGeometryToolbarProps = ToolbarProps & {\n  feature: Feature;\n  historyLength?: number;\n};\n\ntype DrawType = 'Point' | 'LineString' | 'Polygon';\n\ntype EditHistory = {\n  past: FeatureCollection[];\n  future: FeatureCollection[];\n};\nexport const EditFeatureGeometryToolbar: React.FC<EditFeatureGeometryToolbarProps> = ({\n  feature,\n  historyLength = 10\n}) => {\n\n  const editHistory = useRef<EditHistory>({\n    past: [],\n    future: []\n  });\n\n  const map = useMap();\n  const dispatch = useAppDispatch();\n\n  const [editLayer, setEditLayer] = useState<OlLayerVector<OlSourceVector>>();\n  const [, setRevision] = useState<number>(0);\n  const [selected, setSelected] = useState<string | undefined>(undefined);\n\n  const gjFormat = useMemo(() => new OlFormatGeoJson(), []);\n\n  const allowedEditMode = useAppSelector(state => state.editFeature.userEditMode);\n  const formDirty = useAppSelector(state => state.editFeature.formDirty);\n\n  useEffect(() => {\n    if (!map) {\n      return;\n    }\n\n    if (!editLayer) {\n      setEditLayer(DigitizeUtil.getDigitizeLayer(map));\n    }\n\n    return () => {\n      if (editLayer) {\n        map?.removeLayer(editLayer);\n      }\n    };\n  }, [editLayer, map]);\n\n  useEffect(() => {\n    const isModified = editHistory.current.past.length > 0;\n    if (isModified && !formDirty) {\n      dispatch(setFormDirty(true));\n    }\n    // we only want to change formDirty state when the editHistory changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, editHistory.current.past]);\n\n  useEffect(() => {\n    if (editLayer && feature?.id) {\n      editLayer.getSource()?.clear();\n      const olFeat = gjFormat.readFeature(feature);\n\n      if (Array.isArray(olFeat)) {\n        return;\n      }\n\n      const source = editLayer.getSource() as OlSourceVector;\n      source.addFeature(olFeat);\n      setRevision(r => r + 1);\n\n      if (!isEmptyOlExtent(source.getExtent())) {\n        map?.getView().fit(source.getExtent(), {\n          padding: [50, 50, 50, 50]\n        });\n      }\n    }\n  }, [feature, editLayer, gjFormat, map]);\n\n  const undoEdit = () => {\n\n    const editSource = editLayer?.getSource();\n    const features = editSource?.getFeatures();\n\n    if (!features) {\n      return;\n    }\n\n    const clone: FeatureCollection = gjFormat.writeFeaturesObject(features);\n    const previousSource = editHistory.current.past[editHistory.current.past.length - 1];\n    if (!_isEmpty(previousSource)) {\n      editSource?.clear();\n      editSource?.addFeatures(gjFormat.readFeatures(previousSource));\n      editHistory.current = {\n        past: editHistory.current.past.slice(0, -1),\n        future: [...editHistory.current.future, clone].slice(-historyLength)\n      };\n      setRevision(r => r + 1);\n    }\n  };\n\n  const redoEdit = () => {\n\n    const editSource = editLayer?.getSource();\n    const features = editSource?.getFeatures();\n\n    if (!features) {\n      return;\n    }\n\n    const clone = gjFormat.writeFeaturesObject(features);\n    const nextSource = editHistory.current.future[editHistory.current.future.length - 1];\n    if (!_isEmpty(nextSource)) {\n      editSource?.clear();\n      editSource?.addFeatures(gjFormat.readFeatures(nextSource));\n\n      editHistory.current = {\n        future: editHistory.current.future.slice(0, -1),\n        past: [...editHistory.current.past, clone].slice(-historyLength)\n      };\n      setRevision(r => r + 1);\n    }\n  };\n\n  const onDrawEnd = (e: OlDrawEvent) => {\n    // overwrite existing geometry of feature\n    if (!feature.geometry.type.toLocaleLowerCase().startsWith('multi')) {\n      const source = editLayer?.getSource();\n      const existingFeature = source?.getFeatures()[0];\n      if (existingFeature) {\n        // drawbutton automatically adds the feature to the source so we need to remove it again\n        source?.once('addfeature', (e2) => source.removeFeature(e2.feature!));\n        existingFeature.setGeometry(e.feature.getGeometry());\n      }\n    }\n    updateRevision();\n  };\n\n  const updateRevision = () => {\n\n    const features = editLayer?.getSource()?.getFeatures();\n\n    if (!features) {\n      return;\n    }\n\n    const clone: FeatureCollection = gjFormat.writeFeaturesObject(features);\n    editHistory.current = {\n      ...editHistory.current,\n      past: [...editHistory.current.past, clone].slice(-10)\n    };\n    setRevision(r => r + 1);\n  };\n\n  const btnTooltipProps = {\n    tooltipPlacement: 'left' as TooltipPlacement,\n    tooltipProps: {\n      mouseEnterDelay: 0.5\n    }\n  };\n\n  if (!editLayer) {\n    return <></>;\n  }\n\n  if (allowedEditMode.includes('EDIT_GEOMETRY')) {\n    return (\n      <Toolbar\n        className=\"geometry-edit-tb\"\n        alignment=\"vertical\"\n      >\n        <ToggleGroup\n          selected={selected}\n          onChange={(_evt: any, value: string | undefined) => {\n            setSelected(value);\n          }}\n        >\n          {\n            allowedEditMode.includes('CREATE') ?\n              <DrawButton\n                value=\"create\"\n                icon={\n                  <FontAwesomeIcon icon={faPencil} />\n                }\n                pressedIcon={\n                  <FontAwesomeIcon icon={faPencil} />\n                }\n                name=\"draw\"\n                digitizeLayer={editLayer}\n                tooltip={t('EditFeatureGeometryToolbar.draw')}\n                drawType={feature.geometry.type as DrawType}\n                onDrawEnd={onDrawEnd}\n                {...btnTooltipProps}\n              />\n              : <></>\n          }\n          {\n            allowedEditMode.includes('UPDATE') ?\n              <ModifyButton\n                value=\"update\"\n                icon={\n                  <FontAwesomeIcon icon={faDrawPolygon} />\n                }\n                pressedIcon={\n                  <FontAwesomeIcon icon={faDrawPolygon} />\n                }\n                name=\"edit\"\n                digitizeLayer={editLayer}\n                tooltip={t('EditFeatureGeometryToolbar.edit')}\n                onModifyStart={updateRevision}\n                onModifyEnd={updateRevision}\n                onTranslateEnd={updateRevision}\n                {...btnTooltipProps}\n              />\n              : <></>\n          }\n          {\n            allowedEditMode.includes('DELETE') ?\n              <DeleteButton\n                value=\"delete\"\n                icon={\n                  <FontAwesomeIcon icon={faTrash} />\n                }\n                pressedIcon={\n                  <FontAwesomeIcon icon={faTrash} />\n                }\n                name=\"delete\"\n                digitizeLayer={editLayer}\n                tooltip={t('EditFeatureGeometryToolbar.delete')}\n                onFeatureRemove={updateRevision}\n                {...btnTooltipProps}\n              />\n              : <></>\n          }\n        </ToggleGroup>\n        <SimpleButton\n          icon={\n            <FontAwesomeIcon icon={faUndo} />\n          }\n          tooltip={t('EditFeatureGeometryToolbar.undo')}\n          onClick={undoEdit}\n          disabled={editHistory.current.past?.length === 0}\n          {...btnTooltipProps}\n        />\n        <SimpleButton\n          icon={\n            <FontAwesomeIcon\n              icon={faUndo}\n              flip=\"horizontal\"\n            />\n          }\n          tooltip={t('EditFeatureGeometryToolbar.redo')}\n          onClick={redoEdit}\n          disabled={editHistory.current.future?.length === 0}\n          {...btnTooltipProps}\n        />\n      </Toolbar>\n    );\n  } else {\n    return <></>;\n  }\n};\n\nexport default EditFeatureGeometryToolbar;\n","import React from 'react';\n\nimport {\n  Tabs,\n  TabsProps\n} from 'antd';\n\nimport {\n  FormInstance\n} from 'antd/lib/form/Form';\n\nimport {\n  Tab\n} from 'rc-tabs/lib/interface';\n\nimport {\n  PropertyFormItemEditConfig,\n  PropertyFormTabConfig\n} from '@terrestris/shogun-util/dist/model/Layer';\n\nimport EditFeatureForm from '../EditFeatureForm';\n\nexport type EditFeatureTabsProps = TabsProps & {\n  tabConfig?: PropertyFormTabConfig<PropertyFormItemEditConfig>[];\n  form: FormInstance;\n  initialValues?: Record<string, any>;\n};\n\nexport const EditFeatureTabs: React.FC<EditFeatureTabsProps> = ({\n  tabConfig,\n  form,\n  initialValues,\n  ...passThroughProps\n}) => {\n\n  const items = tabConfig?.map((config, idx) => {\n    return {\n      label: config.title,\n      key: `${idx}`,\n      forceRender: true,\n      children: (\n        <EditFeatureForm\n          name={config.title}\n          form={form}\n          initialValues={initialValues}\n          formConfig={config.children}\n        />\n      )\n    } as Tab;\n  });\n\n  return (\n    <Tabs\n      items={items}\n      {...passThroughProps}\n    />\n  );\n};\n\nexport default EditFeatureTabs;\n","import React, {\n  useState\n} from 'react';\n\nimport {\n  faTrash\n} from '@fortawesome/free-solid-svg-icons';\nimport {\n  FontAwesomeIcon\n} from '@fortawesome/react-fontawesome';\n\nimport {\n  Button,\n  ButtonProps,\n  Popconfirm\n} from 'antd';\n\nimport {\n  Feature\n} from 'geojson';\n\nimport OlFormatGeoJSON from 'ol/format/GeoJSON';\n\nimport {\n  useTranslation\n} from 'react-i18next';\n\nimport Logger from '@terrestris/base-util/dist/Logger';\n\nimport {\n  WmsLayer,\n  isWmsLayer\n} from '@terrestris/ol-util/dist/typeUtils/typeUtils';\nimport {\n  useMap\n} from '@terrestris/react-util/dist/Hooks/useMap/useMap';\n\nimport useExecuteWfsTransaction from '../../../hooks/useExecuteWfsTransaction';\nimport useWriteWfsTransaction from '../../../hooks/useWriteWfsTransaction';\n\nexport type DeleteButtonProps = ButtonProps & {\n  feature: Feature;\n  layer: WmsLayer;\n  onError?: (error: unknown) => void;\n  onSuccess?: () => void;\n};\n\nexport const DeleteButton: React.FC<DeleteButtonProps> = ({\n  feature,\n  layer,\n  onError = () => {},\n  onSuccess = () => {},\n  ...passThroughProps\n}) => {\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const {\n    t\n  } = useTranslation();\n\n  const map = useMap();\n\n  const writeWfsTransaction = useWriteWfsTransaction();\n  const executeWfsTransaction = useExecuteWfsTransaction();\n\n  const onConfirmDelete = async () => {\n    if (!map) {\n      return;\n    }\n\n    if (!layer || !isWmsLayer(layer)) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const olFeature = new OlFormatGeoJSON().readFeature(feature);\n\n      const transaction = await writeWfsTransaction({\n        deleteFeatures: Array.isArray(olFeature) ? olFeature : [olFeature],\n        layer: layer\n      });\n\n      if (!transaction) {\n        return;\n      }\n\n      await executeWfsTransaction({\n        layer: layer,\n        transaction: transaction\n      });\n\n      layer.getSource()?.refresh();\n\n      onSuccess();\n    } catch (error) {\n      Logger.error(error);\n\n      onError(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Popconfirm\n      title={t('DeleteButton.confirm')}\n      onConfirm={onConfirmDelete}\n      placement='bottomRight'\n    >\n      <Button\n        type='primary'\n        loading={loading}\n        disabled={!feature.id}\n        danger\n        icon={(\n          <FontAwesomeIcon\n            icon={faTrash}\n          />\n        )}\n        {...passThroughProps}\n      >\n        {\n          t('DeleteButton.title')\n        }\n      </Button>\n    </Popconfirm>\n  );\n};\n\nexport default DeleteButton;\n","import React from 'react';\n\nimport {\n  faRotateLeft\n} from '@fortawesome/free-solid-svg-icons';\nimport {\n  FontAwesomeIcon\n} from '@fortawesome/react-fontawesome';\n\nimport {\n  Button,\n  ButtonProps\n} from 'antd';\n\nimport {\n  FormInstance\n} from 'antd/lib/form/Form';\n\nimport {\n  Feature\n} from 'geojson';\n\nimport OlFormatGeoJson from 'ol/format/GeoJSON';\nimport {\n  useTranslation\n} from 'react-i18next';\n\nimport {\n  useMap\n} from '@terrestris/react-util/dist/Hooks/useMap/useMap';\nimport { DigitizeUtil } from '@terrestris/react-util/dist/Util/DigitizeUtil';\n\nimport useAppDispatch from '../../../hooks/useAppDispatch';\nimport {\n  setFormDirty\n} from '../../../store/editFeature';\n\nexport type ResetButtonProps = Omit<ButtonProps, 'form'> & {\n  feature: Feature;\n  form: FormInstance;\n};\n\nexport const ResetButton: React.FC<ResetButtonProps> = ({\n  feature,\n  form,\n  ...passThroughProps\n}) => {\n\n  const {\n    t\n  } = useTranslation();\n\n  const map = useMap();\n\n  const dispatch = useAppDispatch();\n\n  const onClick = () => {\n    form.resetFields();\n    dispatch(setFormDirty(false));\n\n    if (map) {\n      const editLayer = DigitizeUtil.getDigitizeLayer(map);\n      if (editLayer) {\n        editLayer.getSource()?.clear();\n        const format = new OlFormatGeoJson();\n        const olFeat = format.readFeature(feature);\n\n        if (Array.isArray(olFeat)) {\n          return;\n        }\n\n        editLayer.getSource()?.addFeature(olFeat);\n      }\n    }\n  };\n\n  return (\n    <Button\n      type='primary'\n      onClick={onClick}\n      icon={(\n        <FontAwesomeIcon\n          icon={faRotateLeft}\n        />\n      )}\n      {...passThroughProps}\n    >\n      {\n        t('ResetButton.title')\n      }\n    </Button>\n  );\n};\n\nexport default ResetButton;\n","import React from 'react';\n\nimport './index.less';\n\nexport type FeedbackIconProps = {\n  loadComplete: boolean;\n};\n\nexport const FeedbackIcon: React.FC<FeedbackIconProps> = ({\n  loadComplete = false\n}) => {\n\n  return (\n    <div className={loadComplete ? 'feedback-icon' : 'feedback-icon hidden'}>\n      <div className={loadComplete ? 'checkmark' : 'checkmark-hidden'} />\n    </div>\n  );\n};\n\nexport default FeedbackIcon;\n","import React, {\n  useState\n} from 'react';\n\nimport {\n  faFloppyDisk\n} from '@fortawesome/free-solid-svg-icons';\nimport {\n  FontAwesomeIcon\n} from '@fortawesome/react-fontawesome';\n\nimport {\n  Button,\n  ButtonProps\n} from 'antd';\n\nimport {\n  FormInstance\n} from 'antd/lib/form/Form';\n\nimport {\n  useTranslation\n} from 'react-i18next';\n\nimport Logger from '@terrestris/base-util/dist/Logger';\n\nimport {\n  WmsLayer,\n  isWmsLayer\n} from '@terrestris/ol-util/dist/typeUtils/typeUtils';\n\nimport {\n  useMap\n} from '@terrestris/react-util/dist/Hooks/useMap/useMap';\nimport {\n  DigitizeUtil\n} from '@terrestris/react-util/dist/Util/DigitizeUtil';\n\nimport useAppDispatch from '../../../hooks/useAppDispatch';\nimport useAppSelector from '../../../hooks/useAppSelector';\nimport useExecuteWfsTransaction from '../../../hooks/useExecuteWfsTransaction';\nimport useWriteWfsTransaction from '../../../hooks/useWriteWfsTransaction';\nimport {\n  setFormDirty\n} from '../../../store/editFeature';\n\nimport './index.less';\nimport FeedbackIcon from '../../FeedbackIcon';\n\nexport type SaveButtonProps = Omit<ButtonProps, 'form'> & {\n  form: FormInstance;\n  layer: WmsLayer;\n  onError?: (error?: unknown) => void;\n  onSuccess?: (response?: string) => void;\n};\n\nexport const SaveButton: React.FC<SaveButtonProps> = ({\n  form,\n  layer,\n  onError = () => {},\n  onSuccess = () => {},\n  ...passThroughProps\n}) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [saveCompleted, setSaveCompleted] = useState(false);\n\n  const map = useMap();\n\n  const writeWfsTransaction = useWriteWfsTransaction();\n  const executeWfsTransaction = useExecuteWfsTransaction();\n\n  const dispatch = useAppDispatch();\n\n  const formDirty = useAppSelector(\n    state => state.editFeature.formDirty\n  );\n\n  const {\n    t\n  } = useTranslation();\n\n  const onClick = async () => {\n    if (!map) {\n      return;\n    }\n\n    if (!layer || !isWmsLayer(layer)) {\n      return;\n    }\n\n    const editLayer = DigitizeUtil.getDigitizeLayer(map);\n\n    if (!editLayer) {\n      Logger.error('Cannot find the digitize layer');\n      onError();\n      return;\n    }\n\n    const features = editLayer.getSource()?.getFeatures();\n\n    if (!features || features.length === 0) {\n      Logger.error('Cannot save feature without geometry');\n      onError(t('SaveButton.errorNoGeometry'));\n      return;\n    }\n\n    try {\n      await form.validateFields();\n    } catch (error) {\n      onError(error);\n      Logger.warn('Validation has failed: ', error);\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const transaction = await writeWfsTransaction({\n        upsertFeatures: features,\n        form: form,\n        layer: layer\n      });\n\n      if (!transaction) {\n        return;\n      }\n\n      const result = await executeWfsTransaction({\n        layer: layer,\n        transaction: transaction\n      });\n\n      layer.getSource()?.refresh();\n\n      setSaveCompleted(true);\n      setTimeout(() => {\n        setSaveCompleted(false);\n      }, 3000);\n\n      dispatch(setFormDirty(false));\n\n      onSuccess(result);\n    } catch (error) {\n      Logger.error(error);\n\n      onError(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Button\n      className='save-button'\n      type='primary'\n      onClick={onClick}\n      loading={loading}\n      disabled={!formDirty}\n      icon={(\n        <FontAwesomeIcon\n          icon={faFloppyDisk}\n        />\n      )}\n      {...passThroughProps}\n    >\n      {\n        t('SaveButton.title')\n      }\n      <FeedbackIcon loadComplete={saveCompleted} />\n    </Button>\n  );\n};\n\nexport default SaveButton;\n","import React from 'react';\n\nimport {\n  FormInstance\n} from 'antd';\n\nimport {\n  Feature\n} from 'geojson';\n\nimport {\n  WmsLayer\n} from '@terrestris/ol-util/dist/typeUtils/typeUtils';\n\nimport useAppSelector from '../../../hooks/useAppSelector';\n\nimport DeleteButton from '../DeleteButton';\nimport ResetButton from '../ResetButton';\nimport SaveButton from '../SaveButton';\n\nimport './index.less';\n\nexport type EditFeatureToolbarProps = {\n  feature: Feature;\n  layer: WmsLayer;\n  form: FormInstance;\n  onSaveSuccess?: (responseText?: string) => void;\n  onSaveError?: (error: unknown) => void;\n  onDeleteSuccess?: () => void;\n  onDeleteError?: (error: unknown) => void;\n};\n\nexport const EditFeatureToolbar: React.FC<EditFeatureToolbarProps> = ({\n  feature,\n  layer,\n  form,\n  onSaveSuccess = () => {},\n  onSaveError = () => {},\n  onDeleteSuccess = () => {},\n  onDeleteError = () => {}\n}) => {\n  const allowedEditMode = useAppSelector(state => state.editFeature.userEditMode);\n\n  return (\n    <div\n      className='edit-feature-toolbar'\n    >\n      {\n        allowedEditMode.includes('CREATE') ||\n        allowedEditMode.includes('UPDATE') ?\n          <>\n            <ResetButton\n              feature={feature}\n              form={form}\n            />\n            <SaveButton\n              form={form}\n              layer={layer}\n              onSuccess={onSaveSuccess}\n              onError={onSaveError}\n            />\n          </>: <></>\n      }\n      {\n        allowedEditMode.includes('DELETE') &&\n        <DeleteButton\n          feature={feature}\n          layer={layer}\n          onSuccess={onDeleteSuccess}\n          onError={onDeleteError}\n        />\n      }\n    </div>\n  );\n};\n\nexport default EditFeatureToolbar;\n","import React, {\n  ReactNode,\n  useCallback,\n  useEffect,\n  useState\n} from 'react';\n\nimport {\n  Alert,\n  UploadFile\n} from 'antd';\nimport {\n  useForm\n} from 'antd/lib/form/Form';\n\nimport {\n  Feature\n} from 'geojson';\n\nimport moment from 'moment';\n\nimport { ValidateErrorEntity } from 'rc-field-form/es/interface';\n\nimport {\n  useTranslation\n} from 'react-i18next';\n\nimport Logger from '@terrestris/base-util/dist/Logger';\n\nimport {\n  WmsLayer,\n  isWmsLayer\n} from '@terrestris/ol-util/dist/typeUtils/typeUtils';\n\nimport { useMap } from '@terrestris/react-util/dist/Hooks/useMap/useMap';\n\nimport ShogunFile from '@terrestris/shogun-util/dist/model/File';\nimport {\n  PropertyFormItemEditConfig,\n  PropertyFormTabConfig\n} from '@terrestris/shogun-util/dist/model/Layer';\n\nimport useAppDispatch from '../../../hooks/useAppDispatch';\nimport useConvertImageUrl from '../../../hooks/useConvertImageUrl';\nimport useExecuteGetFeature from '../../../hooks/useExecuteGetFeature';\nimport useSHOGunAPIClient from '../../../hooks/useSHOGunAPIClient';\n\nimport {\n  setFeature\n} from '../../../store/editFeature';\n\nimport { isFileConfig } from '../EditFeatureForm';\nimport EditFeatureGeometryToolbar from '../EditFeatureGeometryToolbar';\nimport EditFeatureTabs from '../EditFeatureTabs';\nimport EditFeatureToolbar from '../EditFeatureToolbar';\n\nexport type EditFeatureFullFormProps = {\n  feature: Feature;\n  layer: WmsLayer;\n};\n\nexport const EditFeatureFullForm: React.FC<EditFeatureFullFormProps> = ({\n  feature,\n  layer\n}) => {\n  const {\n    t\n  } = useTranslation();\n  const executeGetFeature = useExecuteGetFeature();\n  const imageUrlToBase64 = useConvertImageUrl();\n\n  const [tabConfig, setTabConfig] = useState<PropertyFormTabConfig<PropertyFormItemEditConfig>[]>();\n  const [initialValues, setInitialValues] = useState<Record<string, any>>();\n  const [errorMsg, setErrorMsg] = useState<string | ReactNode>();\n\n  const [form] = useForm();\n  const map = useMap();\n  const dispatch = useAppDispatch();\n  const client = useSHOGunAPIClient();\n\n  const reloadFeature = useCallback(async (id: string) => {\n    if (!layer || !isWmsLayer(layer)) {\n      return;\n    }\n\n    const root = document.implementation.createDocument(null, 'root');\n    const filter = root.createElement('Filter');\n    const resourceId = root.createElement('ResourceId');\n    resourceId.setAttribute('rid', id);\n    filter.appendChild(resourceId);\n    root.documentElement.appendChild(filter);\n\n    const updatedFeatures = await executeGetFeature({\n      layer: layer,\n      filter: filter\n    },\n    '2.0.0');\n\n    if (\n      updatedFeatures?.features[0]\n    ) {\n      dispatch(setFeature(updatedFeatures?.features[0]));\n    }\n  }, [dispatch, executeGetFeature, layer]);\n\n  const update = useCallback(async () => {\n    if (!map || !client) {\n      return;\n    }\n\n    const editFormConfig = layer.get('editFormConfig') as PropertyFormTabConfig<PropertyFormItemEditConfig>[];\n\n    if (editFormConfig?.length === 0) {\n      Logger.warn(`Layer ${layer.get('name')} has no 'editFormConfig' set`);\n      return;\n    }\n\n    const properties = structuredClone(feature?.properties) || {};\n\n    const setPropertiesPromises = Object.entries(properties).map(async ([key, value]) => {\n      const tabConfigs = editFormConfig?.filter(tabCfg => {\n        return tabCfg.children?.find(formCfg => formCfg.propertyName === key);\n      });\n\n      if (tabConfigs?.length > 1) {\n        Logger.warn(`Property ${key} is configured in multiple tabs. Is this intended?`);\n      }\n\n      if (tabConfigs && tabConfigs[0]) {\n        const isDate = tabConfigs[0].children?.some(cfg => {\n          return cfg.propertyName === key && cfg.component === 'DATE';\n        });\n\n        if (isDate) {\n          const parsedDate = moment(value);\n\n          if (parsedDate.isValid()) {\n            properties[key] = parsedDate;\n          } else {\n            Logger.warn('Could not parse date');\n            properties[key] = null;\n          }\n        }\n\n        const isUpload = tabConfigs[0].children?.some(cfg => {\n          return cfg.propertyName === key && cfg.component === 'UPLOAD';\n        });\n\n        if (isUpload) {\n          if (value) {\n            try {\n              const parsedJson = JSON.parse(value);\n              if (!isFileConfig(parsedJson[0])) {\n                throw new Error('File config is no valid SHOGun file.');\n              }\n              const fileList = parsedJson as UploadFile<ShogunFile>[];\n              properties[key] = fileList;\n              const fileListWithBlob = fileList.map(async (val: any) => {\n                const isImageFile = fileList[0].response?.fileType?.startsWith('image/');\n                const thumbUrl = isImageFile ?\n                  await imageUrlToBase64(`${client.getBasePath()}imagefiles/${val?.response?.fileUuid}/thumbnail`) : undefined;\n                return {\n                  ...val,\n                  thumbUrl,\n                  url: isImageFile ? undefined : val.url\n                };\n              });\n\n              const result = await Promise.all(fileListWithBlob);\n              properties[key] = result;\n            } catch (error) {\n              Logger.error('Could not parse file list from JSON config: ', error);\n              properties[key] = [];\n            }\n          } else {\n            properties[key] = [];\n          }\n        }\n\n        const isReference = tabConfigs[0].children?.some(cfg =>\n          cfg.propertyName === key && cfg.component === 'REFERENCE_TABLE');\n\n        if (isReference) {\n          try {\n            properties[key] = JSON.parse(properties[key]);\n          } catch (error) {\n            Logger.warn('Could not parse the input for the REFERENCE_TABLE', error);\n          }\n        }\n      }\n    });\n\n    await Promise.all(setPropertiesPromises);\n\n    setInitialValues(properties);\n    form.resetFields();\n    form.setFieldsValue(properties);\n\n    setTabConfig(editFormConfig);\n  }, [map, client, layer, feature?.properties, form, imageUrlToBase64]);\n\n  useEffect(() => {\n    update();\n  }, [update]);\n\n  const formatErrorMessage = (error: ValidateErrorEntity): React.ReactNode => {\n    const collectedFieldErrors: string[] = [];\n    const errorFields = error.errorFields || [];\n\n    errorFields.forEach((field) => {\n      if (Array.isArray(field.errors)) {\n        collectedFieldErrors.push(...field.errors);\n      }\n    });\n\n    const formattedMessage = collectedFieldErrors.map((line, index) => (\n      <React.Fragment key={index}>\n        {line}\n        {index !== collectedFieldErrors.length - 1 && <br />}\n      </React.Fragment>\n    ));\n\n    return formattedMessage;\n  };\n\n  const onSaveSuccess = (responseText?: string) => {\n    if (!responseText) {\n      return;\n    }\n    setErrorMsg(undefined);\n    const parser = new DOMParser();\n    const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n\n    // get feature id from response\n    const featureId = xmlDoc.getElementsByTagName('ogc:FeatureId');\n    const idString = featureId.item(0)?.getAttribute('fid');\n    if (idString === 'none') {\n      const featId = feature.id;\n      if (!featId) {\n        return;\n      }\n      reloadFeature((featId as string));\n    } else if (idString) {\n      reloadFeature(idString);\n    }\n  };\n\n  const onSaveError = (error?: unknown) => {\n    if (typeof error === 'object' && error !== null && 'errorFields' in error) {\n      const formattedErrorMessage = formatErrorMessage(\n        error as ValidateErrorEntity\n      );\n      setErrorMsg(formattedErrorMessage);\n    } else if (typeof error === 'string') {\n      setErrorMsg(error);\n    } else {\n      setErrorMsg(t('EditFeatureFullForm.saveErrorMsg'));\n    }\n  };\n\n  const onDeleteSuccess = () => {\n    setErrorMsg(undefined);\n    dispatch(setFeature(null));\n  };\n\n  const onDeleteError = () => {\n    setErrorMsg(t('EditFeatureFullForm.deleteErrorMsg'));\n  };\n\n  return (\n    <>\n      <EditFeatureGeometryToolbar\n        feature={feature}\n      />\n      {\n        errorMsg && (\n          <Alert\n            className=\"error-alert\"\n            message={errorMsg}\n            type=\"error\"\n            showIcon\n          />\n        )\n      }\n      <EditFeatureToolbar\n        feature={feature}\n        layer={layer}\n        form={form}\n        onSaveSuccess={onSaveSuccess}\n        onSaveError={onSaveError}\n        onDeleteSuccess={onDeleteSuccess}\n        onDeleteError={onDeleteError}\n      />\n      <EditFeatureTabs\n        tabConfig={tabConfig}\n        initialValues={initialValues}\n        form={form}\n      />\n    </>\n  );\n};\n\nexport default EditFeatureFullForm;\n","import {\n  useCallback\n} from 'react';\n\nimport {\n  Feature\n} from 'geojson';\n\nimport OlSourceImageWMS from 'ol/source/ImageWMS';\nimport OlSourceTileWMS from 'ol/source/TileWMS';\n\nimport Logger from '@terrestris/base-util/dist/Logger';\n\nimport {\n  WmsLayer\n} from '@terrestris/ol-util/dist/typeUtils/typeUtils';\n\nimport {\n  getBearerTokenHeader\n} from '@terrestris/shogun-util/dist/security/getBearerTokenHeader';\n\nimport useSHOGunAPIClient from './useSHOGunAPIClient';\n\nexport type ExecuteWfsLockOpts = {\n  layer: WmsLayer;\n  feature: Feature;\n};\n\nexport const useExecuteWfsLockFeature = () => {\n  const client = useSHOGunAPIClient();\n\n  const writeWfsLockFeature = (opts: ExecuteWfsLockOpts) => {\n    const featureId = opts.feature.id;\n    const featureProperties = opts.feature.properties;\n\n    if (!featureId || !featureProperties) {\n      Logger.warn('Either the id of the feature or its properties (or even both) aren\\'t available');\n      return;\n    }\n\n    let id: number;\n    if (typeof featureId === 'number') {\n      id = featureId;\n    } else {\n      id = parseInt(featureId.split('.')[1], 10);\n    }\n\n    const match = Object.entries(featureProperties).find(([, value]) => (value === id || value === id.toString()));\n\n    if (!match) {\n      Logger.warn('Count not detect the id property');\n      return;\n    }\n\n    const idProperty = match[0];\n\n    const typeName = opts.layer.getSource()?.getParams().LAYERS;\n\n    const lockFeatureDoc = document.createElementNS('http://www.opengis.net/wfs/2.0', 'LockFeature');\n\n    lockFeatureDoc.setAttribute('service', 'WFS');\n    lockFeatureDoc.setAttribute('version', '2.0.0');\n    // Expiry in seconds.\n    lockFeatureDoc.setAttribute('expiry', '300');\n    lockFeatureDoc.setAttribute('lockAction', 'SOME');\n\n    const queryElement = document.createElementNS('http://www.opengis.net/wfs/2.0', 'Query');\n    queryElement.setAttribute('typeNames', typeName);\n\n    const filterElement = document.createElementNS('http://www.opengis.net/fes/2.0', 'Filter');\n    const isEqualToElement = document.createElementNS('http://www.opengis.net/fes/2.0', 'PropertyIsEqualTo');\n\n    const valueReferenceElement = document.createElementNS('http://www.opengis.net/fes/2.0', 'ValueReference');\n    const valueReferenceValue = document.createTextNode(idProperty);\n    valueReferenceElement.appendChild(valueReferenceValue);\n\n    const literalElement = document.createElementNS('http://www.opengis.net/fes/2.0', 'Literal');\n    const literalValue = document.createTextNode(id.toString());\n    literalElement.appendChild(literalValue);\n\n    isEqualToElement.appendChild(valueReferenceElement);\n    isEqualToElement.appendChild(literalElement);\n\n    filterElement.appendChild(isEqualToElement);\n\n    queryElement.appendChild(filterElement);\n\n    lockFeatureDoc.appendChild(queryElement);\n\n    return lockFeatureDoc;\n  };\n\n  const executeWfsLockFeature = useCallback(async (opts: ExecuteWfsLockOpts) => {\n    let url;\n\n    const source = opts.layer.getSource();\n    if (source instanceof OlSourceImageWMS) {\n      url = source.getUrl();\n    }\n    if (source instanceof OlSourceTileWMS) {\n      const urls = source.getUrls();\n      url = urls ? urls[0] : undefined;\n    }\n\n    if (!url) {\n      return;\n    }\n\n    if (url.endsWith('?')) {\n      url = url.slice(0, -1);\n    }\n\n    const lockFeatureDoc = writeWfsLockFeature({\n      layer: opts.layer,\n      feature: opts.feature\n    });\n\n    if (!lockFeatureDoc) {\n      return;\n    }\n\n    const defaultHeaders = {\n      'Content-Type': 'application/xml'\n    };\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: opts.layer?.get('useBearerToken') ? {\n        ...defaultHeaders,\n        ...getBearerTokenHeader(client?.getKeycloak())\n      } : defaultHeaders,\n      body: new XMLSerializer().serializeToString(lockFeatureDoc)\n    });\n\n    if (!response.ok) {\n      throw new Error('No successful response while executing a WFS-LockFeature');\n    }\n\n    const responseText = await response.text();\n\n    const parser = new DOMParser();\n    const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n\n    // TODO Make detection more robust\n    const transactionLockFailed = xmlDoc.getElementsByTagName('wfs:FeaturesNotLocked');\n\n    if (transactionLockFailed.length > 0) {\n      throw new Error(`Error while locking a feature: ${responseText}`);\n    }\n\n    return responseText;\n  }, [client]);\n\n  return executeWfsLockFeature;\n};\n\nexport default useExecuteWfsLockFeature;\n","import {\n  useCallback,\n  useEffect\n} from 'react';\n\nimport {\n  FeatureCollection\n} from 'geojson';\n\nimport MapBrowserEvent from 'ol/MapBrowserEvent';\n\nimport Logger from '@terrestris/base-util/dist/Logger';\n\nimport {\n  WmsLayer\n} from '@terrestris/ol-util/dist/typeUtils/typeUtils';\n\nimport {\n  useMap\n} from '@terrestris/react-util/dist/Hooks/useMap/useMap';\n\nimport {\n  getBearerTokenHeader\n} from '@terrestris/shogun-util/dist/security/getBearerTokenHeader';\n\nimport useSHOGunAPIClient from './useSHOGunAPIClient';\n\nexport const useGetFeatureInfo = (layer?: WmsLayer, onSuccess?: (featureCollection: FeatureCollection) => void, onFailure?: () => void) => {\n  const map = useMap();\n  const client = useSHOGunAPIClient();\n\n  const onSingleClick = useCallback(async (evt: MapBrowserEvent<MouseEvent>) => {\n    if (!map || !layer) {\n      return;\n    }\n\n    const coords = evt.coordinate;\n\n    const viewResolution = map.getView().getResolution();\n\n    if (!viewResolution) {\n      return;\n    }\n\n    const source = layer.getSource();\n    const url = source?.getFeatureInfoUrl(\n      coords,\n      viewResolution,\n      map.getView().getProjection(),\n      {\n        INFO_FORMAT: 'application/json',\n        BUFFER: 10\n      }\n    );\n\n    const defaultHeaders = {\n      'Content-Type': 'application/json'\n    };\n\n    if (!url) {\n      return;\n    }\n\n    try {\n      map.getTargetElement().style.cursor = 'wait';\n\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: layer.get('useBearerToken') ? {\n          ...defaultHeaders,\n          ...getBearerTokenHeader(client?.getKeycloak())\n        } : defaultHeaders\n      });\n\n      if (!response.ok) {\n        throw new Error('No successful response');\n      }\n\n      const featureCollection: FeatureCollection = await response.json();\n\n      if (onSuccess) {\n        onSuccess(featureCollection);\n      }\n    } catch (error) {\n      Logger.error('Error: ', error);\n\n      if (onFailure) {\n        onFailure();\n      }\n    } finally {\n      map.getTargetElement().style.cursor = '';\n    }\n  }, [client, layer, map, onSuccess, onFailure]);\n\n  const onPointerMove = useCallback((evt: MapBrowserEvent<MouseEvent>) => {\n    if (!map || !layer) {\n      return;\n    }\n\n    if (evt.dragging) {\n      return;\n    }\n\n    const data = layer.getData(evt.pixel);\n\n    if (!(data instanceof Uint8ClampedArray)) {\n      return;\n    }\n\n    const hit = data && data[3] > 0;\n\n    map.getTargetElement().style.cursor = hit ? 'pointer' : '';\n  }, [layer, map]);\n\n  useEffect(() => {\n    if (!map) {\n      return;\n    }\n\n    map.on('pointermove', onPointerMove);\n    map.on('singleclick', onSingleClick);\n\n    return () => {\n      map.un('pointermove', onPointerMove);\n      map.un('singleclick', onSingleClick);\n    };\n  }, [map, onPointerMove, onSingleClick]);\n};\n\nexport default useGetFeatureInfo;\n","import React, {\n  useState\n} from 'react';\n\nimport {\n  Button\n} from 'antd';\n\nimport ClientConfiguration from 'clientConfig';\n\nimport {\n  useTranslation\n} from 'react-i18next';\n\nimport Logger from '@terrestris/base-util/dist/Logger';\n\nimport {\n  WmsLayer\n} from '@terrestris/ol-util/dist/typeUtils/typeUtils';\n\nimport {\n  useMap\n} from '@terrestris/react-util/dist/Hooks/useMap/useMap';\n\nimport useAppDispatch from '../../../hooks/useAppDispatch';\nimport useAppSelector from '../../../hooks/useAppSelector';\nimport useExecuteWfsDescribeFeatureType, {\n  isGeometryType\n} from '../../../hooks/useExecuteWfsDescribeFeatureType';\nimport useExecuteWfsLockFeature from '../../../hooks/useExecuteWfsTransactionLock';\nimport useGetFeatureInfo from '../../../hooks/useGetFeatureInfo';\n\nimport {\n  setFeature\n} from '../../../store/editFeature';\n\nimport './index.less';\n\nexport type EditFeatureSwitchProps = {\n  layer: WmsLayer;\n  onLockSuccess?: (responseText: string) => void;\n  onLockError?: (error: unknown) => void;\n  onCreate?: () => void;\n};\n\nexport const EditFeatureSwitch: React.FC<EditFeatureSwitchProps> = ({\n  layer,\n  onLockSuccess = () => {},\n  onLockError = () => {},\n  onCreate = () => {}\n}) => {\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const executeWfsDescribeFeatureType = useExecuteWfsDescribeFeatureType();\n  const executeWfsLockFeature = useExecuteWfsLockFeature();\n  const dispatch = useAppDispatch();\n  const map = useMap();\n  const {\n    t\n  } = useTranslation();\n\n  const allowedEditMode = useAppSelector(\n    state => state.editFeature.userEditMode\n  );\n\n  useGetFeatureInfo(layer, async (featureCollection) => {\n    if (\n      featureCollection.features.length &&\n      (allowedEditMode.includes('UPDATE') || allowedEditMode.includes('DELETE'))\n    ) {\n\n      const feature = featureCollection.features[0];\n\n      if (!layer || !feature) {\n        return;\n      }\n\n      if (ClientConfiguration.wfsLockFeatureEnabled) {\n        try {\n          const response = await executeWfsLockFeature({\n            layer: layer,\n            feature: feature\n          });\n\n          if (!response) {\n            return;\n          }\n\n          dispatch(setFeature(feature));\n\n          onLockSuccess(response);\n        } catch (error) {\n          onLockError(error);\n        }\n      } else {\n        dispatch(setFeature(feature));\n      }\n    }\n  });\n\n  const getGeometryType = async () => {\n    if (!map || !layer) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const describeFeatureType = await executeWfsDescribeFeatureType(layer);\n\n      if (!describeFeatureType) {\n        return;\n      }\n\n      // We expect a single featureType here.\n      const geomProperty = describeFeatureType.featureTypes[0]?.properties\n        ?.find(property => isGeometryType(property.type));\n\n      switch (geomProperty?.type) {\n        case 'gml:MultiPoint':\n          return 'MultiPoint';\n        case 'gml:Point':\n          return 'Point';\n        case 'gml:MultiLineString':\n          return 'MultiLineString';\n        case 'gml:LineString':\n          return 'LineString';\n        case 'gml:MultiPolygon':\n          return 'MultiPolygon';\n        case 'gml:Polygon':\n          return 'Polygon';\n        case 'xsd:boolean':\n        case 'xsd:date':\n        case 'xsd:int':\n        case 'xsd:number':\n        case 'xsd:string':\n        case undefined:\n          return;\n        default:\n          break;\n      }\n    } catch (error) {\n      Logger.error(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const onCreateClick = async () => {\n    const geomType = await getGeometryType();\n\n    if (!geomType) {\n      return;\n    }\n\n    dispatch(setFeature({\n      type: 'Feature',\n      properties: {},\n      geometry: {\n        type: geomType,\n        coordinates: []\n      }\n    }));\n\n    onCreate();\n  };\n\n  return (\n    <div className=\"edit-feature-switch\">\n      {allowedEditMode.includes('CREATE') && (\n        <>\n          {\n            allowedEditMode.includes('UPDATE') &&\n            <div>{t('EditFeatureSwitch.usageHint')}</div>\n          }\n          <Button\n            loading={loading}\n            onClick={onCreateClick}\n          >\n            {t('EditFeatureSwitch.createFeature')}\n          </Button>\n        </>\n      )}\n      {!allowedEditMode.includes('CREATE') &&\n        (allowedEditMode.includes('UPDATE') ||\n        allowedEditMode.includes('DELETE')) && (\n        <div>{t('EditFeatureSwitch.limitedUsageHint')}</div>\n      )}\n    </div>\n  );\n};\n\nexport default EditFeatureSwitch;\n","import React, {\n  useEffect,\n  useState\n} from 'react';\n\nimport {\n  Alert, Modal\n} from 'antd';\n\nimport ClientConfiguration from 'clientConfig';\n\nimport OlFeature from 'ol/Feature';\n\nimport {\n  useTranslation\n} from 'react-i18next';\n\nimport Logger from '@terrestris/base-util/dist/Logger';\n\nimport { MapUtil } from '@terrestris/ol-util/dist/MapUtil/MapUtil';\n\nimport {\n  WmsLayer,\n  isWmsLayer\n} from '@terrestris/ol-util/dist/typeUtils/typeUtils';\n\nimport {\n  useMap\n} from '@terrestris/react-util/dist/Hooks/useMap/useMap';\n\nimport useAppDispatch from '../../hooks/useAppDispatch';\nimport useAppSelector from '../../hooks/useAppSelector';\nimport useExecuteWfsTransaction from '../../hooks/useExecuteWfsTransaction';\nimport useWriteWfsTransaction from '../../hooks/useWriteWfsTransaction';\n\nimport {\n  reset,\n  setFormDirty\n} from '../../store/editFeature';\nimport {\n  hide as hideEditFeatureDrawer\n} from '../../store/editFeatureDrawerOpen';\n\nimport MapDrawer, {\n  MapDrawerProps\n} from '../MapDrawer';\n\nimport EditFeatureFullForm from './EditFeatureFullForm';\nimport EditFeatureSwitch from './EditFeatureSwitch';\n\nimport './index.less';\n\nexport type EditFeatureDrawerProps = MapDrawerProps;\n\nexport const EditFeatureDrawer: React.FC<EditFeatureDrawerProps> = ({\n  ...passThroughProps\n}) => {\n  const {\n    t\n  } = useTranslation();\n\n  const [layer, setLayer] = useState<WmsLayer>();\n  const [isFeatureLocked, setIsFeatureLocked] = useState<boolean>(false);\n  const [drawerTitle, setDrawerTitle] = useState<string>(t('EditFeatureDrawer.featureEditor'));\n\n  const isDrawerOpen = useAppSelector(state => state.editFeatureDrawerOpen);\n  const layerId = useAppSelector(state => state.editFeature.layerId);\n  const feature = useAppSelector(state => state.editFeature.feature);\n  const formDirty = useAppSelector(state => state.editFeature.formDirty);\n\n  const map = useMap();\n  const dispatch = useAppDispatch();\n  const writeWfsTransaction = useWriteWfsTransaction();\n  const executeWfsTransaction = useExecuteWfsTransaction();\n\n  useEffect(() => {\n    if (!map || !layerId) {\n      return;\n    }\n\n    const olLayer = MapUtil.getLayerByOlUid(map, layerId);\n\n    if (!olLayer || !isWmsLayer(olLayer)) {\n      Logger.warn(`Could not find layer with id ${layerId}`);\n      return;\n    }\n\n    setDrawerTitle(`${t('EditFeatureDrawer.featureEditor')} - ${olLayer.get('name')}`);\n    setLayer(olLayer);\n  }, [map, layerId, t]);\n\n  const releaseLock = async () => {\n    if (!layer || !feature || !feature.id || !ClientConfiguration.wfsLockFeatureEnabled) {\n      return;\n    }\n\n    try {\n      const feat = new OlFeature();\n      feat.setId(feature.id);\n\n      const transaction = await writeWfsTransaction({\n        layer: layer,\n        deleteFeatures: [],\n        upsertFeatures: [feat]\n      });\n\n      if (!transaction) {\n        return;\n      }\n\n      await executeWfsTransaction({\n        layer: layer,\n        transaction: transaction\n      });\n    } catch (error) {\n      Logger.error('Error while releasing the lock on the feature: ', error);\n    }\n  };\n\n  const closeDrawer = async () => {\n    await releaseLock();\n\n    dispatch(hideEditFeatureDrawer());\n    dispatch(setFormDirty(false));\n    dispatch(reset());\n    setIsFeatureLocked(false);\n  };\n\n  const onDrawerClose = () => {\n    if (layer && feature && formDirty) {\n      Modal.confirm({\n        maskClosable: false,\n        title: t('EditFeatureDrawer.closeDrawerWarnTitle'),\n        content: t('EditFeatureDrawer.closeDrawerWarnContent'),\n        okType: 'danger',\n        onOk: closeDrawer\n      });\n    } else {\n      closeDrawer();\n    }\n  };\n\n  const onLockSuccess = () => {\n    setIsFeatureLocked(false);\n  };\n\n  const onLockError = () => {\n    setIsFeatureLocked(true);\n  };\n\n  const onCreate = () => {\n    setIsFeatureLocked(false);\n  };\n\n  return (\n    <MapDrawer\n      className=\"map-drawer edit-feature-drawer\"\n      onClose={onDrawerClose}\n      open={isDrawerOpen}\n      title={drawerTitle}\n      {...passThroughProps}\n    >\n      {\n        !layer && (\n          <Alert\n            message={t('EditFeatureDrawer.noLayerFoundError')}\n            type=\"error\"\n            showIcon\n          />\n        )\n      }\n      {\n        isFeatureLocked && (\n          <Alert\n            message={t('EditFeatureDrawer.isFeatureLockedErrorMsg')}\n            type=\"error\"\n            showIcon\n          />\n        )\n      }\n      {\n        layer && layerId && !feature &&\n        <EditFeatureSwitch\n          layer={layer}\n          onLockSuccess={onLockSuccess}\n          onLockError={onLockError}\n          onCreate={onCreate}\n        />\n      }\n      {\n        layer && feature &&\n        <EditFeatureFullForm\n          feature={feature}\n          layer={layer}\n        />\n      }\n    </MapDrawer>\n  );\n};\n\nexport default EditFeatureDrawer;\n","export const useClientVersion = () => {\n  return PROJECT_VERSION;\n};\n","import React, {\n  useState\n} from 'react';\n\nimport {\n  Modal,\n  Statistic\n} from 'antd';\n\nimport {\n  ModalProps\n} from 'antd/lib/modal';\n\nimport {\n  useTranslation\n} from 'react-i18next';\n\nimport useAppSelector from '../../hooks/useAppSelector';\n\nimport {\n  useClientVersion\n} from '../../hooks/useVersion';\n\nimport './index.less';\n\ninterface ApplicationInfoProps extends ModalProps {\n  opener?: JSX.Element;\n}\n\nexport const ApplicationInfo: React.FC<ApplicationInfoProps> = ({\n  opener,\n  ...restProps\n}) => {\n  const {\n    t\n  } = useTranslation();\n\n  const appInfo = useAppSelector(state => state.appInfo);\n  const logoPath = useAppSelector(state => state.logoPath);\n  const appDescription = useAppSelector(state => state.description);\n\n  const [isVisible, setIsVisible] = useState<boolean>(false);\n\n  const toggleVisibility = () => {\n    setIsVisible(!isVisible);\n  };\n\n  let Opener;\n  if (opener) {\n    Opener = React.cloneElement(\n      opener,\n      {\n        onClick: toggleVisibility\n      }\n    );\n  } else {\n    Opener = <button onClick={toggleVisibility}>Open</button>;\n  }\n\n  return (\n    <>\n      {\n        Opener\n      }\n      <Modal\n        className='application-info'\n        title={t('ApplicationInfo.title')}\n        centered={true}\n        open={isVisible}\n        onOk={toggleVisibility}\n        onCancel={toggleVisibility}\n        footer={null}\n        {...restProps}\n      >\n        <img\n          className=\"logo\"\n          src={logoPath}\n        />\n        <div\n          className=\"description\"\n        >\n          {appDescription}\n        </div>\n        <Statistic\n          title={t('ApplicationInfo.clientVersionTitle')}\n          value={useClientVersion()}\n        />\n        {\n          (appInfo.version && appInfo.buildTime) &&\n          <Statistic\n            title={t('ApplicationInfo.backendVersionTitle')}\n            value={`${appInfo.version} (${appInfo.buildTime})`}\n          />\n        }\n      </Modal>\n    </>\n  );\n};\n\nexport default ApplicationInfo;\n","import React, {\n  useEffect\n} from 'react';\n\nimport {\n  Button,\n  Divider,\n  Tooltip\n} from 'antd';\n\nimport OlControlMousePosition from 'ol/control/MousePosition';\nimport OlControlScaleLine from 'ol/control/ScaleLine';\nimport { createStringXY } from 'ol/coordinate';\n\nimport { useTranslation } from 'react-i18next';\n\nimport ScaleCombo from '@terrestris/react-geo/dist/Field/ScaleCombo/ScaleCombo';\nimport { useMap } from '@terrestris/react-util/dist/Hooks/useMap/useMap';\n\nimport useAppSelector from '../../hooks/useAppSelector';\nimport { usePlugins } from '../../hooks/usePlugins';\n\nimport {\n  FooterPlacementOrientation,\n  isFooterIntegration\n} from '../../plugin';\n\nimport { Legal } from '../../store/legal';\n\nimport { ApplicationInfo } from '../ApplicationInfo';\n\nimport './index.less';\n\nexport type FooterProps = React.ComponentProps<'div'>;\n\nexport const Footer: React.FC<FooterProps> = ({\n  ...restProps\n}): JSX.Element => {\n  const plugins = usePlugins();\n  const { t } = useTranslation();\n\n  const legalInformation: Legal = useAppSelector(state => state.legal);\n  const map = useMap();\n\n  const insertPlugins = (itemPosition: FooterPlacementOrientation, items: JSX.Element[]) => {\n    plugins.forEach(plugin => {\n      if (isFooterIntegration(plugin.integration) && plugin.integration?.placementOrientation === itemPosition) {\n        const {\n          key,\n          wrappedComponent: WrappedPluginComponent\n        } = plugin;\n\n        items.splice(plugin.integration?.insertionIndex ?? 0, 0,\n          <WrappedPluginComponent\n            key={key}\n          />\n        );\n      }\n    });\n  };\n\n  useEffect(() => {\n    if (!map) {\n      return;\n    }\n\n    const existingControl = map\n      .getControls()\n      .getArray()\n      .find(control => control instanceof OlControlScaleLine);\n\n    if (existingControl) {\n      return;\n    }\n\n    map.addControl(\n      new OlControlScaleLine({\n        target: 'scale-line-container'\n      })\n    );\n  }, [map]);\n\n  useEffect(() => {\n    if (!map) {\n      return;\n    }\n\n    const existingControl = map\n      .getControls()\n      .getArray()\n      .find(control => control instanceof OlControlMousePosition);\n\n    if (existingControl) {\n      return;\n    }\n\n    map.addControl(\n      new OlControlMousePosition({\n        coordinateFormat: createStringXY(2),\n        projection: map.getView().getProjection(),\n        target: 'mouse-position'\n      })\n    );\n  }, [map]);\n\n  if (!map) {\n    return <></>;\n  }\n\n  const getLeftItems = () => {\n    const items = [\n      <div\n        key=\"scale-line-container\"\n        id=\"scale-line-container\"\n        aria-label=\"scale-line\"\n      />,\n      <Divider\n        key=\"scale-line-divider\"\n        type=\"vertical\"\n      />,\n      <div\n        key=\"scale-combo-container\"\n        className=\"scale-combo\"\n        aria-label='scale-combo'\n      >\n        {t('Footer.scale')}:&nbsp;\n        <ScaleCombo\n          aria-label='scalecombo-dropdown'\n        />\n        <Divider\n          type=\"vertical\"\n        />\n      </div>,\n      <div\n        key=\"reference-system-container\"\n        className=\"reference-system\"\n        aria-label=\"reference-system\"\n      >\n        {t('Footer.refSystem')}: {map.getView().getProjection().getCode()}\n        <Divider\n          type=\"vertical\"\n        />\n      </div>,\n      <div\n        key=\"mouse-position-container\"\n        className=\"mouse-position-wrapper\"\n      >\n        {t('Footer.mousePosition')}:&nbsp;\n        <div\n          id=\"mouse-position\"\n          className=\"mouse-position\"\n          aria-label=\"mouse-position\"\n        />\n      </div>\n    ];\n\n    insertPlugins('left', items);\n\n    return items;\n  };\n\n  const getRightItems = () => {\n    const items = [\n      <Button\n        key=\"open-contact\"\n        onClick={openContactModal}\n        type=\"link\"\n      >\n        {t('Footer.contact')}\n      </Button>,\n      <Button\n        key=\"open-imprint\"\n        onClick={openImprintModal}\n        type=\"link\"\n      >\n        {t('Footer.imprint')}\n      </Button>,\n      <Button\n        key=\"open-privacy\"\n        onClick={openPrivacyModal}\n        type=\"link\"\n      >\n        {t('Footer.privacypolicy')}\n      </Button>,\n      <ApplicationInfo\n        key=\"application-info\"\n        opener={\n          <Tooltip\n            title={t('Footer.aboutTooltip')}\n          >\n            <Button\n              type=\"link\"\n              aria-label=\"info-opener\"\n            >\n              {t('Footer.about')}\n            </Button>\n          </Tooltip>\n        }\n      />\n    ];\n\n    if (plugins.length > 0) {\n      insertPlugins('right', items);\n    }\n\n    return items;\n  };\n\n  const openContactModal = (): void => {\n    window.open(legalInformation.contact, '_blank');\n  };\n\n  const openImprintModal = (): void => {\n    window.open(legalInformation.imprint, '_blank');\n  };\n\n  const openPrivacyModal = (): void => {\n    window.open(legalInformation.privacy, '_blank');\n  };\n\n  return (\n    <div\n      className=\"footer\"\n      {...restProps}\n    >\n      <div\n        className=\"item-container left-items\"\n      >\n        {\n          getLeftItems()\n        }\n      </div>\n      <div\n        className=\"item-container right-items\"\n      >\n        {\n          getRightItems()\n        }\n      </div>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React from 'react';\n\nimport {\n  faCircleQuestion\n} from '@fortawesome/free-solid-svg-icons';\nimport {\n  FontAwesomeIcon\n} from '@fortawesome/react-fontawesome';\n\nimport {\n  Button,\n  Tooltip\n} from 'antd';\nimport { ButtonProps } from 'antd/lib';\n\nimport { useTranslation } from 'react-i18next';\n\nexport type DocumentationButtonProps = ButtonProps;\n\nconst defaultClassName = 'documentationbutton';\nexport const DocumentationButton: React.FC<DocumentationButtonProps> = ({\n  className\n}) => {\n\n  const { t } = useTranslation();\n\n  const finalClassName = className\n    ? `${defaultClassName} ${className}`\n    : defaultClassName;\n\n  return (\n    <Tooltip\n      title={t('DocumentationButton.tooltip')}\n    >\n      <Button\n        type=\"link\"\n        aria-label=\"documentation-button\"\n        onClick={() => window.open('/gis-docs', '_blank')}\n        className={finalClassName}\n        icon={\n          <FontAwesomeIcon\n            icon={faCircleQuestion}\n          />\n        }\n      />\n    </Tooltip>\n  );\n};\n\nexport default DocumentationButton;\n","import {\n  useCallback\n} from 'react';\n\nimport ClientConfiguration from 'clientConfig';\n\nimport _isNil from 'lodash/isNil';\n\nimport {\n  Extent as OlExtent\n} from 'ol/extent';\nimport OlFormatGeoJSON from 'ol/format/GeoJSON';\n\nimport {\n  useTranslation\n} from 'react-i18next';\n\nimport type {\n  Category as ResultCategory\n} from '@terrestris/react-geo/dist/Panel/SearchResultsPanel/SearchResultsPanel';\n\nimport {\n  createNominatimSearchFunction\n} from '@terrestris/react-util/dist/Hooks/search/createNominatimSearchFunction';\nimport {\n  useMap\n} from '@terrestris/react-util/dist/Hooks/useMap/useMap';\n\nexport const useNominatimSearchEngine = () => {\n  const map = useMap();\n\n  const {\n    t\n  } = useTranslation();\n\n  const performNominatimSearch = useCallback(async (value: string, viewBox?: OlExtent) => {\n    if (!map) {\n      return;\n    }\n\n    const executeNominatimSearch = createNominatimSearchFunction({\n      bounded: viewBox ? 1 : undefined,\n      viewBox: viewBox ? viewBox?.toString() : undefined,\n      countryCodes: '',\n      nominatimBaseUrl: ClientConfiguration.search?.nominatimUrl ?? 'https://nominatim.openstreetmap.org/search?'\n    });\n\n    const response = await executeNominatimSearch(value);\n\n    const geoJsonFormat = new OlFormatGeoJSON();\n    const nFeats = response?.features\n      .filter(f => !_isNil(f?.properties.geojson))\n      .map(f => {\n        const olFeat = geoJsonFormat.readFeature(f.properties.geojson, {\n          dataProjection: 'EPSG:4326',\n          featureProjection: map.getView().getProjection()\n        });\n\n        if (Array.isArray(olFeat)) {\n          return;\n        }\n\n        olFeat.set('title', f.properties.display_name);\n\n        return olFeat;\n      })\n      .filter(f => f !== undefined);\n\n    const nResults: ResultCategory[] = [{\n      title: t('useNominatimSearchEngine.title'),\n      features: nFeats ?? []\n    }];\n\n    return nResults;\n  }, [map, t]);\n\n  return performNominatimSearch;\n};\n\nexport default useNominatimSearchEngine;\n","import _groupBy from 'lodash/groupBy';\nimport Map from 'ol/Map';\n\nimport {\n  WmsLayer,\n  isWmsLayer\n} from '@terrestris/ol-util/dist/typeUtils/typeUtils';\n\nimport {\n  SearchConfig\n} from '@terrestris/shogun-util/dist/model/Layer';\n\nexport interface SolrQueryProps {\n  searchValue: string;\n  map: Map;\n}\n\ntype SolrQuery = {\n  query: string;\n  fieldList?: string;\n};\n\n/**\n * Generates a solr search query based on the `searchConfiguration` and `searchable` properties of each layer. This\n * currently considers all layers which are part of the layer tree / map.\n */\nexport const generateSolrQuery = ({\n  searchValue,\n  map\n}: SolrQueryProps): SolrQuery[] => {\n  // parse searchValue into an array of search terms,\n  // removing special characters and white spaces\n  const parts = searchValue.trim()\n    .replaceAll(/[()\\\\\\-_.//]/g, ' ')\n    .split(' ')\n    .map(s => s.trim())\n    .filter(s => s !== '');\n\n  const searchQueries: SolrQuery[] = [];\n  const layers = map.getAllLayers().filter(l => l.get('searchable'));\n  const groupedLayers = _groupBy(layers, (l) => (l.get('searchConfig') as SearchConfig)?.attributes);\n\n  Object.entries(groupedLayers).forEach(([key, layerList]) => {\n    const layerNames = layerList\n      .filter(l => isWmsLayer(l))\n      .map(l => (l as WmsLayer).getSource()?.getParams()?.LAYERS);\n\n    const featureTypeParts = layerNames.map(layerName => `featureType:\"${layerName}\"`);\n    const featureTypeQuery = featureTypeParts.join(' OR ');\n\n    const query = `(${featureTypeQuery}) AND (${generateSearchQuery(parts)})`;\n    searchQueries.push({\n      query: query,\n      fieldList: key !== 'undefined' ? key.split(',').join(' ') : undefined\n    });\n  });\n\n  return searchQueries;\n};\n\n/**\n * Applies operators for wildcard and fuzzy search to a solr (sub)query for multiple search terms.\n * Also includes exact matches to allow searching for numeric values.\n * @param searchParts The search input which may consist of multiple search terms, e.g. [\"foo\", \"bar\"]\n */\nconst generateSearchQuery = (\n  searchParts: string[]\n): string => {\n  const subQueries = searchParts.map(part => {\n    return `(${part.trim()}^4 OR *${part.trim()}*^2 OR ${part.trim()}~1)`;\n  });\n  return subQueries.join(' AND ');\n};\n\nexport default generateSolrQuery;\n","import {\n  useCallback\n} from 'react';\n\nimport {\n  Extent as OlExtent\n} from 'ol/extent';\n\nimport {\n  getBearerTokenHeader\n} from '@terrestris/shogun-util/dist/security/getBearerTokenHeader';\n\nimport useSHOGunAPIClient from './useSHOGunAPIClient';\n\nexport type SolrQueryDocument = {\n  /**\n   * The id of the document.\n   */\n  id: string;\n  /**\n   * The category of the feature.\n   */\n  category?: string[];\n  /**\n   * The name of the feature type.\n   */\n  featureType?: string[];\n  /**\n   * The WKT geometry.\n   */\n  geometry?: string[];\n};\n\nexport type SolrQueryResponse = {\n  highlighting: Record<string, unknown>;\n  response: {\n    docs: SolrQueryDocument[];\n    numFound: number;\n    numFoundExact: boolean;\n    start: number;\n  };\n  responseHeader: {\n    QTime: number;\n    params: {\n      json: string;\n    };\n    status: number;\n  };\n};\n\nexport type SolrQueryConfig = {\n  q: string;\n  fq?: string;\n  defType?: 'lucene' | 'dismax' | 'edismax';\n  qf?: string;\n  rows?: number;\n  hl?: boolean;\n  'hl.fl'?: string;\n  'hl.tag.pre'?: string;\n  'hl.tag.post'?: string;\n  'hl.requireFieldMatch'?: boolean;\n};\n\nexport type SolrQueryOpts = {\n  searchUrl: string;\n  query: string;\n  fieldList?: string;\n  useSolrHighlighting?: boolean;\n  tagPre?: string;\n  tagPost?: string;\n  requireFieldMatch?: boolean;\n  viewBox?: OlExtent;\n  rowsPerQuery?: number;\n  queryParser?: 'lucene' | 'dismax' | 'edismax';\n  coreName?: string;\n};\n\nexport const useExecuteSolrQuery = () => {\n  const client = useSHOGunAPIClient();\n\n  const executeSolrQuery = useCallback(async (opts: SolrQueryOpts) => {\n    const solrQueryConfig: SolrQueryConfig = {\n      q: opts.query,\n      rows: opts.rowsPerQuery ?? 100,\n      defType: opts.queryParser ?? 'edismax'\n    };\n\n    if (opts.fieldList) {\n      solrQueryConfig.qf = opts.fieldList;\n    } else {\n      solrQueryConfig.qf = opts.coreName ?? 'search';\n    }\n\n    if (opts.viewBox) {\n      const bboxFilter = `geometry:[${opts.viewBox[1]},${opts.viewBox[0]} TO ${opts.viewBox[3]},${opts.viewBox[2]}]`;\n      solrQueryConfig.fq = bboxFilter;\n    }\n\n    if (opts.useSolrHighlighting) {\n      solrQueryConfig.hl = true;\n      solrQueryConfig['hl.fl'] = '*';\n      solrQueryConfig['hl.tag.pre'] = opts.tagPre ?? '<b>';\n      solrQueryConfig['hl.tag.post'] = opts.tagPost ?? '</b>';\n      solrQueryConfig['hl.requireFieldMatch'] = opts.requireFieldMatch ?? true;\n    }\n\n    const defaultHeaders = {\n      'Content-Type': 'application/json'\n    };\n\n    const response = await fetch(opts.searchUrl, {\n      method: 'POST',\n      headers: {\n        ...defaultHeaders,\n        ...getBearerTokenHeader(client?.getKeycloak())\n      },\n      body: JSON.stringify(solrQueryConfig)\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to execute Solr query');\n    }\n\n    return await response.json() as SolrQueryResponse;\n  }, [client]);\n\n  return executeSolrQuery;\n};\n\nexport default useExecuteSolrQuery;\n","import {\n  useCallback\n} from 'react';\n\nimport ClientConfiguration from 'clientConfig';\n\nimport _groupBy from 'lodash/groupBy';\n\nimport {\n  Extent as OlExtent\n} from 'ol/extent';\nimport OlFeature from 'ol/Feature';\nimport OlFormatWKT from 'ol/format/WKT';\nimport OlGeometry from 'ol/geom/Geometry';\n\nimport Logger from '@terrestris/base-util/dist/Logger';\nimport {\n  MapUtil\n} from '@terrestris/ol-util/dist/MapUtil/MapUtil';\n\nimport {\n  isWmsLayer,\n  WmsLayer\n} from '@terrestris/ol-util/dist/typeUtils/typeUtils';\n\nimport type {\n  Category as ResultCategory\n} from '@terrestris/react-geo/dist/Panel/SearchResultsPanel/SearchResultsPanel';\n\nimport {\n  useMap\n} from '@terrestris/react-util/dist/Hooks/useMap/useMap';\n\nimport {\n  SearchConfig\n} from '@terrestris/shogun-util/dist/model/Layer';\n\nimport generateSolrQuery from '../../utils/generateSolrQuery';\n\nimport useExecuteSolrQuery from '../useExecuteSolrQuery';\n\nexport type DataSearchResult = Record<string, string | string[] | number[]>;\n\nexport type HighlightingResult = Record<string, string>;\n\nexport type HighlightingResults = Record<string, HighlightingResult>;\n\nexport const isFulfilled = <T, >(p: PromiseSettledResult<T>): p is PromiseFulfilledResult<T> => p.status === 'fulfilled';\nexport const isRejected = <T, >(p: PromiseSettledResult<T>): p is PromiseRejectedResult => p.status === 'rejected';\n\nexport const useSolrSearchEngine = () => {\n  const map = useMap();\n  const executeSolrQuery = useExecuteSolrQuery();\n\n  const replaceTemplates = useCallback((template: string, data: DataSearchResult): string => {\n    const pattern = /{\\s*(\\w+?)\\s*}/g; // regex for template string with values in brackets, e.g. {name}\n    return template.replace(pattern, (_, token) => data[token]?.toString() || '');\n  }, []);\n\n  const getFeatureTitle = useCallback((value: string, dsResult: DataSearchResult, highlightResult?: HighlightingResult): string => {\n    if (!map) {\n      return '';\n    }\n\n    const layer = MapUtil.getLayerByNameParam(map, dsResult.featureType[0] as string);\n    const searchConfig = layer?.get('searchConfig') as SearchConfig;\n\n    const blacklistedAttributes = [\n      'category',\n      'id',\n      'featureType',\n      'geometry',\n      'search'\n    ];\n\n    let title = '';\n\n    if (searchConfig?.displayTemplate) {\n      return replaceTemplates(searchConfig.displayTemplate, dsResult);\n    }\n\n    if (highlightResult) {\n      const filteredHighlightKeys = Object.keys(highlightResult).filter(key => !blacklistedAttributes.includes(key));\n      if (filteredHighlightKeys.length > 0) {\n        const highlightValue = highlightResult[filteredHighlightKeys[0]];\n        return `${highlightValue} [${filteredHighlightKeys[0]}]`;\n      }\n    }\n\n    Object.keys(dsResult)\n      .filter(key => !blacklistedAttributes.includes(key))\n      .forEach(propKey => {\n        const propValue = dsResult[propKey]?.toString();\n        if (!title && propValue.toLowerCase().indexOf(value.toLowerCase()) > -1) {\n          // show matched value followed by the attribute name in square brackets (e.g. '53111 Bonn [city]')\n          title = `${propValue} [${propKey}]`;\n        }\n      });\n\n    if (!title) {\n      // fallback -> should never happen after adding of the valid layer search config\n      title = dsResult.id as string;\n    }\n\n    return title;\n  }, [map, replaceTemplates]);\n\n  const performSolrSearch = useCallback(async (value: string, viewBox?: OlExtent) => {\n    if (!map) {\n      return;\n    }\n\n    const solrBasePath = ClientConfiguration.search?.solrBasePath ?? '/search/query';\n    const queriesPerLayer = generateSolrQuery({\n      searchValue: value,\n      map\n    });\n\n    type SolrQueryResponse = ReturnType<typeof executeSolrQuery>;\n\n    const promises: SolrQueryResponse[] = [];\n\n    for (const queryPerLayer of queriesPerLayer) {\n      promises.push(executeSolrQuery({\n        searchUrl: solrBasePath,\n        query: queryPerLayer.query,\n        fieldList: queryPerLayer.fieldList,\n        rowsPerQuery: ClientConfiguration.search?.solrQueryConfig?.rowsPerQuery,\n        queryParser: ClientConfiguration.search?.solrQueryConfig?.queryParser,\n        coreName: ClientConfiguration.search?.coreName,\n        useSolrHighlighting: ClientConfiguration.search?.useSolrHighlighting,\n        tagPre: ClientConfiguration.search?.solrQueryConfig?.tagPre,\n        tagPost: ClientConfiguration.search?.solrQueryConfig?.tagPost,\n        requireFieldMatch: ClientConfiguration.search?.solrQueryConfig?.requireFieldMatch,\n        viewBox: viewBox\n      }));\n    }\n\n    const results = (await Promise.allSettled(promises))\n      .map((settled) => ({\n        value: isFulfilled(settled) ? settled.value : undefined,\n        reason: isRejected(settled) ? settled.reason : undefined,\n        status: settled.status\n      }));\n\n    const fulfilledResponses = results.filter(res => res.status === 'fulfilled');\n    const rejectedResponses = results.filter(res => res.status === 'rejected');\n\n    rejectedResponses.map(res => {\n      Logger.error('Error while fetching the solr results for layer ', res.reason);\n    });\n\n    const dataResults = fulfilledResponses.flatMap(sR => sR.value?.response?.docs).filter(r => r);\n    const hlResults = Object.assign({}, ...fulfilledResponses.map(sr => sr.value?.highlighting));\n\n    const wktFormat = new OlFormatWKT();\n\n    const solrResults: ResultCategory[] = [];\n\n    // 1. group by category or layer title\n    let categories;\n    if (ClientConfiguration.search?.groupByCategory) {\n      categories = _groupBy(dataResults, res => res?.category?.[0]);\n    } else {\n      const sarchableLayers = map.getAllLayers().filter(l => l.get('searchable'));\n      const resultsWithLayerName = dataResults.map(result => {\n        const layerTitle = sarchableLayers.filter(l => isWmsLayer(l))\n          .find((l) => (l as WmsLayer).getSource()?.getParams()?.LAYERS === result?.featureType?.[0])\n          ?.get('name');\n\n        return {\n          layerTitle,\n          ...result\n        } as DataSearchResult;\n      });\n      categories = _groupBy(resultsWithLayerName, res => res?.layerTitle);\n    }\n\n    // 2. build features\n    Object.keys(categories).forEach(category => {\n      const features = categories[category].map(dsResult => {\n        if (!dsResult?.geometry?.[0]) {\n          return;\n        }\n        const id = dsResult.id as string;\n\n        const geometry = wktFormat.readGeometry(dsResult.geometry[0], {\n          dataProjection: 'EPSG:4326',\n          featureProjection: map.getView().getProjection()\n        });\n        const olFeat = new OlFeature({\n          geometry\n        });\n        olFeat.set('title', getFeatureTitle(value, dsResult, hlResults?.[id]));\n        let ftName;\n        if (dsResult.featureType?.[0]) {\n          const layer = MapUtil.getLayerByNameParam(map, dsResult.featureType?.[0] as string);\n          if (layer) {\n            olFeat.set('layer', layer);\n            ftName = layer.get('name');\n          }\n        } else {\n          ftName = id.substring(0, id.lastIndexOf('_'));\n        }\n        olFeat.set('ftName', ftName);\n        return olFeat;\n      }).filter(f => f) as OlFeature<OlGeometry>[];\n      const resultCategory: ResultCategory = {\n        title: category,\n        features\n      };\n      solrResults.push(resultCategory);\n    });\n\n    return solrResults;\n  }, [executeSolrQuery, getFeatureTitle, map]);\n\n  return performSolrSearch;\n};\n\nexport default useSolrSearchEngine;\n","import {\n  useCallback\n} from 'react';\n\nimport {\n  Extent as OlExtent\n} from 'ol/extent';\nimport OlFeature from 'ol/Feature';\nimport {\n  like,\n  or\n} from 'ol/format/filter';\nimport OlFormatGeoJSON from 'ol/format/GeoJSON';\nimport {\n  transformExtent\n} from 'ol/proj';\n\nimport Logger from '@terrestris/base-util/dist/Logger';\n\nimport {\n  isWmsLayer,\n  WmsLayer\n} from '@terrestris/ol-util/dist/typeUtils/typeUtils';\n\nimport type {\n  Category as ResultCategory\n} from '@terrestris/react-geo/dist/Panel/SearchResultsPanel/SearchResultsPanel';\n\nimport {\n  useMap\n} from '@terrestris/react-util/dist/Hooks/useMap/useMap';\n\nimport {\n  SearchConfig\n} from '@terrestris/shogun-util/dist/model/Layer';\n\nimport useExecuteGetFeature from '../useExecuteGetFeature';\n\nexport const isFulfilled = <T, >(p: PromiseSettledResult<T>): p is PromiseFulfilledResult<T> => p.status === 'fulfilled';\nexport const isRejected = <T, >(p: PromiseSettledResult<T>): p is PromiseRejectedResult => p.status === 'rejected';\n\nexport const useWfsSearchEngine = () => {\n  const map = useMap();\n  const executeGetFeature = useExecuteGetFeature();\n\n  const replaceTemplates = useCallback((template: string, feature: OlFeature): string => {\n    // regex for template string with values in brackets, e.g. {name}\n    const pattern = /{\\s*(\\w+?)\\s*}/g;\n    return template.replace(pattern, (_, token) => feature.getProperties()[token] || '');\n  }, []);\n\n  const getFeatureTitle = useCallback((searchValue: string, feature: OlFeature, layer: WmsLayer) => {\n    const searchConfig = layer?.get('searchConfig') as SearchConfig;\n\n    if (searchConfig?.displayTemplate) {\n      return replaceTemplates(searchConfig.displayTemplate, feature);\n    }\n\n    const blacklistedAttributes = [\n      'category',\n      'id',\n      'featureType',\n      'geometry',\n      'search'\n    ];\n\n    for (const [key, value] of Object.entries(feature.getProperties())) {\n      if (blacklistedAttributes.includes(key)) {\n        continue;\n      }\n\n      const propValue = value?.toString();\n\n      if (propValue.toLowerCase().indexOf(searchValue?.toLowerCase()) > -1) {\n        // Show matched value followed by the attribute name in square brackets (e.g. '53111 Bonn [city]').\n        return `${propValue} [${key}]`;\n      }\n    }\n\n    // Fallback.\n    return feature.getId();\n  }, [replaceTemplates]);\n\n  const performWfsSearch = useCallback(async (value: string, viewBox?: OlExtent) => {\n    if (!map) {\n      return;\n    }\n\n    const searchableLayers = map.getAllLayers().filter(l => l.get('searchable'));\n\n    if (searchableLayers.length === 0) {\n      Logger.warn('No queryable layer found.');\n      return;\n    }\n\n    type GetFeatureResponse = ReturnType<typeof executeGetFeature>;\n\n    const promises: GetFeatureResponse[] = [];\n    const layers: WmsLayer[] = [];\n\n    for (const searchableLayer of searchableLayers) {\n      if (!isWmsLayer(searchableLayer)) {\n        Logger.warn('Layer type not supported in search: ', searchableLayer);\n        continue;\n      }\n\n      const searchConfig = searchableLayer?.get('searchConfig') as SearchConfig | null;\n\n      if (!(searchConfig && searchConfig.attributes)) {\n        Logger.warn('No search configuration given for layer: ', searchableLayer);\n        continue;\n      }\n\n      const filter = searchConfig.attributes.map(attr => {\n        return like(attr, `*${value}*`, '*', '.', '!', false);\n      });\n\n      promises.push(\n        executeGetFeature({\n          layer: searchableLayer,\n          filter: filter.length === 1 ? filter[0] : or(...filter),\n          // BBOX must be in map projection.\n          bbox: viewBox ? transformExtent(viewBox, 'EPSG:4326', map.getView().getProjection()) : undefined,\n          maxFeatures: 10,\n          propertyNames: searchConfig.attributes\n        })\n      );\n      layers.push(searchableLayer);\n    }\n\n    const results = (await Promise.allSettled(promises))\n      .map((settled, i) => ({\n        value: isFulfilled(settled) ? settled.value : undefined,\n        reason: isRejected(settled) ? settled.reason : undefined,\n        status: settled.status,\n        layer: layers[i]\n      }));\n\n    const fulfilledResponses = results.filter(res => res.status === 'fulfilled');\n    const rejectedResponses = results.filter(res => res.status === 'rejected');\n\n    rejectedResponses.map(res => {\n      Logger.error(`Error while fetching the layer search results for layer \"${res.layer.get('name')}\": `, res.reason);\n    });\n\n    const OlFormatGeoJson = new OlFormatGeoJSON();\n\n    const wfsResults: ResultCategory[] = [];\n\n    for (const fulfilledResponse of fulfilledResponses) {\n      const features = OlFormatGeoJson.readFeatures(fulfilledResponse.value, {\n        featureProjection: map.getView().getProjection()\n      });\n\n      features.forEach(feature => {\n        feature.set('title', getFeatureTitle(value, feature, fulfilledResponse.layer));\n        feature.set('layer', fulfilledResponse.layer);\n      });\n\n      wfsResults.push({\n        title: fulfilledResponse.layer.get('name'),\n        features: features\n      });\n    }\n\n    return wfsResults;\n  }, [executeGetFeature, getFeatureTitle, map]);\n\n  return performWfsSearch;\n};\n\nexport default useWfsSearchEngine;\n","import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState\n} from 'react';\n\nimport {\n  LoadingOutlined,\n  SearchOutlined,\n  SettingOutlined\n} from '@ant-design/icons';\nimport {\n  Checkbox,\n  Dropdown,\n  Empty,\n  Input,\n  InputProps,\n  Button,\n  Space,\n  Tooltip\n} from 'antd';\n\nimport ClientConfiguration from 'clientConfig';\n\nimport {\n  getUid\n} from 'ol';\nimport {\n  Extent as OlExtent\n} from 'ol/extent';\nimport OlFeature from 'ol/Feature';\nimport {\n  transformExtent\n} from 'ol/proj';\nimport OlStyleCircle from 'ol/style/Circle';\nimport OlStyleFill from 'ol/style/Fill';\nimport OlStyleStroke from 'ol/style/Stroke';\nimport OlStyle from 'ol/style/Style';\n\nimport {\n  useTranslation\n} from 'react-i18next';\n\nimport Logger from '@terrestris/base-util/dist/Logger';\n\nimport {\n  PermalinkUtil\n} from '@terrestris/ol-util/dist/PermalinkUtil/PermalinkUtil';\nimport SearchResultsPanel, {\n  Category as ResultCategory\n} from '@terrestris/react-geo/dist/Panel/SearchResultsPanel/SearchResultsPanel';\n\nimport {\n  useMap\n} from '@terrestris/react-util/dist/Hooks/useMap/useMap';\n\nimport './index.less';\n\nexport type SearchEngineFunction = (value: string, viewBox?: OlExtent) => Promise<ResultCategory[] | undefined>;\n\nexport type Item = {\n  feature: OlFeature;\n};\n\nexport type MultiSearchProps = InputProps & {\n  /**\n   * The geocoder search engine to use.\n   */\n  geocoderSearchEngine?: SearchEngineFunction;\n\n  /**\n   * The data search engine to use.\n   */\n  dataSearchEngine?: SearchEngineFunction;\n};\n\nexport const MultiSearch: React.FC<MultiSearchProps> = ({\n  geocoderSearchEngine,\n  dataSearchEngine\n}): JSX.Element => {\n\n  const map = useMap();\n  const {\n    t\n  } = useTranslation();\n  const clickAwayRef = useRef<HTMLDivElement>(null);\n\n  const [isGeocoderEnabled, setIsGeocoderEnabled] = useState<boolean>(!!geocoderSearchEngine);\n  const [isDataSearchEnabled, setIsDataSearchEnabled] = useState<boolean>(!!dataSearchEngine);\n  const [useViewBox, setUseViewBox] = useState<boolean>(ClientConfiguration.search?.defaultUseViewBox ?? true);\n  const [searchValue, setSearchValue] = useState<string>('');\n  const [loading, setLoading] = useState<boolean>(false);\n  const [resultsVisible, setResultsVisible] = useState<boolean>(false);\n  const [settingsVisible, setSettingsVisible] = useState<boolean>(false);\n  const [searchResults, setSearchResults] = useState<ResultCategory[]>([]);\n\n  useEffect(() => {\n    window.addEventListener('mousedown', handleClickAway);\n\n    return () => {\n      window.removeEventListener('mousedown', handleClickAway);\n    };\n  }, []);\n\n  const handleClickAway = (e: Event) => {\n    let target = e.target;\n    while (target) {\n      target = (target as Node).parentNode;\n    }\n\n    if ((clickAwayRef.current && ((clickAwayRef.current as Element).contains(e.target as Node)))) {\n      return;\n    }\n\n    setResultsVisible(false);\n  };\n\n  const settingsMenu = useMemo(() => {\n    const menu = {\n      items: [{\n        label: (\n          <Checkbox\n            checked={useViewBox}\n            onChange={e => setUseViewBox(e.target.checked)}\n          >\n            {t('MultiSearch.searchInViewBox')}\n          </Checkbox>\n        ),\n        key: 'viewbox'\n      }]\n    };\n\n    if (geocoderSearchEngine) {\n      menu.items.push({\n        label: (\n          <Checkbox\n            checked={isGeocoderEnabled}\n            onChange={e => setIsGeocoderEnabled(e.target.checked)}\n          >\n            {t('MultiSearch.searchGeocoder')}\n          </Checkbox>\n        ),\n        key: 'geocoder'\n      });\n    }\n\n    if (dataSearchEngine) {\n      menu.items.push({\n        label: (\n          <Checkbox\n            checked={isDataSearchEnabled}\n            onChange={e => setIsDataSearchEnabled(e.target.checked)}\n          >\n            {t('MultiSearch.searchData')}\n          </Checkbox>\n        ),\n        key: 'data'\n      });\n    }\n\n    return menu;\n  }, [useViewBox, t, geocoderSearchEngine, dataSearchEngine, isGeocoderEnabled, isDataSearchEnabled]);\n\n  const performSearch = useCallback(async () => {\n    if (!map) {\n      return;\n    }\n\n    if (!isGeocoderEnabled && !isDataSearchEnabled) {\n      return;\n    }\n\n    const minChars = ClientConfiguration.search?.minChars ?? 3;\n    if (searchValue.length < minChars) {\n      resetSearch();\n      return;\n    }\n\n    setLoading(true);\n\n    let viewBox: OlExtent | undefined;\n\n    if (useViewBox) {\n      const mapViewProjection = map?.getView().getProjection();\n      const extent = map?.getView()?.calculateExtent();\n      if (extent) {\n        viewBox = transformExtent(extent, mapViewProjection, 'EPSG:4326');\n      }\n    }\n\n    const updatedResults: ResultCategory[] = [];\n\n    if (isDataSearchEnabled && dataSearchEngine) {\n      try {\n        const results = await dataSearchEngine(searchValue, viewBox);\n\n        if (!results) {\n          throw new Error('No response from data search engine.');\n        }\n\n        updatedResults.push(...results);\n      } catch (error) {\n        Logger.error('Error while data search: \\n', error);\n      } finally {\n        if (!isGeocoderEnabled) {\n          setLoading(false);\n        }\n      }\n    }\n\n    if (isGeocoderEnabled && geocoderSearchEngine) {\n      try {\n        const results = await geocoderSearchEngine(searchValue, viewBox);\n\n        if (!results) {\n          throw new Error('No response from geocoder search engine.');\n        }\n\n        updatedResults.push(...results);\n      } catch (error) {\n        Logger.error('Error while geocoder search: \\n', error);\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    const allEmpty = updatedResults.every(result => result.features.length === 0);\n\n    setSearchResults(allEmpty ? [] : updatedResults);\n    setResultsVisible(true);\n  }, [map, isGeocoderEnabled, isDataSearchEnabled, searchValue, useViewBox, dataSearchEngine, geocoderSearchEngine]);\n\n  useEffect(() => {\n    const delay = ClientConfiguration.search?.delay ?? 1000;\n    const timeout = setTimeout(() => {\n      performSearch();\n    }, delay);\n\n    return () => clearTimeout(timeout);\n  }, [performSearch]);\n\n  const resetSearch = () => {\n    setSearchResults([]);\n  };\n\n  const actionsCreator = (item: any) => {\n    const feat = item.feature;\n    const layer = feat.get('layer');\n\n    if (!layer?.get('editable')) {\n      return;\n    }\n\n    // button is temporarily disabled\n    return [<></>];\n  };\n\n  const layerStyle = useMemo(() => (\n    new OlStyle({\n      stroke: new OlStyleStroke({\n        color: 'rgb(255,0,0)',\n        width: 2\n      }),\n      fill: new OlStyleFill({\n        color: 'rgba(255,255,255, 0.5)'\n      }),\n      image: new OlStyleCircle({\n        radius: 10,\n        fill: new OlStyleFill({\n          color: 'rgba(255,255,255, 0.5)'\n        }),\n        stroke: new OlStyleStroke({\n          color: 'rgb(255,0,0)',\n          width: 3\n        })\n      })\n    })\n  ), []);\n\n  const resultRenderer = () => {\n    if (searchValue.length < 2 || !resultsVisible || loading || !searchResults) {\n      return null;\n    }\n\n    const numTotal = searchResults.length;\n\n    if (numTotal === 0) {\n      return (\n        <div\n          className='no-search-result-div'\n        >\n          <Empty\n            image={Empty.PRESENTED_IMAGE_SIMPLE}\n          />\n        </div>\n      );\n    }\n\n    const onSearchResultClick = (item: Item) => {\n      setResultsVisible(false);\n      zoomOffsetOnClick(item);\n      if (ClientConfiguration.search?.activateLayerOnClick) {\n        activateLayer(item);\n      }\n    };\n\n    const activateLayer = (item: Item) => {\n      const layer = item?.feature?.get('layer');\n      if (layer && map && !layer.getVisible()) {\n        layer.setVisible(true);\n        // also make all parent folders / groups visible so\n        // that the layer becomes visible in map\n        PermalinkUtil.setParentsVisible(\n          map,\n          map.getLayerGroup().getLayers(),\n          getUid(layer)\n        );\n      }\n    };\n\n    const zoomOffsetOnClick = (item: Item) => {\n      const extent = item.feature.getGeometry()?.getExtent();\n      const toolMenuElement = document.getElementsByClassName('tool-menu');\n      const toolMenuWidth = toolMenuElement[0]?.clientWidth ?? 0;\n      const padding = [0, 0, 0, toolMenuWidth];\n\n      if (extent) {\n        map?.getView().fit(extent, {\n          size: map.getSize(),\n          padding\n        });\n      }\n    };\n\n    return (\n      <SearchResultsPanel\n        searchResults={searchResults}\n        numTotal={numTotal}\n        accordion\n        searchTerms={searchValue.split(' ')}\n        actionsCreator={actionsCreator}\n        layerStyle={layerStyle}\n        onClick={onSearchResultClick}\n      />\n    );\n  };\n\n  const getPlaceholder = () => {\n    if (isGeocoderEnabled && isDataSearchEnabled) {\n      return t('MultiSearch.searchPlaceholder');\n    }\n\n    if (!isGeocoderEnabled && isDataSearchEnabled) {\n      return t('MultiSearch.searchPlaceholderDataOnly');\n    }\n\n    if (isGeocoderEnabled && !isDataSearchEnabled) {\n      return t('MultiSearch.searchPlaceholderGeocoderOnly');\n    }\n  };\n\n  return (\n    <div\n      className=\"multi-search\"\n      ref={clickAwayRef}\n    >\n      <Space.Compact>\n        <Input\n          value={searchValue}\n          disabled={!isGeocoderEnabled && !isDataSearchEnabled}\n          onChange={event => {\n            setLoading(event.target.value !== '');\n            setSearchValue(event.target.value);\n          }}\n          allowClear\n          onFocus={() => setResultsVisible(true)}\n          placeholder={getPlaceholder()}\n          prefix={<SearchOutlined />}\n          suffix={loading ? <LoadingOutlined /> : null}\n        />\n        <Dropdown\n          menu={settingsMenu}\n          trigger={['click']}\n          onOpenChange={setSettingsVisible}\n          open={settingsVisible}\n        >\n          <Tooltip\n            title={t('MultiSearch.settingsTooltip')}\n            placement=\"right\"\n          >\n            <Button\n              icon={<SettingOutlined />}\n            />\n          </Tooltip>\n        </Dropdown>\n      </Space.Compact>\n      {resultRenderer()}\n    </div>\n  );\n};\n\nexport default MultiSearch;\n","import React from 'react';\n\nimport {\n  InputProps\n} from 'antd/lib/input';\n\nimport Logger from '@terrestris/base-util/dist/Logger';\n\nimport useNominatimSearchEngine from '../../hooks/searchEngines/useNominatimSearchEngine';\nimport useSolrSearchEngine from '../../hooks/searchEngines/useSolrSearchEngine';\nimport useWfsSearchEngine from '../../hooks/searchEngines/useWfsSearchEngine';\nimport useAppSelector from '../../hooks/useAppSelector';\n\nimport MultiSearch from '../MultiSearch';\n\nimport './index.less';\n\nexport type SearchFieldProps = InputProps;\n\nexport const SearchField: React.FC<SearchFieldProps> = ({\n  ...passThroughProps\n}): JSX.Element => {\n\n  const useNominatim = useAppSelector((state) => state.searchEngines.includes('nominatim'));\n  const useSolr = useAppSelector((state) => state.searchEngines.includes('solr'));\n  const useWfs = useAppSelector((state) => state.searchEngines.includes('wfs'));\n\n  const wfsSearchEngine = useWfsSearchEngine();\n  const solrSearchEngine = useSolrSearchEngine();\n  const nominatimSearchEngine = useNominatimSearchEngine();\n\n  const getGeocoderSearchEngine = () => {\n    if (useNominatim) {\n      return nominatimSearchEngine;\n    }\n  };\n\n  const getDataSearchEngine = () => {\n    // Only allow solr or wfs simultaneously.\n    if (useSolr && useWfs) {\n      Logger.warn('Both solr and wfs search are configured. Only one of them ' +\n        'can be used at the same time.');\n      return;\n    }\n\n    if (useSolr) {\n      return solrSearchEngine;\n    }\n\n    if (useWfs) {\n      return wfsSearchEngine;\n    }\n  };\n\n  // At least a single search engine should be configured.\n  if (!useNominatim && !useSolr && !useWfs ) {\n    Logger.warn('Neither nominatim, solr nor wfs search is configured.');\n    return <></>;\n  }\n\n  return (\n    <div\n      className=\"search\"\n      aria-label=\"search-field\"\n    >\n      <MultiSearch\n        aria-label=\"search\"\n        geocoderSearchEngine={getGeocoderSearchEngine()}\n        dataSearchEngine={getDataSearchEngine()}\n        {...passThroughProps}\n      />\n    </div>\n  );\n};\n\nexport default SearchField;\n","import { md5 } from 'js-md5';\n\nexport interface GravatarProps {\n  email: string;\n  size?: number;\n  rating?: 'g' | 'pg' | 'r' | 'x';\n  defaultImage?: '404' | 'mp' | 'identicon' | 'monsterid' | 'wavatar' | 'retro' | 'robohash' | 'blank';\n  force?: boolean;\n}\n\nconst GRAVATAR_BASE_URL = 'https://www.gravatar.com/avatar/';\n\n/**\n * https://de.gravatar.com/site/implement/images/\n */\nexport const getGravatarUrl = ({\n  email = '',\n  size = 80,\n  rating = 'g',\n  defaultImage = 'identicon',\n  force = false\n}: GravatarProps): string => {\n  const lowerCaseEmail = email.toLowerCase();\n  const hash = md5(lowerCaseEmail);\n\n  let url = `${GRAVATAR_BASE_URL}${hash}?s=${size}&r=${rating}&d=${defaultImage}`;\n\n  if (force) {\n    url = `${url}&f=y`;\n  }\n\n  return url;\n};\n\nexport default getGravatarUrl;\n","import * as React from 'react';\n\nimport {\n  Avatar,\n  Dropdown,\n  MenuProps\n} from 'antd';\nimport { AvatarProps } from 'antd/lib/avatar';\n\nimport './index.less';\n\nimport _isString from 'lodash/isString';\n\n// non default props\nexport interface BaseProps {\n  className?: string;\n  imageSrc?: string;\n  userMenu?: MenuProps;\n  userName?: React.ReactNode;\n  style?: any;\n}\n\nexport type UserChipProps = BaseProps & AvatarProps;\n\nconst UserChip: React.FC<UserChipProps> = ({\n  className,\n  imageSrc,\n  userMenu,\n  userName,\n  style,\n  ...passThroughProps\n}) => {\n  // eslint-disable-next-line  no-underscore-dangle, @typescript-eslint/naming-convention\n  const _className = 'userchip';\n\n  const getInitials = (): string => {\n    if (!_isString(userName)) {\n      return '??';\n    }\n\n    return userName\n      .split(' ')\n      .map(part => part[0] ?? '')\n      .join('')\n      .toUpperCase();\n  };\n\n  const getUserMenu = () => {\n    const finalClassName = className\n      ? `${className} ${_className}`\n      : _className;\n\n    return (\n      <div\n        className={finalClassName}\n        style={style}\n      >\n        <Avatar\n          src={imageSrc}\n          size=\"large\"\n          className=\"userimage\"\n          {...passThroughProps}\n        >\n          {imageSrc ? '' : getInitials()}\n        </Avatar>\n        <span className=\"username\">{userName}</span>\n      </div>\n    );\n  };\n\n  if (userMenu?.items) {\n    return (\n      <Dropdown\n        menu={userMenu}\n        trigger={['click']}\n        getPopupContainer={() =>\n          document.getElementsByClassName(_className)[0] as HTMLElement\n        }\n      >\n        {getUserMenu()}\n      </Dropdown>\n    );\n  } else {\n    return getUserMenu();\n  }\n};\n\nexport default UserChip;\n","import React, {\n  useEffect,\n  useState\n} from 'react';\n\nimport {\n  faUserCog,\n  faSignOut,\n  faSignIn,\n  faAngleDown\n} from '@fortawesome/free-solid-svg-icons';\nimport {\n  FontAwesomeIcon\n} from '@fortawesome/react-fontawesome';\n\nimport {\n  Button,\n  Tooltip\n} from 'antd';\nimport {\n  ItemType\n} from 'antd/lib/menu/interface';\n\nimport _isEmpty from 'lodash/isEmpty';\n\nimport {\n  MenuInfo\n} from 'rc-menu/lib/interface';\n\nimport {\n  useTranslation\n} from 'react-i18next';\n\nimport useAppSelector from '../../hooks/useAppSelector';\nimport useSHOGunAPIClient from '../../hooks/useSHOGunAPIClient';\nimport {\n  getGravatarUrl\n} from '../../utils/getGravatarUrl';\n\nimport UserChip from '../UserChip';\n\nimport './index.less';\n\nexport const UserMenu: React.FC = (): JSX.Element => {\n  const {\n    t\n  } = useTranslation();\n\n  const [loginUrl, setLoginUrl] = useState<string>();\n\n  const client = useSHOGunAPIClient();\n  const keycloak = client?.getKeycloak();\n\n  const user = useAppSelector((state) => state.user);\n\n  useEffect(() => {\n    const getLoginUrl = async () => {\n      const url = await keycloak?.createLoginUrl();\n      setLoginUrl(url);\n    };\n\n    getLoginUrl();\n  }, [keycloak]);\n\n  const onMenuClick = (evt: MenuInfo) => {\n    switch (evt.key) {\n      case 'settings':\n        if (keycloak) {\n          keycloak.accountManagement();\n        }\n        break;\n      case 'logout':\n        if (keycloak) {\n          keycloak.logout({\n            redirectUri: loginUrl\n          });\n        }\n        break;\n      default:\n        break;\n    }\n  };\n\n  const getMenu = () => {\n    const username: ItemType = {\n      key: 'username',\n      label: (\n        <div\n          className=\"username-menu-item\"\n          aria-label=\"user-name\"\n        >\n          <span\n            className=\"item-username\"\n          >\n            {\n              user.providerDetails?.username ?? user.authProviderId\n            }\n          </span>\n          <br />\n          <span\n            className=\"item-fullname\"\n          >\n            {\n              `${user.providerDetails?.firstName ?? ''} ${user.providerDetails?.lastName ?? ''}`\n            }\n          </span>\n        </div>\n      )\n    };\n\n    const divider: ItemType = {\n      type: 'divider'\n    };\n\n    const settings: ItemType = {\n      key: 'settings',\n      icon: (\n        <FontAwesomeIcon\n          icon={faUserCog}\n        />\n      ),\n      label: t('UserMenu.settingsMenuTitle')\n    };\n\n    const logout: ItemType = {\n      key: 'logout',\n      icon: (\n        <FontAwesomeIcon\n          icon={faSignOut}\n        />\n      ),\n      label: (\n        <div\n          aria-label=\"logout\"\n        >\n          {t('UserMenu.logoutMenuTitle')}\n        </div>\n      )\n    };\n\n    const accountRoles = keycloak?.tokenParsed?.resource_access?.account?.roles;\n    const hasUserManagementAccess = Array.isArray(accountRoles) && accountRoles.indexOf('manage-account') > -1;\n\n    const items: ItemType[] = hasUserManagementAccess ? [\n      username,\n      divider,\n      settings,\n      divider,\n      logout\n    ] : [\n      username,\n      divider,\n      logout\n    ];\n\n    return {\n      items,\n      onClick: onMenuClick\n    };\n  };\n\n  const onLoginClick = () => {\n    if (keycloak) {\n      keycloak.login();\n    }\n  };\n\n  return (\n    <div\n      className=\"user-menu\"\n    >\n      {_isEmpty(user) ? (\n        <Tooltip\n          title={t('UserMenu.loginTooltip')}\n        >\n          <Button\n            type=\"link\"\n            onClick={onLoginClick}\n            icon={\n              <FontAwesomeIcon\n                icon={faSignIn}\n              />\n            }\n          >\n            {t('UserMenu.loginMenuTitle')}\n          </Button>\n        </Tooltip>\n      ) : (\n        <UserChip\n          size=\"small\"\n          imageSrc={getGravatarUrl({\n            email: user.providerDetails?.email ?? '',\n            size: 28\n          })}\n          userName={\n            <FontAwesomeIcon\n              icon={faAngleDown}\n            />\n          }\n          userMenu={getMenu()}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default UserMenu;\n","import React from 'react';\n\nimport ClientConfiguration from 'clientConfig';\n\nimport DocumentationButton from '../../components/DocumentationButton';\nimport {\n  useAppSelector\n} from '../../hooks/useAppSelector';\nimport {\n  usePlugins\n} from '../../hooks/usePlugins';\n\nimport {\n  HeaderPlacementOrientation,\n  isHeaderIntegration\n} from '../../plugin';\nimport SearchField from '../SearchField';\n\nimport UserMenu from '../UserMenu';\n\nimport './index.less';\n\nexport type HeaderProps = React.ComponentProps<'div'>;\n\nexport const Header: React.FC<HeaderProps> = ({\n  ...restProps\n}): JSX.Element => {\n  const title = useAppSelector(state => state.title);\n  const logoPath = useAppSelector(state => state.logoPath);\n  const userMenuVisible = useAppSelector(state => state.userMenu.visible);\n\n  const plugins = usePlugins();\n\n  const insertPlugins = (itemPosition: HeaderPlacementOrientation, items: JSX.Element[]) => {\n    plugins.forEach(plugin => {\n      if (isHeaderIntegration(plugin.integration) && plugin.integration?.placementOrientation === itemPosition) {\n        const {\n          key,\n          wrappedComponent: WrappedPluginComponent\n        } = plugin;\n\n        items.splice(plugin.integration?.insertionIndex ?? 0, 0,\n          <WrappedPluginComponent\n            key={key}\n          />\n        );\n      }\n    });\n  };\n\n  const getLeftItems = () => {\n    const items = [(\n      <img\n        key=\"logo\"\n        className=\"logo\"\n        aria-label=\"logo\"\n        src={logoPath}\n      />\n    ), (\n      <div\n        key=\"title\"\n        className=\"title\"\n        aria-label=\"title\"\n      >\n        {title}\n      </div>\n    )];\n\n    insertPlugins('left', items);\n\n    return items;\n  };\n\n  const getCenterItems = () => {\n    const items = [\n      <SearchField\n        key=\"search\"\n        aria-label='search-input'\n        name='search-input'\n        className='search-input'\n      />\n    ];\n\n    insertPlugins('center', items);\n\n    return items;\n  };\n\n  const getDocsButton = () => {\n    if (!ClientConfiguration.documentationButtonVisible) {\n      return;\n    }\n\n    return (\n      <DocumentationButton\n        key=\"docs-button\"\n      />\n    );\n  };\n\n  const getUserMenu = () => {\n    if (!userMenuVisible || !ClientConfiguration.keycloak?.enabled) {\n      return;\n    }\n\n    return (\n      <div\n        key=\"user-menu\"\n        aria-label=\"user-menu\"\n      >\n        <UserMenu\n          key=\"user-menu\"\n        />\n      </div>\n    );\n  };\n\n  const getRightItems = () => {\n    const items = [\n      getDocsButton(),\n      getUserMenu()\n    ].filter((item) => {\n      return item !== undefined;\n    });\n\n    insertPlugins('right', items);\n    return items;\n  };\n\n  return (\n    <div\n      className=\"header\"\n      {...restProps}\n    >\n      <div\n        className=\"item-container left-items\"\n      >\n        {\n          getLeftItems()\n        }\n      </div>\n      <div\n        className=\"item-container center-items\"\n      >\n        {\n          getCenterItems()\n        }\n      </div>\n      <div\n        className=\"item-container right-items\"\n      >\n        {\n          getRightItems()\n        }\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","import React, {\n  useState,\n  useEffect,\n  useCallback\n} from 'react';\n\nimport {\n  Alert,\n  Spin\n} from 'antd';\n\nimport OlLayer from 'ol/layer/Layer';\n\nimport {\n  useTranslation\n} from 'react-i18next';\n\nimport Logger from '@terrestris/base-util/dist/Logger';\n\nimport Layer from '@terrestris/shogun-util/dist/model/Layer';\n\nimport useSHOGunAPIClient from '../../../hooks/useSHOGunAPIClient';\n\nimport './index.less';\n\nexport type LayerConfigurationProps = React.ComponentProps<'pre'> & {\n  layer?: OlLayer;\n};\n\nexport const LayerConfiguration: React.FC<LayerConfigurationProps> = ({\n  layer,\n  ...restProps\n}): JSX.Element => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [errorMessage, setErrorMessage] = useState<string>();\n  const [layerConfiguration, setLayerConfiguration] = useState<Layer>();\n\n  const client = useSHOGunAPIClient();\n\n  const {\n    t\n  } = useTranslation();\n\n  const getLayerConfiguration = useCallback(async () => {\n    try {\n      setLoading(true);\n      setErrorMessage('');\n\n      if (!layer || !layer.get('shogunId')) {\n        throw new Error('No layer provided or the layer has no shogunId set');\n      }\n\n      const conf = await client?.layer().findOne(layer.get('shogunId'));\n\n      setLayerConfiguration(conf);\n    } catch (error) {\n      Logger.error(error);\n      setErrorMessage(t('LayerConfiguration.errorMessage'));\n    } finally {\n      setLoading(false);\n    }\n  }, [t, client, layer]);\n\n  useEffect(() => {\n    getLayerConfiguration();\n  }, [getLayerConfiguration]);\n\n  if (errorMessage) {\n    return (\n      <Alert\n        type=\"error\"\n        closable={true}\n        message={errorMessage}\n      />\n    );\n  }\n\n  return (\n    <Spin\n      spinning={loading}\n    >\n      <pre\n        className=\"layer-configuration\"\n        {...restProps}\n      >\n        <code>\n          {\n            JSON.stringify(layerConfiguration, null, '  ')\n          }\n        </code>\n      </pre>\n    </Spin>\n  );\n};\n\nexport default LayerConfiguration;\n","import React, {\n  useState,\n  useEffect,\n  useCallback\n} from 'react';\n\nimport {\n  Alert,\n  Form,\n  FormProps,\n  Spin\n} from 'antd';\n\nimport OlLayerImage from 'ol/layer/Image';\nimport OlLayer from 'ol/layer/Layer';\nimport OlLayerTile from 'ol/layer/Tile';\nimport OlSourceImageWMS from 'ol/source/ImageWMS';\nimport OlSourceTileWMS from 'ol/source/TileWMS';\n\nimport {\n  useTranslation\n} from 'react-i18next';\n\nimport Logger from '@terrestris/base-util/dist/Logger';\nimport { UrlUtil } from '@terrestris/base-util/dist/UrlUtil/UrlUtil';\n\nimport CapabilitiesUtil from '@terrestris/ol-util/dist/CapabilitiesUtil/CapabilitiesUtil';\n\nimport {\n  isWmsLayer\n} from '@terrestris/ol-util/dist/typeUtils/typeUtils';\n\nimport {\n  getBearerTokenHeader\n} from '@terrestris/shogun-util/dist/security/getBearerTokenHeader';\n\nimport useSHOGunAPIClient from '../../../hooks/useSHOGunAPIClient';\n\nimport './index.less';\n\nexport type LayerDetailsProps = Partial<FormProps> & {\n  layer?: OlLayer;\n};\n\nexport const LayerDetails: React.FC<LayerDetailsProps> = ({\n  layer,\n  ...restProps\n}): JSX.Element => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [capabilities, setCapabilities] = useState<any>();\n  const [errorMessage, setErrorMessage] = useState<string>();\n\n  const client = useSHOGunAPIClient();\n\n  const {\n    t\n  } = useTranslation();\n\n  const getCapabilities = useCallback(async () => {\n    if (!layer || !isWmsLayer(layer)) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setErrorMessage('');\n      setCapabilities(undefined);\n\n      const capa = await CapabilitiesUtil.getWmsCapabilitiesByLayer(\n        (layer as OlLayerImage<OlSourceImageWMS> | OlLayerTile<OlSourceTileWMS>), {\n          headers: {\n            ...layer.get('useBearerToken') ? {\n              ...getBearerTokenHeader(client?.getKeycloak())\n            } : undefined\n          }\n        });\n\n      setCapabilities(capa);\n    } catch (error) {\n      Logger.error(error);\n      setErrorMessage(t('LayerDetails.errorMessage'));\n    } finally {\n      setLoading(false);\n    }\n  }, [t, client, layer]);\n\n  useEffect(() => {\n    getCapabilities();\n  }, [getCapabilities]);\n\n  const getLayerName = () => {\n    if (!layer || !isWmsLayer(layer)) {\n      return;\n    }\n\n    return layer.getSource()?.getParams().LAYERS;\n  };\n\n  const getCapabilitiesUrl = () => {\n    if (!layer || !isWmsLayer(layer)) {\n      return;\n    }\n\n    let layerUrl;\n    if (layer.getSource() instanceof OlSourceImageWMS) {\n      layerUrl = (layer.getSource() as OlSourceImageWMS).getUrl();\n    }\n    if (layer.getSource() instanceof OlSourceTileWMS) {\n      const urls = (layer.getSource() as OlSourceTileWMS).getUrls();\n      layerUrl = urls ? urls[0] : undefined;\n    }\n\n    if (layerUrl) {\n      return UrlUtil.createValidGetCapabilitiesRequest(layerUrl, 'WMS', '1.3.0');\n    }\n  };\n\n  const getCapabilitiesLayer = () => {\n    const layers: any[] = capabilities?.Capability?.Layer?.Layer;\n    const layerName = getLayerName();\n    let lay;\n    if (Array.isArray(layers)) {\n      lay = layers?.find(l => l?.Name === layerName);\n    } else {\n      return layers;\n    }\n    return lay;\n  };\n\n  const getBBox = () => {\n    const lay = getCapabilitiesLayer();\n\n    if (!lay || !lay.EX_GeographicBoundingBox) {\n      return;\n    }\n\n    return [\n      lay.EX_GeographicBoundingBox.westBoundLongitude,\n      lay.EX_GeographicBoundingBox.southBoundLatitude,\n      lay.EX_GeographicBoundingBox.eastBoundLongitude,\n      lay.EX_GeographicBoundingBox.northBoundLatitude\n    ].join(', ');\n  };\n\n  const getMinScale = () => {\n    const lay = getCapabilitiesLayer();\n\n    if (!lay) {\n      return;\n    }\n\n    return lay.MinScaleDenominator;\n  };\n\n  const getMaxScale = () => {\n    const lay = getCapabilitiesLayer();\n\n    if (!lay) {\n      return;\n    }\n\n    return lay.MaxScaleDenominator;\n  };\n\n  const getAbstract = () => {\n    const lay = getCapabilitiesLayer();\n\n    if (!lay) {\n      return;\n    }\n\n    return lay.Abstract;\n  };\n\n  const getServiceAbstract = () => {\n    return capabilities?.Service?.Abstract;\n  };\n\n  const getContact = () => {\n    return capabilities?.Service?.ContactInformation?.ContactElectronicMailAddress;\n  };\n\n  const getLayerTitle = () => {\n    const lay = getCapabilitiesLayer();\n\n    if (!lay) {\n      return;\n    }\n\n    return lay.Title;\n  };\n\n  const getAccessConstraints = () => {\n    return capabilities?.Service?.AccessConstraints;\n  };\n\n  if (errorMessage) {\n    return (\n      <Alert\n        type=\"error\"\n        closable={true}\n        message={errorMessage}\n      />\n    );\n  }\n\n  return (\n    <Spin\n      spinning={loading}\n    >\n      <Form\n        className=\"layer-details\"\n        layout=\"horizontal\"\n        size=\"small\"\n        labelAlign=\"left\"\n        labelWrap={true}\n        labelCol={{\n          flex: '150px'\n        }}\n        {...restProps}\n      >\n        <Form.Item\n          name=\"layerName\"\n          label={t('LayerDetails.layerNameLabel')}\n        >\n          <span>{getLayerName() ? getLayerName() : t('LayerDetails.noDataPlaceholder')}</span>\n        </Form.Item>\n        <Form.Item\n          name=\"layerTitle\"\n          label={t('LayerDetails.layerTitleLabel')}\n        >\n          <span>{getLayerTitle() ? getLayerTitle() : t('LayerDetails.noDataPlaceholder')}</span>\n        </Form.Item>\n        <Form.Item\n          name=\"service-abstract\"\n          label={t('LayerDetails.serviceAbstractLabel')}\n        >\n          <span>{getServiceAbstract() ? getServiceAbstract() : t('LayerDetails.noDataPlaceholder')}</span>\n        </Form.Item>\n        <Form.Item\n          name=\"abstract\"\n          label={t('LayerDetails.abstractLabel')}\n        >\n          <span>{getAbstract() ? getAbstract() : t('LayerDetails.noDataPlaceholder')}</span>\n        </Form.Item>\n        <Form.Item\n          name=\"accessConstraints\"\n          label={t('LayerDetails.accessConstraintsLabel')}\n        >\n          <span>{getAccessConstraints() ? getAccessConstraints() : t('LayerDetails.noDataPlaceholder')}</span>\n        </Form.Item>\n        <Form.Item\n          name=\"CapabilitiesUrl\"\n          label={t('LayerDetails.capabilitiesUrlLabel')}\n        >\n          <a href={getCapabilitiesUrl()}>{getCapabilitiesUrl()}</a>\n        </Form.Item>\n        <Form.Item\n          name=\"contact\"\n          label={t('LayerDetails.contactLabel')}\n        >\n          {getContact() ? <a href={`mailto:${getContact()}`}>{getContact()}</a> : <span>{t('LayerDetails.noDataPlaceholder')}</span>}\n        </Form.Item>\n        <Form.Item\n          name=\"minScale\"\n          label={t('LayerDetails.minScaleLabel')}\n        >\n          <span>{getMinScale() ? getMinScale() : t('LayerDetails.noDataPlaceholder')}</span>\n        </Form.Item>\n        <Form.Item\n          name=\"maxScale\"\n          label={t('LayerDetails.maxScaleLabel')}\n        >\n          <span>{getMaxScale() ? getMaxScale() : t('LayerDetails.noDataPlaceholder')}</span>\n        </Form.Item>\n        <Form.Item\n          name=\"bbox\"\n          label={t('LayerDetails.bboxLabel')}\n        >\n          <span>{getBBox() ? getBBox() : t('LayerDetails.noDataPlaceholder')}</span>\n        </Form.Item>\n      </Form>\n    </Spin>\n  );\n};\n\nexport default LayerDetails;\n","import React, {\n  useState,\n  useEffect\n} from 'react';\n\nimport {\n  FileTextOutlined\n} from '@ant-design/icons';\n\nimport {\n  Button,\n  Modal,\n  ModalProps,\n  Tooltip\n} from 'antd';\n\nimport OlLayer from 'ol/layer/Layer';\n\nimport {\n  useTranslation\n} from 'react-i18next';\n\nimport { MapUtil } from '@terrestris/ol-util/dist/MapUtil/MapUtil';\n\nimport {\n  useMap\n} from '@terrestris/react-util/dist/Hooks/useMap/useMap';\n\nimport useAppDispatch from '../../hooks/useAppDispatch';\nimport useAppSelector from '../../hooks/useAppSelector';\n\nimport {\n  hide as hideLayerDetailsModal,\n  setLayer as setDetailsLayer\n} from '../../store/layerDetailsModal';\n\nimport LayerConfiguration from './LayerConfiguration';\nimport LayerDetails from './LayerDetails';\n\nimport './index.less';\n\nexport type LayerDetailsModalProps = Partial<ModalProps>;\n\nexport const LayerDetailsModal: React.FC<LayerDetailsModalProps> = ({\n  ...restProps\n}): JSX.Element => {\n  const [layer, setLayer] = useState<OlLayer>();\n  const [configurationVisible, setConfigurationVisible] = useState<boolean>(false);\n\n  const isModalVisible = useAppSelector(state => state.layerDetailsModal.visible);\n  const layerId = useAppSelector(state => state.layerDetailsModal.layerId);\n\n  const dispatch = useAppDispatch();\n\n  const map = useMap();\n\n  const {\n    t\n  } = useTranslation();\n\n  useEffect(() => {\n    if (!map) {\n      return;\n    }\n\n    if (!layerId) {\n      setLayer(undefined);\n      return;\n    }\n\n    const l = MapUtil.getLayerByOlUid(map, layerId);\n\n    if (!(l instanceof OlLayer)) {\n      return;\n    }\n\n    setLayer(l);\n  }, [map, layerId]);\n\n  const closeModal = () => {\n    dispatch(hideLayerDetailsModal());\n    dispatch(setDetailsLayer(undefined));\n  };\n\n  const onShowConfigurationClick = () => {\n    setConfigurationVisible(!configurationVisible);\n  };\n\n  return (\n    <Modal\n      className=\"layer-details-modal\"\n      title={(\n        <div\n          className=\"title-group\"\n        >\n          <span>{t('LayerDetailsModal.title', {\n            layerName: layer?.get('name')\n          })}\n          </span>\n          {\n            layer?.get('shogunId') && (\n              <Tooltip\n                title={configurationVisible ?\n                  t('LayerDetailsModal.internalConfigurationButtonTooltipPressed') :\n                  t('LayerDetailsModal.internalConfigurationButtonTooltip')\n                }\n              >\n                <Button\n                  type=\"link\"\n                  className={configurationVisible ? 'pressed' : ''}\n                  icon={<FileTextOutlined />}\n                  onClick={onShowConfigurationClick}\n                />\n              </Tooltip>\n            )\n          }\n        </div>\n      )}\n      open={isModalVisible}\n      onCancel={closeModal}\n      width={800}\n      footer={false}\n      {...restProps}\n    >\n      <LayerDetails\n        layer={layer}\n        hidden={configurationVisible}\n      />\n      {\n        layer?.get('shogunId') && (\n          <LayerConfiguration\n            layer={layer}\n            hidden={!configurationVisible}\n          />\n        )\n      }\n    </Modal>\n  );\n};\n\nexport default LayerDetailsModal;\n","import React, { useState } from 'react';\n\nimport {\n  faPlus,\n  faMinus,\n  faLocation,\n  faLocationPin\n} from '@fortawesome/free-solid-svg-icons';\n\nimport {\n  FontAwesomeIcon\n} from '@fortawesome/react-fontawesome';\nimport {\n  TooltipPlacement\n} from 'antd/es/tooltip';\n\nimport {\n  useTranslation\n} from 'react-i18next';\n\nimport {\n  GeoLocationButton\n} from '@terrestris/react-geo/dist/Button/GeoLocationButton/GeoLocationButton';\nimport ZoomButton from '@terrestris/react-geo/dist/Button/ZoomButton/ZoomButton';\n\nimport {\n  useMap\n} from '@terrestris/react-util/dist/Hooks/useMap/useMap';\n\nimport useAppSelector from '../../hooks/useAppSelector';\nimport Toolbar, { ToolbarProps } from '../Toolbar';\n\nimport './index.less';\n\nexport type MapToolbarProps = React.HTMLAttributes<HTMLDivElement> & ToolbarProps;\n\nexport const MapToolbar: React.FC = (): JSX.Element => {\n  const {\n    t\n  } = useTranslation();\n  const map = useMap();\n\n  const [geolocationButtonPressed, setGeolocationButtonPressed] = useState(false);\n\n  const mapToolbarVisible = useAppSelector(state => state.mapToolbarVisible.visible);\n\n  const stylingDrawerVisibility = useAppSelector(state => state.stylingDrawerVisibility);\n  const editFeatureDrawerOpen = useAppSelector(state => state.editFeatureDrawerOpen);\n  const drawerOpen = stylingDrawerVisibility || editFeatureDrawerOpen;\n  const className = drawerOpen ? 'drawer-open' : '';\n\n  const btnTooltipProps = {\n    tooltipPlacement: 'left' as TooltipPlacement,\n    tooltipProps: {\n      mouseEnterDelay: 0.5\n    }\n  };\n\n  return (\n    <>\n      {mapToolbarVisible &&\n        <Toolbar\n          id='map-toolbar'\n          className={className}\n          alignment=\"vertical\"\n          role=\"toolbar\"\n        >\n          {map &&\n            <ZoomButton\n              aria-label='zoom-in'\n              tooltip={t('MapToolbar.zoomInTooltip')}\n              icon={\n                <FontAwesomeIcon\n                  icon={faPlus}\n                />\n              }\n              {...btnTooltipProps}\n            />}\n          {map &&\n            <ZoomButton\n              aria-label='zoom-out'\n              tooltip={t('MapToolbar.zoomOutTooltip')}\n              delta={-1}\n              icon={\n                <FontAwesomeIcon\n                  icon={faMinus}\n                />\n              }\n              {...btnTooltipProps}\n            />}\n          {map &&\n            <GeoLocationButton\n              aria-label='geolocation'\n              showMarker={true}\n              follow={true}\n              pressed={geolocationButtonPressed}\n              onChange={() => setGeolocationButtonPressed(!geolocationButtonPressed)}\n              tooltip={t('MapToolbar.geoLocation')}\n              icon={\n                <FontAwesomeIcon\n                  icon={faLocation}\n                />\n              }\n              pressedIcon={\n                <FontAwesomeIcon\n                  icon={faLocationPin}\n                />\n              }\n              {...btnTooltipProps}\n            />}\n        </Toolbar>\n      }\n    </>\n  );\n};\n\nexport default MapToolbar;\n","import * as React from 'react';\n\nimport {\n  useEffect,\n  useState\n} from 'react';\n\nimport {\n  CardStyle,\n  CardStyleProps\n} from 'geostyler/dist/Component/CardStyle/CardStyle';\n\nimport OlParser from 'geostyler-openlayers-parser';\n\nimport {\n  Style as GsStyle\n} from 'geostyler-style';\n\nimport OlFeature from 'ol/Feature';\nimport OlLayerVector from 'ol/layer/Vector';\nimport OlSourceVector from 'ol/source/Vector';\n\nimport {\n  StyleFunction,\n  StyleLike as OlStyleLike\n} from 'ol/style/Style';\n\nimport { MapUtil } from '@terrestris/ol-util/dist/MapUtil/MapUtil';\n\nimport {\n  useMap\n} from '@terrestris/react-util/dist/Hooks/useMap/useMap';\n\nexport type StylingComponentProps = CardStyleProps;\n\nexport const StylingComponent: React.FC<StylingComponentProps> = ({\n  ...passThroughProps\n}): JSX.Element => {\n\n  const defaultStyle: GsStyle = {\n    name: 'Default Style',\n    rules: [{\n      name: 'Area',\n      symbolizers: [{\n        kind: 'Fill',\n        color: '#00b72b',\n        outlineOpacity: 0.8,\n        opacity: 0.5,\n        fillOpacity: 0.8,\n        outlineWidth: 2,\n        outlineColor: '#00b72b'\n      }]\n    }, {\n      name: 'Line',\n      symbolizers: [{\n        kind: 'Line',\n        color: '#00b72b',\n        width: 2,\n        opacity: 0.8\n      }]\n    }, {\n      name: 'Point',\n      symbolizers: [{\n        kind: 'Mark',\n        wellKnownName: 'circle',\n        color: '#00b72b',\n        strokeColor: '#00b72b',\n        strokeOpacity: 0.8,\n        opacity: 0.5,\n        radius: 7\n      }],\n      filter: [\n        '==',\n        'label',\n        'undefined'\n      ]\n    }, {\n      name: 'Text',\n      symbolizers: [{\n        kind: 'Text',\n        label: '{{label}}',\n        size: 12,\n        font: [\n          'sans-serif'\n        ],\n        opacity: 0.8,\n        color: '#00b72b',\n        offset: [\n          5,\n          5\n        ],\n        haloColor: '#00b72b',\n        haloWidth: 1\n      }],\n      filter: [\n        '!=',\n        'label',\n        'undefined'\n      ]\n    }]\n  };\n\n  const [style, setStyle] = useState<GsStyle>(defaultStyle);\n\n  const map = useMap();\n\n  useEffect(() => {\n    if (!style || !map) {\n      return;\n    }\n\n    const olParser = new OlParser();\n\n    const drawVectorLayer = MapUtil.getLayerByName(map, 'react-geo_digitize') as OlLayerVector<OlSourceVector>;\n\n    const parseStyles = async () => {\n      let olStylePolygon: OlStyleLike;\n      let olStyleLineString: OlStyleLike;\n      let olStylePoint: OlStyleLike;\n      let olStyleText: OlStyleLike;\n\n      for (const rule of style.rules) {\n        const newStyle: GsStyle = {\n          name: '',\n          rules: [rule]\n        };\n\n        const olStyle = await olParser.writeStyle(newStyle);\n\n        if (!olStyle.output) {\n          return;\n        }\n\n        if (rule.symbolizers[0].kind === 'Fill') {\n          olStylePolygon = olStyle.output;\n        }\n\n        if (rule.symbolizers[0].kind === 'Text') {\n          olStyleText = olStyle.output;\n        }\n\n        if (rule.symbolizers[0].kind === 'Line') {\n          olStyleLineString = olStyle.output;\n        }\n\n        if (rule.symbolizers[0].kind === 'Mark') {\n          olStylePoint = olStyle.output;\n        }\n      }\n\n      const drawLayerStyleFunction = (feature: OlFeature, resolution: number) => {\n        const geometryType = feature.getGeometry()?.getType();\n\n        if (!geometryType) {\n          return;\n        }\n\n        if (['MultiPolygon', 'Polygon', 'Circle'].includes(geometryType)) {\n          return typeof olStylePolygon === 'function' ? olStylePolygon(feature, resolution) : olStylePolygon;\n        }\n\n        if (['MultiLineString', 'LineString'].includes(geometryType)) {\n          return typeof olStyleLineString === 'function' ? olStyleLineString(feature, resolution) : olStyleLineString;\n        }\n\n        if (['MultiPoint', 'Point'].includes(geometryType)) {\n          if (feature.get('label')) {\n            return typeof olStyleText === 'function' ? olStyleText(feature, resolution) : olStyleText;\n          }\n\n          return typeof olStylePoint === 'function' ? olStylePoint(feature, resolution) : olStylePoint;\n        }\n      };\n\n      drawVectorLayer.setStyle(drawLayerStyleFunction as StyleFunction);\n    };\n\n    parseStyles();\n  }, [style, map]);\n\n  return (\n    <CardStyle\n      style={style}\n      onStyleChange={setStyle}\n      {...passThroughProps}\n    />\n  );\n};\n\nexport default StylingComponent;\n","import React from 'react';\n\nimport {\n  DrawerProps\n} from 'antd';\n\nimport {\n  useTranslation\n} from 'react-i18next';\n\nimport './index.less';\n\nimport useAppDispatch from '../../hooks/useAppDispatch';\nimport useAppSelector from '../../hooks/useAppSelector';\nimport { setStylingDrawerVisibility } from '../../store/stylingDrawerVisibility';\nimport MapDrawer from '../MapDrawer';\nimport StylingComponent from '../ToolMenu/Draw/StylingDrawerButton/StylingComponent';\n\nexport type StylingDrawerProps = DrawerProps;\n\nexport const StylingDrawer: React.FC<StylingDrawerProps> = ({\n  ...passThroughProps\n}): JSX.Element => {\n\n  const dispatch = useAppDispatch();\n  const isStylingDrawerVisible = useAppSelector(state => state.stylingDrawerVisibility);\n\n  const {\n    t\n  } = useTranslation();\n\n  const onClose = () => {\n    dispatch(setStylingDrawerVisibility(false));\n  };\n\n  return (\n    <MapDrawer\n      title={t('StylingDrawer.title')}\n      placement=\"right\"\n      onClose={onClose}\n      open={isStylingDrawerVisible}\n      rootClassName=\"color-pick-drawer\"\n      maskClosable={false}\n      mask={false}\n      {...passThroughProps}\n    >\n      <StylingComponent />\n    </MapDrawer>\n  );\n};\n\nexport default StylingDrawer;\n","import React from 'react';\n\nimport './index.less';\n\nimport {\n  Select\n} from 'antd';\n\nconst {\n  Option\n} = Select;\n\nimport i18n from '../../i18n';\n\nexport const LanguageSelect = () => {\n  const supportedLanguages = Object.keys(i18n.services.resourceStore.data);\n\n  const onLanguageChange = (lang: string) => {\n    i18n.changeLanguage(lang);\n  };\n\n  return (\n    <div\n      className=\"language-select\"\n      aria-label='language-selector'\n    >\n      <Select\n        defaultValue={i18n.language || 'en'}\n        onChange={onLanguageChange}\n      >\n        {\n          supportedLanguages.map(supportedLanguage => {\n            return (\n              <Option\n                key={supportedLanguage}\n                value={supportedLanguage}\n              >\n                {supportedLanguage.toUpperCase()}\n              </Option>\n            );\n          })\n        }\n      </Select>\n    </div>\n  );\n};\n\nexport default LanguageSelect;\n","import React, {\n  useEffect, useState, useMemo\n} from 'react';\n\nimport {\n  CopyOutlined,\n  MailOutlined,\n  WhatsAppOutlined\n} from '@ant-design/icons';\nimport {\n  Input,\n  Tooltip,\n  message\n} from 'antd';\nimport copy from 'copy-to-clipboard';\nimport {\n  EventsKey\n} from 'ol/events';\nimport BaseLayer from 'ol/layer/Base';\nimport LayerGroup from 'ol/layer/Group';\nimport ImageLayer from 'ol/layer/Image';\nimport TileLayer from 'ol/layer/Tile';\nimport {\n  unByKey\n} from 'ol/Observable';\nimport {\n  useTranslation\n} from 'react-i18next';\n\nimport { PermalinkUtil } from '@terrestris/ol-util/dist/PermalinkUtil/PermalinkUtil';\n\nimport {\n  useMap\n} from '@terrestris/react-util/dist/Hooks/useMap/useMap';\n\nimport Layer from '@terrestris/shogun-util/dist/model/Layer';\n\nimport './index.less';\n\nexport const Permalink: React.FC = () => {\n  const map = useMap();\n  const layerAttributes = useMemo(() => [\n    'layerConfig',\n    'isExternalLayer',\n    'isUploadedLayer',\n    'groupName'\n  ], []);\n  const {\n    t\n  } = useTranslation();\n\n  const initialPermalink = map ? PermalinkUtil.getLink(\n    map,\n    ';',\n    l => l.get('name'),\n    l => (l instanceof TileLayer || l instanceof ImageLayer) && l.getVisible(),\n    layerAttributes\n  ) : '';\n\n  const [permalink, setPermalink] = useState(initialPermalink);\n\n  const mailSubject = 'SHOGun Web-GIS';\n  const mailBody = `Hey,\\r\\ncheck out the layer-composition I created:\\r\\n\\r\\n${permalink}`;\n\n  useEffect(() => {\n    if (!map) {\n      return;\n    }\n    const eventKeys: EventsKey[] = [];\n\n    const identifierFunction = (l: BaseLayer) => l.get('name');\n    const filterFunction = (l: BaseLayer) => (l instanceof TileLayer || l instanceof ImageLayer) && l.getVisible();\n    const updatePermalink = () => {\n      setPermalink(PermalinkUtil.getLink(\n        map,\n        ';',\n        identifierFunction,\n        filterFunction,\n        layerAttributes\n      ));\n    };\n\n    const updateLayerConfig = () => {\n      const externalLayers = map.getAllLayers().filter(l => l.get('isExternalLayer') || l.get('isUploadedLayer'));\n      externalLayers.forEach(externalLayer => {\n        const layerConfig = externalLayer.get('layerConfig') as Layer;\n        if (layerConfig) {\n          if (layerConfig.clientConfig) {\n            layerConfig.clientConfig.opacity = externalLayer.getOpacity();\n          } else {\n            layerConfig.clientConfig = {\n              opacity: externalLayer.getOpacity()\n            };\n          }\n          externalLayer.set('layerConfig', layerConfig);\n        }\n      });\n      updatePermalink();\n    };\n\n    const registerLayerCallback = (layerGroup: LayerGroup) => {\n      const layersInGroup = layerGroup.getLayers().getArray();\n      for (const layerInGroup of layersInGroup) {\n        if (layerInGroup instanceof LayerGroup) {\n          registerLayerCallback(layerInGroup);\n        } else {\n          const eventKeyVisibility = layerInGroup.on('change:visible', updatePermalink);\n          const eventKeyOpacity = layerInGroup.on('change:opacity', updateLayerConfig);\n          eventKeys.push(eventKeyVisibility, eventKeyOpacity);\n        }\n      }\n    };\n\n    const listenerKeyCenter = map.getView().on('change:center', updatePermalink);\n    const listenerKeyResolution = map.getView().on('change:resolution', updatePermalink);\n\n    const mapLayerGroup = map.getLayerGroup();\n    registerLayerCallback(mapLayerGroup);\n    updateLayerConfig();\n\n    return () => {\n      unByKey(listenerKeyCenter);\n      unByKey(listenerKeyResolution);\n      unByKey(eventKeys);\n    };\n  }, [layerAttributes, map, t]);\n\n  function onWhatsAppClick() {\n    const whatsAppUrl = new URL('https://wa.me');\n    whatsAppUrl.searchParams.set('text', mailBody);\n    window.open(whatsAppUrl);\n  }\n\n  function onMailClick() {\n    const mailToUrl = new URL('mailto:');\n    mailToUrl.searchParams.set('subject', mailSubject);\n    mailToUrl.searchParams.set('body', mailBody);\n    window.open(mailToUrl.toString().replace(/\\+/g, '%20'), '_self');\n  }\n\n  function onCopyClick() {\n    const success = copy(permalink);\n    if (success) {\n      message.info(t('Permalink.copiedToClipboard'));\n    } else {\n      message.info(t('Permalink.copyToClipboardFailed'));\n    }\n  }\n\n  return (\n    <div className=\"permalink-wrapper\">\n      <div className=\"icons\">\n        <Tooltip title={t('Permalink.whatsAppTooltip')}>\n          <WhatsAppOutlined onClick={onWhatsAppClick} />\n        </Tooltip>\n        <Tooltip title={t('Permalink.mailTooltip')}>\n          <MailOutlined onClick={onMailClick} />\n        </Tooltip>\n      </div>\n      <div\n        className=\"link\"\n        aria-label='permalink-url'\n      >\n        <Input value={permalink}\n          readOnly\n        />\n        <Tooltip title={t('Permalink.copyTooltip')}>\n          <CopyOutlined onClick={onCopyClick} />\n        </Tooltip>\n      </div>\n    </div>\n  );\n};\n\nexport default Permalink;\n","import OlLayer from 'ol/layer/Layer';\n\nimport { MapFishPrintV3WMSSerializer } from '@terrestris/mapfish-print-manager/dist/serializer/MapFishPrintV3WMSSerializer';\n\nexport class SHOGunMapFishPrintV3WMSSerializer extends MapFishPrintV3WMSSerializer {\n\n  serialize(layer: OlLayer, opts?: any) {\n    const serialized: any = super.serialize(layer, opts);\n\n    if (serialized.baseURL.startsWith('/geoserver/ows')) {\n      serialized.baseURL = `http://shogun-geoserver:8080${serialized.baseURL}`;\n    }\n\n    if (serialized.baseURL.startsWith('/geoserver/SHOGUN')) {\n      serialized.baseURL = `http://shogun-geoserver:8080${serialized.baseURL}`;\n    }\n\n    return serialized;\n  }\n}\n\nexport default SHOGunMapFishPrintV3WMSSerializer;\n","import OlLayer from 'ol/layer/Layer';\nimport OlSourceTileWMS from 'ol/source/TileWMS';\n\nimport { MapFishPrintV3TiledWMSSerializer } from '@terrestris/mapfish-print-manager/dist/serializer/MapFishPrintV3TiledWMSSerializer';\n\nimport SHOGunMapFishPrintV3WMSSerializer from './SHOGunMapFishPrintV3WMSSerializer';\n\nexport class SHOGunMapFishPrintV3TiledWMSSerializer extends SHOGunMapFishPrintV3WMSSerializer {\n\n  serialize(layer: OlLayer<OlSourceTileWMS>, opts: any) {\n    const optsToApply = {\n      tileSize: [512, 512],\n      ...opts\n    };\n\n    const source = layer.getSource();\n\n    if (!source || !this.validateSource(source)) {\n      return;\n    }\n\n    const serialized = {\n      ...super.serialize(layer, optsToApply),\n      ...{\n        type: MapFishPrintV3TiledWMSSerializer.TYPE_WMS\n      },\n      ...opts\n    };\n\n    return serialized;\n  }\n}\n\nexport default SHOGunMapFishPrintV3TiledWMSSerializer;\n","import React, {\n  useEffect\n} from 'react';\n\nimport { Input } from 'antd';\nimport { InputProps } from 'antd/lib/input';\n\nimport _isNil from 'lodash/isNil';\n\nimport useAppDispatch from '../../../hooks/useAppDispatch';\nimport { addCustomParam } from '../../../store/print';\n\nexport type CustomFieldInputProps = InputProps;\n\nexport const CustomFieldInput: React.FC<CustomFieldInputProps> = ({\n  value,\n  id,\n  placeholder,\n  maxLength,\n  ...restProps\n}): JSX.Element => {\n\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    if (!_isNil(id)) {\n      dispatch(addCustomParam({\n        [id]: value\n      }));\n    }\n  }, [value, id, dispatch]);\n\n  return (\n    <Input\n      id={id}\n      value={value}\n      placeholder={placeholder}\n      maxLength={maxLength}\n      showCount={!!(maxLength && maxLength > 1)}\n      {...restProps}\n    />\n  );\n};\n\nexport default CustomFieldInput;\n","import React, {\n  useEffect,\n  useRef,\n  useState\n} from 'react';\n\nimport {\n  Select\n} from 'antd';\nimport {\n  SelectProps\n} from 'antd/lib/select';\n\nimport {\n  MapFishPrintV3Manager\n} from '@terrestris/mapfish-print-manager';\n\nimport {\n  Layout\n} from '../';\n\nexport interface LayoutSelectProps extends SelectProps<string> {\n  printManager: MapFishPrintV3Manager;\n  onValueChange: () => void;\n}\n\nexport const LayoutSelect: React.FC<LayoutSelectProps> = ({\n  printManager,\n  onValueChange,\n  placeholder = 'Bitte wählen Sie eine Vorlage aus',\n  value,\n  ...restProps\n}): JSX.Element => {\n\n  const [layout, setLayout] = useState<any>(value);\n  const prevLayoutRef = useRef<string | null | undefined>(layout);\n\n  useEffect(() => {\n    prevLayoutRef.current = value;\n  }, [value]);\n\n  useEffect(() => {\n    if (printManager) {\n      printManager.setLayout(layout);\n      if (prevLayoutRef.current !== layout) {\n        onValueChange();\n      }\n    }\n  }, [printManager, layout, onValueChange, value]);\n\n  useEffect(() => {\n    setLayout(value);\n  }, [value]);\n\n  return (\n    <Select\n      placeholder={placeholder}\n      value={layout}\n      onChange={setLayout}\n      {...restProps}\n    >\n      {\n        printManager?.getLayouts().map((l: Layout) => (\n          <Select.Option\n            key={l.name}\n            value={l.name}\n          >\n            {l.name}\n          </Select.Option>\n        ))\n      }\n    </Select>\n  );\n};\n\nexport default LayoutSelect;\n","import React, {\n  useEffect,\n  useState\n} from 'react';\n\nimport {\n  Select\n} from 'antd';\nimport {\n  SelectProps\n} from 'antd/lib/select';\n\nimport {\n  MapFishPrintV3Manager\n} from '@terrestris/mapfish-print-manager';\n\nexport interface OutputFormatSelectProps extends SelectProps<string> {\n  printManager: MapFishPrintV3Manager;\n  outputFormats: string[];\n}\n\nexport const OutputFormatSelect: React.FC<OutputFormatSelectProps> = ({\n  printManager,\n  placeholder,\n  value,\n  outputFormats,\n  ...restProps\n}): JSX.Element => {\n\n  const [outputFormat, setOutputFormat] = useState<any>(value);\n\n  useEffect(() => {\n    if (printManager) {\n      printManager.setOutputFormat(outputFormat);\n    }\n  }, [printManager, outputFormat]);\n\n  useEffect(() => {\n    setOutputFormat(value);\n  }, [value]);\n\n  return (\n    <Select\n      placeholder={placeholder}\n      value={outputFormat}\n      onChange={setOutputFormat}\n      {...restProps}\n    >\n      {\n        outputFormats.map((f: string) => (\n          <Select.Option\n            key={f}\n            value={f}\n          >\n            {f.toLocaleUpperCase()}\n          </Select.Option>\n        ))\n      }\n    </Select>\n  );\n};\n\nexport default OutputFormatSelect;\n","import React, {\n  useEffect,\n  useState\n} from 'react';\n\nimport {\n  Select\n} from 'antd';\nimport {\n  SelectProps\n} from 'antd/lib/select';\n\nimport {\n  MapFishPrintV3Manager\n} from '@terrestris/mapfish-print-manager';\n\nexport interface ResolutionSelectProps extends SelectProps<number> {\n  printManager: MapFishPrintV3Manager;\n}\n\nexport const ResolutionSelect: React.FC<ResolutionSelectProps> = ({\n  printManager,\n  placeholder,\n  value,\n  ...restProps\n}): JSX.Element => {\n\n  const [resolution, setResolution] = useState<any>(value);\n\n  useEffect(() => {\n    if (printManager) {\n      printManager.setDpi(resolution);\n    }\n  }, [printManager, resolution]);\n\n  useEffect(() => {\n    setResolution(value);\n  }, [value]);\n\n  return (\n    <Select\n      placeholder={placeholder}\n      value={resolution}\n      onChange={setResolution}\n      {...restProps}\n    >\n      {\n        printManager?.getDpis().map((d: number) => (\n          <Select.Option\n            key={d}\n            value={d}\n          >\n            {`${d} DPI`}\n          </Select.Option>\n        ))\n      }\n    </Select>\n  );\n};\n\nexport default ResolutionSelect;\n","import React, {\n  useEffect,\n  useState\n} from 'react';\n\nimport {\n  Select\n} from 'antd';\nimport {\n  SelectProps\n} from 'antd/lib/select';\n\nimport {\n  MapFishPrintV3Manager\n} from '@terrestris/mapfish-print-manager';\n\nimport { useMap } from '@terrestris/react-util/dist/Hooks/useMap/useMap';\n\nexport interface ScaleSelectProps extends SelectProps<number> {\n  printManager: MapFishPrintV3Manager;\n}\n\nexport const ScaleSelect: React.FC<ScaleSelectProps> = ({\n  printManager,\n  placeholder,\n  value,\n  ...restProps\n}): JSX.Element => {\n\n  const map = useMap();\n\n  const [scale, setScale] = useState<number>(0);\n\n  useEffect(() => {\n    if (printManager && scale) {\n      printManager.setScale(scale);\n    }\n  }, [printManager, scale]);\n\n  useEffect(() => {\n    const updateScale = () => {\n      const pmScale = printManager.getScale();\n      if (pmScale) {\n        setScale(pmScale);\n      }\n    };\n    const transformInteraction = map?.getInteractions().getArray().find(i => {\n      return i.get('name') === MapFishPrintV3Manager.TRANSFORM_INTERACTION_NAME;\n    });\n\n    if (printManager && transformInteraction) {\n      // @ts-expect-error interaction events are not typed correctly\n      transformInteraction.on('scaling', updateScale);\n\n      return () => {\n        // @ts-expect-error interaction events are not typed correctly\n        transformInteraction.on('scaling', updateScale);\n      };\n    }\n  }, [printManager, map]);\n\n  useEffect(() => {\n    if (value) {\n      setScale(value);\n    }\n  }, [value]);\n\n  return (\n    <Select\n      placeholder={placeholder}\n      value={scale}\n      onChange={setScale}\n      {...restProps}\n    >\n      {\n        printManager?.getScales().map((s: number) => (\n          <Select.Option\n            key={s}\n            value={s}\n          >\n            {`1 : ${s.toLocaleString()}`}\n          </Select.Option>\n        ))\n      }\n    </Select>\n  );\n};\n\nexport default ScaleSelect;\n","import OlLayer from 'ol/layer/Layer';\nimport OlRendererLayer from 'ol/renderer/Layer';\nimport OlSourceImageWMS from 'ol/source/ImageWMS';\nimport OlSource from 'ol/source/Source';\nimport OlSourceTileWMS from 'ol/source/TileWMS';\n\nimport { Shared } from '@terrestris/mapfish-print-manager/dist/util/Shared';\n\nShared.getLegendGraphicUrl = (layer: OlLayer<OlSource, OlRendererLayer<any>>): string => {\n  if (layer.get('legendUrl')) {\n    return layer.get('legendUrl');\n  }\n\n  if (layer.getSource() instanceof OlSourceTileWMS ||\n    layer.getSource() instanceof OlSourceImageWMS) {\n\n    const customParams: any = layer.get('customPrintLegendParams');\n    const source: any = layer.getSource();\n\n    const {\n      LAYERS,\n      VERSION,\n      FORMAT\n    } = source.getParams();\n\n    let url: string = source instanceof OlSourceImageWMS ?\n      source.getUrl() :\n      source.getUrls()[0];\n\n    if (url.startsWith('/geoserver/ows')) {\n      url = `http://shogun-geoserver:8080${url}`;\n    }\n\n    const params: any = {\n      LAYER: LAYERS.split(',')[0],\n      VERSION: VERSION || '1.3.0',\n      SERVICE: 'WMS',\n      REQUEST: 'GetLegendGraphic',\n      FORMAT: FORMAT || 'image/png',\n      ...customParams\n    };\n\n    const queryParams = Object.keys(params).map(key => {\n      return `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`;\n    }).join('&');\n\n    if (url.startsWith('/geoserver/SHOGUN')) {\n      url = `http://shogun-geoserver:8080${url}/service?`;\n      return `${url}${queryParams}`;\n    }\n\n    if (url.endsWith('?')) {\n      return `${url}${queryParams}`;\n    } else {\n      return `${url}?${queryParams}`;\n    }\n  }\n\n  return '';\n};\n","import React, {\n  useCallback,\n  useEffect,\n  useState\n} from 'react';\n\nimport { faDownload } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport {\n  Alert,\n  Button,\n  Form\n} from 'antd';\nimport { FormProps } from 'antd/lib/form/Form';\n\nimport ClientConfiguration from 'clientConfig';\n\nimport _isNil from 'lodash/isNil';\n\nimport OlLayerGroup from 'ol/layer/Group';\nimport OlLayer from 'ol/layer/Layer';\nimport OlLayerVector from 'ol/layer/Vector';\nimport OlLayerRenderer from 'ol/renderer/Layer';\nimport OlSource from 'ol/source/Source';\nimport OlSourceVector from 'ol/source/Vector';\n\nimport { useTranslation } from 'react-i18next';\n\nimport Logger from '@terrestris/base-util/dist/Logger';\n\nimport {\n  MapFishPrintV3Manager,\n  MapFishPrintV3ManagerOpts\n} from '@terrestris/mapfish-print-manager/dist/manager/MapFishPrintV3Manager';\nimport { MapFishPrintV3GeoJsonSerializer }\n  from '@terrestris/mapfish-print-manager/dist/serializer/MapFishPrintV3GeoJsonSerializer';\nimport { MapFishPrintV3OSMSerializer } from '@terrestris/mapfish-print-manager/dist/serializer/MapFishPrintV3OSMSerializer';\nimport { MapFishPrintV3StamenSerializer } from '@terrestris/mapfish-print-manager/dist/serializer/MapFishPrintV3StamenSerializer';\nimport { MapFishPrintV3WMTSSerializer }\n  from '@terrestris/mapfish-print-manager/dist/serializer/MapFishPrintV3WMTSSerializer';\nimport { MapFishPrintV3XYZSerializer } from '@terrestris/mapfish-print-manager/dist/serializer/MapFishPrintV3XYZSerializer';\n\nimport LayerUtil from '@terrestris/ol-util/dist/LayerUtil/LayerUtil';\nimport { MapUtil } from '@terrestris/ol-util/dist/MapUtil/MapUtil';\n\nimport { useAsyncEffect } from '@terrestris/react-util/dist/Hooks/useAsyncEffect/useAsyncEffect';\nimport { useMap } from '@terrestris/react-util/dist/Hooks/useMap/useMap';\n\nimport { getBearerTokenHeader } from '@terrestris/shogun-util/dist/security/getBearerTokenHeader';\n\nimport useAppDispatch from '../../hooks/useAppDispatch';\nimport useAppSelector from '../../hooks/useAppSelector';\nimport useSHOGunAPIClient from '../../hooks/useSHOGunAPIClient';\n\nimport { addCustomParam } from '../../store/print';\n\nimport SHOGunMapFishPrintV3TiledWMSSerializer from '../PrintForm/Serializer/SHOGunMapFishPrintV3TiledWMSSerializer';\nimport SHOGunMapFishPrintV3WMSSerializer from '../PrintForm/Serializer/SHOGunMapFishPrintV3WMSSerializer';\n\nimport CustomFieldInput from './CustomFieldInput';\nimport LayoutSelect from './LayoutSelect';\nimport OutputFormatSelect from './OutputFormatSelect';\nimport ResolutionSelect from './ResolutionSelect';\nimport ScaleSelect from './ScaleSelect';\n\nimport '../PrintForm/Shared/Shared';\n\nexport interface Layout {\n  name: string;\n  attributes: any[];\n}\n\nexport interface PrintFormProps extends Omit<FormProps, 'form'> {\n  active: boolean;\n  customPrintScales?: number[];\n  layerBlackList?: string[];\n  layouts?: Layout[];\n  outputFormats?: string[];\n}\n\nexport type LayerType = OlLayer<OlSource, OlLayerRenderer<OlLayerVector<OlSourceVector>>>;\n\nexport const PrintForm: React.FC<PrintFormProps> = ({\n  active,\n  customPrintScales = [],\n  layerBlackList = [],\n  outputFormats = ['pdf', 'png'],\n  ...restProps\n}): JSX.Element => {\n\n  const [form] = Form.useForm();\n  const {\n    t,\n    i18n\n  } = useTranslation();\n\n  const map = useMap();\n\n  const dispatch = useAppDispatch();\n\n  const currentLanguageCode = i18n.language;\n\n  const client = useSHOGunAPIClient();\n\n  const customMapParams = useAppSelector(state => state.print.customMapParams);\n  const customParams = useAppSelector(state => state.print.customParams);\n  const printApp = useAppSelector(state => state.print.printApp);\n\n  const [printManager, setPrintManager] = useState<MapFishPrintV3Manager | null>(null);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [errorMsg, setErrorMsg] = useState<string | null>(null);\n\n  const layerFilter = useCallback((l: OlLayer<OlSource>) => {\n    if (!map) {\n      return;\n    }\n\n    const layerName = l.get('name');\n\n    return layerName && !layerBlackList.includes(layerName) &&\n      l.getVisible() && !(l instanceof OlLayerGroup) &&\n      MapUtil.layerInResolutionRange(l, map);\n  }, [map, layerBlackList]);\n\n  const legendFilter = useCallback((l: OlLayer<OlSource>) => {\n    if (_isNil(map)) {\n      return false;\n    }\n    const layerName = l.get('name');\n    const notBlacklisted = !layerBlackList.includes(layerName);\n    const notHidden = !l.get('hideLegendInPrint');\n    const visible = l.getVisible() && MapUtil.layerInResolutionRange(l, map);\n    const printableLayer = !(l instanceof OlLayerGroup);\n\n    if (notBlacklisted && notHidden && visible && printableLayer) {\n      const res = map?.getView().getResolution();\n      if (res) {\n        l.set('customPrintLegendParams', {\n          SCALE: MapUtil.getScaleForResolution(res, 'm')\n        });\n      }\n      return true;\n    }\n    return false;\n  }, [map, layerBlackList]);\n\n  const getPrintableLayers = useCallback((printLayer: LayerType) => {\n    if (!map) {\n      return [];\n    }\n\n    return MapUtil.getAllLayers(map).filter((layer) => {\n      const layerName = layer.get('name');\n      return layerName &&\n        !(layerName.includes('react-geo')) &&\n        layer.getVisible() &&\n        !(layer instanceof OlLayerGroup) &&\n        layer !== printLayer;\n    }) as LayerType[];\n  }, [map]);\n\n  const getAttributions = useCallback((manager: MapFishPrintV3Manager) => {\n    const extentLayer = manager.getExtentLayer();\n    if (!extentLayer) {\n      return '';\n    }\n\n    const layers = getPrintableLayers(extentLayer);\n    const allAttributions: string[] = [];\n\n    layers.filter((layer: LayerType) => {\n      return layer.getSource && layer.getSource()?.getAttributions && layer.getSource()?.getAttributions();\n    }).forEach((layer: LayerType) => {\n      const currentLayerAttribution = LayerUtil.getLayerAttributionsText(layer, ',', true);\n\n      if (!allAttributions.includes(currentLayerAttribution)) {\n        allAttributions.push(currentLayerAttribution);\n      }\n    });\n    return allAttributions.join(', ').trim();\n  }, [getPrintableLayers]);\n\n  const initializePrintManager = useCallback(async () => {\n    if (_isNil(map)) {\n      return;\n    }\n    let pManagerOpts: MapFishPrintV3ManagerOpts = {\n      url: ClientConfiguration.print?.url ?? '/print',\n      map,\n      customPrintScales: map\n        ?.getView()\n        ?.getResolutions()\n        ?.map((d: number | undefined) => {\n          const units = map?.getView()?.getProjection()?.getUnits();\n          if (typeof d !== 'undefined') {\n            const scale = MapUtil.getScaleForResolution(d, units);\n            if (typeof scale !== 'undefined') {\n              return MapUtil.roundScale(scale);\n            }\n          }\n          return undefined;\n        })\n        .filter((scale: number | undefined) => typeof scale !== 'undefined')\n        ?.reverse() as number[] | undefined,\n      timeout: 60000,\n      layerFilter,\n      headers: {\n        ...getBearerTokenHeader(client?.getKeycloak())\n      },\n      transformOpts: {\n        rotate: false\n      },\n      serializers: [\n        new MapFishPrintV3StamenSerializer(),\n        new MapFishPrintV3GeoJsonSerializer(),\n        new MapFishPrintV3OSMSerializer(),\n        new MapFishPrintV3WMTSSerializer(),\n        new MapFishPrintV3XYZSerializer(),\n        new SHOGunMapFishPrintV3WMSSerializer(),\n        new SHOGunMapFishPrintV3TiledWMSSerializer()\n      ],\n      legendFilter\n    };\n\n    if (customPrintScales.length > 0) {\n      pManagerOpts = {\n        ...pManagerOpts,\n        ...{\n          customPrintScales: customPrintScales.toReversed()\n        }\n      };\n    }\n\n    const pManager: MapFishPrintV3Manager = new MapFishPrintV3Manager(pManagerOpts);\n\n    try {\n      await pManager.init();\n\n      // Use locale print app if available.\n      // Implies that a print app with the language code exists.\n      const apps = pManager.getPrintApps();\n      if (!printApp) {\n        if (apps && currentLanguageCode && apps.includes(currentLanguageCode)) {\n          await pManager.setPrintApp(currentLanguageCode);\n        }\n      } else {\n        await pManager.setPrintApp(printApp);\n      }\n\n      pManager.setOutputFormat(pManager.getOutputFormats()[0]);\n      pManager.setDpi(pManager.getDpis()[0]);\n      pManager.setLayout(pManager.getLayouts()[0]?.name);\n\n      return pManager;\n    } catch (error) {\n      setErrorMsg(() => t('PrintForm.managerErrorMessage'));\n      Logger.error('Could not initialize print manager: ', error);\n    }\n  }, [map, layerFilter, client, legendFilter, customPrintScales, printApp, currentLanguageCode, t]);\n\n  useEffect(() => {\n    if (printManager) {\n      dispatch(addCustomParam({\n        attributions: getAttributions(printManager)\n      }));\n    }\n  }, [dispatch, getAttributions, printManager]);\n\n  useAsyncEffect(async () => {\n    if (active) {\n      if (!printManager) {\n        form.resetFields();\n        const manager = await initializePrintManager();\n        if (manager) {\n          setPrintManager(manager);\n        }\n      }\n    } else {\n      printManager?.shutdownManager();\n      setPrintManager(null);\n    }\n  }, [printManager, active, initializePrintManager, form]);\n\n  useEffect(() => {\n    if (printManager) {\n      if (customParams) {\n        printManager.setCustomParams(customParams);\n      }\n      if (customMapParams) {\n        printManager.setCustomMapParams(customMapParams);\n      }\n    }\n  }, [printManager, customParams, customMapParams]);\n\n  const onDownloadClick = async () => {\n    try {\n      setErrorMsg(null);\n      setLoading(true);\n\n      if (!printManager) {\n        return;\n      }\n\n      const downloadUrl = await printManager.print(false);\n\n      if (!downloadUrl) {\n        throw new Error('No download URL available, the job has failed.');\n      }\n\n      window.open(downloadUrl);\n    } catch (error: any) {\n      setErrorMsg(t('PrintForm.printJobErrorMsg') || null);\n      Logger.error(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const onAlertClose = () => {\n    setErrorMsg(null);\n  };\n\n  const handleLayoutChange = () => {\n    form.setFieldValue('dpi', printManager?.getDpis()[0]);\n  };\n\n  return (\n    <div\n      className=\"print\"\n      aria-label=\"print-form\"\n    >\n      {\n        errorMsg && (\n          <Alert\n            className=\"print-alert\"\n            message={errorMsg}\n            type=\"error\"\n            closable\n            showIcon\n            onClose={onAlertClose}\n          />\n        )\n      }\n      <>\n        <Form\n          form={form}\n          className=\"print-form\"\n          labelAlign=\"left\"\n          labelCol={{\n            flex: '90px'\n          }}\n          {...restProps}\n        >\n          {\n            printManager?.isInitiated() && (\n              <>\n                <Form.Item\n                  aria-label='print-title'\n                  name=\"title\"\n                  label={t('PrintForm.title')}\n                  initialValue={t('PrintForm.initialTitle')}\n                >\n                  <CustomFieldInput\n                    aria-label='print-title-input'\n                    maxLength={50}\n                    placeholder={t('PrintForm.titlePlaceholder')}\n                  />\n                </Form.Item>\n                <Form.Item\n                  aria-label='print-comment'\n                  name=\"comment\"\n                  label={t('PrintForm.comment')}\n                >\n                  <CustomFieldInput\n                    aria-label='print-comment-input'\n                    maxLength={200}\n                    placeholder={t('PrintForm.commentPlaceholder')}\n                  />\n                </Form.Item>\n                <Form.Item\n                  aria-label='print-layout'\n                  name=\"layout\"\n                  label={t('PrintForm.layout')}\n                  initialValue={printManager?.getLayouts()[0]?.name}\n                >\n                  <LayoutSelect\n                    aria-label='print-layout-input'\n                    printManager={printManager}\n                    onValueChange={handleLayoutChange}\n                  />\n                </Form.Item>\n                <Form.Item\n                  aria-label='print-scale'\n                  name='scale'\n                  label={t('PrintForm.scale')}\n                  initialValue={printManager?.getClosestScaleToFitMap()}\n                >\n                  <ScaleSelect\n                    aria-label='print-scale-input'\n                    printManager={printManager}\n                  />\n                </Form.Item>\n                <Form.Item\n                  aria-label='print-dpi'\n                  name=\"dpi\"\n                  label={t('PrintForm.dpi')}\n                  initialValue={printManager.getDpis()[0]}\n                >\n                  <ResolutionSelect\n                    aria-label='print-dpi-input'\n                    printManager={printManager}\n                    placeholder={t('PrintForm.resolutionPlaceholder')}\n                  />\n                </Form.Item>\n                <Form.Item\n                  aria-label='print-format'\n                  name=\"format\"\n                  label={t('PrintForm.format')}\n                  initialValue=\"pdf\"\n                >\n                  <OutputFormatSelect\n                    aria-label='print-format-input'\n                    printManager={printManager}\n                    outputFormats={outputFormats}\n                    placeholder={t('PrintForm.outputFormatPlaceholder')}\n                  />\n                </Form.Item>\n              </>\n            )}\n        </Form>\n        <Button\n          aria-label='create-print'\n          className='print-button tool-menu-button'\n          disabled={!printManager?.isInitiated()}\n          icon={<FontAwesomeIcon icon={faDownload} />}\n          loading={loading}\n          onClick={onDownloadClick}\n        >\n          {t('PrintForm.downloadBtnText')}\n        </Button>\n      </>\n    </div>\n  );\n};\n\nexport default PrintForm;\n","import React from 'react';\n\nimport {\n  AutoComplete,\n  Form,\n  Input\n} from 'antd';\n\nimport {\n  useTranslation\n} from 'react-i18next';\n\nimport type {\n  FormData\n} from '..';\n\nexport type AttributionRowProps = {\n  keyName: string | number;\n  onChange?: (value: string) => void;\n  options?: string[];\n};\n\nconst AttributionRow: React.FC<AttributionRowProps> = ({\n  keyName,\n  onChange = () => {},\n  options\n}) => {\n\n  const {\n    t\n  } = useTranslation();\n\n  return (\n    <>\n      <Form.Item\n        name={[keyName, 'name']}\n        rules={[{\n          required: true,\n          message: t('AttributionRow.missingKey')\n        }, ({ getFieldsValue }) => ({\n          validator(_, value: string) {\n            const fields: FormData = getFieldsValue(true);\n\n            if (fields.fields) {\n              const filtered = Object.entries(fields.fields).filter(([, val]) => val?.name === value);\n\n              if (filtered.length > 1) {\n                return Promise.reject(new Error(t('AttributionRow.keyInUse')));\n              }\n            }\n\n            return Promise.resolve();\n          }\n        })]}\n      >\n        <AutoComplete\n          placeholder={t('AttributionRow.keyPlaceholder')}\n          onChange={(value) => {\n            onChange(value);\n          }}\n          options={options?.map(o => ({ value: o }))}\n        />\n      </Form.Item>\n      <Form.Item\n        name={[keyName, 'value']}\n        rules={[{\n          required: true,\n          message: t('AttributionRow.missingValue')\n        }]}\n      >\n        <Input\n          placeholder={t('AttributionRow.valuePlaceholder')}\n          onChange={evt => {\n            onChange(evt.target.value);\n          }}\n        />\n      </Form.Item>\n    </>\n  );\n};\n\nexport default AttributionRow;\n","import React, {\n  useCallback,\n  useEffect,\n  useState\n} from 'react';\n\nimport {\n  faMinusSquare\n} from '@fortawesome/free-regular-svg-icons';\nimport {\n  faPlus\n} from '@fortawesome/free-solid-svg-icons';\nimport {\n  FontAwesomeIcon\n} from '@fortawesome/react-fontawesome';\n\nimport {\n  Button,\n  Drawer,\n  DrawerProps,\n  Form,\n  FormListFieldData,\n  Popconfirm,\n  notification,\n  Row\n} from 'antd';\n\nimport OlFeature from 'ol/Feature';\nimport OlGeometry from 'ol/geom/Geometry';\n\nimport {\n  useTranslation\n} from 'react-i18next';\n\nimport Logger from '@terrestris/base-util/dist/Logger';\n\nimport {\n  useMap\n} from '@terrestris/react-util/dist/Hooks/useMap/useMap';\nimport {\n  DigitizeUtil\n} from '@terrestris/react-util/dist/Util/DigitizeUtil';\n\nimport AttributionRow from './AttributionRow';\n\nimport './index.less';\n\nexport type FormData = {\n  fields?: [{\n    name?: string;\n    value?: string;\n  }];\n};\n\nexport type AttributionDrawerProps = Omit<DrawerProps, 'open'> & {\n  selectedFeature: OlFeature | undefined;\n};\n\nconst AttributionDrawer: React.FC<AttributionDrawerProps> = ({\n  selectedFeature,\n  ...passThroughProps\n}) => {\n  const [isFormValid, setIsFormValid] = useState(true);\n  const [availableFeatureCollectionAttributes, setAvailableFeatureCollectionAttributes] = useState<string[]>([]);\n  const [availableFeatureAttributes, setAvailableFeatureAttributes] = useState<string[]>([]);\n  const [, contextHolder] = notification.useNotification();\n  const [form] = Form.useForm<FormData>();\n\n  const map = useMap();\n\n  const open = selectedFeature !== undefined;\n\n  const {\n    t\n  } = useTranslation();\n\n  const updateAvailableFeatureAttributes = useCallback((fields: FormData) => {\n    const currentKeys = fields.fields\n      ?.map(field => field?.name?.toLowerCase())\n      .filter(key => key !== undefined);\n\n    setAvailableFeatureAttributes(availableFeatureCollectionAttributes.filter(o => !(currentKeys?.includes(o.toLowerCase()))));\n  }, [availableFeatureCollectionAttributes]);\n\n  useEffect(() => {\n    if (!map) {\n      return;\n    }\n\n    const properties = selectedFeature?.getProperties();\n\n    form.setFieldValue('fields', []);\n\n    if (properties) {\n      const filteredPropertyEntries = Object.entries(properties)\n        .filter(([, value]) => !(value instanceof OlGeometry))\n        .map(([key, value]) => [key, value]);\n      const filteredProperties = Object.fromEntries(filteredPropertyEntries);\n\n      const formProperties = Object.entries(filteredProperties)\n        .map(([key, value]) => {\n          return {\n            name: key,\n            value: value\n          };\n        });\n\n      form.setFieldValue('fields', formProperties);\n    }\n\n    const digitizeLayer = DigitizeUtil.getDigitizeLayer(map);\n    const digitizedFeatures = digitizeLayer.getSource()?.getFeatures();\n\n    const featureCollectionAttributes = new Set<string>();\n    digitizedFeatures?.forEach(feat => {\n      Object.keys(feat.getProperties()).forEach(prop => {\n        if (!(feat.get(prop) instanceof OlGeometry)) {\n          featureCollectionAttributes.add(prop);\n        }\n      });\n    });\n    setAvailableFeatureCollectionAttributes(Array.from(featureCollectionAttributes));\n  }, [selectedFeature, form, map]);\n\n  const onFinish = (input: FormData) => {\n    if (!selectedFeature) {\n      return;\n    }\n    notification.destroy();\n    notification.success({\n      message: (t('notificationApplyText.title')),\n      placement: 'top',\n      duration: 3.5\n    });\n\n    for (const property in selectedFeature.getProperties()) {\n      if (!(selectedFeature.get(property) instanceof OlGeometry)) {\n        selectedFeature.unset(property);\n      }\n    }\n\n    if (input.fields) {\n      Object.values(input.fields).forEach(field => {\n        if (!field?.name) {\n          return;\n        }\n        selectedFeature.set(field.name, field.value);\n      });\n    }\n  };\n\n  const remove = (rmFn: any, name: number) => {\n    rmFn(name);\n  };\n\n  const onChange = async () => {\n    try {\n      await form.validateFields();\n      setIsFormValid(true);\n    } catch (error) {\n      setIsFormValid(false);\n      Logger.error(error);\n    }\n  };\n\n  const onValuesChange = (changedFields: FormData, fields: FormData) => {\n    updateAvailableFeatureAttributes(fields);\n  };\n\n  const getFormItems = (fields: FormListFieldData[], rmFn: any) => {\n    return fields.map((field) => {\n      const removeAndMessage = () => {\n        notification.destroy();\n        notification.info({\n          message: (t('notificationDeleteText.title')),\n          description: (t('notificationDeleteText.info')),\n          placement: 'top',\n          duration: 6\n        });\n        remove(rmFn, field.name);\n      };\n      return (\n        <div\n          key={field.key}\n          className='attribute-row'\n        >\n          <AttributionRow\n            keyName={field.name}\n            key={field.key}\n            onChange={onChange}\n            options={availableFeatureAttributes}\n          />\n          <Popconfirm\n            title={t('AttributionPopConfirm.title')}\n            okText={t('AttributionPopConfirm.okText')}\n            cancelText={t('AttributionPopConfirm.cancelText')}\n            placement='topRight'\n            onConfirm={removeAndMessage}\n          >\n            {contextHolder}\n            <Button\n              className=\"remove-attribute-button\"\n              type='primary'\n              danger={true}\n              icon={\n                <FontAwesomeIcon\n                  icon={faMinusSquare}\n                />\n              }\n            />\n          </Popconfirm>\n        </div>\n      );\n    });\n  };\n\n  return (\n    <Drawer\n      title={t('Attribution.title')}\n      className=\"attribution-drawer\"\n      placement=\"right\"\n      mask={false}\n      maskClosable={false}\n      closable={false}\n      open={open}\n      {...passThroughProps}\n    >\n      {!selectedFeature &&\n        <>\n          {t('Attribution.select')}\n        </>\n      }\n      <Row>\n        <Form\n          onFinish={onFinish}\n          autoComplete=\"off\"\n          form={form}\n          onValuesChange={onValuesChange}\n        >\n          <Form.List\n            name=\"fields\"\n          >\n            {(fields, {\n              add,\n              remove: rmFn\n            }) => (\n              <>\n                {\n                  getFormItems(fields, rmFn)\n                }\n                <Form.Item>\n                  {\n                    selectedFeature ?\n                      <Button\n                        type=\"dashed\"\n                        onClick={() => {\n                          add();\n                        }}\n                        className=\"add-attribute-button\"\n                        icon={\n                          <FontAwesomeIcon\n                            icon={faPlus}\n                          />\n                        }\n                      >\n                        {t('Attribution.add')}\n                      </Button> :\n                      <></>\n                  }\n                </Form.Item>\n              </>\n            )}\n          </Form.List>\n          <Form.Item>\n            <Button\n              className=\"submit-attributes-button\"\n              type=\"primary\"\n              htmlType=\"submit\"\n              disabled={!isFormValid}\n              hidden={!selectedFeature}\n            >\n              {t('Attribution.submit')}\n            </Button>\n          </Form.Item>\n        </Form>\n      </Row>\n    </Drawer>\n  );\n};\n\nexport default AttributionDrawer;\n","import * as React from 'react';\nimport {\n  useEffect,\n  useState\n} from 'react';\n\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\nimport { Modal } from 'antd';\nimport OlVectorLayer from 'ol/layer/Vector';\nimport OlSourceVector from 'ol/source/Vector';\n\nimport {\n  useTranslation\n} from 'react-i18next';\n\nimport SimpleButton, { SimpleButtonProps } from '@terrestris/react-geo/dist/Button/SimpleButton/SimpleButton';\nimport {\n  useMap\n} from '@terrestris/react-util/dist/Hooks/useMap/useMap';\nimport { DigitizeUtil } from '@terrestris/react-util/dist/Util/DigitizeUtil';\n\nconst { confirm } = Modal;\n\ninterface OwnProps {\n  /**\n   * The vector layer which will be used for digitize features.\n   * The standard digitizeLayer can be retrieved via `DigitizeUtil.getDigitizeLayer(map)`.\n   */\n  digitizeLayer?: OlVectorLayer<OlSourceVector>;\n}\n\nexport type DeleteAllButtonProps = OwnProps & SimpleButtonProps;\n\n/**\n * The className added to this component.\n */\nconst defaultClassName = 'deleteallbutton';\n\nexport const DeleteAllButton: React.FC<DeleteAllButtonProps> = ({\n  className,\n  digitizeLayer,\n  ...passThroughProps\n}) => {\n  const [layers, setLayers] = useState<[OlVectorLayer<OlSourceVector>] | null>(null);\n\n  const map = useMap();\n\n  const {\n    t\n  } = useTranslation();\n\n  useEffect(() => {\n    if (!map) {\n      return;\n    }\n\n    if (digitizeLayer) {\n      setLayers([digitizeLayer]);\n    } else {\n      setLayers([DigitizeUtil.getDigitizeLayer(map)]);\n    }\n  }, [map, digitizeLayer]);\n\n  if (!layers) {\n    return null;\n  }\n\n  const onClick = () => {\n\n    confirm({\n      title: (t('DeleteAllButton.deleteAll')),\n      content: (t('DeleteAllButton.confirmMessage')),\n      icon: <ExclamationCircleOutlined />,\n      onOk(){\n        layers[0].getSource()?.clear();\n      }\n    });\n  };\n\n  const finalClassName = className\n    ? `${defaultClassName} ${className}`\n    : defaultClassName;\n\n  return (\n    <SimpleButton\n      onClick={onClick}\n      className={finalClassName}\n      {...passThroughProps}\n    />\n  );\n};\n\nexport default DeleteAllButton;\n","import React, {\n  useState\n} from 'react';\n\nimport {\n  faUpload\n} from '@fortawesome/free-solid-svg-icons';\nimport {\n  FontAwesomeIcon\n} from '@fortawesome/react-fontawesome';\n\nimport {\n  Alert,\n  message,\n  Modal,\n  ModalProps,\n  Spin,\n  Upload\n} from 'antd';\n\nimport {\n  RcFile,\n  UploadChangeParam,\n  UploadFile\n} from 'antd/lib/upload/interface';\n\nimport OlFeature from 'ol/Feature';\nimport OlFormatGeoJSON from 'ol/format/GeoJSON';\n\nconst { Dragger } = Upload;\n\nimport {\n  UploadRequestOption\n} from 'rc-upload/lib/interface';\n\nimport {\n  useTranslation\n} from 'react-i18next';\n\nimport Logger from '@terrestris/base-util/dist/Logger';\n\nimport {\n  useMap\n} from '@terrestris/react-util/dist/Hooks/useMap/useMap';\nimport {\n  DigitizeUtil\n} from '@terrestris/react-util/dist/Util/DigitizeUtil';\n\nimport './index.less';\n\nexport type ImportDataModalProps = Partial<ModalProps> & {\n  onSuccess?: (features: OlFeature[]) => void;\n  onFailure?: (error: Error) => void;\n};\n\nexport const ImportDataModal: React.FC<ImportDataModalProps> = ({\n  className = 'import-data-modal',\n  footer = false,\n  width = 600,\n  onCancel,\n  onSuccess,\n  onFailure,\n  ...passThroughProps\n}): JSX.Element => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [importError, setImportError] = useState('');\n\n  const map = useMap();\n\n  const {\n    t\n  } = useTranslation();\n\n  const supportedFileExtensions = [\n    'json',\n    'geojson'\n  ];\n\n  const supportedFormats = [\n    'application/json',\n    'application/geo+json',\n    'application/geojson'\n  ];\n\n  const onCancelInternal = (evt: React.MouseEvent<HTMLButtonElement>) => {\n    setImportError('');\n    setIsLoading(false);\n\n    onCancel?.(evt);\n  };\n\n  const onBeforeFileUpload = (file: RcFile) => {\n    const fileType = file.type;\n    const fileExtension = file.name.split('.').pop();\n\n    setImportError('');\n\n    if (!supportedFormats.includes(fileType) || (fileExtension && !supportedFileExtensions.includes(fileExtension))) {\n      setImportError(t('ImportDataModal.error.supportedFormats', {\n        supportedFormats: supportedFormats.join(', ')\n      }));\n\n      return false;\n    }\n\n    return true;\n  };\n\n  const readFeaturesFromFile = (options: UploadRequestOption<OlFeature[]>) => {\n    const {\n      file,\n      onSuccess: onSuccessUpload,\n      onError: onErrorUpload\n    } = options;\n\n    if (!(file instanceof File)) {\n      return;\n    }\n\n    if (!map) {\n      return;\n    }\n\n    const fileReader = new FileReader();\n\n    fileReader.onload = () => {\n      try {\n        const features = new OlFormatGeoJSON().readFeatures(fileReader.result, {\n          featureProjection: map.getView().getProjection()\n        });\n\n        onSuccessUpload?.(features);\n      } catch (err) {\n        onErrorUpload?.(err as Error);\n        Logger.error('Error while reading the file: ', err);\n      }\n    };\n\n    fileReader.readAsText(file);\n  };\n\n  const onFileUploadChange = (info: UploadChangeParam<UploadFile<OlFeature[]>>) => {\n    const status = info.file.status;\n    const features = info.file.response;\n\n    if (!map) {\n      return;\n    }\n\n    if (status === 'uploading') {\n      setIsLoading(true);\n    } else if (status === 'done') {\n      const digitizeLayer = DigitizeUtil.getDigitizeLayer(map);\n      const digitizeLayerSource = digitizeLayer.getSource();\n      digitizeLayerSource?.addFeatures(features || []);\n\n      setIsLoading(false);\n      message.success(t('ImportDataModal.success'));\n      onSuccess?.(features || []);\n    } else if (status === 'error') {\n      setIsLoading(false);\n      setImportError(t('ImportDataModal.error.parsing'));\n      onFailure?.(info.file.error);\n    }\n  };\n\n  return (\n    <Modal\n      title={t('ImportDataModal.title')}\n      onCancel={onCancelInternal}\n      className={className}\n      width={width}\n      footer={footer}\n      {...passThroughProps}\n    >\n      {\n        importError && (\n          <Alert\n            message={importError}\n            closable={true}\n            type=\"error\"\n          />\n        )\n      }\n      <Spin\n        spinning={isLoading}\n      >\n        <Dragger\n          customRequest={readFeaturesFromFile}\n          accept={[...supportedFileExtensions.map(ext => `.${ext}`), supportedFormats].join(',')}\n          maxCount={1}\n          showUploadList={false}\n          beforeUpload={onBeforeFileUpload}\n          onChange={onFileUploadChange}\n        >\n          <p className=\"ant-upload-drag-icon\">\n            <FontAwesomeIcon\n              icon={faUpload}\n            />\n          </p>\n          <p className=\"ant-upload-text\">\n            {t('ImportDataModal.description')}\n          </p>\n          <p className=\"ant-upload-hint\">\n            {t('ImportDataModal.hint')}\n          </p>\n        </Dragger>\n      </Spin>\n    </Modal>\n  );\n};\n\nexport default ImportDataModal;\n","import React from 'react';\n\nimport {\n  faPaintBrush\n} from '@fortawesome/free-solid-svg-icons';\n\nimport {\n  FontAwesomeIcon\n} from '@fortawesome/react-fontawesome';\n\nimport { Button } from 'antd';\n\nimport {\n  useTranslation\n} from 'react-i18next';\n\nimport useAppDispatch from '../../../../hooks/useAppDispatch';\nimport useAppSelector from '../../../../hooks/useAppSelector';\nimport { setStylingDrawerVisibility } from '../../../../store/stylingDrawerVisibility';\n\nexport const StylingButton: React.FC = (): JSX.Element => {\n\n  const dispatch = useAppDispatch();\n\n  const {\n    t\n  } = useTranslation();\n\n  const drawerVisibilty = useAppSelector(state => state.stylingDrawerVisibility);\n\n  const toggleDrawer = () => {\n    dispatch(setStylingDrawerVisibility(!drawerVisibilty));\n  };\n\n  return (\n    <Button\n      type=\"link\"\n      onClick={toggleDrawer}\n      icon={<FontAwesomeIcon icon={faPaintBrush} />}\n    >\n      {drawerVisibilty ? t('StylingDrawer.closeColorPalette') : t('StylingDrawer.openColorPalette')}\n    </Button>\n  );\n};\n\nexport default StylingButton;\n","import React, {\n  useCallback,\n  useState\n} from 'react';\n\nimport {\n  faGripLines,\n  faCircle,\n  faSquare,\n  faFont,\n  faCircleNotch,\n  faShapes,\n  faPenToSquare,\n  faUpload,\n  faTrash,\n  faEraser,\n  faDownload\n} from '@fortawesome/free-solid-svg-icons';\n\nimport {\n  FontAwesomeIcon\n} from '@fortawesome/react-fontawesome';\n\nimport {\n  Button\n} from 'antd';\n\nimport {\n  Feature\n} from 'ol';\nimport OlFeature from 'ol/Feature';\nimport GeoJSON from 'ol/format/GeoJSON';\n\nimport {\n  useTranslation\n} from 'react-i18next';\n\nimport { DeleteButton } from '@terrestris/react-geo/dist/Button/DeleteButton/DeleteButton';\nimport DrawButton from '@terrestris/react-geo/dist/Button/DrawButton/DrawButton';\nimport {\n  ModifyButton, ModifyButtonProps\n} from '@terrestris/react-geo/dist/Button/ModifyButton/ModifyButton';\nimport SimpleButton from '@terrestris/react-geo/dist/Button/SimpleButton/SimpleButton';\nimport {\n  ToggleGroup, ToggleGroupProps\n} from '@terrestris/react-geo/dist/Button/ToggleGroup/ToggleGroup';\nimport {\n  useMap\n} from '@terrestris/react-util/dist/Hooks/useMap/useMap';\nimport {\n  DigitizeUtil\n} from '@terrestris/react-util/dist/Util/DigitizeUtil';\n\nimport AttributionDrawer from './Attributions';\nimport DeleteAllButton from './DeleteAllButton';\nimport ImportDataModal from './ImportDataModal';\nimport StylingButton from './StylingDrawerButton';\n\nimport './index.less';\n\ninterface DefaultDrawProps {\n  showDrawPoint?: boolean;\n  showDrawLine?: boolean;\n  showDrawPolygon?: boolean;\n  showDrawCircle?: boolean;\n  showDrawRectangle?: boolean;\n  showDrawAnnotation?: boolean;\n  showModifyFeatures?: boolean;\n  showUploadFeatures?: boolean;\n  showDownloadFeatures?: boolean;\n  showDeleteFeatures?: boolean;\n  showStyleFeatures?: boolean;\n}\n\nexport type DrawProps = Partial<DefaultDrawProps>;\n\nexport const Draw: React.FC<DrawProps> = ({\n  showDrawPoint,\n  showDrawLine,\n  showDrawPolygon,\n  showDrawCircle,\n  showDrawRectangle,\n  showDrawAnnotation,\n  showModifyFeatures,\n  showUploadFeatures,\n  showDeleteFeatures\n}): JSX.Element => {\n  const [selectedModifyFeature, setSelectedModifyFeature] = useState<OlFeature>();\n  const [selectedButton, setSelectedButton] = useState<string>();\n  const [isImportDataModalOpen, setIsImportDataModalOpen] = useState<boolean>(false);\n\n  const {\n    t\n  } = useTranslation();\n\n  const map = useMap();\n\n  const onToggleChange: Exclude<ToggleGroupProps['onChange'], undefined> = useCallback((evt, value) => {\n    setSelectedButton(value);\n    if (value !== 'draw-modify') {\n      setSelectedModifyFeature(undefined);\n    }\n  }, []);\n\n  const onModifyFeatureSelect: Exclude<ModifyButtonProps['onFeatureSelect'], undefined> = useCallback(event => {\n    if (event.selected.length > 0) {\n      setSelectedModifyFeature(event.selected[0]);\n    } else {\n      setSelectedModifyFeature(undefined);\n    }\n  }, []);\n\n  const onGeoJSONDownload = () => {\n    const clonedFeatures: Feature[] = [];\n    if (map) {\n      const mapProjection = map.getView().getProjection().getCode();\n      const digitizeLayer = DigitizeUtil.getDigitizeLayer(map);\n      const digitizedFeatures = digitizeLayer.getSource()?.getFeatures();\n      if (digitizedFeatures && digitizedFeatures.length > 0) {\n        digitizedFeatures.forEach(feat => {\n          const clonedFeature = feat.clone();\n          clonedFeature.getGeometry()?.transform(mapProjection, 'EPSG:4326');\n          clonedFeatures.push(clonedFeature);\n        });\n        const geoJSON = new GeoJSON().writeFeatures(clonedFeatures);\n\n        const fileToDownload = new Blob([geoJSON], {\n          type: 'application/geo+json'\n        });\n\n        // download the file\n        const url = window.URL.createObjectURL(fileToDownload);\n        const link = document.createElement('a');\n        link.href = url;\n        link.setAttribute('download', 'exportedFeatures.geojson');\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n      }\n    }\n  };\n\n  const onImportDataClick = () => {\n    setIsImportDataModalOpen(true);\n  };\n\n  const onCloseImportDataModal = () => {\n    setIsImportDataModalOpen(false);\n  };\n\n  if (!map) {\n    return <></>;\n  }\n\n  return (\n    <div\n      className=\"draw-tools\"\n    >\n      <ToggleGroup\n        selected={selectedButton}\n        onChange={onToggleChange}\n      >\n        {showDrawPoint ? (\n          <DrawButton\n            value=\"draw-point\"\n            key=\"draw-point\"\n            drawType=\"Point\"\n            type=\"link\"\n            pressed={false}\n          >\n            <FontAwesomeIcon\n              icon={faCircle}\n            />\n            <span\n              className=\"draw-point\"\n            >\n              {t('Draw.point')}\n            </span>\n          </DrawButton>\n        ) : <></>}\n\n        {showDrawLine ? (\n          <DrawButton\n            value=\"draw-line\"\n            key=\"draw-line\"\n            drawType=\"LineString\"\n            type=\"link\"\n          >\n            <FontAwesomeIcon\n              icon={faGripLines}\n            />\n            <span\n              className=\"draw-line\"\n            >\n              {t('Draw.line')}\n            </span>\n          </DrawButton>\n        ) : <></>}\n\n        {showDrawPolygon ? (\n          <DrawButton\n            value=\"draw-polygon\"\n            key=\"draw-polygon\"\n            drawType=\"Polygon\"\n            type=\"link\"\n          >\n            <FontAwesomeIcon\n              icon={faShapes}\n            />\n            <span\n              className=\"draw-polygon\"\n            >\n              {t('Draw.polygon')}\n            </span>\n          </DrawButton>\n        ) : <></>}\n\n        {showDrawCircle ? (\n          <DrawButton\n            value=\"draw-circle\"\n            key=\"draw-circle\"\n            drawType=\"Circle\"\n            type=\"link\"\n          >\n            <FontAwesomeIcon\n              icon={faCircleNotch}\n            />\n            <span\n              className=\"draw-circle\"\n            >\n              {t('Draw.circle')}\n            </span>\n          </DrawButton>\n        ) : <></>}\n\n        {showDrawRectangle ? (\n          <DrawButton\n            value=\"draw-rectangle\"\n            key=\"draw-rectangle\"\n            drawType=\"Rectangle\"\n            type=\"link\"\n          >\n            <FontAwesomeIcon\n              icon={faSquare}\n            />\n            <span\n              className=\"draw-rectangle\"\n            >\n              {t('Draw.rectangle')}\n            </span>\n          </DrawButton>\n        ) : <></>}\n\n        {showDrawAnnotation ? (\n          <DrawButton\n            value=\"draw-text\"\n            key=\"draw-text\"\n            drawType=\"Text\"\n            type=\"link\"\n          >\n            <FontAwesomeIcon\n              icon={faFont}\n            />\n            <span\n              className=\"draw-text\"\n            >\n              {t('Draw.text')}\n            </span>\n          </DrawButton>\n        ) : <></>}\n\n        <StylingButton\n          key=\"styling\"\n        />\n\n        {showModifyFeatures ? (\n          <ModifyButton\n            value=\"draw-modify\"\n            key=\"draw-modify\"\n            type=\"link\"\n            onFeatureSelect={onModifyFeatureSelect}\n          >\n            <FontAwesomeIcon\n              icon={faPenToSquare}\n            />\n            <span\n              className=\"draw-modify\"\n            >\n              {t('Draw.modify')}\n            </span>\n          </ModifyButton>\n        ) : <></>}\n\n        {showDeleteFeatures ? (\n          <DeleteButton\n            value=\"draw-delete\"\n            key=\"draw-delete\"\n            type=\"link\"\n          >\n            <FontAwesomeIcon\n              icon={faEraser}\n            />\n            <span\n              className=\"draw-delete\"\n            >\n              {t('Draw.delete')}\n            </span>\n          </DeleteButton>\n        ) : <></>}\n      </ToggleGroup>\n      {showDeleteFeatures ? (\n        <DeleteAllButton\n          value=\"draw-delete-all\"\n          type=\"link\"\n        >\n          <FontAwesomeIcon\n            icon={faTrash}\n          />\n          <span\n            className=\"draw-delete-all\"\n          >\n            {t('DeleteAllButton.deleteAll')}\n          </span>\n        </DeleteAllButton>\n      ):<></>}\n      {showUploadFeatures ? (\n        <>\n          <Button\n            onClick={onImportDataClick}\n            aria-label='draw-upload'\n            type=\"link\"\n            icon={\n              <FontAwesomeIcon\n                icon={faUpload}\n              />\n            }\n          >\n            <span\n              className=\"draw-upload\"\n            >\n              {t('Draw.upload')}\n            </span>\n          </Button>\n          <ImportDataModal\n            open={isImportDataModalOpen}\n            onCancel={onCloseImportDataModal}\n            onSuccess={onCloseImportDataModal}\n          />\n        </>\n      ) : <></>}\n      {showUploadFeatures ? (\n        <SimpleButton\n          value=\"draw-export\"\n          onClick={onGeoJSONDownload}\n          type=\"link\"\n        >\n          <FontAwesomeIcon\n            icon={faDownload}\n          />\n          <span\n            className=\"draw-export\"\n          >\n            {t('Draw.export')}\n          </span>\n        </SimpleButton>\n      ) : <></>}\n      <AttributionDrawer\n        selectedFeature={selectedModifyFeature}\n      />\n    </div>\n  );\n};\n\nexport default Draw;\n","import {\n  useCallback,\n  useEffect\n} from 'react';\n\nimport OlLayerVector from 'ol/layer/Vector';\nimport OlSourceVector from 'ol/source/Vector';\nimport OlStyleCircle from 'ol/style/Circle';\nimport OlStyleFill from 'ol/style/Fill';\nimport OlStyleStroke from 'ol/style/Stroke';\nimport OlStyle from 'ol/style/Style';\n\nimport { MapUtil } from '@terrestris/ol-util/dist/MapUtil/MapUtil';\n\nimport { useMap } from '@terrestris/react-util/dist/Hooks/useMap/useMap';\n\nexport type HighlightVectorLayerOpts = {\n  layerName: string;\n};\n\nexport const useHighlightVectorLayer = (opts: HighlightVectorLayerOpts) => {\n  const map = useMap();\n\n  const initVectorLayer = useCallback(async () => {\n    if (!map) {\n      return;\n    }\n\n    if (MapUtil.getLayerByName(map, opts.layerName)) {\n      return;\n    }\n\n    const source = new OlSourceVector();\n\n    const fill = new OlStyleFill({\n      color: 'rgba(255, 255, 255, 0.15)'\n    });\n    const stroke = new OlStyleStroke({\n      color: 'rgba(209, 70, 47, 1)',\n      width: 2\n    });\n    const featureStyle = new OlStyle({\n      fill,\n      stroke,\n      image: new OlStyleCircle({\n        radius: 5,\n        fill,\n        stroke\n      })\n    });\n\n    const layer = new OlLayerVector({\n      source: source,\n      style: featureStyle\n    });\n\n    layer.set('name', opts.layerName);\n\n    map.addLayer(layer);\n  }, [map, opts.layerName]);\n\n  const deinitVectorLayer = useCallback(() => {\n    if (!map) {\n      return;\n    }\n\n    const vectorLayer = MapUtil.getLayerByName(map, opts.layerName) as OlLayerVector<OlSourceVector>;\n\n    if (!vectorLayer) {\n      return;\n    }\n\n    map.removeLayer(vectorLayer);\n  }, [map, opts.layerName]);\n\n  useEffect(() => {\n    initVectorLayer();\n\n    return () => deinitVectorLayer();\n  }, [deinitVectorLayer, initVectorLayer]);\n};\n\nexport default useHighlightVectorLayer;\n","import React from 'react';\n\nimport {\n  faClipboardCheck,\n  faClipboardList,\n  faEdit\n} from '@fortawesome/free-solid-svg-icons';\nimport {\n  FontAwesomeIcon\n} from '@fortawesome/react-fontawesome';\n\nimport {\n  Button,\n  Pagination,\n  PaginationProps,\n  Tooltip\n} from 'antd';\n\nimport copy from 'copy-to-clipboard';\n\nimport {\n  Feature\n} from 'geojson';\nimport _clone from 'lodash/clone';\n\nimport {\n  getUid\n} from 'ol';\nimport { isEmpty as isEmptyOlExtent } from 'ol/extent';\nimport OlFeature from 'ol/Feature';\nimport OlFormatGeoJSON from 'ol/format/GeoJSON';\nimport OlGeometry from 'ol/geom/Geometry';\nimport OlLayer from 'ol/layer/Layer';\n\nimport {\n  useTranslation\n} from 'react-i18next';\n\nimport Logger from '@terrestris/base-util/dist/Logger';\n\nimport {\n  useMap\n} from '@terrestris/react-util/dist/Hooks/useMap/useMap';\nimport { DigitizeUtil } from '@terrestris/react-util/dist/Util/DigitizeUtil';\n\nimport useAppDispatch from '../../../../hooks/useAppDispatch';\nimport useAppSelector from '../../../../hooks/useAppSelector';\nimport {\n  setLayerId,\n  setFeature\n} from '../../../../store/editFeature';\nimport {\n  show as showEditFeatureDrawer\n} from '../../../../store/editFeatureDrawerOpen';\nimport { CopyTools } from '../../../../store/featureInfo';\n\nimport './index.less';\n\nexport type PaginationToolbarProps = {\n  exportFilter?: (propertyName: string, propertyValue: string) => boolean;\n  features: OlFeature[];\n  layer?: OlLayer;\n  selectedFeature: OlFeature;\n} & PaginationProps;\n\nexport const PaginationToolbar: React.FC<PaginationToolbarProps> = ({\n  exportFilter,\n  features,\n  layer,\n  selectedFeature,\n  ...passThroughProps\n}): JSX.Element => {\n\n  const {\n    t\n  } = useTranslation();\n  const dispatch = useAppDispatch();\n  const map = useMap();\n\n  const activeCopyTools = useAppSelector(state => state.featureInfo.activeCopyTools);\n\n  const allowedEditMode = useAppSelector(\n    state => state.editFeature.userEditMode\n  );\n\n  const onCopyAsGeoJSONClick = () => {\n    if (!selectedFeature) {\n      return;\n    }\n\n    const selectedFeatureClone = selectedFeature.clone();\n\n    if (exportFilter) {\n      const propertyEntries = Object.entries(selectedFeatureClone.getProperties());\n      const filteredPropertyEntries = propertyEntries.filter(([key, value]) => exportFilter(key, value));\n\n      for (const [key, value] of propertyEntries) {\n        if (value instanceof OlGeometry) {\n          continue;\n        }\n\n        selectedFeatureClone.unset(key);\n      }\n\n      selectedFeatureClone.setProperties(Object.fromEntries(filteredPropertyEntries));\n    }\n\n    copy(new OlFormatGeoJSON().writeFeature(selectedFeatureClone));\n  };\n\n  const onCopyAsObjectClick = () => {\n    if (!selectedFeature) {\n      return;\n    }\n\n    let props = Object.entries(_clone(selectedFeature.getProperties()))\n      .filter(([, value]) => !(value instanceof OlGeometry));\n\n    if (exportFilter) {\n      props = props.filter(([key, value]) => exportFilter(key, value));\n    }\n\n    copy(JSON.stringify(Object.fromEntries(props)));\n  };\n\n  const onEditFeatureBtnClick = () => {\n    if (!layer || !map) {\n      return;\n    }\n\n    const geojsonFeatureString = new OlFormatGeoJSON().writeFeature(selectedFeature);\n\n    try {\n      const geojsonFeature = JSON.parse(geojsonFeatureString) as Feature;\n      const editLayer = DigitizeUtil.getDigitizeLayer(map);\n\n      if (!editLayer) {\n        return;\n      }\n\n      const source = editLayer.getSource();\n\n      if (!source) {\n        return;\n      }\n\n      source.clear();\n      source.addFeature(selectedFeature);\n\n      if (isEmptyOlExtent(source.getExtent())) {\n        return;\n      }\n\n      map.getView().fit(source.getExtent(), {\n        padding: [150, 150, 150, 150]\n      });\n      dispatch(setLayerId(getUid(layer)));\n      dispatch(setFeature(geojsonFeature));\n      dispatch(showEditFeatureDrawer());\n    } catch (error) {\n      Logger.error('Could not parse GeoJSON: ', error);\n    }\n  };\n\n  const isEditButtonVisible = allowedEditMode.includes('CREATE') ||\n    allowedEditMode.includes('DELETE') ||\n    allowedEditMode.includes('UPDATE');\n  const isLayerEditable = layer?.get('editable');\n\n  return (\n    <div\n      className=\"pagination-toolbar\"\n    >\n      <Pagination\n        simple\n        total={features.length}\n        size=\"small\"\n        pageSize={1}\n        {...passThroughProps}\n      />\n      <div\n        className=\"copy-buttons\"\n      >\n        {\n          isEditButtonVisible && (\n            <Tooltip\n              key=\"edit\"\n              title={isLayerEditable ? t('PaginationToolbar.editFeature') : t('PaginationToolbar.editDisabled')}\n            >\n              <Button\n                type=\"text\"\n                size=\"small\"\n                onClick={onEditFeatureBtnClick}\n                icon={<FontAwesomeIcon icon={faEdit} />}\n                disabled={!isLayerEditable}\n              />\n            </Tooltip>\n          )\n        }\n        {\n          activeCopyTools?.includes(CopyTools.COPY_AS_GEOJSON) && (\n            <Tooltip\n              title={t('PaginationToolbar.copyAsGeoJson')}\n            >\n              <Button\n                type=\"text\"\n                size=\"small\"\n                onClick={onCopyAsGeoJSONClick}\n                icon={<FontAwesomeIcon icon={faClipboardCheck} />}\n              />\n            </Tooltip>\n          )\n        }\n        {\n          activeCopyTools?.includes(CopyTools.COPY_AS_OBJECT) && (\n            <Tooltip\n              title={t('PaginationToolbar.copyAsObject')}\n            >\n              <Button\n                type=\"text\"\n                size=\"small\"\n                onClick={onCopyAsObjectClick}\n                icon={<FontAwesomeIcon icon={faClipboardList} />}\n              />\n            </Tooltip>\n          )\n        }\n      </div>\n    </div>\n  );\n};\n\nexport default PaginationToolbar;\n","import React, {\n  useEffect,\n  useState\n} from 'react';\n\nimport {\n  Tabs,\n  TabsProps\n} from 'antd';\n\nimport _isNil from 'lodash/isNil';\nimport OlFeature from 'ol/Feature';\nimport OlLayer from 'ol/layer/Layer';\nimport OlLayerVector from 'ol/layer/Vector';\nimport OlSourceVector from 'ol/source/Vector';\n\nimport {\n  Tab\n} from 'rc-tabs/lib/interface';\n\nimport { MapUtil } from '@terrestris/ol-util/dist/MapUtil/MapUtil';\n\nimport { useMap } from '@terrestris/react-util/dist/Hooks/useMap/useMap';\n\nimport {\n  PropertyFormItemReadConfig,\n  PropertyFormTabConfig\n} from '@terrestris/shogun-util/dist/model/Layer';\n\nimport useHighlightVectorLayer from '../../../../hooks/useHighlightVectorLayer';\n\nimport FeatureInfoForm from '../FeatureInfoForm';\nimport PaginationToolbar from '../PaginationToolbar';\n\nexport type FeatureInfoTabsProps = TabsProps & {\n  features: OlFeature[];\n  layerName: string;\n  tabConfig?: PropertyFormTabConfig<PropertyFormItemReadConfig>[];\n  layer: OlLayer;\n};\n\nexport const FeatureInfoTabs: React.FC<FeatureInfoTabsProps> = ({\n  features,\n  layerName,\n  layer,\n  tabConfig,\n  ...passThroughProps\n}) => {\n  const [currentPage, setCurrentPage] = useState<number>(1);\n  const [selectedFeature, setSelectedFeature] = useState<OlFeature>();\n  const [activeKey, setActiveKey] = useState<string>('0');\n\n  const map = useMap();\n\n  const vectorLayerName = `selection-layer-${layerName}`;\n\n  useHighlightVectorLayer({\n    layerName: vectorLayerName\n  });\n\n  useEffect(() => {\n    if (!map) {\n      return;\n    }\n\n    const vectorLayer = MapUtil.getLayerByName(map, vectorLayerName) as OlLayerVector<OlSourceVector>;\n\n    if (!vectorLayer) {\n      return;\n    }\n\n    vectorLayer.getSource()?.clear();\n    setCurrentPage(1);\n\n    if (features.length > 0) {\n      setActiveKey('0');\n      setSelectedFeature(features[0]);\n    }\n  }, [features, map, vectorLayerName]);\n\n  useEffect(() => {\n    if (!selectedFeature || !map) {\n      return;\n    }\n\n    const vectorLayer = MapUtil.getLayerByName(map, vectorLayerName) as OlLayerVector<OlSourceVector>;\n\n    if (!vectorLayer) {\n      return;\n    }\n\n    vectorLayer.getSource()?.clear();\n    vectorLayer.getSource()?.addFeature(selectedFeature);\n  }, [selectedFeature, map, vectorLayerName]);\n\n  const onChange = (page: number) => {\n    if (page < 1) {\n      return;\n    }\n\n    setCurrentPage(page);\n    setSelectedFeature(features[page - 1]);\n  };\n\n  if (!tabConfig || !selectedFeature) {\n    return <></>;\n  }\n\n  const exportFilter = (propertyName: string) => {\n    let match = false;\n\n    for (const conf of tabConfig) {\n      if (!conf.children) {\n        continue;\n      }\n\n      for (const child of conf.children) {\n        if (child.propertyName === propertyName) {\n          match = true;\n          break;\n        }\n      }\n    }\n\n    return match;\n  };\n\n  const items = tabConfig\n    .filter(config => !_isNil(config))\n    .map((config, idx) => {\n      return {\n        label: config.title,\n        key: `${idx}`,\n        forceRender: true,\n        children: (\n          <FeatureInfoForm\n            name={config.title}\n            feature={selectedFeature}\n            formConfig={config.children}\n          />\n        )\n      } as Tab;\n    });\n\n  const changeKey = (key: string) => {\n    setActiveKey(key);\n  };\n\n  return (\n    <div\n      className=\"feature-info-tabs\"\n    >\n      <PaginationToolbar\n        current={currentPage}\n        exportFilter={exportFilter}\n        features={features}\n        layer={layer}\n        onChange={onChange}\n        selectedFeature={selectedFeature}\n      />\n      <Tabs\n        items={items}\n        activeKey={activeKey}\n        defaultActiveKey='0'\n        onTabClick={changeKey}\n        {...passThroughProps}\n      />\n    </div>\n  );\n};\n\nexport default FeatureInfoTabs;\n","import React, {\n  useEffect,\n  useState\n} from 'react';\n\nimport {\n  TableProps\n} from 'antd';\n\nimport OlFeature from 'ol/Feature';\nimport OlGeometry from 'ol/geom/Geometry';\nimport OlLayer from 'ol/layer/Layer';\nimport OlLayerVector from 'ol/layer/Vector';\nimport OlSourceVector from 'ol/source/Vector';\n\nimport {\n  useTranslation\n} from 'react-i18next';\n\nimport { MapUtil } from '@terrestris/ol-util/dist/MapUtil/MapUtil';\n\nimport PropertyGrid from '@terrestris/react-geo/dist/Grid/PropertyGrid/PropertyGrid';\nimport { useMap } from '@terrestris/react-util/dist/Hooks/useMap/useMap';\n\nimport useHighlightVectorLayer from '../../../../hooks/useHighlightVectorLayer';\n\nimport PaginationToolbar from '../PaginationToolbar';\n\nimport './index.less';\n\nexport type FeatureInfoPropertyGridProps = {\n  features: OlFeature[];\n  layerName: string;\n  layer?: OlLayer;\n} & TableProps<OlFeature>;\n\nexport const FeatureInfoPropertyGrid: React.FC<FeatureInfoPropertyGridProps> = ({\n  features,\n  layerName,\n  layer,\n  ...restProps\n}): JSX.Element => {\n  const [currentPage, setCurrentPage] = useState<number>();\n  const [selectedFeature, setSelectedFeature] = useState<OlFeature>();\n  const [blacklistedAttributes, setBlacklistedAttributes] = useState<string[]>([]);\n\n  const map = useMap();\n\n  const {\n    t\n  } = useTranslation();\n\n  const vectorLayerName = `selection-layer-${layerName}`;\n\n  useHighlightVectorLayer({\n    layerName: vectorLayerName\n  });\n\n  useEffect(() => {\n    if (!map) {\n      return;\n    }\n\n    const vectorLayer = MapUtil.getLayerByName(map, vectorLayerName) as OlLayerVector<OlSourceVector>;\n\n    if (!vectorLayer) {\n      return;\n    }\n\n    vectorLayer.getSource()?.clear();\n    setCurrentPage(1);\n\n    if (features.length > 0) {\n      setSelectedFeature(features[0]);\n    }\n  }, [features, map, vectorLayerName]);\n\n  useEffect(() => {\n    if (!selectedFeature || !map) {\n      return;\n    }\n\n    const vectorLayer = MapUtil.getLayerByName(map, vectorLayerName) as OlLayerVector<OlSourceVector>;\n\n    if (!vectorLayer) {\n      return;\n    }\n\n    const geomAttributes = Object.entries(selectedFeature.getProperties())\n      .filter(([, value]) => value instanceof OlGeometry)\n      .map(([key]) => key);\n\n    setBlacklistedAttributes(geomAttributes);\n\n    vectorLayer.getSource()?.clear();\n    vectorLayer.getSource()?.addFeature(selectedFeature);\n  }, [selectedFeature, map, vectorLayerName]);\n\n  const onChange = (page: number) => {\n    setCurrentPage(page);\n    setSelectedFeature(features[page - 1]);\n  };\n\n  if (!selectedFeature) {\n    return <></>;\n  }\n\n  const attributeFilter = selectedFeature.getKeys()\n    .filter((prop: string | number | boolean) => {\n      return !blacklistedAttributes.includes((prop as string).toLocaleLowerCase());\n    });\n\n  return (\n    <PropertyGrid\n      className=\"property-grid\"\n      feature={selectedFeature}\n      attributeFilter={attributeFilter}\n      size=\"small\"\n      sticky={true}\n      title={() => (\n        <PaginationToolbar\n          features={features}\n          selectedFeature={selectedFeature}\n          current={currentPage}\n          layer={layer}\n          onChange={onChange}\n        />\n      )}\n      columns={[{\n        title: t('FeaturePropertyGrid.key'),\n        dataIndex: 'attributeName',\n        key: 'attributeName',\n        width: '50%',\n        ellipsis: true,\n        defaultSortOrder: 'ascend',\n        sorter: (a, b) => a.key.localeCompare(b.key)\n      }, {\n        title: t('FeaturePropertyGrid.value'),\n        dataIndex: 'attributeValue',\n        key: 'attributeValue',\n        width: '50%',\n        ellipsis: true\n      }]}\n      scroll={{\n        scrollToFirstRowOnChange: true,\n        y: 'calc(100% - 90px)'\n      }}\n      {...restProps}\n    />\n  );\n};\n\nexport default FeatureInfoPropertyGrid;\n","import React, {\n  useCallback,\n  useEffect,\n  useState\n} from 'react';\n\nimport {\n  FormProps,\n  Spin,\n  Tabs\n} from 'antd';\n\nimport {\n  groupBy, mapValues\n} from 'lodash';\n\nimport { Coordinate as OlCoordinate } from 'ol/coordinate';\nimport OlFeature from 'ol/Feature';\nimport OlFormatGeoJSON from 'ol/format/GeoJSON';\nimport OlLayerBase from 'ol/layer/Base';\nimport OlLayerImage from 'ol/layer/Image';\nimport OlLayerTile from 'ol/layer/Tile';\nimport OlSourceImageWMS from 'ol/source/ImageWMS';\nimport OlSourceTileWMS from 'ol/source/TileWMS';\n\nimport { Tab } from 'rc-tabs/lib/interface';\n\nimport { useTranslation } from 'react-i18next';\n\nimport { MapUtil } from '@terrestris/ol-util/dist/MapUtil/MapUtil';\n\nimport {\n  isWmsLayer,\n  WmsLayer\n} from '@terrestris/ol-util/dist/typeUtils/typeUtils';\n\nimport {\n  CoordinateInfo,\n  CoordinateInfoProps\n} from '@terrestris/react-geo/dist/CoordinateInfo/CoordinateInfo';\n\nimport { CoordinateInfoResult } from '@terrestris/react-util/dist/Hooks/useCoordinateInfo/useCoordinateInfo';\nimport { useMap } from '@terrestris/react-util/dist/Hooks/useMap/useMap';\n\nimport { getBearerTokenHeader } from '@terrestris/shogun-util/dist/security/getBearerTokenHeader';\n\nimport useAppDispatch from '../../../hooks/useAppDispatch';\nimport useAppSelector from '../../../hooks/useAppSelector';\nimport usePlugins from '../../../hooks/usePlugins';\nimport useSHOGunAPIClient from '../../../hooks/useSHOGunAPIClient';\n\nimport { isFeatureInfoIntegration } from '../../../plugin';\n\nimport { CopyTools } from '../../../store/featureInfo';\nimport {\n  SelectedFeatures, setSelectedFeatures\n} from '../../../store/selectedFeatures';\n\nimport FeatureInfoTabs from './FeatureInfoTabs';\n\nimport FeatureInfoPropertyGrid from './FeaturePropertyGrid';\n\nimport './index.less';\n\nexport type FeatureInfoConfig = {\n  enabled?: boolean;\n  activeCopyTools?: CopyTools[];\n};\n\nexport type FeatureInfoProps = FormProps & Partial<CoordinateInfoProps>;\n\nexport interface CoordinateInfoState {\n  clickCoordinate: OlCoordinate | null;\n  features: Record<string, OlFeature[]>;\n  loading: boolean;\n}\n\ntype LayerIndex = {\n  layerName: string;\n  index: number;\n};\n\nexport const FeatureInfo: React.FC<FeatureInfoProps> = ({\n  ...restProps\n}): JSX.Element => {\n\n  const {\n    t\n  } = useTranslation();\n\n  const map = useMap();\n  const client = useSHOGunAPIClient();\n  const plugins = usePlugins();\n  const dispatch = useAppDispatch();\n\n  const [queryLayers, setQueryLayers] = useState<WmsLayer[]>([]);\n  const [activeTabKey, setActiveTabKey] = useState<string | undefined>(undefined);\n  const featureInfoEnabled = useAppSelector(state => state.featureInfo.enabled);\n\n  const layerFilter = (layer: OlLayerBase) => {\n    if (!layer.get('hoverable')) {\n      return false;\n    }\n    if (layer instanceof OlLayerImage && layer.getSource() instanceof OlSourceImageWMS) {\n      return true;\n    }\n    return layer instanceof OlLayerTile && layer.getSource() instanceof OlSourceTileWMS;\n  };\n\n  const updateQueryLayers = useCallback(() => {\n    if (!map) {\n      return;\n    }\n\n    const layerCandidates = MapUtil.getAllLayers(map, layerFilter) as WmsLayer[];\n    setQueryLayers(layerCandidates.filter(l => l.getVisible()));\n  }, [map]);\n\n  useEffect(() => {\n    if (!map) {\n      return;\n    }\n\n    updateQueryLayers();\n\n    const mapLayers = MapUtil.getAllLayers(map, layerFilter) as WmsLayer[];\n    mapLayers.forEach(l => l.on('change:visible', updateQueryLayers));\n\n    return () => {\n      mapLayers.forEach(l => l.un('change:visible', updateQueryLayers));\n    };\n\n  }, [map, updateQueryLayers]);\n\n  if (!map) {\n    return <></>;\n  }\n\n  const changeActiveKey = (key: string) => {\n    setActiveTabKey(key);\n  };\n\n  const findMapLayerIndex = (layerName: string) => {\n    const allLayers = map.getAllLayers();\n\n    return allLayers.findIndex(l => {\n      if (isWmsLayer(l)) {\n        const source = l.getSource();\n        const unqualifiedMapLayerName = getUnqualifiedLayerName(source?.getParams().LAYERS);\n        const unqualifiedLayerName = getUnqualifiedLayerName(layerName);\n\n        return unqualifiedLayerName === unqualifiedMapLayerName;\n      }\n      return false;\n    });\n  };\n\n  const resultRenderer = (coordinateInfoState: CoordinateInfoResult) => {\n    const featureLayerResult = coordinateInfoState.features;\n    const loading = coordinateInfoState.loading;\n\n    if (featureLayerResult.length === 0) {\n      return (\n        <span className='usage-hint'>\n          {t('FeatureInfo.usageHint')}\n        </span>\n      );\n    }\n\n    const items: (Tab & { index: number })[] = [];\n\n    const groupedResultsByLayer = groupBy(featureLayerResult, 'featureType');\n\n    Object.entries(groupedResultsByLayer).forEach(([layerName, featureLayerResults]) => {\n      let pluginRendererAvailable = false;\n\n      const features = featureLayerResults.map(flr => flr.feature);\n      const allLayers = map.getAllLayers();\n      const mapLayerIndex = findMapLayerIndex(layerName);\n      const mapLayer = allLayers[mapLayerIndex];\n\n      plugins.forEach(plugin => {\n        if (isFeatureInfoIntegration(plugin.integration) &&\n          ((Array.isArray(plugin.integration.layers) && plugin.integration.layers.includes(layerName)) ||\n            !plugin.integration.layers)) {\n          const {\n            key,\n            wrappedComponent: WrappedPluginComponent\n          } = plugin;\n\n          items.push({\n            label: layerName,\n            index: mapLayerIndex,\n            key: layerName,\n            children: (\n              <WrappedPluginComponent\n                key={key}\n              />\n            )\n          });\n\n          pluginRendererAvailable = true;\n        }\n      });\n\n      if (!pluginRendererAvailable) {\n        items.push({\n          label: mapLayer?.get('name') || layerName,\n          index: mapLayerIndex,\n          key: layerName,\n          children: (\n            <div\n              key={layerName}\n            >\n              {\n                mapLayer?.get('featureInfoFormConfig') ?\n                  <FeatureInfoTabs\n                    tabConfig={mapLayer?.get('featureInfoFormConfig')}\n                    features={features}\n                    layerName={layerName}\n                    layer={mapLayer}\n                  /> :\n                  <FeatureInfoPropertyGrid\n                    features={features}\n                    layerName={layerName}\n                    layer={mapLayer}\n                  />\n              }\n            </div>\n          )\n        });\n      }\n    });\n\n    items.sort((a, b) => b.index - a.index);\n\n    return (\n      <Spin\n        spinning={loading}\n      >\n        <Tabs\n          destroyInactiveTabPane={true}\n          items={items}\n          activeKey={activeTabKey}\n          defaultActiveKey={items[0].key}\n          onTabClick={changeActiveKey}\n        />\n      </Spin>\n    );\n  };\n\n  const getUnqualifiedLayerName = (layerName: string) => {\n    return layerName.split(':').length > 1 ?\n      layerName.split(':')[1] :\n      layerName.split(':')[0];\n  };\n\n  if (!featureInfoEnabled) {\n    return <></>;\n  }\n\n  const getFetchOpts = (layer: WmsLayer) => {\n    return {\n      headers: {\n        ...layer.get('useBearerToken') ? {\n          ...getBearerTokenHeader(client?.getKeycloak())\n        } : undefined\n      }\n    };\n  };\n\n  const onSuccess = (coordinateInfoState: CoordinateInfoResult) => {\n    const featureLayerResult = coordinateInfoState.features;\n\n    const grouped = groupBy(featureLayerResult, 'featureType');\n    const mapped = mapValues(grouped, g => g.map(flr => flr.feature));\n\n    const serializedFeatures: SelectedFeatures = {};\n    for (const [layerName, feats] of Object.entries(mapped)) {\n      serializedFeatures[layerName] = new OlFormatGeoJSON().writeFeatures(feats);\n    }\n\n    const layers: LayerIndex[] = featureLayerResult\n      .map(result => ({\n        layerName: result.featureType,\n        index: findMapLayerIndex(result.featureType)\n      }))\n      .sort((a, b) => b.index - a.index);\n\n    if (layers.length > 0) {\n      setActiveTabKey(layers[0].layerName);\n    }\n\n    dispatch(setSelectedFeatures(serializedFeatures));\n  };\n\n  return (\n    <div className='feature-info-panel'>\n      <CoordinateInfo\n        featureCount={10}\n        queryLayers={queryLayers}\n        resultRenderer={resultRenderer}\n        fetchOpts={getFetchOpts}\n        onSuccess={onSuccess}\n        drillDown={true}\n        {...restProps}\n      />\n    </div>\n  );\n};\n\nexport default FeatureInfo;\n","import React, {\n  useEffect,\n  useState\n} from 'react';\n\nimport {\n  faClock\n} from '@fortawesome/free-solid-svg-icons';\nimport {\n  FontAwesomeIcon\n} from '@fortawesome/react-fontawesome';\n\nimport {\n  Divider\n} from 'antd';\n\nimport moment from 'moment';\n\nimport OlLayerImage from 'ol/layer/Image';\nimport OlLayerTile from 'ol/layer/Tile';\nimport OlSourceImageWMS from 'ol/source/ImageWMS';\nimport OlSourceTileWMS from 'ol/source/TileWMS';\n\nimport {\n  useTranslation\n} from 'react-i18next';\n\nimport TimeSlider, {\n  TimeSliderProps\n} from '@terrestris/react-geo/dist/Slider/TimeSlider/TimeSlider';\n\nimport './index.less';\n\ninterface WmsTimeSliderProps extends Omit<TimeSliderProps, 'min' | 'max' | 'marks' | 'useRange' |\n  'onChange' | 'defaultValue' | 'value' | 'formatString'> {\n  layer: OlLayerTile<OlSourceTileWMS> | OlLayerImage<OlSourceImageWMS>;\n}\n\nexport const WmsTimeSlider: React.FC<WmsTimeSliderProps> = ({\n  layer,\n  ...passThroughProps\n}) => {\n  const [value, setValue] = useState<string | [string, string]>(layer.getSource()?.getParams().TIME);\n  const [min, setMin] = useState<string>();\n  const [max, setMax] = useState<string>();\n  const [marks, setMarks] = useState<Record<string | number, string> | undefined>();\n\n  const {\n    t\n  } = useTranslation();\n\n  useEffect(() => {\n    const dimension = layer.get('dimension');\n\n    if (!dimension) {\n      return;\n    }\n\n    let timeValues;\n    if (dimension.values) {\n      timeValues = dimension.values.split(',');\n    }\n\n    if (!timeValues || timeValues.length === 0) {\n      return;\n    }\n\n    setMin(timeValues[0]);\n    setMax(timeValues[timeValues.length - 1]);\n    setValue(timeValues[timeValues.length - 1]);\n\n    const m: Record<string | number, string> = {};\n    timeValues.forEach((val: string) => {\n      m[val] = moment(val).format('YYYY-MM-DD');\n    });\n\n    setMarks(m);\n\n    if (timeValues.default === 'current') {\n      let nearest: [number, string] = [NaN, ''];\n      Object.values(m).forEach(d => {\n        const diff = moment().diff(moment(d));\n\n        if (diff < nearest[0]) {\n          nearest = [diff, d];\n        }\n      });\n\n      setValue(nearest[1]);\n    }\n  }, [layer]);\n\n  const onChange = (val: string | [string, string]) => {\n    setValue(val);\n\n    layer.getSource()?.updateParams({\n      TIME: val\n    });\n  };\n\n  return (\n    <div\n      className=\"wms-time-slider\"\n    >\n      <Divider>\n        <FontAwesomeIcon\n          icon={faClock}\n        />\n        {t('WmsTimeSlider.title')}\n      </Divider>\n      {\n        marks && min && max ?\n          <TimeSlider\n            formatString={''}\n            defaultValue={''}\n            min={min}\n            max={max}\n            marks={marks}\n            value={value}\n            onChange={onChange}\n            {...passThroughProps}\n          /> :\n          <span>\n            {t('WmsTimeSlider.default')}\n          </span>\n      }\n    </div>\n  );\n};\n\nexport default WmsTimeSlider;\n","import React, {\n  useState\n} from 'react';\n\nimport {\n  faEllipsisV\n} from '@fortawesome/free-solid-svg-icons';\nimport {\n  FontAwesomeIcon\n} from '@fortawesome/react-fontawesome';\n\nimport {\n  Dropdown,\n  DropDownProps,\n  notification,\n  Spin\n} from 'antd';\nimport {\n  ItemType\n} from 'antd/lib/menu/interface';\n\nimport {\n  getUid\n} from 'ol';\nimport OlLayerBase from 'ol/layer/Base';\nimport OlLayerGroup from 'ol/layer/Group';\nimport OlLayerImage from 'ol/layer/Image';\nimport OlLayerTile from 'ol/layer/Tile';\nimport {\n  transformExtent\n} from 'ol/proj';\nimport OlSourceImageWMS from 'ol/source/ImageWMS';\nimport OlSourceTileWMS from 'ol/source/TileWMS';\n\nimport {\n  MenuInfo\n} from 'rc-menu/lib/interface';\n\nimport {\n  useTranslation\n} from 'react-i18next';\n\nimport Logger from '@terrestris/base-util/dist/Logger';\n\nimport LayerUtil from '@terrestris/ol-util/dist/LayerUtil/LayerUtil';\nimport { MapUtil } from '@terrestris/ol-util/dist/MapUtil/MapUtil';\n\nimport {\n  isWmsLayer\n} from '@terrestris/ol-util/dist/typeUtils/typeUtils';\n\nimport {\n  useMap\n} from '@terrestris/react-util/dist/Hooks/useMap/useMap';\n\nimport {\n  DownloadConfig\n} from '@terrestris/shogun-util/dist/model/Layer';\nimport {\n  getBearerTokenHeader\n} from '@terrestris/shogun-util/dist/security/getBearerTokenHeader';\n\nimport useAppDispatch from '../../../../hooks/useAppDispatch';\nimport useAppSelector from '../../../../hooks/useAppSelector';\nimport useSHOGunAPIClient from '../../../../hooks/useSHOGunAPIClient';\n\nimport {\n  setLayerId,\n  setFeature\n} from '../../../../store/editFeature';\nimport {\n  show as showEditFeatureDrawer\n} from '../../../../store/editFeatureDrawerOpen';\n\nimport {\n  setLayer as setLayerDetailsLayer,\n  show as showLayerDetailsModal\n} from '../../../../store/layerDetailsModal';\n\nexport type LayerTreeContextMenuProps = {\n  layer: OlLayerTile<OlSourceTileWMS> | OlLayerImage<OlSourceImageWMS>;\n  visibleLegendsIds: string[];\n  setVisibleLegendsIds: (ids: string[]) => void;\n} & Partial<DropDownProps>;\n\nexport const LayerTreeContextMenu: React.FC<LayerTreeContextMenuProps> = ({\n  layer,\n  visibleLegendsIds,\n  setVisibleLegendsIds,\n  ...restProps\n}): JSX.Element => {\n\n  const [settingsVisible, setSettingsVisible] = useState<boolean>(false);\n  const [extentLoading, setExtentLoading] = useState<boolean>(false);\n\n  const dispatch = useAppDispatch();\n  const client = useSHOGunAPIClient();\n  const map = useMap();\n  const {\n    t\n  } = useTranslation();\n\n  const downloadConfig: DownloadConfig[] = layer.get('downloadConfig') ?? null;\n  const allowedEditMode = useAppSelector(\n    state => state.editFeature.userEditMode\n  );\n  const metadataVisible = useAppSelector(state => state.layerTree.metadataVisible);\n\n  const onContextMenuItemClick = (evt: MenuInfo): void => {\n    if (evt?.key.startsWith('downloadLayer')) {\n      const url = evt.key.split('|')[1];\n      downloadLayer(decodeURI(url));\n    }\n    switch (evt?.key) {\n      case 'zoomToExtent':\n        zoomToLayerExtent();\n        break;\n      case 'removeExternal':\n        removeExternalLayer();\n        break;\n      case 'toggleLegend': {\n        const legendId: string = getUid(layer);\n        const newLegendIds = [...visibleLegendsIds];\n        if (newLegendIds.includes(legendId)) {\n          newLegendIds.splice(newLegendIds.indexOf(legendId), 1);\n        } else {\n          newLegendIds.push(legendId);\n        }\n        setVisibleLegendsIds(newLegendIds);\n        break;\n      }\n      case 'editLayer':\n        dispatch(setFeature(null));\n        dispatch(setLayerId(getUid(layer)));\n        dispatch(showEditFeatureDrawer());\n        break;\n      case 'layerDetails':\n        dispatch(setLayerDetailsLayer(getUid(layer)));\n        dispatch(showLayerDetailsModal());\n        break;\n      default:\n        break;\n    }\n    setSettingsVisible(false);\n  };\n\n  const zoomToLayerExtent = async (): Promise<void> => {\n    if (!map) {\n      return;\n    }\n\n    setExtentLoading(true);\n\n    try {\n      let extent = await LayerUtil.getExtentForLayer(layer, {\n        headers: layer.get('useBearerToken') ? {\n          ...getBearerTokenHeader(client?.getKeycloak())\n        } : {}\n      });\n      extent = transformExtent(extent, 'EPSG:4326', map.getView().getProjection());\n      map.getView().fit(extent);\n    } catch (error) {\n      Logger.error(error);\n      notification.error({\n        message: t('LayerTreeContextMenu.extentError')\n      });\n    } finally {\n      setExtentLoading(false);\n    }\n  };\n\n  const getParentLayerGroups = (l: OlLayerBase): OlLayerGroup[] => {\n    if (!map) {\n      return [];\n    }\n\n    const layerGroups = getAllLayerGroups(map.getLayerGroup())\n      .filter(layerGroup => layerGroup.getLayers().getArray().includes(l));\n\n    return layerGroups;\n  };\n\n  const getAllLayerGroups = (layerGroup: OlLayerGroup): OlLayerGroup[] => {\n    const layerGroups = [layerGroup];\n\n    for (const l of layerGroup.getLayers().getArray()) {\n      if (l instanceof OlLayerGroup) {\n        layerGroups.push(...getAllLayerGroups(l));\n      }\n    }\n\n    return layerGroups;\n  };\n\n  const removeLayer = (l: OlLayerBase) => {\n    const parentGroups = getParentLayerGroups(l);\n\n    parentGroups.forEach(parentGroup => parentGroup.getLayers().remove(l));\n  };\n\n  const removeExternalLayer = () => {\n    if (!map) {\n      return;\n    }\n\n    removeLayer(layer);\n\n    const externalLayerGroup = MapUtil.getLayerByName(map, t('AddLayerModal.externalWmsFolder')) as OlLayerGroup;\n    const uploadedLayerGroup = MapUtil.getLayerByName(map, t('UploadDataModal.uploadedDataFolder')) as OlLayerGroup;\n\n    if (externalLayerGroup && externalLayerGroup.getLayers().getLength() === 0) {\n      removeLayer(externalLayerGroup);\n    }\n\n    if (uploadedLayerGroup && uploadedLayerGroup.getLayers().getLength() === 0) {\n      removeLayer(uploadedLayerGroup);\n    }\n  };\n\n  const downloadLayer = async (url: string) => {\n    if (!layer) {\n      return;\n    }\n    const reqOpts = {\n      method: 'GET',\n      headers: {\n        ...layer.get('useBearerToken') ? {\n          ...getBearerTokenHeader(client?.getKeycloak())\n        } : undefined\n      }\n    };\n\n    const res = await fetch(url, reqOpts);\n    const blob = await res.blob();\n    const a = document.createElement('a');\n    a.href = URL.createObjectURL(blob);\n    a.setAttribute('download', layer.get('name'));\n    a.click();\n  };\n\n  const dropdownMenuItems: ItemType[] = [];\n\n  if (isWmsLayer(layer)) {\n    dropdownMenuItems.push({\n      label: (\n        <Spin\n          spinning={extentLoading}\n        >\n          {t('LayerTreeContextMenu.layerZoomToExtent')}\n        </Spin>\n      ),\n      key: 'zoomToExtent'\n    });\n  }\n\n  if (isWmsLayer(layer) && layer.getVisible()) {\n    const legendVisible = visibleLegendsIds.includes(getUid(layer));\n\n    dropdownMenuItems.push({\n      label: legendVisible ? t('LayerTreeContextMenu.hideLegend') : t('LayerTreeContextMenu.showLegend'),\n      key: 'toggleLegend'\n    });\n  }\n\n  if (layer.get('isExternalLayer') || layer.get('isUploadedLayer')) {\n    dropdownMenuItems.push({\n      label: t('LayerTreeContextMenu.removeLayer'),\n      key: 'removeExternal'\n    });\n  }\n\n  if (downloadConfig) {\n    const downloadItems = downloadConfig.map((dlConfig: DownloadConfig) => {\n      return {\n        label: t('LayerTreeContextMenu.downloadLayer', {\n          formatName: dlConfig.formatName ?? 'XML'\n        }),\n        key: `downloadLayer|${encodeURI(dlConfig.downloadUrl)}`\n      };\n    });\n    dropdownMenuItems.push(...downloadItems);\n  }\n\n  if (\n    layer.get('editable') &&\n    (allowedEditMode.includes('CREATE') ||\n      allowedEditMode.includes('UPDATE') ||\n      allowedEditMode.includes('DELETE'))\n  ) {\n    dropdownMenuItems.push({\n      label: t('LayerTreeContextMenu.editLayer'),\n      key: 'editLayer'\n    });\n  }\n\n  if (metadataVisible) {\n    dropdownMenuItems.push({\n      label: t('LayerTreeContextMenu.layerDetails'),\n      key: 'layerDetails'\n    });\n  }\n\n  return (\n    <div\n      aria-label='layer-context'\n    >\n      <Dropdown\n        menu={{\n          items: dropdownMenuItems,\n          onClick: onContextMenuItemClick\n        }}\n        placement=\"bottomLeft\"\n        onOpenChange={setSettingsVisible}\n        open={settingsVisible}\n        trigger={['click']}\n        {...restProps}\n      >\n        <FontAwesomeIcon icon={faEllipsisV} />\n      </Dropdown>\n    </div>\n  );\n};\n\nexport default LayerTreeContextMenu;\n","import React from 'react';\n\nimport './index.less';\n\nexport const LoadingIndicator: React.FC = (): JSX.Element => {\n  return (\n    <div className=\"layer-node-title-loading-animation\">\n      <span className=\"dot-one\">.</span>\n      <span className=\"dot-two\">.</span>\n      <span className=\"dot-three\">.</span>\n    </div>\n  );\n};\n\nexport default LoadingIndicator;\n","import React, {\n  useState,\n  useEffect,\n  useCallback,\n  useMemo\n} from 'react';\n\nimport {\n  faMagnifyingGlass,\n  faCircleInfo,\n  faPen\n} from '@fortawesome/free-solid-svg-icons';\nimport {\n  FontAwesomeIcon\n} from '@fortawesome/react-fontawesome';\n\nimport {\n  Tooltip\n} from 'antd';\n\nimport {\n  getUid,\n  MapEvent as OlMapEvent\n} from 'ol';\nimport BaseEvent from 'ol/events/Event';\nimport OlBaseLayer from 'ol/layer/Base';\nimport OlLayerGroup from 'ol/layer/Group';\nimport OlLayerImage from 'ol/layer/Image';\nimport OlLayer from 'ol/layer/Layer';\nimport OlLayerTile from 'ol/layer/Tile';\nimport OlSourceImageWMS from 'ol/source/ImageWMS';\nimport OlSourceTileWMS from 'ol/source/TileWMS';\nimport OlSourceVector from 'ol/source/Vector';\n\nimport {\n  useTranslation\n} from 'react-i18next';\n\nimport { MapUtil } from '@terrestris/ol-util/dist/MapUtil/MapUtil';\nimport { isWmsLayer } from '@terrestris/ol-util/dist/typeUtils/typeUtils';\n\nimport RgLayerTree, {\n  LayerTreeProps as RgLayerTreeProps\n} from '@terrestris/react-geo/dist/LayerTree/LayerTree';\nimport { Legend } from '@terrestris/react-geo/dist/Legend/Legend';\nimport LayerTransparencySlider from '@terrestris/react-geo/dist/Slider/LayerTransparencySlider/LayerTransparencySlider';\n\nimport {\n  useMap\n} from '@terrestris/react-util/dist/Hooks/useMap/useMap';\n\nimport type { LayerType } from '@terrestris/shogun-util/dist/model/enum/LayerType';\nimport {\n  getBearerTokenHeader\n} from '@terrestris/shogun-util/dist/security/getBearerTokenHeader';\n\nimport useAppSelector from '../../../hooks/useAppSelector';\nimport useSHOGunAPIClient from '../../../hooks/useSHOGunAPIClient';\n\nimport WmsTimeSlider from '../../WmsTimeSlider';\n\nimport LayerTreeContextMenu from './LayerTreeContextMenu';\nimport LoadingIndicator from './LoadingIndicator';\n\nimport './index.less';\n\nexport type LayerTreeProps = Partial<RgLayerTreeProps>;\n\nexport type LayerTileLoadCounter = Record<string, {\n  loading: number;\n  loaded: number;\n  percent: number;\n}>;\n\nexport const LayerTree: React.FC<LayerTreeProps> = ({\n  ...restProps\n}): JSX.Element => {\n  const map = useMap();\n  const client = useSHOGunAPIClient();\n  const {\n    t\n  } = useTranslation();\n\n  const initialLayersUid = map?.getAllLayers().map(l => getUid(l));\n\n  const showLegendsState: boolean = useAppSelector(state => state.layerTree.showLegends) ?? false;\n  const layerIconsVisible: boolean = useAppSelector(state => state.layerTree.layerIconsVisible) ?? false;\n\n  const [visibleLegendsIds, setVisibleLegendsIds] = useState<string[]>(showLegendsState ? initialLayersUid ?? [] : []);\n  const [layerTileLoadCounter, setLayerTileLoadCounter] = useState<LayerTileLoadCounter>({});\n  const [mapScale, setMapScale] = useState<number>();\n\n  const registerTileLoadHandler = useCallback(() => {\n    if (!map) {\n      return;\n    }\n\n    const allLayers = MapUtil.getAllLayers(map);\n    allLayers.forEach(layer => {\n      if (layer instanceof OlLayer) {\n        const source = layer.getSource();\n        if (source instanceof OlSourceTileWMS) {\n          if (!source.hasListener('tileloadstart')) {\n            source.on('tileloadstart', tileLoadStartListener);\n          }\n          if (!source.hasListener('tileloadend') && !source.hasListener('tileloaderror')) {\n            source.on(['tileloadend', 'tileloaderror'], tileLoadEndListener);\n          }\n        }\n        if (source instanceof OlSourceImageWMS) {\n          if (!source.hasListener('imageloadstart')) {\n            source.on('imageloadstart', tileLoadStartListener);\n          }\n          if (!source.hasListener('imageloadend') && !source.hasListener('imageloaderror')) {\n            source.on(['imageloadend', 'imageloaderror'], tileLoadEndListener);\n          }\n        }\n      }\n    });\n  }, [map]);\n\n  const checkListeners = useCallback(() => {\n    const activeLayers = map?.getAllLayers().map(l => getUid(l));\n\n    if (activeLayers?.length !== initialLayersUid?.length) {\n      registerTileLoadHandler();\n    }\n  }, [map, initialLayersUid, registerTileLoadHandler]);\n\n  const legendRequestExtraParams = useMemo(() => ({\n    SCALE: mapScale,\n    LEGEND_OPTIONS: 'fontAntiAliasing:true;forceLabels:on',\n    TRANSPARENT: true\n  }), [mapScale]);\n\n  const legendRequestHeaders = useMemo(() => ({\n    ...getBearerTokenHeader(client?.getKeycloak())\n  }), [client]);\n\n  const onMapMoveEnd = useCallback((evt: OlMapEvent) => {\n    const mapView = evt.map.getView();\n\n    const unit = mapView.getProjection().getUnits() || 'm';\n    const resolution = mapView.getResolution();\n    const scale = resolution ? MapUtil.getScaleForResolution(resolution, unit) : undefined;\n\n    setMapScale(scale);\n  }, []);\n\n  useEffect(() => {\n    if (!map) {\n      return;\n    }\n\n    // Trigger once on initial render to set the current map scale.\n    onMapMoveEnd(new OlMapEvent('moveend', map));\n\n    map.on('moveend', onMapMoveEnd);\n\n    return () => {\n      map.un('moveend', onMapMoveEnd);\n    };\n  }, [map, onMapMoveEnd]);\n\n  useEffect(() => {\n    if (!map) {\n      return;\n    }\n\n    registerTileLoadHandler();\n\n    map.getLayers().on('change', checkListeners);\n\n    return () => {\n      const allLayers = MapUtil.getAllLayers(map);\n      allLayers.forEach(layer => {\n        if (layer instanceof OlLayer) {\n          const source = layer.getSource();\n          if (source.hasListener('tileloadstart')) {\n            source.un('tileloadstart', tileLoadStartListener);\n          }\n          if (source.hasListener('tileloadend')) {\n            source.un('tileloadend', tileLoadEndListener);\n          }\n          if (source.hasListener('tileloaderror')) {\n            source.un('tileloaderror', tileLoadEndListener);\n          }\n        }\n      });\n      map.getLayers().un('change', checkListeners);\n    };\n  }, [map, registerTileLoadHandler, checkListeners]);\n\n  const tileLoadStartListener = (evt: BaseEvent) => {\n    setLayerTileLoadCounter((counter: LayerTileLoadCounter) => {\n      const uid = getUid(evt.target);\n      const update = structuredClone(counter);\n\n      // reset when load was finished\n      if (update[uid] && update[uid].loaded >= update[uid].loading) {\n        update[uid].loading = 1;\n        update[uid].loaded = 0;\n        update[uid].percent = 0;\n        return update;\n      }\n\n      if (!update[uid]) {\n        update[uid] = {\n          loading: 0,\n          loaded: 0,\n          percent: 0\n        };\n      }\n\n      update[uid].loading = Number.isInteger(update[uid].loading) ?\n        update[uid].loading + 1 : 1;\n\n      return update;\n    });\n  };\n\n  const tileLoadEndListener = (evt: BaseEvent | Event) => {\n    setLayerTileLoadCounter((counter: LayerTileLoadCounter) => {\n      const uid = getUid(evt.target);\n      const update = structuredClone(counter);\n\n      if (!update[uid]) {\n        update[uid] = {\n          loading: 0,\n          loaded: 0,\n          percent: 0\n        };\n      }\n\n      update[uid].loaded = Number.isInteger(update[uid].loaded) ?\n        update[uid].loaded + 1 : 1;\n\n      const percent = Math.round(update[uid].loaded / update[uid].loading * 100);\n\n      if (percent > update[uid].percent) {\n        update[uid].percent = percent;\n      }\n\n      return update;\n    });\n  };\n\n  const treeFilterFunction = (layer: OlBaseLayer | OlLayerGroup) => {\n    if ((layer as OlLayerGroup).getLayers) {\n      return !layer.get('hideInLayerTree');\n    }\n\n    return !((layer as OlLayer).getSource && ((layer as OlLayer).getSource() as OlSourceVector)?.forEachFeature);\n  };\n\n  const treeNodeTitleRenderer = (layer: OlBaseLayer) => {\n    if (!map) {\n      return;\n    }\n\n    const percent = layer instanceof OlLayer && getUid(layer.getSource()) ?\n      layerTileLoadCounter[getUid(layer.getSource())]?.percent : 100;\n\n    if (layer instanceof OlLayerGroup) {\n      return (\n        <div\n          aria-label='layer-group'\n        >\n          {layer.get('name')}\n        </div>\n      );\n    } else {\n      return (\n        <>\n          <div\n            className=\"tree-node-header\"\n            aria-label=\"tree-node-header\"\n          >\n            <span\n              aria-label='layer-name'\n              className='layer-name'\n            >\n              {layer.get('name')}\n              <span\n                className='loading-dots'\n              >\n                {percent < 100 && <LoadingIndicator />}\n              </span>\n              <span\n                className='layer-icons-group'\n              >\n                {layer.get('searchable') && layerIconsVisible && (\n                  <>\n                    <Tooltip title={t('ToolMenu.searchable')}>\n                      <FontAwesomeIcon\n                        icon={faMagnifyingGlass}\n                        className='layer-icon'\n                      />\n                    </Tooltip>\n                  </>\n                )}\n                {layer.get('hoverable') && layer.get('visible') && layerIconsVisible && (\n                  <>\n                    <Tooltip title={t('ToolMenu.queryable')}>\n                      <FontAwesomeIcon\n                        icon={faCircleInfo}\n                        className='layer-icon'\n                      />\n                    </Tooltip>\n                  </>\n                )}\n                {layer.get('editable') && layerIconsVisible && (\n                  <>\n                    <Tooltip title={t('ToolMenu.editable')}>\n                      <FontAwesomeIcon\n                        icon={faPen}\n                        className='layer-icon'\n                      />\n                    </Tooltip>\n                  </>\n                )}\n              </span>\n            </span>\n            {\n              (layer instanceof OlLayerTile || layer instanceof OlLayerImage) && (\n                <div\n                  aria-label='layer-context-menu'\n                >\n                  <LayerTreeContextMenu\n                    layer={layer}\n                    visibleLegendsIds={visibleLegendsIds}\n                    setVisibleLegendsIds={setVisibleLegendsIds}\n                  />\n                </div>\n              )\n            }\n\n          </div>\n          {\n            layer.get('visible') &&\n            <div\n              className=\"layer-transparency\"\n              aria-label='transparency-slider'\n              onClick={e => e.stopPropagation()}\n              onDragStart={e => {e.stopPropagation(); e.preventDefault();}}\n              draggable={true}\n            >\n              <LayerTransparencySlider\n                tooltip={{\n                  formatter: val => `${t('LayerTree.transparency')}: ${val}%`\n                }}\n                layer={layer}\n              />\n            </div>\n          }\n          {\n            (layer.get('visible') && layer.get('type') as LayerType === 'WMSTIME') &&\n            <div className=\"layer-time-slider\">\n              <WmsTimeSlider\n                layer={layer as OlLayerTile<OlSourceTileWMS> | OlLayerImage<OlSourceImageWMS>}\n              />\n            </div>\n          }\n          {\n            (layer.get('visible') && isWmsLayer(layer) && visibleLegendsIds.includes(getUid(layer))) &&\n            <Legend\n              layer={layer}\n              errorMsg={t('LayerTree.noLegendAvailable')}\n              extraParams={legendRequestExtraParams}\n              headers={layer.get('useBearerToken') ? legendRequestHeaders : undefined}\n            />\n          }\n        </>\n      );\n    }\n  };\n\n  if (!map) {\n    return <></>;\n  }\n\n  return (\n    <RgLayerTree\n      aria-label=\"layertree\"\n      className=\"layertree\"\n      nodeTitleRenderer={treeNodeTitleRenderer}\n      filterFunction={treeFilterFunction}\n      draggable\n      {...restProps}\n    />\n  );\n};\n\nexport default LayerTree;\n","import React, { useState } from 'react';\n\nimport {\n  faDrawPolygon,\n  faPenRuler\n} from '@fortawesome/free-solid-svg-icons';\n\nimport {\n  FontAwesomeIcon\n} from '@fortawesome/react-fontawesome';\n\nimport {\n  useTranslation\n} from 'react-i18next';\n\nimport { MeasureButton } from '@terrestris/react-geo/dist/Button/MeasureButton/MeasureButton';\nimport { ToggleGroup } from '@terrestris/react-geo/dist/Button/ToggleGroup/ToggleGroup';\nimport {\n  useMap\n} from '@terrestris/react-util/dist/Hooks/useMap/useMap';\n\nimport './index.less';\n\ninterface DefaultMeasureProps {\n  showMeasureDistance?: boolean;\n  showMeasureArea?: boolean;\n}\n\nexport type MeasureProps = Partial<DefaultMeasureProps>;\n\nexport const Measure: React.FC<MeasureProps> = ({\n  showMeasureDistance,\n  showMeasureArea\n}): JSX.Element => {\n  const {\n    t\n  } = useTranslation();\n\n  const map = useMap();\n\n  const [selected, setSelected] = useState<string>();\n\n  if (!map) {\n    return <></>;\n  }\n\n  return (\n    <ToggleGroup\n      className=\"measure-tools\"\n      selected={selected}\n      onChange={(evt, value) => {\n        setSelected(value);\n      }}\n    >\n      {showMeasureDistance ? (\n        <MeasureButton\n          geodesic\n          value=\"line\"\n          measureType=\"line\"\n          type=\"link\"\n          continueLineMsg={t('Measure.clicktodrawline')}\n        >\n          <FontAwesomeIcon icon={faPenRuler} />\n          <span className=\"measure-text\">{t('Measure.line')}</span>\n        </MeasureButton>\n      ) : (\n        <></>\n      )}\n\n      {showMeasureArea ? (\n        <MeasureButton\n          geodesic\n          value=\"poly\"\n          measureType=\"polygon\"\n          type=\"link\"\n          continuePolygonMsg={t('Measure.clicktodrawarea')}\n        >\n          <FontAwesomeIcon icon={faDrawPolygon} />\n          <span className=\"measure-text\">{t('Measure.area')}</span>\n        </MeasureButton>\n      ) : (\n        <></>\n      )}\n    </ToggleGroup>\n  );\n};\n\nexport default Measure;\n","import React, {\n  useCallback,\n  useEffect,\n  useState\n} from 'react';\n\nimport type {\n  IconDefinition\n} from '@fortawesome/fontawesome-common-types';\n\nimport {\n  faChevronLeft,\n  faChevronRight,\n  faPalette,\n  faFileDownload,\n  faLanguage,\n  faCircleInfo,\n  faPlus,\n  faRuler,\n  faShareNodes,\n  faStream,\n  faUpload\n} from '@fortawesome/free-solid-svg-icons';\n\nimport {\n  FontAwesomeIcon\n} from '@fortawesome/react-fontawesome';\n\nimport {\n  Button,\n  Collapse,\n  CollapsePanelProps,\n  Tooltip\n} from 'antd';\n\nimport ClientConfiguration from 'clientConfig';\n\nimport _toArray from 'lodash/toArray';\nimport { ItemType } from 'rc-collapse/lib/interface';\n\nimport {\n  useTranslation\n} from 'react-i18next';\n\nimport {\n  useMap\n} from '@terrestris/react-util/dist/Hooks/useMap/useMap';\n\nimport useAppDispatch from '../../hooks/useAppDispatch';\nimport useAppSelector from '../../hooks/useAppSelector';\nimport usePlugins from '../../hooks/usePlugins';\nimport useSHOGunAPIClient from '../../hooks/useSHOGunAPIClient';\n\nimport {\n  isToolMenuIntegration\n} from '../../plugin';\n\nimport {\n  show as showAdd\n} from '../../store/addLayerModal';\nimport { setFeatureInfoEnabled } from '../../store/featureInfo';\nimport {\n  UploadTools, setLayerTreeEnabled\n} from '../../store/layerTree';\nimport {\n  setActiveKeys\n} from '../../store/toolMenu';\nimport {\n  show as showUpload\n} from '../../store/uploadDataModal';\n\nimport LanguageSelect from '../LanguageSelector';\nimport Permalink from '../Permalink';\nimport PrintForm from '../PrintForm';\n\nimport Draw from './Draw';\nimport FeatureInfo from './FeatureInfo';\nimport LayerTree from './LayerTree';\n\nimport Measure from './Measure';\nimport './index.less';\n\nexport interface TitleEventEntity {\n  key: string;\n  domEvent: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>;\n}\n\nexport type ToolPanelConfig = {\n  icon: IconDefinition;\n  title: string;\n  wrappedComponent: JSX.Element;\n};\n\nexport type ToolMenuProps = Partial<CollapsePanelProps> & {\n  collapseWidth?: number;\n  minWidth?: number;\n  maxWidth?: number;\n};\n\nexport const ToolMenu: React.FC<ToolMenuProps> = ({\n  collapseWidth = 40,\n  minWidth = 240,\n  maxWidth = 600,\n  ...restProps\n}): JSX.Element => {\n  const {\n    t\n  } = useTranslation();\n  const map = useMap();\n\n  const plugins = usePlugins();\n\n  const dispatch = useAppDispatch();\n  const availableTools = useAppSelector(state => state.toolMenu.availableTools);\n  const activeKeys = useAppSelector(state => state.toolMenu.activeKeys);\n\n  const client = useSHOGunAPIClient();\n  const keycloak = client?.getKeycloak();\n\n  const [collapsed, setCollapsed] = useState<boolean>(false);\n  const [menuTools, setMenuTools] = useState<string[]>([]);\n  const [isResizing, setIsResizing] = useState(false);\n  const [width, setWidth] = useState(320);\n  const [noCollapseWidth, setNoCollapseWidth] = useState(width);\n\n  useEffect(() => {\n    const mobileQuery = window.matchMedia('only screen and (max-width: 450px) and (orientation: portrait),' +\n      'only screen and (max-width: 750px) and (orientation: landscape), only screen and (max-width: 580px)');\n    const mobileNavigatorRegEx = new RegExp('/Mobile|iP(hone|od|ad)|Android|BlackBerry|IEMobile|Kindle' +\n      '|NetFront|Silk-Accelerated|(hpw|web)OS|Fennec|Minimo|Opera M(obi|ini)|Blazer|Dolfin|Dolphin|Skyfire|Zune/');\n    const isMobile = mobileQuery.matches || mobileNavigatorRegEx.test(window.navigator.userAgent);\n\n    if (isMobile) {\n      setCollapsed(true);\n      setWidth(collapseWidth);\n    }\n  }, [collapseWidth]);\n\n  useEffect(() => {\n    if (menuTools.length < 1) {\n      if (availableTools.includes('default')) {\n        setMenuTools([\n          'measure_tools',\n          'draw_tools',\n          'feature_info',\n          'print',\n          'tree',\n          'permalink',\n          'language_selector'\n        ]);\n      } else {\n        setMenuTools(availableTools);\n      }\n    }\n  }, [menuTools, availableTools]);\n\n  useEffect(() => {\n    const exclusiveTools = [\n      'print',\n      'measure_tools',\n      'draw_tools',\n      'feature_info',\n      'tree'\n    ];\n\n    const activeExclusiveTools = exclusiveTools.filter(tool =>\n      activeKeys.includes(tool)\n    );\n\n    if (activeExclusiveTools.length > 1) {\n      const lastExclusiveTool = activeKeys\n        .slice(0, activeKeys.length - 1)\n        .reverse()\n        .find(tool => exclusiveTools.includes(tool));\n\n      if (lastExclusiveTool) {\n        dispatch(\n          setActiveKeys(activeKeys.filter(keys => keys !== lastExclusiveTool))\n        );\n      }\n    }\n\n    dispatch(setFeatureInfoEnabled(activeKeys.includes('feature_info')));\n    dispatch(setLayerTreeEnabled(activeKeys.includes('tree')));\n\n  }, [activeKeys, dispatch]);\n\n  const getToolPanels = (): ItemType[] => {\n    const panels: ItemType[] = [];\n\n    menuTools.forEach((tool: string) => {\n      const toolPanelConfig = getToolPanelConfig(tool);\n\n      if (!toolPanelConfig) {\n        return;\n      }\n\n      const {\n        icon,\n        title,\n        wrappedComponent\n      } = toolPanelConfig;\n\n      panels.push({\n        key: tool,\n        label: (\n          <>\n            {icon ? <FontAwesomeIcon icon={icon} /> : undefined}\n            <span>{title}</span>\n          </>\n        ),\n        children: wrappedComponent\n      });\n    });\n\n    if (plugins) {\n      plugins.forEach(plugin => {\n        if (isToolMenuIntegration(plugin.integration)) {\n          const {\n            key,\n            wrappedComponent: WrappedPluginComponent,\n            integration: {\n              label = 'Plugin',\n              insertionIndex,\n              icon,\n              ...passThroughProps\n            }\n          } = plugin;\n\n          const newItem: ItemType = {\n            key,\n            label: (\n              <>\n                {icon ? <FontAwesomeIcon icon={icon} /> : undefined}\n                <span>{t(label)}</span>\n              </>\n            ),\n            ...passThroughProps,\n            children: <WrappedPluginComponent />\n          };\n\n          panels.splice(insertionIndex ?? 0, 0, newItem);\n        }\n      });\n    }\n    return panels;\n  };\n\n  const activeUploadTools = useAppSelector(state => state.layerTree.activeUploadTools);\n\n  const getToolPanelConfig = (tool: string): ToolPanelConfig | undefined => {\n    switch (tool) {\n      case 'measure_tools':\n        return {\n          icon: faRuler,\n          title: t('ToolMenu.measure'),\n          wrappedComponent: (\n            <Measure\n              showMeasureDistance={\n                availableTools.includes('default') || availableTools.includes('measure_tools_distance')\n              }\n              showMeasureArea={availableTools.includes('default') || availableTools.includes('measure_tools_area')}\n            />\n          )\n        };\n      case 'draw_tools':\n        return {\n          icon: faPalette,\n          title: t('ToolMenu.draw'),\n          wrappedComponent: (\n            <Draw\n              showDrawPoint={availableTools.includes('default') || availableTools.includes('draw_tools_point')}\n              showDrawLine={availableTools.includes('default') || availableTools.includes('draw_tools_line')}\n              showDrawPolygon={availableTools.includes('default') || availableTools.includes('draw_tools_polygon')}\n              showDrawCircle={availableTools.includes('default') || availableTools.includes('draw_tools_circle')}\n              showDrawRectangle={availableTools.includes('default') || availableTools.includes('draw_tools_rectangle')}\n              showDrawAnnotation={\n                availableTools.includes('default') || availableTools.includes('draw_tools_annotation')\n              }\n              showModifyFeatures={availableTools.includes('default') || availableTools.includes('draw_tools_modify')}\n              showUploadFeatures={availableTools.includes('default') || availableTools.includes('draw_tools_upload')}\n              showDownloadFeatures={\n                availableTools.includes('default') || availableTools.includes('draw_tools_download')\n              }\n              showDeleteFeatures={availableTools.includes('default') || availableTools.includes('draw_tools_delete')}\n              showStyleFeatures={availableTools.includes('default') || availableTools.includes('draw_tools_style')}\n            />\n          )\n        };\n      case 'feature_info':\n        return {\n          icon: faCircleInfo,\n          title: t('ToolMenu.featureInfo'),\n          wrappedComponent: (\n            <FeatureInfo />\n          )\n        };\n      case 'print':\n        return {\n          icon: faFileDownload,\n          title: t('ToolMenu.print'),\n          wrappedComponent: map ? (\n            <PrintForm\n              active={activeKeys.includes('print')}\n              layerBlackList={[\n                'react-geo_measure',\n                'hoverVectorLayer'\n              ]}\n            />\n          ) : <></>\n        };\n      case 'tree':\n        return {\n          icon: faStream,\n          title: t('ToolMenu.layertree'),\n          wrappedComponent: (\n            <div className='tree-wrapper'>\n              <LayerTree />\n              {activeUploadTools?.includes(UploadTools.addWMS) && (\n                <Button\n                  className='add-wms-button tool-menu-button'\n                  icon={<FontAwesomeIcon icon={faPlus} />}\n                  onClick={() => dispatch(showAdd())}\n                >\n                  {t('ToolMenu.addWms')}\n                </Button>\n              )\n              }\n              {\n                keycloak && ClientConfiguration.geoserver?.upload?.authorizedRoles?.some(\n                  role => keycloak.hasResourceRole(role, keycloak.clientId)) &&\n                  activeUploadTools?.includes(UploadTools.dataUpload) && (\n                  <Button\n                    className='upload-data-button tool-menu-button'\n                    icon={<FontAwesomeIcon icon={faUpload} />}\n                    onClick={() => dispatch(showUpload())}\n                  >\n                    {t('ToolMenu.uploadData')}\n                  </Button>\n                )\n              }\n            </div>\n          )\n        };\n      case 'permalink':\n        return {\n          icon: faShareNodes,\n          title: t('Permalink.title'),\n          wrappedComponent: <Permalink />\n        };\n      case 'language_selector':\n        return {\n          icon: faLanguage,\n          title: t('ToolMenu.languageSelect'),\n          wrappedComponent: <LanguageSelect />\n        };\n      default:\n        break;\n    }\n  };\n\n  const onMouseDown = useCallback(() => {\n    setIsResizing(true);\n  }, []);\n\n  const onMouseUp = useCallback(() => {\n    setIsResizing(false);\n  }, []);\n\n  const onMouseMove = useCallback((e: MouseEvent) => {\n    if (isResizing && !collapsed) {\n      const offsetLeft = (e.clientX - document.body.offsetLeft);\n      if (offsetLeft > minWidth && offsetLeft < maxWidth) {\n        setWidth(offsetLeft);\n        setNoCollapseWidth(offsetLeft);\n      }\n    }\n  }, [isResizing, collapsed, minWidth, maxWidth]);\n\n  useEffect(() => {\n    document.addEventListener('mousemove', onMouseMove);\n    document.addEventListener('mouseup', onMouseUp);\n\n    return () => {\n      document.removeEventListener('mousemove', onMouseMove);\n      document.removeEventListener('mouseup', onMouseUp);\n    };\n  }, [onMouseMove, onMouseUp]);\n\n  return (\n    <div\n      aria-label=\"tool-menu\"\n      className={`tool-menu ${collapsed ? 'collapsed' : ''}`}\n      style={{width: width} as React.CSSProperties}\n    >\n      <Collapse\n        expandIconPosition='end'\n        activeKey={activeKeys}\n        destroyInactivePanel={true}\n        onChange={(keys: string[] | string) => {\n          setCollapsed(false);\n          dispatch(setActiveKeys(_toArray(keys)));\n          if (collapsed) {\n            setWidth(noCollapseWidth);\n          }\n        }}\n        items={getToolPanels()}\n        {...restProps}\n      />\n      <Tooltip\n        placement={'right'}\n        title={collapsed ? t('ToolMenu.expand') : t('ToolMenu.collapse')}\n      >\n        <Button\n          className=\"collapse-btn\"\n          aria-label=\"collapse-button\"\n          icon={\n            collapsed ?\n              <FontAwesomeIcon icon={faChevronRight} /> :\n              <FontAwesomeIcon icon={faChevronLeft} />\n          }\n          onClick={() => {\n            dispatch(setActiveKeys([]));\n            setCollapsed(!collapsed);\n            if (collapsed){\n              setWidth(noCollapseWidth);\n            } else {\n              setWidth(collapseWidth);\n            }\n          }}\n        />\n      </Tooltip>\n      {!collapsed ? (\n        <div\n          className =\"dynamicWidth\"\n          onMouseDown={onMouseDown}\n          role=\"button\"\n        />\n      ) : <></>}\n    </div>\n  );\n};\n\nexport default ToolMenu;\n","import React, {\n  useState\n} from 'react';\n\nimport {\n  faUpload\n} from '@fortawesome/free-solid-svg-icons';\nimport {\n  FontAwesomeIcon\n} from '@fortawesome/react-fontawesome';\n\nimport {\n  Alert,\n  Modal,\n  ModalProps,\n  Spin,\n  Upload\n} from 'antd';\n\nconst { Dragger } = Upload;\n\nimport {\n  RcFile,\n  UploadChangeParam,\n  UploadFile\n} from 'antd/lib/upload/interface';\n\nimport ClientConfiguration from 'clientConfig';\n\nimport OlLayerGroup from 'ol/layer/Group';\nimport TileLayer from 'ol/layer/Tile';\nimport TileWMS from 'ol/source/TileWMS';\n\nimport {\n  UploadRequestOption\n} from 'rc-upload/lib/interface';\n\nimport {\n  useTranslation\n} from 'react-i18next';\n\nimport {\n  Shapefile\n} from 'shapefile.js';\n\nimport Logger from '@terrestris/base-util/dist/Logger';\n\nimport { MapUtil } from '@terrestris/ol-util/dist/MapUtil/MapUtil';\n\nimport {\n  useMap\n} from '@terrestris/react-util/dist/Hooks/useMap/useMap';\n\nimport Layer from '@terrestris/shogun-util/dist/model/Layer';\nimport SHOGunApplicationUtil from '@terrestris/shogun-util/dist/parser/SHOGunApplicationUtil';\nimport {\n  getBearerTokenHeader\n} from '@terrestris/shogun-util/dist/security/getBearerTokenHeader';\n\nimport useAppDispatch from '../../hooks/useAppDispatch';\nimport useAppSelector from '../../hooks/useAppSelector';\nimport useSHOGunAPIClient from '../../hooks/useSHOGunAPIClient';\nimport {\n  hide\n} from '../../store/uploadDataModal';\n\nimport './index.less';\n\ntype FeatureTypeAttribute = {\n  name: string;\n  minOccurs: number;\n  maxOccurs: number;\n  nillable: boolean;\n  binding?: string | null;\n  length?: number;\n};\n\ntype FeatureTypeAttributes = {\n  attribute: FeatureTypeAttribute[];\n};\n\nexport type LayerUploadOptions = {\n  baseUrl: string;\n  workspace: string;\n  storeName: string;\n  layerName: string;\n  file: RcFile;\n};\n\nexport type LayerUploadResponse = {\n  layerName: string;\n  workspace: string;\n  baseUrl: string;\n};\n\nexport type UploadDataModalProps = Partial<ModalProps>;\n\nexport const UploadDataModal: React.FC<UploadDataModalProps> = ({\n  ...restProps\n}): JSX.Element => {\n  const [uploadError, setUploadError] = useState('');\n  const [uploadSuccess, setUploadSuccess] = useState('');\n  const [isUploading, setIsUploading] = useState(false);\n\n  const isModalVisible = useAppSelector(state => state.uploadDataModal.visible);\n  const user = useAppSelector((state) => state.user);\n\n  const dispatch = useAppDispatch();\n\n  const map = useMap();\n  const client = useSHOGunAPIClient();\n\n  const {\n    t\n  } = useTranslation();\n\n  const closeModal = () => {\n    setUploadError('');\n    setUploadSuccess('');\n    dispatch(hide());\n  };\n\n  const addLayer = (layer: TileLayer<TileWMS>) => {\n    if (!map) {\n      return;\n    }\n\n    const targetFolderName = t('UploadDataModal.uploadedDataFolder');\n    let targetGroup = MapUtil.getLayerByName(map, targetFolderName) as OlLayerGroup;\n\n    if (!targetGroup) {\n      targetGroup = new OlLayerGroup({\n        layers: [],\n        properties: {\n          name: targetFolderName\n        }\n      });\n      const existingGroups = map.getLayerGroup().getLayers();\n      existingGroups.insertAt(existingGroups?.getLength() || 0, targetGroup);\n    }\n\n    if (!targetGroup.getLayers().getArray().includes(layer)) {\n      targetGroup.getLayers().push(layer);\n    }\n  };\n\n  const onBeforeFileUpload = (file: RcFile) => {\n    const maxSize = ClientConfiguration.geoserver?.upload?.limit ?? 200000000;\n    const fileType = file.type;\n    const fileSize = file.size;\n\n    setUploadError('');\n    setUploadSuccess('');\n\n    if (fileSize > maxSize) {\n      setUploadError(t('UploadDataModal.error.maxSize', {\n        maxSize: maxSize / 1000000\n      }));\n\n      return false;\n    }\n\n    const supportedFormats = ['application/zip', 'image/tiff'];\n    if (!supportedFormats.includes(fileType)) {\n      setUploadError(t('UploadDataModal.error.supportedFormats', {\n        supportedFormats: supportedFormats.join(', ')\n      }));\n\n      return false;\n    }\n\n    return true;\n  };\n\n  const uploadGeoTiff = async (options: LayerUploadOptions): Promise<void> => {\n    const {\n      baseUrl,\n      workspace,\n      storeName,\n      layerName,\n      file\n    } = options;\n\n    const coverageStoreUrl = `${baseUrl}/rest/workspaces/${workspace}/coveragestores/` +\n      `${storeName}/file.geotiff?configure=none`;\n\n    const coverageStoreResponse = await fetch(coverageStoreUrl, {\n      method: 'PUT',\n      headers: {\n        ...getBearerTokenHeader(client?.getKeycloak()),\n        'Content-Type': 'image/tiff'\n      },\n      body: file\n    });\n\n    if (!coverageStoreResponse.ok) {\n      throw new Error(t('UploadDataModal.error.general', {\n        fileName: file.name\n      }));\n    }\n\n    const coverageUrl = `${baseUrl}/rest/workspaces/${workspace}/coveragestores/${storeName}/coverages`;\n\n    const coverageResponse = await fetch(coverageUrl, {\n      method: 'POST',\n      headers: {\n        ...getBearerTokenHeader(client?.getKeycloak()),\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        coverage: {\n          enabled: true,\n          name: layerName,\n          nativeName: layerName,\n          title: layerName,\n          keywords: {\n            // eslint-disable-next-line quote-props\n            'string': [\n              'User upload',\n              `Uploaded by ${user.providerDetails?.username}`\n            ]\n          }\n        }\n      })\n    });\n\n    if (!coverageResponse.ok) {\n      throw new Error(t('UploadDataModal.error.general', {\n        fileName: file.name\n      }));\n    }\n  };\n\n  const uploadShapeZip = async (options: LayerUploadOptions): Promise<void> => {\n    const {\n      baseUrl,\n      workspace,\n      storeName,\n      layerName,\n      file\n    } = options;\n\n    const shp = await Shapefile.load(file);\n\n    let featureTypeName = '';\n    const featureTypeAttributes: FeatureTypeAttributes = {\n      attribute: []\n    };\n\n    if (Object.entries(shp).length !== 1) {\n      throw new Error(t('UploadDataModal.error.zipContent'));\n    }\n\n    Object.entries(shp).forEach(([k, v]) => {\n      featureTypeName = k;\n\n      const dbfContent = v.parse('dbf', {\n        properties: false\n      });\n\n      featureTypeAttributes.attribute = dbfContent.fields.map(field => ({\n        name: field.name,\n        minOccurs: 0,\n        maxOccurs: 1,\n        nillable: true,\n        binding: getAttributeType(field.type),\n        length: field.length\n      }));\n\n      const shxContent = v.parse('shx');\n\n      featureTypeAttributes.attribute.push({\n        name: 'the_geom',\n        minOccurs: 0,\n        maxOccurs: 1,\n        nillable: true,\n        binding: getGeometryType(shxContent.header.type)\n      });\n    });\n\n    const url = `${baseUrl}/rest/workspaces/${workspace}/datastores/` +\n      `${storeName}/file.shp?configure=none`;\n\n    const response = await fetch(url, {\n      method: 'PUT',\n      headers: {\n        ...getBearerTokenHeader(client?.getKeycloak()),\n        'Content-Type': 'application/zip'\n      },\n      body: file\n    });\n\n    if (!response.ok) {\n      throw new Error(t('UploadDataModal.error.general', {\n        fileName: file.name\n      }));\n    }\n\n    const featureTypeUrl = `${baseUrl}/rest/workspaces/${workspace}/datastores/${storeName}/featuretypes`;\n\n    const featureTypeResponse = await fetch(featureTypeUrl, {\n      method: 'POST',\n      headers: {\n        ...getBearerTokenHeader(client?.getKeycloak()),\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        featureType: {\n          enabled: true,\n          name: layerName,\n          nativeName: featureTypeName,\n          title: layerName,\n          attributes: featureTypeAttributes,\n          keywords: {\n            // eslint-disable-next-line quote-props\n            'string': [\n              'User upload',\n              `Uploaded by ${user.providerDetails?.username}`\n            ]\n          }\n        }\n      })\n    });\n\n    if (!featureTypeResponse.ok) {\n      throw new Error(t('UploadDataModal.error.general', {\n        fileName: file.name\n      }));\n    }\n  };\n\n  const onFileUploadAction = async (options: UploadRequestOption<LayerUploadResponse>) => {\n    const {\n      onError,\n      onSuccess,\n      file\n    } = options;\n\n    const splittedFileName = (file as RcFile).name.split('.');\n    const fileType = (file as RcFile).type;\n    const geoServerBaseUrl = ClientConfiguration.geoserver?.base ?? '/geoserver';\n    const workspace = ClientConfiguration.geoserver?.upload?.workspace ?? 'SHOGUN';\n    const layerName = `${splittedFileName[0]}_${Date.now()}`.toUpperCase();\n\n    const uploadData = {\n      file: file as RcFile,\n      baseUrl: geoServerBaseUrl,\n      workspace: workspace,\n      storeName: layerName,\n      layerName: layerName\n    };\n\n    try {\n      if (fileType === 'image/tiff') {\n        await uploadGeoTiff(uploadData);\n      }\n\n      if (fileType === 'application/zip') {\n        await uploadShapeZip(uploadData);\n      }\n\n      if (onSuccess) {\n        onSuccess({\n          baseUrl: geoServerBaseUrl,\n          workspace: workspace,\n          layerName: layerName\n        });\n      }\n    } catch (error) {\n      if (onError) {\n        onError({\n          name: 'UploadError',\n          message: (error instanceof Error) ? error.message : t('UploadDataModal.error.general', {\n            fileName: (file as RcFile).name\n          })\n        });\n      }\n    }\n  };\n\n  const onFileUploadChange = async (info: UploadChangeParam<UploadFile<LayerUploadResponse>>) => {\n    const file = info.file;\n\n    if (file.status === 'uploading') {\n      setIsUploading(true);\n    }\n\n    if (file.status === 'done') {\n      if (!client || !file.response) {\n        return;\n      }\n\n      const layerConfig: Layer = {\n        name: file.response.layerName,\n        type: 'TILEWMS',\n        clientConfig: {\n          hoverable: true\n        },\n        sourceConfig: {\n          url: `${file.response.baseUrl}/ows?`,\n          layerNames: `${file.response.workspace}:${file.response.layerName}`,\n          useBearerToken: true\n        }\n      };\n\n      const parser = new SHOGunApplicationUtil({\n        client\n      });\n\n      const olLayer = parser.parseTileLayer(layerConfig);\n      olLayer.set('layerConfig', layerConfig);\n      olLayer.set('isUploadedLayer', true);\n      olLayer.set('groupName', t('UploadDataModal.uploadedDataFolder'));\n      addLayer(olLayer);\n\n      setUploadSuccess(t('UploadDataModal.success', {\n        fileName: file.name,\n        layerName: file.response.layerName\n      }));\n\n      setIsUploading(false);\n    } else if (file.status === 'error') {\n      setIsUploading(false);\n\n      Logger.error(file.error);\n\n      if (file.error && file.error.message) {\n        setUploadError(file.error.message);\n      } else {\n        setUploadError(t('UploadDataModal.error.general', {\n          fileName: file.name\n        }));\n      }\n    }\n  };\n\n  const getGeometryType = (type: number) => {\n    const types: Record<number, string | null> = {\n      0: null, // Null\n      1: 'org.locationtech.jts.geom.Point', // Point\n      3: 'org.locationtech.jts.geom.LineString', // Polyline\n      5: 'org.locationtech.jts.geom.Polygon', // Polygon\n      8: 'org.locationtech.jts.geom.MultiPoint', // MultiPoint\n      11: 'org.locationtech.jts.geom.Point', // PointZ\n      13: 'org.locationtech.jts.geom.LineString', // PolylineZ\n      15: 'org.locationtech.jts.geom.Polygon', // PolygonZ\n      18: 'org.locationtech.jts.geom.MultiPoint', // MultiPointZ\n      21: 'org.locationtech.jts.geom.Point', // PointM\n      23: 'org.locationtech.jts.geom.LineString', // PolylineM\n      25: 'org.locationtech.jts.geom.Polygon', // PolygonM\n      28: 'org.locationtech.jts.geom.MultiPoint', // MultiPointM\n      31: null // MultiPatch\n    };\n\n    return types[type];\n  };\n\n  const getAttributeType = (dbfFieldType: string) => {\n    switch (dbfFieldType) {\n      case 'C': // Character\n        return 'java.lang.String';\n      case 'D': // Date\n        return 'java.util.Date';\n      case 'N': // Numeric\n        return 'java.lang.Long';\n      case 'F': // Floating point\n        return 'java.lang.Double';\n      case 'L': // Logical\n        return 'java.lang.Boolean';\n      case 'M': // Memo\n        return null;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <Modal\n      className=\"upload-data-modal\"\n      title={t('UploadDataModal.title')}\n      open={isModalVisible}\n      onCancel={closeModal}\n      width={600}\n      footer={false}\n      {...restProps}\n    >\n      {\n        uploadSuccess && (\n          <Alert\n            message={uploadSuccess}\n            closable={true}\n            type=\"success\"\n          />\n        )\n      }\n\n      {\n        uploadError && (\n          <Alert\n            message={uploadError}\n            closable={true}\n            type=\"error\"\n          />\n        )\n      }\n\n      <Spin\n        spinning={isUploading}\n      >\n        <Dragger\n          customRequest={onFileUploadAction}\n          accept='image/tiff,application/zip'\n          maxCount={1}\n          showUploadList={false}\n          beforeUpload={onBeforeFileUpload}\n          onChange={onFileUploadChange}\n        >\n          <p className=\"ant-upload-drag-icon\">\n            <FontAwesomeIcon\n              icon={faUpload}\n            />\n          </p>\n          <p className=\"ant-upload-text\">\n            {t('UploadDataModal.description')}\n          </p>\n          <p className=\"ant-upload-hint\">\n            {t('UploadDataModal.hint')}\n          </p>\n        </Dragger>\n      </Spin>\n    </Modal>\n  );\n};\n\nexport default UploadDataModal;\n","import _isEmpty from 'lodash/isEmpty';\n\nimport BaseLayer from 'ol/layer/Base';\nimport OlLayerGroup from 'ol/layer/Group';\n\nimport OlLayerImage from 'ol/layer/Image';\nimport OlLayerTile from 'ol/layer/Tile';\n\nimport {\n  useTranslation\n} from 'react-i18next';\n\nimport Logger from '@terrestris/base-util/dist/Logger';\n\nimport { MapUtil } from '@terrestris/ol-util/dist/MapUtil/MapUtil';\nimport { PermalinkUtil } from '@terrestris/ol-util/dist/PermalinkUtil/PermalinkUtil';\n\nimport {\n  useMap\n} from '@terrestris/react-util/dist/Hooks/useMap/useMap';\n\nimport Layer from '@terrestris/shogun-util/dist/model/Layer';\nimport SHOGunApplicationUtil from '@terrestris/shogun-util/dist/parser/SHOGunApplicationUtil';\n\nimport useQueryParams from './useQueryParams';\nimport useSHOGunAPIClient from './useSHOGunAPIClient';\n\nexport const useRestoreTransientLayers = async () => {\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const map = useMap();\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const client = useSHOGunAPIClient();\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const queryParams = useQueryParams();\n  const {\n    t\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  } = useTranslation();\n\n  const layers = queryParams.get('layers');\n\n  if (!map) {\n    return;\n  }\n\n  const identifier = (l: BaseLayer) => l.get('name');\n  const filter = (l: BaseLayer) => (l instanceof OlLayerTile || l instanceof OlLayerImage);\n  const configString = PermalinkUtil.applyLink(map, ';', identifier, filter);\n\n  if (!configString) {\n    return;\n  }\n\n  const addLayerGroup = (name: string) => {\n    const layerGroup = new OlLayerGroup({\n      layers: []\n    });\n    layerGroup.set('name', name);\n    const existingGroups = map.getLayerGroup().getLayers();\n    existingGroups.insertAt(existingGroups?.getLength() || 0, layerGroup);\n\n    return layerGroup;\n  };\n\n  try {\n    const config = JSON.parse(configString);\n\n    if (!client) {\n      throw new Error('Client is not available');\n    }\n\n    const parser = new SHOGunApplicationUtil({\n      client\n    });\n\n    for (const cfg of config) {\n      if (!_isEmpty(cfg?.layerConfig)) {\n        const layerConfig: Layer = cfg.layerConfig;\n        const olLayer = await parser.parseLayer(layerConfig);\n\n        if (!olLayer) {\n          continue;\n        }\n\n        if (cfg.isExternalLayer) {\n          olLayer.set('isExternalLayer', cfg.isExternalLayer);\n        }\n\n        if (cfg.isUploadedLayer) {\n          olLayer.set('isUploadedLayer', cfg.isUploadedLayer);\n        }\n\n        olLayer.set('groupName', cfg.groupName);\n        olLayer.set('layerConfig', cfg.layerConfig);\n\n        olLayer.setVisible(!!layers?.split(';').some(l => l === layerConfig.name));\n\n        if (!(olLayer.get('isExternalLayer') || olLayer.get('isUploadedLayer'))) {\n          continue;\n        }\n\n        let targetGroup: OlLayerGroup;\n\n        if (olLayer.get('groupName')) {\n          // handle custom layer group\n          targetGroup = MapUtil.getLayerByName(map, olLayer.get('groupName')) as OlLayerGroup;\n\n          if (!targetGroup) {\n            targetGroup = addLayerGroup(olLayer.get('groupName'));\n          }\n        } else {\n          // handle default layer group for external layers (external and uploaded layers)\n          targetGroup = MapUtil.getLayersByProperty(map, 'isExternalLayerGroup', true)?.[0] as OlLayerGroup;\n          if (!targetGroup) {\n            targetGroup = addLayerGroup(t('AddLayerModal.externalWmsFolder'));\n            targetGroup.set('isExternalLayerGroup', true);\n          }\n        }\n\n        if (!MapUtil.getLayerByName(map, olLayer.get('name'))) {\n          targetGroup.getLayers().push(olLayer);\n        }\n      }\n    }\n  } catch (error) {\n    Logger.error(error);\n  }\n};\n\nexport default useRestoreTransientLayers;\n","import React from 'react';\n\nexport default function useQueryParams() {\n  const {\n    search\n  } = window.location;\n  return React.useMemo(() => new URLSearchParams(search), [search]);\n}\n","import React, {\n  useEffect\n} from 'react';\n\nimport AddLayerModal from './components/AddLayerModal/index';\nimport BasicMapComponent from './components/BasicMapComponent';\nimport CookieBanner from './components/CookieBanner';\nimport EditFeatureDrawer from './components/EditFeatureDrawer';\nimport Footer from './components/Footer';\nimport Header from './components/Header';\nimport LayerDetailsModal from './components/LayerDetailsModal';\nimport MapToolbar from './components/MapToolbar';\nimport StylingDrawer from './components/StylingDrawer';\nimport ToolMenu from './components/ToolMenu';\nimport UploadDataModal from './components/UploadDataModal';\n\nimport useRestoreTransientLayers from './hooks/useRestoreTransientLayers';\n\nimport './App.less';\n\nexport type AppProps = React.ComponentProps<'div'>;\n\nexport const App: React.FC<AppProps> = ({\n  ...restProps\n}): JSX.Element => {\n\n  useRestoreTransientLayers();\n\n  useEffect(() => {\n    const loadingMask = document.querySelectorAll('.loadmask')[0];\n\n    if (loadingMask) {\n      loadingMask.classList.add('loadmask-hidden');\n    }\n  }, []);\n\n  return (\n    <div\n      className=\"App\"\n      {...restProps}\n    >\n      <Header />\n      <BasicMapComponent />\n      <ToolMenu />\n      <MapToolbar />\n      <Footer />\n      <CookieBanner />\n      <AddLayerModal />\n      <UploadDataModal />\n      <EditFeatureDrawer />\n      <LayerDetailsModal />\n      <StylingDrawer />\n    </div>\n  );\n};\n\nexport default App;\n"],"names":["useDispatch","useAppSelector","useSelector","restProps","_useState","loading","setLoading","_useState1","layers","setLayers","_useState2","selectedRowKeys","setSelectedRowKeys","_useState3","validationStatus","setValidationStatus","_useState4","url","setUrl","_useState5","sanitizedUrl","setSanitizedUrl","_useState6","version","setVersion","isModalVisible","state","dispatch","useAppDispatch","map","useMap","t","useTranslation","useEffect","UrlUtil","getCapabilities","capabilities","error","CapabilitiesUtil","notification","Logger","closeModal","hide","addLayers","layersToAdd","targetFolderName","targetGroup","MapUtil","targetGroupAvailableInMap","OlLayerGroup","layerToAdd","ImageLayer","layerUrl","_layerToAdd_getSource1","TileLayer","_layerToAdd_getSource","_layerToAdd_getSource2","urls","undefined","layerConfig","existingGroups","Modal","SimpleButton","layer","getUid","Input","evt","value","Select","Typography","Table","text","record","usePlugins","useContext","PluginContext","plugins","_useTranslation","i18n","targetGroups","oldName","changeEvent","OlObjectEvent","pluginComponents","plugin","pluginIntegration","key","WrappedPluginComponent","MapComponent","getPlugin","cookiePlugin","CookieConsent","client","useSHOGunAPIClient","isFailed","xmlDoc","errorTagNameCandidates","candidate","useCallback","opts","_opts_layer","source","defaultHeaders","response","responseText","OlSourceImageWMS","OlSourceTileWMS","fetch","getBearerTokenHeader","XMLSerializer","Error","parser","DOMParser","readOnly","fieldConfig","passThroughProps","showPreview","file","fileName","fileUrl","anchor","blob","objectUrl","_isNil","document","result","window","removeFile","_file_response","uuid","getCsrfTokenHeader","a","Upload","Button","Promise","onSuccess","onError","reader","FileReader","e","initialFileList","mediaPreviewVisible","setMediaPreviewVisible","previewImage","setPreviewImage","defaultFileListWithBlob","setDefaultFileListWithBlob","imageUrlToBase64","useConvertImageUrl","useAsyncEffect","fileList","val","_val_response","convertDefaultFileList","showImagePreview","FontAwesomeIcon","faPlus","feature","formConfig","form","_useForm","Form","fieldCfg","_fieldCfg_displayName","_fieldCfg_displayName1","DisplayField","referenceConfig","isModalOpen","setIsModalOpen","selectedFeature","setSelectedFeature","resolvePlaceholder","regex","match","resolved","columns","onDetailsClick","faBoxOpen","OlFeature","onCancel","getDataSource","parsedValue","JSON","Array","getModalTitle","placeholder","FeatureInfoForm","lowerCandidate","_uploadValue__response_fileType","dataType","valueMap","format","suffix","urlDisplayValue","displayValue","Checkbox","Number","Intl","isMoment","moment","isString","protocols","protocol","uploadValue","getUpload","v","isFileConfig","ImageUpload","FileUpload","isJson","ReferenceTable","parentForm","propertyName","tablePropertyName","onChange","_record_defaultPropertyName","b","valA","valB","_","faEdit","Popconfirm","onConfirmDelete","faTrash","parentFormValues","deleteCandidates","_cloneDeep","deleteIdx","deleteCandidate","updateReferences","formValues","existingReferences","targetIdx","existingReference","onOk","valueCopy","Object","_v_key","cfg","parsedDate","isUpload","upload","_upload_response","el","EditFeatureForm","_isObject","applyFormDirty","formDirty","createReadOnlyComponent","createFieldComponent","DatePicker","InputNumber","Switch","_fieldCfg_fieldProps","EditReferenceTable","referenceTableConfig","onValuesChange","changedValues","setFormDirty","_debounce","field","formItemProps","isGeometryType","propertyType","geometryTypes","cacheKey","_layer_getSource","typeName","describeFeatureTypeCache","cacheEntry","params","responseJson","sessionStorage","executeWfsDescribeFeatureType","useExecuteWfsDescribeFeatureType","allowedEditMode","cleanFormValues","stringify","_iteratorError","cleanedValue","isReadOnly","_cfg_children","child","_value__response_fileType","filePath","fileInfoList","_val_response1","_val_response2","_val_response3","_val_response4","_describeFeatureType_featureTypes__properties","_opts_layer_getSource","inserts","updates","deletes","describeFeatureType","geomProperty","overallUpdateMode","_feature_getGeometry","feat","geometry","_geomProperty_name","geomPropName","_opts_form","updateMode","transactionOpts","transaction","rootNode","lockId","lockIdValue","property","isEmpty","OlFormatWFS","ClientConfiguration","open","children","_document_querySelectorAll_","Drawer","getComputedStyle","featureRequest","OlFormatFilter","Element","alignment","className","baseClassName","finalClassName","_editHistory_current_past","_editHistory_current_future","historyLength","editHistory","useRef","editLayer","setEditLayer","setRevision","selected","setSelected","gjFormat","useMemo","OlFormatGeoJson","DigitizeUtil","isModified","_editLayer_getSource","olFeat","r","isEmptyOlExtent","updateRevision","features","clone","btnTooltipProps","Toolbar","ToggleGroup","_evt","DrawButton","faPencil","existingFeature","e2","ModifyButton","faDrawPolygon","DeleteButton","faUndo","editSource","previousSource","_isEmpty","nextSource","tabConfig","initialValues","items","config","idx","Tabs","writeWfsTransaction","useWriteWfsTransaction","executeWfsTransaction","useExecuteWfsTransaction","olFeature","isWmsLayer","OlFormatGeoJSON","_editLayer_getSource1","faRotateLeft","loadComplete","saveCompleted","setSaveCompleted","onClick","error1","setTimeout","faFloppyDisk","FeedbackIcon","onSaveSuccess","onSaveError","onDeleteSuccess","onDeleteError","ResetButton","SaveButton","executeGetFeature","useExecuteGetFeature","setTabConfig","setInitialValues","errorMsg","setErrorMsg","reloadFeature","id","root","filter","resourceId","updatedFeatures","setFeature","update","editFormConfig","properties","structuredClone","tabConfigs","_tabConfigs__children","_tabConfigs__children1","_tabConfigs__children2","parsedJson","tabCfg","_tabCfg_children","formCfg","_fileList__response_fileType","isImageFile","thumbUrl","formatErrorMessage","collectedFieldErrors","errorFields","line","index","React","EditFeatureGeometryToolbar","Alert","EditFeatureToolbar","_featureId_item","idString","featId","EditFeatureTabs","writeWfsLockFeature","featureId","featureProperties","parseInt","idProperty","lockFeatureDoc","queryElement","filterElement","isEqualToElement","valueReferenceElement","valueReferenceValue","literalElement","literalValue","transactionLockFailed","onFailure","onSingleClick","coords","viewResolution","featureCollection","onPointerMove","data","Uint8ClampedArray","hit","onLockSuccess","onLockError","onCreate","executeWfsLockFeature","useExecuteWfsLockFeature","useGetFeatureInfo","getGeometryType","onCreateClick","geomType","setLayer","isFeatureLocked","setIsFeatureLocked","drawerTitle","setDrawerTitle","isDrawerOpen","layerId","olLayer","releaseLock","closeDrawer","hideEditFeatureDrawer","reset","MapDrawer","EditFeatureSwitch","EditFeatureFullForm","useClientVersion","PROJECT_VERSION","ApplicationInfo","Opener","opener","appInfo","logoPath","appDescription","isVisible","setIsVisible","toggleVisibility","Statistic","legalInformation","insertPlugins","itemPosition","isFooterIntegration","_plugin_integration","_plugin_integration_insertionIndex","control","OlControlScaleLine","OlControlMousePosition","createStringXY","Divider","ScaleCombo","Tooltip","defaultClassName","faCircleQuestion","viewBox","_ClientConfiguration_search_nominatimUrl","geoJsonFormat","nFeats","executeNominatimSearch","createNominatimSearchFunction","f","nResults","generateSearchQuery","searchParts","subQueries","part","searchValue","parts","s","searchQueries","l","_groupBy","_l_get","featureTypeQuery","featureTypeParts","layerNames","layerList","_l_getSource_getParams","layerName","query","_opts_rowsPerQuery","_opts_queryParser","solrQueryConfig","_opts_coreName","_opts_tagPre","_opts_tagPost","_opts_requireFieldMatch","isFulfilled","p","isRejected","executeSolrQuery","useExecuteSolrQuery","replaceTemplates","template","token","_data_token","getFeatureTitle","dsResult","highlightResult","searchConfig","blacklistedAttributes","title","filteredHighlightKeys","highlightValue","propKey","_dsResult_propKey","propValue","_ClientConfiguration_search_solrBasePath","_ClientConfiguration_search1","solrBasePath","queriesPerLayer","promises","queryPerLayer","_ClientConfiguration_search_solrQueryConfig","_ClientConfiguration_search_solrQueryConfig1","_ClientConfiguration_search4","_ClientConfiguration_search5","_ClientConfiguration_search_solrQueryConfig2","_ClientConfiguration_search_solrQueryConfig3","_ClientConfiguration_search_solrQueryConfig4","results","fulfilledResponses","dataResults","hlResults","wktFormat","solrResults","categories","sarchableLayers","resultsWithLayerName","generateSolrQuery","settled","res","rejectedResponses","sR","_sR_value_response","sr","_sr_value","OlFormatWKT","_res_category","_sarchableLayers_filter_find","layerTitle","_result_featureType","category","_dsResult_geometry","_dsResult_featureType","ftName","_dsResult_featureType1","searchableLayers","searchableLayer","wfsResults","_iteratorError1","attr","like","or","transformExtent","i","fulfilledResponse","_ClientConfiguration_search_defaultUseViewBox","geocoderSearchEngine","dataSearchEngine","clickAwayRef","isGeocoderEnabled","setIsGeocoderEnabled","isDataSearchEnabled","setIsDataSearchEnabled","useViewBox","setUseViewBox","setSearchValue","resultsVisible","setResultsVisible","settingsVisible","setSettingsVisible","_useState7","searchResults","setSearchResults","handleClickAway","target","settingsMenu","menu","performSearch","_ClientConfiguration_search_minChars","minChars","_map_getView","mapViewProjection","extent","updatedResults","results1","resetSearch","allEmpty","_ClientConfiguration_search_delay","timeout","clearTimeout","actionsCreator","item","layerStyle","OlStyle","OlStyleStroke","OlStyleFill","OlStyleCircle","Space","event","SearchOutlined","LoadingOutlined","Dropdown","SettingOutlined","resultRenderer","numTotal","Empty","activateLayer","_item_feature","PermalinkUtil","zoomOffsetOnClick","_item_feature_getGeometry","_toolMenuElement__clientWidth","toolMenuWidth","padding","SearchResultsPanel","_ClientConfiguration_search","useNominatim","useSolr","useWfs","wfsSearchEngine","useWfsSearchEngine","solrSearchEngine","useSolrSearchEngine","nominatimSearchEngine","useNominatimSearchEngine","MultiSearch","getGeocoderSearchEngine","getGravatarUrl","email","size","rating","defaultImage","force","lowerCaseEmail","hash","md5","imageSrc","userMenu","userName","style","_className","getInitials","_isString","_part_","getUserMenu","Avatar","_user_providerDetails_username","_user_providerDetails_firstName","_user_providerDetails_lastName","_keycloak_tokenParsed_resource_access_account","username","divider","settings","logout","accountRoles","_user_providerDetails_email","loginUrl","setLoginUrl","keycloak","user","getLoginUrl","faSignIn","UserChip","faAngleDown","faUserCog","faSignOut","hasUserManagementAccess","userMenuVisible","isHeaderIntegration","SearchField","getDocsButton","DocumentationButton","_ClientConfiguration_keycloak","UserMenu","errorMessage","setErrorMessage","layerConfiguration","setLayerConfiguration","getLayerConfiguration","Spin","setCapabilities","getLayerName","getCapabilitiesUrl","getCapabilitiesLayer","_capabilities_Capability_Layer","getBBox","lay","getMinScale","getMaxScale","getAbstract","getServiceAbstract","_capabilities_Service","getContact","_capabilities_Service_ContactInformation","getLayerTitle","getAccessConstraints","configurationVisible","setConfigurationVisible","OlLayer","FileTextOutlined","hideLayerDetailsModal","setDetailsLayer","LayerDetails","LayerConfiguration","geolocationButtonPressed","setGeolocationButtonPressed","mapToolbarVisible","stylingDrawerVisibility","editFeatureDrawerOpen","drawerOpen","ZoomButton","faMinus","GeoLocationButton","faLocation","faLocationPin","defaultStyle","setStyle","olParser","OlParser","drawVectorLayer","parseStyles","olStylePolygon","olStyleLineString","olStylePoint","olStyleText","rule","newStyle","olStyle","drawLayerStyleFunction","resolution","geometryType","CardStyle","isStylingDrawerVisible","setStylingDrawerVisibility","StylingComponent","Option","supportedLanguages","lang","supportedLanguage","layerAttributes","initialPermalink","permalink","setPermalink","mailBody","eventKeys","identifierFunction","filterFunction","updatePermalink","updateLayerConfig","externalLayers","externalLayer","registerLayerCallback","layerGroup","layersInGroup","layerInGroup","LayerGroup","eventKeyVisibility","eventKeyOpacity","listenerKeyCenter","listenerKeyResolution","unByKey","WhatsAppOutlined","whatsAppUrl","URL","MailOutlined","mailToUrl","CopyOutlined","copy","message","SHOGunMapFishPrintV3WMSSerializer","MapFishPrintV3WMSSerializer","serialized","optsToApply","MapFishPrintV3TiledWMSSerializer","maxLength","addCustomParam","printManager","onValueChange","layout","setLayout","prevLayoutRef","outputFormats","outputFormat","setOutputFormat","setResolution","d","scale","setScale","updateScale","pmScale","transformInteraction","MapFishPrintV3Manager","Shared","customParams","_source_getParams","LAYERS","VERSION","FORMAT","queryParams","encodeURIComponent","_printManager_getLayouts_","active","customPrintScales","layerBlackList","_Form_useForm","currentLanguageCode","customMapParams","printApp","setPrintManager","layerFilter","legendFilter","notBlacklisted","notHidden","visible","printableLayer","getPrintableLayers","printLayer","getAttributions","manager","extentLayer","allAttributions","_layer_getSource1","currentLayerAttribution","LayerUtil","initializePrintManager","_ClientConfiguration_print_url","_map_getView_getResolutions_map_filter","pManagerOpts","pManager","_pManager_getLayouts_","apps","_map_getView_getProjection","units","MapFishPrintV3StamenSerializer","MapFishPrintV3GeoJsonSerializer","MapFishPrintV3OSMSerializer","MapFishPrintV3WMTSSerializer","MapFishPrintV3XYZSerializer","SHOGunMapFishPrintV3TiledWMSSerializer","onDownloadClick","downloadUrl","CustomFieldInput","LayoutSelect","ScaleSelect","ResolutionSelect","OutputFormatSelect","faDownload","keyName","options","getFieldsValue","fields","filtered","AutoComplete","o","isFormValid","setIsFormValid","availableFeatureCollectionAttributes","setAvailableFeatureCollectionAttributes","availableFeatureAttributes","setAvailableFeatureAttributes","contextHolder","_notification_useNotification","updateAvailableFeatureAttributes","_fields_fields","currentKeys","_field_name","_digitizeLayer_getSource","formProperties","OlGeometry","digitizedFeatures","featureCollectionAttributes","Set","prop","remove","rmFn","name","getFormItems","AttributionRow","faMinusSquare","Row","input","changedFields","add","confirm","digitizeLayer","ExclamationCircleOutlined","_layers__getSource","Dragger","footer","width","isLoading","setIsLoading","importError","setImportError","supportedFileExtensions","supportedFormats","onSuccessUpload","onErrorUpload","File","fileReader","err","ext","fileType","fileExtension","info","status","digitizeLayerSource","faUpload","drawerVisibilty","faPaintBrush","showDrawPoint","showDrawLine","showDrawPolygon","showDrawCircle","showDrawRectangle","showDrawAnnotation","showModifyFeatures","showUploadFeatures","showDeleteFeatures","selectedModifyFeature","setSelectedModifyFeature","selectedButton","setSelectedButton","isImportDataModalOpen","setIsImportDataModalOpen","onToggleChange","onModifyFeatureSelect","onCloseImportDataModal","faCircle","faGripLines","faShapes","faCircleNotch","faSquare","faFont","StylingButton","faPenToSquare","faEraser","DeleteAllButton","ImportDataModal","clonedFeatures","mapProjection","_clonedFeature_getGeometry","clonedFeature","fileToDownload","Blob","GeoJSON","link","AttributionDrawer","initVectorLayer","fill","stroke","featureStyle","OlSourceVector","OlLayerVector","deinitVectorLayer","vectorLayer","exportFilter","activeCopyTools","isEditButtonVisible","isLayerEditable","Pagination","geojsonFeatureString","geojsonFeature","setLayerId","showEditFeatureDrawer","CopyTools","selectedFeatureClone","propertyEntries","filteredPropertyEntries","faClipboardCheck","props","_clone","faClipboardList","currentPage","setCurrentPage","activeKey","setActiveKey","vectorLayerName","useHighlightVectorLayer","_vectorLayer_getSource","_vectorLayer_getSource1","PaginationToolbar","conf","page","setBlacklistedAttributes","attributeFilter","PropertyGrid","queryLayers","setQueryLayers","activeTabKey","setActiveTabKey","featureInfoEnabled","OlLayerImage","OlLayerTile","updateQueryLayers","layerCandidates","mapLayers","changeActiveKey","findMapLayerIndex","allLayers","unqualifiedMapLayerName","getUnqualifiedLayerName","unqualifiedLayerName","CoordinateInfo","coordinateInfoState","featureLayerResult","groupBy","featureLayerResults","pluginRendererAvailable","flr","mapLayerIndex","mapLayer","isFeatureInfoIntegration","FeatureInfoTabs","FeatureInfoPropertyGrid","grouped","mapped","mapValues","g","serializedFeatures","feats","setSelectedFeatures","setValue","min","setMin","max","setMax","marks","setMarks","timeValues","dimension","m","nearest","NaN","diff","faClock","TimeSlider","_layer_get","visibleLegendsIds","setVisibleLegendsIds","extentLoading","setExtentLoading","downloadConfig","metadataVisible","zoomToLayerExtent","getParentLayerGroups","getAllLayerGroups","layerGroups","removeLayer","parentGroups","parentGroup","removeExternalLayer","externalLayerGroup","uploadedLayerGroup","downloadLayer","dropdownMenuItems","legendVisible","downloadItems","dlConfig","_dlConfig_formatName","encodeURI","decodeURI","legendId","newLegendIds","setLayerDetailsLayer","showLayerDetailsModal","faEllipsisV","_useAppSelector","_useAppSelector1","initialLayersUid","showLegendsState","layerIconsVisible","layerTileLoadCounter","setLayerTileLoadCounter","mapScale","setMapScale","registerTileLoadHandler","tileLoadStartListener","tileLoadEndListener","checkListeners","activeLayers","legendRequestExtraParams","legendRequestHeaders","onMapMoveEnd","mapView","unit","OlMapEvent","counter","uid","percent","Math","RgLayerTree","_layerTileLoadCounter_getUid","LoadingIndicator","faMagnifyingGlass","faCircleInfo","faPen","LayerTreeContextMenu","LayerTransparencySlider","WmsTimeSlider","Legend","showMeasureDistance","showMeasureArea","MeasureButton","faPenRuler","panels","collapseWidth","minWidth","maxWidth","availableTools","activeKeys","collapsed","setCollapsed","menuTools","setMenuTools","isResizing","setIsResizing","setWidth","noCollapseWidth","setNoCollapseWidth","mobileQuery","mobileNavigatorRegEx","RegExp","exclusiveTools","activeExclusiveTools","tool","lastExclusiveTool","setActiveKeys","keys","setFeatureInfoEnabled","setLayerTreeEnabled","activeUploadTools","getToolPanelConfig","faRuler","Measure","faPalette","Draw","FeatureInfo","faFileDownload","PrintForm","_ClientConfiguration_geoserver_upload_authorizedRoles","faStream","LayerTree","UploadTools","showAdd","role","showUpload","faShareNodes","Permalink","faLanguage","LanguageSelect","onMouseDown","onMouseUp","onMouseMove","offsetLeft","Collapse","_toArray","toolPanelConfig","icon","wrappedComponent","label","insertionIndex","newItem","faChevronRight","faChevronLeft","uploadError","setUploadError","uploadSuccess","setUploadSuccess","isUploading","setIsUploading","addLayer","uploadGeoTiff","_user_providerDetails","baseUrl","workspace","storeName","coverageStoreResponse","coverageResponse","uploadShapeZip","shp","featureTypeName","featureTypeAttributes","Shapefile","k","dbfContent","getAttributeType","shxContent","featureTypeResponse","onFileUploadAction","_ClientConfiguration_geoserver_base","_ClientConfiguration_geoserver_upload_workspace","splittedFileName","geoServerBaseUrl","uploadData","Date","onFileUploadChange","SHOGunApplicationUtil","type","types","dbfFieldType","_ClientConfiguration_geoserver_upload_limit","maxSize","fileSize","useRestoreTransientLayers","identifier","configString","addLayerGroup","search","URLSearchParams","_MapUtil_getLayersByProperty","App","loadingMask","Header","BasicMapComponent","ToolMenu","MapToolbar","Footer","CookieBanner","AddLayerModal","UploadDataModal","EditFeatureDrawer","LayerDetailsModal","StylingDrawer"],"mappings":"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"}