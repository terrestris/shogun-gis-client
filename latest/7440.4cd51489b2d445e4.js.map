{"version":3,"file":"7440.4cd51489b2d445e4.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/ol/size.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/style/Image.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/style/RegularShape.js"],"sourcesContent":["/**\n * @module ol/size\n */\n\n/**\n * An array of numbers representing a size: `[width, height]`.\n * @typedef {Array<number>} Size\n * @api\n */\n\n/**\n * Returns a buffered size.\n * @param {Size} size Size.\n * @param {number} num The amount by which to buffer.\n * @param {Size} [dest] Optional reusable size array.\n * @return {Size} The buffered size.\n */\nexport function buffer(size, num, dest) {\n  if (dest === undefined) {\n    dest = [0, 0];\n  }\n  dest[0] = size[0] + 2 * num;\n  dest[1] = size[1] + 2 * num;\n  return dest;\n}\n\n/**\n * Determines if a size has a positive area.\n * @param {Size} size The size to test.\n * @return {boolean} The size has a positive area.\n */\nexport function hasArea(size) {\n  return size[0] > 0 && size[1] > 0;\n}\n\n/**\n * Returns a size scaled by a ratio. The result will be an array of integers.\n * @param {Size} size Size.\n * @param {number} ratio Ratio.\n * @param {Size} [dest] Optional reusable size array.\n * @return {Size} The scaled size.\n */\nexport function scale(size, ratio, dest) {\n  if (dest === undefined) {\n    dest = [0, 0];\n  }\n  dest[0] = (size[0] * ratio + 0.5) | 0;\n  dest[1] = (size[1] * ratio + 0.5) | 0;\n  return dest;\n}\n\n/**\n * Returns an `Size` array for the passed in number (meaning: square) or\n * `Size` array.\n * (meaning: non-square),\n * @param {number|Size} size Width and height.\n * @param {Size} [dest] Optional reusable size array.\n * @return {Size} Size.\n * @api\n */\nexport function toSize(size, dest) {\n  if (Array.isArray(size)) {\n    return size;\n  }\n  if (dest === undefined) {\n    dest = [size, size];\n  } else {\n    dest[0] = size;\n    dest[1] = size;\n  }\n  return dest;\n}\n","/**\n * @module ol/style/Image\n */\nimport {toSize} from '../size.js';\nimport {abstract} from '../util.js';\n\n/**\n * @typedef {Object} Options\n * @property {number} opacity Opacity.\n * @property {boolean} rotateWithView If the image should get rotated with the view.\n * @property {number} rotation Rotation.\n * @property {number|import(\"../size.js\").Size} scale Scale.\n * @property {Array<number>} displacement Displacement.\n * @property {import('../style/Style.js').DeclutterMode} declutterMode Declutter mode: `declutter`, `obstacle`, `none`.\n */\n\n/**\n * @classdesc\n * A base class used for creating subclasses and not instantiated in\n * apps. Base class for {@link module:ol/style/Icon~Icon}, {@link module:ol/style/Circle~CircleStyle} and\n * {@link module:ol/style/RegularShape~RegularShape}.\n * @abstract\n * @api\n */\nclass ImageStyle {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    /**\n     * @private\n     * @type {number}\n     */\n    this.opacity_ = options.opacity;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.rotateWithView_ = options.rotateWithView;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.rotation_ = options.rotation;\n\n    /**\n     * @private\n     * @type {number|import(\"../size.js\").Size}\n     */\n    this.scale_ = options.scale;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.scaleArray_ = toSize(options.scale);\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.displacement_ = options.displacement;\n\n    /**\n     * @private\n     * @type {import('../style/Style.js').DeclutterMode}\n     */\n    this.declutterMode_ = options.declutterMode;\n  }\n\n  /**\n   * Clones the style.\n   * @return {ImageStyle} The cloned style.\n   * @api\n   */\n  clone() {\n    const scale = this.getScale();\n    return new ImageStyle({\n      opacity: this.getOpacity(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      displacement: this.getDisplacement().slice(),\n      declutterMode: this.getDeclutterMode(),\n    });\n  }\n\n  /**\n   * Get the symbolizer opacity.\n   * @return {number} Opacity.\n   * @api\n   */\n  getOpacity() {\n    return this.opacity_;\n  }\n\n  /**\n   * Determine whether the symbolizer rotates with the map.\n   * @return {boolean} Rotate with map.\n   * @api\n   */\n  getRotateWithView() {\n    return this.rotateWithView_;\n  }\n\n  /**\n   * Get the symoblizer rotation.\n   * @return {number} Rotation.\n   * @api\n   */\n  getRotation() {\n    return this.rotation_;\n  }\n\n  /**\n   * Get the symbolizer scale.\n   * @return {number|import(\"../size.js\").Size} Scale.\n   * @api\n   */\n  getScale() {\n    return this.scale_;\n  }\n\n  /**\n   * Get the symbolizer scale array.\n   * @return {import(\"../size.js\").Size} Scale array.\n   */\n  getScaleArray() {\n    return this.scaleArray_;\n  }\n\n  /**\n   * Get the displacement of the shape\n   * @return {Array<number>} Shape's center displacement\n   * @api\n   */\n  getDisplacement() {\n    return this.displacement_;\n  }\n\n  /**\n   * Get the declutter mode of the shape\n   * @return {import(\"./Style.js\").DeclutterMode} Shape's declutter mode\n   * @api\n   */\n  getDeclutterMode() {\n    return this.declutterMode_;\n  }\n\n  /**\n   * Get the anchor point in pixels. The anchor determines the center point for the\n   * symbolizer.\n   * @abstract\n   * @return {Array<number>} Anchor.\n   */\n  getAnchor() {\n    return abstract();\n  }\n\n  /**\n   * Get the image element for the symbolizer.\n   * @abstract\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {import('../DataTile.js').ImageLike} Image element.\n   */\n  getImage(pixelRatio) {\n    return abstract();\n  }\n\n  /**\n   * @abstract\n   * @return {import('../DataTile.js').ImageLike} Image element.\n   */\n  getHitDetectionImage() {\n    return abstract();\n  }\n\n  /**\n   * Get the image pixel ratio.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Pixel ratio.\n   */\n  getPixelRatio(pixelRatio) {\n    return 1;\n  }\n\n  /**\n   * @abstract\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n  getImageState() {\n    return abstract();\n  }\n\n  /**\n   * @abstract\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n  getImageSize() {\n    return abstract();\n  }\n\n  /**\n   * Get the origin of the symbolizer.\n   * @abstract\n   * @return {Array<number>} Origin.\n   */\n  getOrigin() {\n    return abstract();\n  }\n\n  /**\n   * Get the size of the symbolizer (in pixels).\n   * @abstract\n   * @return {import(\"../size.js\").Size} Size.\n   */\n  getSize() {\n    return abstract();\n  }\n\n  /**\n   * Set the displacement.\n   *\n   * @param {Array<number>} displacement Displacement.\n   * @api\n   */\n  setDisplacement(displacement) {\n    this.displacement_ = displacement;\n  }\n\n  /**\n   * Set the opacity.\n   *\n   * @param {number} opacity Opacity.\n   * @api\n   */\n  setOpacity(opacity) {\n    this.opacity_ = opacity;\n  }\n\n  /**\n   * Set whether to rotate the style with the view.\n   *\n   * @param {boolean} rotateWithView Rotate with map.\n   * @api\n   */\n  setRotateWithView(rotateWithView) {\n    this.rotateWithView_ = rotateWithView;\n  }\n\n  /**\n   * Set the rotation.\n   *\n   * @param {number} rotation Rotation.\n   * @api\n   */\n  setRotation(rotation) {\n    this.rotation_ = rotation;\n  }\n\n  /**\n   * Set the scale.\n   *\n   * @param {number|import(\"../size.js\").Size} scale Scale.\n   * @api\n   */\n  setScale(scale) {\n    this.scale_ = scale;\n    this.scaleArray_ = toSize(scale);\n  }\n\n  /**\n   * @abstract\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  listenImageChange(listener) {\n    abstract();\n  }\n\n  /**\n   * Load not yet loaded URI.\n   * @abstract\n   */\n  load() {\n    abstract();\n  }\n\n  /**\n   * @abstract\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  unlistenImageChange(listener) {\n    abstract();\n  }\n\n  /**\n   * @return {Promise<void>} `false` or Promise that resolves when the style is ready to use.\n   */\n  ready() {\n    return Promise.resolve();\n  }\n}\n\nexport default ImageStyle;\n","/**\n * @module ol/style/RegularShape\n */\n\nimport ImageState from '../ImageState.js';\nimport {asArray} from '../color.js';\nimport {asColorLike} from '../colorlike.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport {\n  defaultFillStyle,\n  defaultLineCap,\n  defaultLineJoin,\n  defaultLineWidth,\n  defaultMiterLimit,\n  defaultStrokeStyle,\n} from '../render/canvas.js';\nimport IconImage from './IconImage.js';\nimport {shared as iconImageCache} from './IconImageCache.js';\nimport ImageStyle from './Image.js';\n\n/**\n * Specify radius for regular polygons, or both radius and radius2 for stars.\n * @typedef {Object} Options\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {number} points Number of points for stars and regular polygons. In case of a polygon, the number of points\n * is the number of sides.\n * @property {number} radius Radius of a regular polygon.\n * @property {number} [radius2] Second radius to make a star instead of a regular polygon.\n * @property {number} [angle=0] Shape's angle in radians. A value of 0 will have one of the shape's points facing up.\n * @property {Array<number>} [displacement=[0, 0]] Displacement of the shape in pixels.\n * Positive values will shift the shape right and up.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view.\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale. Unless two dimensional scaling is required a better\n * result may be obtained with appropriate settings for `radius` and `radius2`.\n * @property {import('./Style.js').DeclutterMode} [declutterMode] Declutter mode.\n */\n\n/**\n * @typedef {Object} RenderOptions\n * @property {import(\"../colorlike.js\").ColorLike|undefined} strokeStyle StrokeStyle.\n * @property {number} strokeWidth StrokeWidth.\n * @property {number} size Size.\n * @property {CanvasLineCap} lineCap LineCap.\n * @property {Array<number>|null} lineDash LineDash.\n * @property {number} lineDashOffset LineDashOffset.\n * @property {CanvasLineJoin} lineJoin LineJoin.\n * @property {number} miterLimit MiterLimit.\n */\n\n/**\n * @classdesc\n * Set regular shape style for vector features. The resulting shape will be\n * a regular polygon when `radius` is provided, or a star when both `radius` and\n * `radius2` are provided.\n * @api\n */\nclass RegularShape extends ImageStyle {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    super({\n      opacity: 1,\n      rotateWithView:\n        options.rotateWithView !== undefined ? options.rotateWithView : false,\n      rotation: options.rotation !== undefined ? options.rotation : 0,\n      scale: options.scale !== undefined ? options.scale : 1,\n      displacement:\n        options.displacement !== undefined ? options.displacement : [0, 0],\n      declutterMode: options.declutterMode,\n    });\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement|null}\n     */\n    this.hitDetectionCanvas_ = null;\n\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default|null}\n     */\n    this.fill_ = options.fill !== undefined ? options.fill : null;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.origin_ = [0, 0];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.points_ = options.points;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.radius = options.radius;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.radius2_ = options.radius2;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.angle_ = options.angle !== undefined ? options.angle : 0;\n\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default|null}\n     */\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.size_;\n\n    /**\n     * @private\n     * @type {RenderOptions}\n     */\n    this.renderOptions_;\n\n    /**\n     * @private\n     */\n    this.imageState_ =\n      this.fill_ && this.fill_.loading()\n        ? ImageState.LOADING\n        : ImageState.LOADED;\n    if (this.imageState_ === ImageState.LOADING) {\n      this.ready().then(() => (this.imageState_ = ImageState.LOADED));\n    }\n    this.render();\n  }\n\n  /**\n   * Clones the style.\n   * @return {RegularShape} The cloned style.\n   * @api\n   * @override\n   */\n  clone() {\n    const scale = this.getScale();\n    const style = new RegularShape({\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      points: this.getPoints(),\n      radius: this.getRadius(),\n      radius2: this.getRadius2(),\n      angle: this.getAngle(),\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      displacement: this.getDisplacement().slice(),\n      declutterMode: this.getDeclutterMode(),\n    });\n    style.setOpacity(this.getOpacity());\n    return style;\n  }\n\n  /**\n   * Get the anchor point in pixels. The anchor determines the center point for the\n   * symbolizer.\n   * @return {Array<number>} Anchor.\n   * @api\n   * @override\n   */\n  getAnchor() {\n    const size = this.size_;\n    const displacement = this.getDisplacement();\n    const scale = this.getScaleArray();\n    // anchor is scaled by renderer but displacement should not be scaled\n    // so divide by scale here\n    return [\n      size[0] / 2 - displacement[0] / scale[0],\n      size[1] / 2 + displacement[1] / scale[1],\n    ];\n  }\n\n  /**\n   * Get the angle used in generating the shape.\n   * @return {number} Shape's rotation in radians.\n   * @api\n   */\n  getAngle() {\n    return this.angle_;\n  }\n\n  /**\n   * Get the fill style for the shape.\n   * @return {import(\"./Fill.js\").default|null} Fill style.\n   * @api\n   */\n  getFill() {\n    return this.fill_;\n  }\n\n  /**\n   * Set the fill style.\n   * @param {import(\"./Fill.js\").default|null} fill Fill style.\n   * @api\n   */\n  setFill(fill) {\n    this.fill_ = fill;\n    this.render();\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Image element.\n   * @override\n   */\n  getHitDetectionImage() {\n    if (!this.hitDetectionCanvas_) {\n      this.hitDetectionCanvas_ = this.createHitDetectionCanvas_(\n        this.renderOptions_,\n      );\n    }\n    return this.hitDetectionCanvas_;\n  }\n\n  /**\n   * Get the image icon.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLCanvasElement} Image or Canvas element.\n   * @api\n   * @override\n   */\n  getImage(pixelRatio) {\n    const fillKey = this.fill_?.getKey();\n    const cacheKey =\n      `${pixelRatio},${this.angle_},${this.radius},${this.radius2_},${this.points_},${fillKey}` +\n      Object.values(this.renderOptions_).join(',');\n    let image = /** @type {HTMLCanvasElement} */ (\n      iconImageCache.get(cacheKey, null, null)?.getImage(1)\n    );\n    if (!image) {\n      const renderOptions = this.renderOptions_;\n      const size = Math.ceil(renderOptions.size * pixelRatio);\n      const context = createCanvasContext2D(size, size);\n      this.draw_(renderOptions, context, pixelRatio);\n\n      image = context.canvas;\n      iconImageCache.set(\n        cacheKey,\n        null,\n        null,\n        new IconImage(image, undefined, null, ImageState.LOADED, null),\n      );\n    }\n    return image;\n  }\n\n  /**\n   * Get the image pixel ratio.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Pixel ratio.\n   * @override\n   */\n  getPixelRatio(pixelRatio) {\n    return pixelRatio;\n  }\n\n  /**\n   * @return {import(\"../size.js\").Size} Image size.\n   * @override\n   */\n  getImageSize() {\n    return this.size_;\n  }\n\n  /**\n   * @return {import(\"../ImageState.js\").default} Image state.\n   * @override\n   */\n  getImageState() {\n    return this.imageState_;\n  }\n\n  /**\n   * Get the origin of the symbolizer.\n   * @return {Array<number>} Origin.\n   * @api\n   * @override\n   */\n  getOrigin() {\n    return this.origin_;\n  }\n\n  /**\n   * Get the number of points for generating the shape.\n   * @return {number} Number of points for stars and regular polygons.\n   * @api\n   */\n  getPoints() {\n    return this.points_;\n  }\n\n  /**\n   * Get the (primary) radius for the shape.\n   * @return {number} Radius.\n   * @api\n   */\n  getRadius() {\n    return this.radius;\n  }\n\n  /**\n   * Get the secondary radius for the shape.\n   * @return {number|undefined} Radius2.\n   * @api\n   */\n  getRadius2() {\n    return this.radius2_;\n  }\n\n  /**\n   * Get the size of the symbolizer (in pixels).\n   * @return {import(\"../size.js\").Size} Size.\n   * @api\n   * @override\n   */\n  getSize() {\n    return this.size_;\n  }\n\n  /**\n   * Get the stroke style for the shape.\n   * @return {import(\"./Stroke.js\").default|null} Stroke style.\n   * @api\n   */\n  getStroke() {\n    return this.stroke_;\n  }\n\n  /**\n   * Set the stroke style.\n   * @param {import(\"./Stroke.js\").default|null} stroke Stroke style.\n   * @api\n   */\n  setStroke(stroke) {\n    this.stroke_ = stroke;\n    this.render();\n  }\n\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   * @override\n   */\n  listenImageChange(listener) {}\n\n  /**\n   * Load not yet loaded URI.\n   * @override\n   */\n  load() {}\n\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   * @override\n   */\n  unlistenImageChange(listener) {}\n\n  /**\n   * Calculate additional canvas size needed for the miter.\n   * @param {string} lineJoin Line join\n   * @param {number} strokeWidth Stroke width\n   * @param {number} miterLimit Miter limit\n   * @return {number} Additional canvas size needed\n   * @private\n   */\n  calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit) {\n    if (\n      strokeWidth === 0 ||\n      this.points_ === Infinity ||\n      (lineJoin !== 'bevel' && lineJoin !== 'miter')\n    ) {\n      return strokeWidth;\n    }\n    // m  | ^\n    // i  | |\\                  .\n    // t >|  #\\\n    // e  | |\\ \\              .\n    // r      \\s\\\n    //      |  \\t\\          .                 .\n    //          \\r\\                      .   .\n    //      |    \\o\\      .          .  . . .\n    //          e \\k\\            .  .    . .\n    //      |      \\e\\  .    .  .       . .\n    //       d      \\ \\  .  .          . .\n    //      | _ _a_ _\\#  .            . .\n    //   r1          / `             . .\n    //      |                       . .\n    //       b     /               . .\n    //      |                     . .\n    //           / r2            . .\n    //      |                        .   .\n    //         /                           .   .\n    //      |α                                   .   .\n    //       /                                         .   .\n    //      ° center\n    let r1 = this.radius;\n    let r2 = this.radius2_ === undefined ? r1 : this.radius2_;\n    if (r1 < r2) {\n      const tmp = r1;\n      r1 = r2;\n      r2 = tmp;\n    }\n    const points =\n      this.radius2_ === undefined ? this.points_ : this.points_ * 2;\n    const alpha = (2 * Math.PI) / points;\n    const a = r2 * Math.sin(alpha);\n    const b = Math.sqrt(r2 * r2 - a * a);\n    const d = r1 - b;\n    const e = Math.sqrt(a * a + d * d);\n    const miterRatio = e / a;\n    if (lineJoin === 'miter' && miterRatio <= miterLimit) {\n      return miterRatio * strokeWidth;\n    }\n    // Calculate the distance from center to the stroke corner where\n    // it was cut short because of the miter limit.\n    //              l\n    //        ----+---- <= distance from center to here is maxr\n    //       /####|k ##\\\n    //      /#####^#####\\\n    //     /#### /+\\# s #\\\n    //    /### h/+++\\# t #\\\n    //   /### t/+++++\\# r #\\\n    //  /### a/+++++++\\# o #\\\n    // /### p/++ fill +\\# k #\\\n    ///#### /+++++^+++++\\# e #\\\n    //#####/+++++/+\\+++++\\#####\\\n    const k = strokeWidth / 2 / miterRatio;\n    const l = (strokeWidth / 2) * (d / e);\n    const maxr = Math.sqrt((r1 + k) * (r1 + k) + l * l);\n    const bevelAdd = maxr - r1;\n    if (this.radius2_ === undefined || lineJoin === 'bevel') {\n      return bevelAdd * 2;\n    }\n    // If outer miter is over the miter limit the inner miter may reach through the\n    // center and be longer than the bevel, same calculation as above but swap r1 / r2.\n    const aa = r1 * Math.sin(alpha);\n    const bb = Math.sqrt(r1 * r1 - aa * aa);\n    const dd = r2 - bb;\n    const ee = Math.sqrt(aa * aa + dd * dd);\n    const innerMiterRatio = ee / aa;\n    if (innerMiterRatio <= miterLimit) {\n      const innerLength = (innerMiterRatio * strokeWidth) / 2 - r2 - r1;\n      return 2 * Math.max(bevelAdd, innerLength);\n    }\n    return bevelAdd * 2;\n  }\n\n  /**\n   * @return {RenderOptions}  The render options\n   * @protected\n   */\n  createRenderOptions() {\n    let lineCap = defaultLineCap;\n    let lineJoin = defaultLineJoin;\n    let miterLimit = 0;\n    let lineDash = null;\n    let lineDashOffset = 0;\n    let strokeStyle;\n    let strokeWidth = 0;\n\n    if (this.stroke_) {\n      strokeStyle = asColorLike(this.stroke_.getColor() ?? defaultStrokeStyle);\n      strokeWidth = this.stroke_.getWidth() ?? defaultLineWidth;\n      lineDash = this.stroke_.getLineDash();\n      lineDashOffset = this.stroke_.getLineDashOffset() ?? 0;\n      lineJoin = this.stroke_.getLineJoin() ?? defaultLineJoin;\n      lineCap = this.stroke_.getLineCap() ?? defaultLineCap;\n      miterLimit = this.stroke_.getMiterLimit() ?? defaultMiterLimit;\n    }\n\n    const add = this.calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit);\n    const maxRadius = Math.max(this.radius, this.radius2_ || 0);\n    const size = Math.ceil(2 * maxRadius + add);\n\n    return {\n      strokeStyle: strokeStyle,\n      strokeWidth: strokeWidth,\n      size: size,\n      lineCap: lineCap,\n      lineDash: lineDash,\n      lineDashOffset: lineDashOffset,\n      lineJoin: lineJoin,\n      miterLimit: miterLimit,\n    };\n  }\n\n  /**\n   * @protected\n   */\n  render() {\n    this.renderOptions_ = this.createRenderOptions();\n    const size = this.renderOptions_.size;\n    this.hitDetectionCanvas_ = null;\n    this.size_ = [size, size];\n  }\n\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The rendering context.\n   * @param {number} pixelRatio The pixel ratio.\n   */\n  draw_(renderOptions, context, pixelRatio) {\n    context.scale(pixelRatio, pixelRatio);\n    // set origin to canvas center\n    context.translate(renderOptions.size / 2, renderOptions.size / 2);\n\n    this.createPath_(context);\n\n    if (this.fill_) {\n      let color = this.fill_.getColor();\n      if (color === null) {\n        color = defaultFillStyle;\n      }\n      context.fillStyle = asColorLike(color);\n      context.fill();\n    }\n    if (renderOptions.strokeStyle) {\n      context.strokeStyle = renderOptions.strokeStyle;\n      context.lineWidth = renderOptions.strokeWidth;\n      if (renderOptions.lineDash) {\n        context.setLineDash(renderOptions.lineDash);\n        context.lineDashOffset = renderOptions.lineDashOffset;\n      }\n      context.lineCap = renderOptions.lineCap;\n      context.lineJoin = renderOptions.lineJoin;\n      context.miterLimit = renderOptions.miterLimit;\n      context.stroke();\n    }\n  }\n\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   * @return {HTMLCanvasElement} Canvas containing the icon\n   */\n  createHitDetectionCanvas_(renderOptions) {\n    let context;\n    if (this.fill_) {\n      let color = this.fill_.getColor();\n\n      // determine if fill is transparent (or pattern or gradient)\n      let opacity = 0;\n      if (typeof color === 'string') {\n        color = asArray(color);\n      }\n      if (color === null) {\n        opacity = 1;\n      } else if (Array.isArray(color)) {\n        opacity = color.length === 4 ? color[3] : 1;\n      }\n      if (opacity === 0) {\n        // if a transparent fill style is set, create an extra hit-detection image\n        // with a default fill style\n        context = createCanvasContext2D(renderOptions.size, renderOptions.size);\n        this.drawHitDetectionCanvas_(renderOptions, context);\n      }\n    }\n    return context ? context.canvas : this.getImage(1);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context The context to draw in.\n   */\n  createPath_(context) {\n    let points = this.points_;\n    const radius = this.radius;\n    if (points === Infinity) {\n      context.arc(0, 0, radius, 0, 2 * Math.PI);\n    } else {\n      const radius2 = this.radius2_ === undefined ? radius : this.radius2_;\n      if (this.radius2_ !== undefined) {\n        points *= 2;\n      }\n      const startAngle = this.angle_ - Math.PI / 2;\n      const step = (2 * Math.PI) / points;\n      for (let i = 0; i < points; i++) {\n        const angle0 = startAngle + i * step;\n        const radiusC = i % 2 === 0 ? radius : radius2;\n        context.lineTo(radiusC * Math.cos(angle0), radiusC * Math.sin(angle0));\n      }\n      context.closePath();\n    }\n  }\n\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The context.\n   */\n  drawHitDetectionCanvas_(renderOptions, context) {\n    // set origin to canvas center\n    context.translate(renderOptions.size / 2, renderOptions.size / 2);\n\n    this.createPath_(context);\n\n    context.fillStyle = defaultFillStyle;\n    context.fill();\n    if (renderOptions.strokeStyle) {\n      context.strokeStyle = renderOptions.strokeStyle;\n      context.lineWidth = renderOptions.strokeWidth;\n      if (renderOptions.lineDash) {\n        context.setLineDash(renderOptions.lineDash);\n        context.lineDashOffset = renderOptions.lineDashOffset;\n      }\n      context.lineJoin = renderOptions.lineJoin;\n      context.miterLimit = renderOptions.miterLimit;\n      context.stroke();\n    }\n  }\n\n  /**\n   * @override\n   */\n  ready() {\n    return this.fill_ ? this.fill_.ready() : Promise.resolve();\n  }\n}\n\nexport default RegularShape;\n"],"names":["hasArea","size","scale","ratio","dest","undefined","toSize","Array","ImageStyle","options","pixelRatio","displacement","opacity","rotateWithView","rotation","listener","Promise","RegularShape","style","fill","fillKey","cacheKey","Object","image","renderOptions","Math","context","stroke","lineJoin","strokeWidth","miterLimit","Infinity","r1","r2","tmp","alpha","a","d","e","miterRatio","k","l","bevelAdd","maxr","aa","dd","innerMiterRatio","ee","strokeStyle","lineCap","lineDash","lineDashOffset","add","color","points","radius","radius2","startAngle","step","i","angle0","radiusC"],"mappings":"uJA+BO,SAASA,EAAQC,CAAI,EAC1B,OAAOA,CAAI,CAAC,EAAE,CAAG,GAAKA,CAAI,CAAC,EAAE,CAAG,CAClC,CASO,SAASC,EAAMD,CAAI,CAAEE,CAAK,CAAEC,CAAI,EAMrC,OALaC,KAAAA,IAATD,GACFA,CAAAA,EAAO,CAAC,EAAG,EAAE,AAAD,EAEdA,CAAI,CAAC,EAAE,CAAG,AAACH,CAAI,CAAC,EAAE,CAAGE,EAAQ,GAAO,EACpCC,CAAI,CAAC,EAAE,CAAG,AAACH,CAAI,CAAC,EAAE,CAAGE,EAAQ,GAAO,EAC7BC,CACT,CAWO,SAASE,EAAOL,CAAI,CAAEG,CAAI,SAC/B,AAAIG,MAAM,OAAO,CAACN,GACTA,GAELG,AAASC,KAAAA,IAATD,EACFA,EAAO,CAACH,EAAMA,EAAK,EAEnBG,CAAI,CAAC,EAAE,CAAGH,EACVG,CAAI,CAAC,EAAE,CAAGH,GAELG,EACT,C,wIC/CA,OAAMI,EAIJ,YAAYC,CAAO,CAAE,CAKnB,IAAI,CAAC,QAAQ,CAAGA,EAAQ,OAAO,CAM/B,IAAI,CAAC,eAAe,CAAGA,EAAQ,cAAc,CAM7C,IAAI,CAAC,SAAS,CAAGA,EAAQ,QAAQ,CAMjC,IAAI,CAAC,MAAM,CAAGA,EAAQ,KAAK,CAM3B,IAAI,CAAC,WAAW,CAAG,SAAOA,EAAQ,KAAK,EAMvC,IAAI,CAAC,aAAa,CAAGA,EAAQ,YAAY,CAMzC,IAAI,CAAC,cAAc,CAAGA,EAAQ,aAAa,AAC7C,CAOA,OAAQ,CACN,IAAMP,EAAQ,IAAI,CAAC,QAAQ,GAC3B,OAAO,IAAIM,EAAW,CACpB,QAAS,IAAI,CAAC,UAAU,GACxB,MAAOD,MAAM,OAAO,CAACL,GAASA,EAAM,KAAK,GAAKA,EAC9C,SAAU,IAAI,CAAC,WAAW,GAC1B,eAAgB,IAAI,CAAC,iBAAiB,GACtC,aAAc,IAAI,CAAC,eAAe,GAAG,KAAK,GAC1C,cAAe,IAAI,CAAC,gBAAgB,EACtC,EACF,CAOA,YAAa,CACX,OAAO,IAAI,CAAC,QAAQ,AACtB,CAOA,mBAAoB,CAClB,OAAO,IAAI,CAAC,eAAe,AAC7B,CAOA,aAAc,CACZ,OAAO,IAAI,CAAC,SAAS,AACvB,CAOA,UAAW,CACT,OAAO,IAAI,CAAC,MAAM,AACpB,CAMA,eAAgB,CACd,OAAO,IAAI,CAAC,WAAW,AACzB,CAOA,iBAAkB,CAChB,OAAO,IAAI,CAAC,aAAa,AAC3B,CAOA,kBAAmB,CACjB,OAAO,IAAI,CAAC,cAAc,AAC5B,CAQA,WAAY,CACV,MAAO,gBACT,CAQA,SAASQ,CAAU,CAAE,CACnB,MAAO,gBACT,CAMA,sBAAuB,CACrB,MAAO,gBACT,CAOA,cAAcA,CAAU,CAAE,CACxB,OAAO,CACT,CAMA,eAAgB,CACd,MAAO,gBACT,CAMA,cAAe,CACb,MAAO,gBACT,CAOA,WAAY,CACV,MAAO,gBACT,CAOA,SAAU,CACR,MAAO,gBACT,CAQA,gBAAgBC,CAAY,CAAE,CAC5B,IAAI,CAAC,aAAa,CAAGA,CACvB,CAQA,WAAWC,CAAO,CAAE,CAClB,IAAI,CAAC,QAAQ,CAAGA,CAClB,CAQA,kBAAkBC,CAAc,CAAE,CAChC,IAAI,CAAC,eAAe,CAAGA,CACzB,CAQA,YAAYC,CAAQ,CAAE,CACpB,IAAI,CAAC,SAAS,CAAGA,CACnB,CAQA,SAASZ,CAAK,CAAE,CACd,IAAI,CAAC,MAAM,CAAGA,EACd,IAAI,CAAC,WAAW,CAAG,SAAOA,EAC5B,CAMA,kBAAkBa,CAAQ,CAAE,CAC1B,gBACF,CAMA,MAAO,CACL,gBACF,CAMA,oBAAoBA,CAAQ,CAAE,CAC5B,gBACF,CAKA,OAAQ,CACN,OAAOC,QAAQ,OAAO,EACxB,CACF,CAEA,UAAeR,C,0HCvPf,OAAMS,UAAqB,SAAU,CAInC,YAAYR,CAAO,CAAE,CACnB,KAAK,CAAC,CACJ,QAAS,EACT,eACEA,AAA2BJ,KAAAA,IAA3BI,EAAQ,cAAc,EAAiBA,EAAQ,cAAc,CAC/D,SAAUA,AAAqBJ,KAAAA,IAArBI,EAAQ,QAAQ,CAAiBA,EAAQ,QAAQ,CAAG,EAC9D,MAAOA,AAAkBJ,KAAAA,IAAlBI,EAAQ,KAAK,CAAiBA,EAAQ,KAAK,CAAG,EACrD,aACEA,AAAyBJ,KAAAA,IAAzBI,EAAQ,YAAY,CAAiBA,EAAQ,YAAY,CAAG,CAAC,EAAG,EAAE,CACpE,cAAeA,EAAQ,aAAa,AACtC,GAMA,IAAI,CAAC,mBAAmB,CAAG,KAM3B,IAAI,CAAC,KAAK,CAAGA,AAAiBJ,KAAAA,IAAjBI,EAAQ,IAAI,CAAiBA,EAAQ,IAAI,CAAG,KAMzD,IAAI,CAAC,OAAO,CAAG,CAAC,EAAG,EAAE,CAMrB,IAAI,CAAC,OAAO,CAAGA,EAAQ,MAAM,CAM7B,IAAI,CAAC,MAAM,CAAGA,EAAQ,MAAM,CAM5B,IAAI,CAAC,QAAQ,CAAGA,EAAQ,OAAO,CAM/B,IAAI,CAAC,MAAM,CAAGA,AAAkBJ,KAAAA,IAAlBI,EAAQ,KAAK,CAAiBA,EAAQ,KAAK,CAAG,EAM5D,IAAI,CAAC,OAAO,CAAGA,AAAmBJ,KAAAA,IAAnBI,EAAQ,MAAM,CAAiBA,EAAQ,MAAM,CAAG,KAM/D,IAAI,CAAC,KAAK,CAMV,IAAI,CAAC,cAAc,CAKnB,IAAI,CAAC,WAAW,CACd,IAAI,CAAC,KAAK,EAAI,IAAI,CAAC,KAAK,CAAC,OAAO,GAC5B,iBAAkB,CAClB,gBAAiB,CACnB,IAAI,CAAC,WAAW,GAAK,iBAAkB,EACzC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAO,IAAI,CAAC,WAAW,CAAG,gBAAiB,EAE/D,IAAI,CAAC,MAAM,EACb,CAQA,OAAQ,CACN,IAAMP,EAAQ,IAAI,CAAC,QAAQ,GACrBgB,EAAQ,IAAID,EAAa,CAC7B,KAAM,IAAI,CAAC,OAAO,GAAK,IAAI,CAAC,OAAO,GAAG,KAAK,GAAKZ,KAAAA,EAChD,OAAQ,IAAI,CAAC,SAAS,GACtB,OAAQ,IAAI,CAAC,SAAS,GACtB,QAAS,IAAI,CAAC,UAAU,GACxB,MAAO,IAAI,CAAC,QAAQ,GACpB,OAAQ,IAAI,CAAC,SAAS,GAAK,IAAI,CAAC,SAAS,GAAG,KAAK,GAAKA,KAAAA,EACtD,SAAU,IAAI,CAAC,WAAW,GAC1B,eAAgB,IAAI,CAAC,iBAAiB,GACtC,MAAOE,MAAM,OAAO,CAACL,GAASA,EAAM,KAAK,GAAKA,EAC9C,aAAc,IAAI,CAAC,eAAe,GAAG,KAAK,GAC1C,cAAe,IAAI,CAAC,gBAAgB,EACtC,GAEA,OADAgB,EAAM,UAAU,CAAC,IAAI,CAAC,UAAU,IACzBA,CACT,CASA,WAAY,CACV,IAAMjB,EAAO,IAAI,CAAC,KAAK,CACjBU,EAAe,IAAI,CAAC,eAAe,GACnCT,EAAQ,IAAI,CAAC,aAAa,GAGhC,MAAO,CACLD,CAAI,CAAC,EAAE,CAAG,EAAIU,CAAY,CAAC,EAAE,CAAGT,CAAK,CAAC,EAAE,CACxCD,CAAI,CAAC,EAAE,CAAG,EAAIU,CAAY,CAAC,EAAE,CAAGT,CAAK,CAAC,EAAE,CACzC,AACH,CAOA,UAAW,CACT,OAAO,IAAI,CAAC,MAAM,AACpB,CAOA,SAAU,CACR,OAAO,IAAI,CAAC,KAAK,AACnB,CAOA,QAAQiB,CAAI,CAAE,CACZ,IAAI,CAAC,KAAK,CAAGA,EACb,IAAI,CAAC,MAAM,EACb,CAMA,sBAAuB,CAMrB,OALK,IAAI,CAAC,mBAAmB,EAC3B,KAAI,CAAC,mBAAmB,CAAG,IAAI,CAAC,yBAAyB,CACvD,IAAI,CAAC,cAAc,CACrB,EAEK,IAAI,CAAC,mBAAmB,AACjC,CASA,SAAST,CAAU,CAAE,CACnB,IAAMU,EAAU,IAAI,CAAC,KAAK,EAAE,SACtBC,EACJ,CAAC,EAAEX,EAAW,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,EAAEU,EAAQ,CAAC,CACzFE,OAAO,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,KACtCC,EACF,QAAkB,CAACF,EAAU,KAAM,OAAO,SAAS,GAErD,GAAI,CAACE,EAAO,CACV,IAAMC,EAAgB,IAAI,CAAC,cAAc,CACnCvB,EAAOwB,KAAK,IAAI,CAACD,EAAc,IAAI,CAAGd,GACtCgB,EAAU,SAAsBzB,EAAMA,GAC5C,IAAI,CAAC,KAAK,CAACuB,EAAeE,EAAShB,GAEnCa,EAAQG,EAAQ,MAAM,CACtB,QAAkB,CAChBL,EACA,KACA,KACA,IAAI,GAAS,CAACE,EAAOlB,KAAAA,EAAW,KAAM,gBAAiB,CAAE,MAE7D,CACA,OAAOkB,CACT,CAQA,cAAcb,CAAU,CAAE,CACxB,OAAOA,CACT,CAMA,cAAe,CACb,OAAO,IAAI,CAAC,KAAK,AACnB,CAMA,eAAgB,CACd,OAAO,IAAI,CAAC,WAAW,AACzB,CAQA,WAAY,CACV,OAAO,IAAI,CAAC,OAAO,AACrB,CAOA,WAAY,CACV,OAAO,IAAI,CAAC,OAAO,AACrB,CAOA,WAAY,CACV,OAAO,IAAI,CAAC,MAAM,AACpB,CAOA,YAAa,CACX,OAAO,IAAI,CAAC,QAAQ,AACtB,CAQA,SAAU,CACR,OAAO,IAAI,CAAC,KAAK,AACnB,CAOA,WAAY,CACV,OAAO,IAAI,CAAC,OAAO,AACrB,CAOA,UAAUiB,CAAM,CAAE,CAChB,IAAI,CAAC,OAAO,CAAGA,EACf,IAAI,CAAC,MAAM,EACb,CAMA,kBAAkBZ,CAAQ,CAAE,CAAC,CAM7B,MAAO,CAAC,CAMR,oBAAoBA,CAAQ,CAAE,CAAC,CAU/B,uBAAuBa,CAAQ,CAAEC,CAAW,CAAEC,CAAU,CAAE,CACxD,GACED,AAAgB,IAAhBA,GACA,IAAI,CAAC,OAAO,GAAKE,KAChBH,AAAa,UAAbA,GAAwBA,AAAa,UAAbA,EAEzB,OAAOC,EAwBT,IAAIG,EAAK,IAAI,CAAC,MAAM,CAChBC,EAAK,AAAkB5B,KAAAA,IAAlB,IAAI,CAAC,QAAQ,CAAiB2B,EAAK,IAAI,CAAC,QAAQ,CACzD,GAAIA,EAAKC,EAAI,CACX,IAAMC,EAAMF,EACZA,EAAKC,EACLA,EAAKC,CACP,CAGA,IAAMC,EAAQ,AAAC,EAAIV,KAAK,EAAE,CADxB,CAAkBpB,KAAAA,IAAlB,IAAI,CAAC,QAAQ,CAAiB,IAAI,CAAC,OAAO,CAAG,AAAe,EAAf,IAAI,CAAC,OAAO,AAAG,EAExD+B,EAAIH,EAAKR,KAAK,GAAG,CAACU,GAElBE,EAAIL,EADAP,KAAK,IAAI,CAACQ,EAAKA,EAAKG,EAAIA,GAE5BE,EAAIb,KAAK,IAAI,CAACW,EAAIA,EAAIC,EAAIA,GAC1BE,EAAaD,EAAIF,EACvB,GAAIR,AAAa,UAAbA,GAAwBW,GAAcT,EACxC,OAAOS,EAAaV,EAetB,IAAMW,EAAIX,EAAc,EAAIU,EACtBE,EAAI,AAACZ,EAAc,EAAMQ,CAAAA,EAAIC,CAAAA,EAE7BI,EAAWC,AADJlB,KAAK,IAAI,CAAC,AAACO,CAAAA,EAAKQ,CAAAA,EAAMR,CAAAA,EAAKQ,CAAAA,EAAKC,EAAIA,GACzBT,EACxB,GAAI,AAAkB3B,KAAAA,IAAlB,IAAI,CAAC,QAAQ,EAAkBuB,AAAa,UAAbA,EACjC,OAAOc,AAAW,EAAXA,EAIT,IAAME,EAAKZ,EAAKP,KAAK,GAAG,CAACU,GAEnBU,EAAKZ,EADAR,KAAK,IAAI,CAACO,EAAKA,EAAKY,EAAKA,GAG9BE,EAAkBC,AADbtB,KAAK,IAAI,CAACmB,EAAKA,EAAKC,EAAKA,GACPD,SAC7B,AAAIE,GAAmBhB,EAEd,EAAIL,KAAK,GAAG,CAACiB,EADA,AAACI,EAAkBjB,EAAe,EAAII,EAAKD,GAG1DU,AAAW,EAAXA,CACT,CAMA,qBAAsB,CACpB,IAKIM,EALAC,EAAU,gBAAc,CACxBrB,EAAW,iBAAe,CAC1BE,EAAa,EACboB,EAAW,KACXC,EAAiB,EAEjBtB,EAAc,CAEd,KAAI,CAAC,OAAO,GACdmB,EAAc,QAAY,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAM,oBAAkB,EACvEnB,EAAc,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAM,kBAAgB,CACzDqB,EAAW,IAAI,CAAC,OAAO,CAAC,WAAW,GACnCC,EAAiB,IAAI,CAAC,OAAO,CAAC,iBAAiB,IAAM,EACrDvB,EAAW,IAAI,CAAC,OAAO,CAAC,WAAW,IAAM,iBAAe,CACxDqB,EAAU,IAAI,CAAC,OAAO,CAAC,UAAU,IAAM,gBAAc,CACrDnB,EAAa,IAAI,CAAC,OAAO,CAAC,aAAa,IAAM,mBAAiB,EAGhE,IAAMsB,EAAM,IAAI,CAAC,sBAAsB,CAACxB,EAAUC,EAAaC,GAI/D,MAAO,CACL,YAAakB,EACb,YAAanB,EACb,KALWJ,KAAK,IAAI,CAAC,EADLA,KAAK,GAAG,CAAC,IAAI,CAAC,MAAM,CAAE,IAAI,CAAC,QAAQ,EAAI,GAClB2B,GAMrC,QAASH,EACT,SAAUC,EACV,eAAgBC,EAChB,SAAUvB,EACV,WAAYE,CACd,CACF,CAKA,QAAS,CACP,IAAI,CAAC,cAAc,CAAG,IAAI,CAAC,mBAAmB,GAC9C,IAAM7B,EAAO,IAAI,CAAC,cAAc,CAAC,IAAI,AACrC,KAAI,CAAC,mBAAmB,CAAG,KAC3B,IAAI,CAAC,KAAK,CAAG,CAACA,EAAMA,EAAK,AAC3B,CAQA,MAAMuB,CAAa,CAAEE,CAAO,CAAEhB,CAAU,CAAE,CAOxC,GANAgB,EAAQ,KAAK,CAAChB,EAAYA,GAE1BgB,EAAQ,SAAS,CAACF,EAAc,IAAI,CAAG,EAAGA,EAAc,IAAI,CAAG,GAE/D,IAAI,CAAC,WAAW,CAACE,GAEb,IAAI,CAAC,KAAK,CAAE,CACd,IAAI2B,EAAQ,IAAI,CAAC,KAAK,CAAC,QAAQ,EACjB,QAAVA,GACFA,CAAAA,EAAQ,kBAAgB,AAAhB,EAEV3B,EAAQ,SAAS,CAAG,QAAY2B,GAChC3B,EAAQ,IAAI,EACd,CACIF,EAAc,WAAW,GAC3BE,EAAQ,WAAW,CAAGF,EAAc,WAAW,CAC/CE,EAAQ,SAAS,CAAGF,EAAc,WAAW,CACzCA,EAAc,QAAQ,GACxBE,EAAQ,WAAW,CAACF,EAAc,QAAQ,EAC1CE,EAAQ,cAAc,CAAGF,EAAc,cAAc,EAEvDE,EAAQ,OAAO,CAAGF,EAAc,OAAO,CACvCE,EAAQ,QAAQ,CAAGF,EAAc,QAAQ,CACzCE,EAAQ,UAAU,CAAGF,EAAc,UAAU,CAC7CE,EAAQ,MAAM,GAElB,CAOA,0BAA0BF,CAAa,CAAE,CACvC,IAAIE,EACJ,GAAI,IAAI,CAAC,KAAK,CAAE,CACd,IAAI2B,EAAQ,IAAI,CAAC,KAAK,CAAC,QAAQ,GAG3BzC,EAAU,CACO,WAAjB,OAAOyC,GACTA,CAAAA,EAAQ,SAAQA,EAAK,EAEnBA,AAAU,OAAVA,EACFzC,EAAU,EACDL,MAAM,OAAO,CAAC8C,IACvBzC,CAAAA,EAAUyC,AAAiB,IAAjBA,EAAM,MAAM,CAASA,CAAK,CAAC,EAAE,CAAG,GAE5B,IAAZzC,IAGFc,EAAU,SAAsBF,EAAc,IAAI,CAAEA,EAAc,IAAI,EACtE,IAAI,CAAC,uBAAuB,CAACA,EAAeE,GAEhD,CACA,OAAOA,EAAUA,EAAQ,MAAM,CAAG,IAAI,CAAC,QAAQ,CAAC,EAClD,CAMA,YAAYA,CAAO,CAAE,CACnB,IAAI4B,EAAS,IAAI,CAAC,OAAO,CACnBC,EAAS,IAAI,CAAC,MAAM,CAC1B,GAAID,IAAWvB,IACbL,EAAQ,GAAG,CAAC,EAAG,EAAG6B,EAAQ,EAAG,EAAI9B,KAAK,EAAE,MACnC,CACL,IAAM+B,EAAU,AAAkBnD,KAAAA,IAAlB,IAAI,CAAC,QAAQ,CAAiBkD,EAAS,IAAI,CAAC,QAAQ,AAC9ClD,MAAAA,IAAlB,IAAI,CAAC,QAAQ,EACfiD,CAAAA,GAAU,GAEZ,IAAMG,EAAa,IAAI,CAAC,MAAM,CAAGhC,KAAK,EAAE,CAAG,EACrCiC,EAAO,AAAC,EAAIjC,KAAK,EAAE,CAAI6B,EAC7B,IAAK,IAAIK,EAAI,EAAGA,EAAIL,EAAQK,IAAK,CAC/B,IAAMC,EAASH,EAAaE,EAAID,EAC1BG,EAAUF,EAAI,GAAM,EAAIJ,EAASC,EACvC9B,EAAQ,MAAM,CAACmC,EAAUpC,KAAK,GAAG,CAACmC,GAASC,EAAUpC,KAAK,GAAG,CAACmC,GAChE,CACAlC,EAAQ,SAAS,EACnB,CACF,CAOA,wBAAwBF,CAAa,CAAEE,CAAO,CAAE,CAE9CA,EAAQ,SAAS,CAACF,EAAc,IAAI,CAAG,EAAGA,EAAc,IAAI,CAAG,GAE/D,IAAI,CAAC,WAAW,CAACE,GAEjBA,EAAQ,SAAS,CAAG,kBAAgB,CACpCA,EAAQ,IAAI,GACRF,EAAc,WAAW,GAC3BE,EAAQ,WAAW,CAAGF,EAAc,WAAW,CAC/CE,EAAQ,SAAS,CAAGF,EAAc,WAAW,CACzCA,EAAc,QAAQ,GACxBE,EAAQ,WAAW,CAACF,EAAc,QAAQ,EAC1CE,EAAQ,cAAc,CAAGF,EAAc,cAAc,EAEvDE,EAAQ,QAAQ,CAAGF,EAAc,QAAQ,CACzCE,EAAQ,UAAU,CAAGF,EAAc,UAAU,CAC7CE,EAAQ,MAAM,GAElB,CAKA,OAAQ,CACN,OAAO,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAKV,QAAQ,OAAO,EAC1D,CACF,CAEA,UAAeC,C"}