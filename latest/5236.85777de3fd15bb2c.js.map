{"version":3,"file":"5236.85777de3fd15bb2c.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-geo/dist/BackgroundLayerPreview/BackgroundLayerPreview.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-geo/dist/BackgroundLayerChooser/BackgroundLayerChooser.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-geo/dist/Button/SimpleButton/SimpleButton.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-geo/dist/Map/MapComponent/MapComponent.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-geo/dist/constants.js"],"sourcesContent":["import './BackgroundLayerPreview.less';\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { Spin } from 'antd';\nimport OlLayerGroup from 'ol/layer/Group';\nimport OlLayerImage from 'ol/layer/Image';\nimport OlLayerTile from 'ol/layer/Tile';\nimport OlMap from 'ol/Map';\nimport { getUid } from 'ol/util';\nimport OlView from 'ol/View';\nimport { MapUtil } from '@terrestris/ol-util';\nimport useMap from '@terrestris/react-util/dist/Hooks/useMap/useMap';\nimport MapComponent from '../Map/MapComponent/MapComponent';\nexport const BackgroundLayerPreview = ({ layer, activeLayer, width = 128, height = 128, onClick, zoom, center, backgroundLayerFilter, titleRenderer }) => {\n    const [loading, setLoading] = useState(false);\n    const mainMap = useMap();\n    const previewLayer = useMemo(() => {\n        if (layer instanceof OlLayerTile) {\n            return new OlLayerTile({\n                source: layer.getSource()\n            });\n        }\n        else if (layer instanceof OlLayerImage) {\n            return new OlLayerImage({\n                source: layer.getSource()\n            });\n        }\n        return undefined;\n    }, [layer]);\n    const previewMap = useMemo(() => {\n        return new OlMap({\n            view: new OlView({\n                projection: mainMap?.getView().getProjection(),\n                resolutions: mainMap?.getView().getResolutions(),\n                center: center,\n                zoom: zoom\n            }),\n            controls: [],\n            interactions: [],\n            layers: previewLayer && [previewLayer]\n        });\n    }, [center, mainMap, previewLayer, zoom]);\n    useEffect(() => {\n        const setTrue = () => setLoading(true);\n        const setFalse = () => setLoading(false);\n        previewMap.on('loadstart', setTrue);\n        previewMap.on('loadend', setFalse);\n        return () => {\n            previewMap.un('loadstart', setTrue);\n            previewMap.un('loadend', setFalse);\n        };\n    }, [previewMap]);\n    useEffect(() => {\n        if (zoom) {\n            previewMap.getView().setZoom(zoom);\n        }\n        if (center) {\n            previewMap.getView().setCenter(center);\n        }\n    }, [zoom, center, previewMap]);\n    const getBgLayersFromMap = () => {\n        const collectBgLayers = (layerGroup) => {\n            if (!layerGroup) {\n                return [];\n            }\n            const layers = [];\n            const layerArray = layerGroup.getLayers().getArray();\n            for (const l of layerArray) {\n                if (backgroundLayerFilter(l)) {\n                    layers.push(l);\n                }\n                if (l instanceof OlLayerGroup) {\n                    layers.push(...collectBgLayers(l));\n                }\n            }\n            return layers;\n        };\n        const mainLayerGroup = mainMap?.getLayerGroup();\n        return mainLayerGroup ? collectBgLayers(mainLayerGroup) : [];\n    };\n    const updateBgLayerVisibility = (evt) => {\n        const target = evt?.currentTarget;\n        const layerId = target?.dataset?.uid;\n        if (!layerId || !mainMap) {\n            return;\n        }\n        const newBgLayer = MapUtil.getLayerByOlUid(mainMap, layerId);\n        if (!newBgLayer) {\n            return;\n        }\n        getBgLayersFromMap().forEach(l => l.setVisible(false));\n        newBgLayer.setVisible(true);\n        // Treat keyboard activation (keydown) the same as click for selection\n        if (evt.type === 'click' || evt.type === 'keydown') {\n            onClick(newBgLayer);\n        }\n    };\n    const restoreBgLayerVisibility = () => {\n        getBgLayersFromMap().forEach(l => l.setVisible(false));\n        activeLayer?.setVisible(true);\n    };\n    let isActive = false;\n    const uid = getUid(layer);\n    if (activeLayer) {\n        const activeUid = getUid(activeLayer);\n        isActive = uid === activeUid;\n    }\n    const focusedLayerRef = useRef(undefined);\n    return (React.createElement(\"div\", { className: `layer-preview${isActive ? ' selected' : ''}`, key: uid, \"data-uid\": uid, role: \"button\", tabIndex: 0, onMouseOver: updateBgLayerVisibility, onMouseLeave: restoreBgLayerVisibility, onFocus: () => {\n            focusedLayerRef.current = layer;\n        }, onBlur: () => {\n            focusedLayerRef.current = undefined;\n        }, onKeyDown: (e) => {\n            const isEnter = e.key === 'Enter' || e.code === 'Enter';\n            const isSpace = e.key === ' ' || e.key === 'Spacebar' || e.code === 'Space';\n            if (isEnter || isSpace) {\n                // prevent page scroll on space\n                if (isSpace) {\n                    e.preventDefault();\n                }\n                if (focusedLayerRef.current) {\n                    updateBgLayerVisibility(e);\n                }\n            }\n        }, onClick: updateBgLayerVisibility },\n        React.createElement(Spin, { spinning: loading },\n            React.createElement(MapComponent, { mapDivId: `previewmap-${uid}`, style: {\n                    height,\n                    width\n                }, map: previewMap }),\n            React.createElement(\"span\", { className: \"layer-title\" }, titleRenderer ? titleRenderer(layer) : layer.get('name')))));\n};\nexport default BackgroundLayerPreview;\n//# sourceMappingURL=BackgroundLayerPreview.js.map","import React, { useEffect, useRef, useState } from 'react';\nimport { faBan, faChevronLeft, faChevronRight } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport OlOverviewMap from 'ol/control/OverviewMap';\nimport OlLayerGroup from 'ol/layer/Group';\nimport OlLayerImage from 'ol/layer/Image';\nimport OlLayerTile from 'ol/layer/Tile';\nimport OlSourceImageWMS from 'ol/source/ImageWMS';\nimport OlSourceOSM from 'ol/source/OSM';\nimport OlSourceTileWMS from 'ol/source/TileWMS';\nimport OlSourceWMTS from 'ol/source/WMTS';\nimport { getUid } from 'ol/util';\nimport OlView from 'ol/View';\nimport { apply as applyMapboxStyle } from 'ol-mapbox-style';\nimport useMap from '@terrestris/react-util/dist/Hooks/useMap/useMap';\nimport BackgroundLayerPreview from '../BackgroundLayerPreview/BackgroundLayerPreview';\nimport SimpleButton from '../Button/SimpleButton/SimpleButton';\nimport './BackgroundLayerChooser.less';\n/**\n * This component supports TileWMS and ImageWMS layers. Besides that, mapbox vector tile layers are\n * also supported in a limited way:\n *\n * * you'll need to render the vector tile layer inside of a group layer\n * * the group layer needs to have a property isVectorTile set to true\n * * the group layer needs to have a property url pointing to the json description\n */\nexport const BackgroundLayerChooser = ({ layers, allowEmptyBackground = false, buttonTooltip = 'Change background layer', initiallySelectedLayer, noBackgroundTitle = 'No Background', backgroundLayerFilter = (l) => !!l.get('isBackgroundLayer'), titleRenderer }) => {\n    const map = useMap();\n    const [zoom, setZoom] = useState(map?.getView()?.getZoom());\n    const [center, setCenter] = useState(map?.getView()?.getCenter());\n    const [layerOptionsVisible, setLayerOptionsVisible] = useState(false);\n    const [selectedLayer, setSelectedLayer] = useState();\n    const [isBackgroundImage, setIsBackgroundImage] = useState(false);\n    const mapTarget = useRef(null);\n    useEffect(() => {\n        if (map && layerOptionsVisible) {\n            setCenter(map.getView().getCenter());\n            setZoom(map.getView().getZoom());\n            const centerListener = (evt) => {\n                setCenter(evt.target.getCenter());\n            };\n            const resolutionListener = (evt) => {\n                setZoom(evt.target.getZoom());\n            };\n            map.getView().on('change:center', centerListener);\n            map.getView().on('change:resolution', resolutionListener);\n            return () => {\n                map.getView().un('change:center', centerListener);\n                map.getView().un('change:resolution', resolutionListener);\n            };\n        }\n        return undefined;\n    }, [map, layerOptionsVisible]);\n    useEffect(() => {\n        if (initiallySelectedLayer) {\n            setSelectedLayer(initiallySelectedLayer);\n        }\n        else {\n            const activeLayerCand = layers.find(l => l.getVisible());\n            setSelectedLayer(activeLayerCand);\n        }\n    }, [initiallySelectedLayer, layers]);\n    useEffect(() => {\n        if (!selectedLayer || !map) {\n            return undefined;\n        }\n        const selectedLayerSource = selectedLayer.getSource();\n        let ovLayer = null;\n        if (selectedLayer instanceof OlLayerTile) {\n            let newSource = null;\n            if (selectedLayerSource instanceof OlSourceTileWMS) {\n                newSource = new OlSourceTileWMS({\n                    url: selectedLayerSource.getUrls()?.[0],\n                    params: selectedLayerSource.getParams(),\n                    tileLoadFunction: selectedLayerSource.getTileLoadFunction()\n                });\n            }\n            else if (selectedLayerSource instanceof OlSourceOSM) {\n                newSource = new OlSourceOSM();\n            }\n            else if (selectedLayerSource instanceof OlSourceWMTS) {\n                const newTileGrid = selectedLayerSource.getTileGrid();\n                if (!newTileGrid) {\n                    return;\n                }\n                newSource = new OlSourceWMTS({\n                    url: selectedLayerSource.getUrls()?.[0],\n                    layer: selectedLayerSource.getLayer(),\n                    matrixSet: selectedLayerSource.getMatrixSet(),\n                    format: selectedLayerSource.getFormat(),\n                    tileGrid: newTileGrid,\n                    style: selectedLayerSource.getStyle(),\n                    requestEncoding: selectedLayerSource.getRequestEncoding(),\n                    version: selectedLayerSource.getVersion(),\n                    dimensions: selectedLayerSource.getDimensions(),\n                    wrapX: selectedLayerSource.getWrapX()\n                });\n            }\n            if (newSource) {\n                ovLayer = new OlLayerTile({\n                    source: newSource\n                });\n            }\n        }\n        else if (selectedLayer instanceof OlLayerImage) {\n            let newSource = null;\n            if (selectedLayerSource instanceof OlSourceImageWMS) {\n                newSource = new OlSourceImageWMS({\n                    url: selectedLayerSource.getUrl(),\n                    params: selectedLayerSource.getParams(),\n                    imageLoadFunction: selectedLayerSource.getImageLoadFunction()\n                });\n            }\n            if (newSource) {\n                ovLayer = new OlLayerImage({\n                    source: selectedLayer.getSource()\n                });\n            }\n        }\n        else if (selectedLayer instanceof OlLayerGroup) {\n            if (selectedLayer.get('isVectorTile')) {\n                ovLayer = new OlLayerGroup();\n                applyMapboxStyle(ovLayer, selectedLayer.get('url'));\n            }\n            else {\n                ovLayer = new OlLayerGroup({\n                    layers: selectedLayer.getLayers()\n                });\n            }\n        }\n        if (ovLayer && mapTarget.current) {\n            const overViewControl = new OlOverviewMap({\n                collapsible: false,\n                target: mapTarget.current,\n                className: 'ol-overviewmap react-geo-bg-layer-chooser-overviewmap',\n                layers: [ovLayer],\n                view: new OlView({\n                    projection: map.getView().getProjection()\n                })\n            });\n            map.addControl(overViewControl);\n            return () => {\n                map.removeControl(overViewControl);\n            };\n        }\n        return undefined;\n    }, [selectedLayer, map]);\n    const onLayerSelect = (layer) => {\n        setLayerOptionsVisible(false);\n        setSelectedLayer(layer);\n        setIsBackgroundImage(false);\n    };\n    const emptyBackgroundWasFocusedRef = useRef(false);\n    const handleEmptyBgClick = () => {\n        selectedLayer?.setVisible(false);\n        setSelectedLayer(undefined);\n        // I am unsure why we do hide the layer options,\n        // it is different to what we do for the other layer cards\n        setLayerOptionsVisible(false);\n        setIsBackgroundImage(true);\n    };\n    return (React.createElement(\"div\", { className: \"bg-layer-chooser\" },\n        layerOptionsVisible && (React.createElement(\"div\", { className: \"layer-cards\" },\n            layers.filter(backgroundLayerFilter).map(layer => (React.createElement(BackgroundLayerPreview, { key: getUid(layer), activeLayer: selectedLayer, onClick: l => onLayerSelect(l), layer: layer, backgroundLayerFilter: backgroundLayerFilter, zoom: zoom, center: center, titleRenderer: titleRenderer }))),\n            allowEmptyBackground &&\n                React.createElement(\"div\", { role: \"button\", tabIndex: 0, className: `no-background${selectedLayer ? '' : ' selected'}`, onMouseOver: () => {\n                        selectedLayer?.setVisible(false);\n                    }, onMouseLeave: () => {\n                        selectedLayer?.setVisible(true);\n                    }, onFocus: () => {\n                        emptyBackgroundWasFocusedRef.current = true;\n                    }, onBlur: () => {\n                        emptyBackgroundWasFocusedRef.current = false;\n                    }, onKeyDown: (e) => {\n                        const isEnter = e.key === 'Enter' || e.code === 'Enter';\n                        const isSpace = e.key === ' ' || e.key === 'Spacebar' || e.code === 'Space';\n                        if (isEnter || isSpace) {\n                            if (isSpace) {\n                                e.preventDefault();\n                            }\n                            if (emptyBackgroundWasFocusedRef.current) {\n                                handleEmptyBgClick();\n                            }\n                        }\n                    }, onClick: handleEmptyBgClick },\n                    React.createElement(\"div\", { className: \"no-background-preview\" },\n                        React.createElement(FontAwesomeIcon, { icon: faBan })),\n                    React.createElement(\"span\", { className: \"layer-title\" }, noBackgroundTitle)))),\n        React.createElement(SimpleButton, { className: `change-bg-btn${layerOptionsVisible ? ' toggled' : ''}`, size: \"small\", tooltip: buttonTooltip, \"aria-expanded\": layerOptionsVisible, icon: layerOptionsVisible ?\n                React.createElement(FontAwesomeIcon, { icon: faChevronRight }) :\n                React.createElement(FontAwesomeIcon, { icon: faChevronLeft }), onClick: () => setLayerOptionsVisible(!layerOptionsVisible) }),\n        React.createElement(\"div\", { className: \"bg-preview\" },\n            !isBackgroundImage ?\n                React.createElement(\"div\", { id: \"overview-map\", ref: mapTarget }) :\n                React.createElement(\"div\", { className: \"no-background-preview\" },\n                    React.createElement(FontAwesomeIcon, { icon: faBan })),\n            selectedLayer ?\n                React.createElement(\"span\", { className: \"layer-title\" }, titleRenderer ? titleRenderer(selectedLayer) : selectedLayer.get('name')) :\n                React.createElement(\"span\", { className: \"layer-title\" }, noBackgroundTitle))));\n};\nexport default BackgroundLayerChooser;\n//# sourceMappingURL=BackgroundLayerChooser.js.map","import * as React from 'react';\nimport { Button, Tooltip } from 'antd';\nimport { CSS_PREFIX } from '../../constants';\nconst defaultClassName = `${CSS_PREFIX}simplebutton`;\nconst SimpleButton = ({ className, type = 'primary', tooltip, tooltipPlacement, tooltipProps = {\n    mouseEnterDelay: 1.5\n}, children, ...passThroughProps }) => {\n    const finalClassName = className\n        ? `${className} ${defaultClassName}`\n        : `${defaultClassName}`;\n    return (React.createElement(Tooltip, { title: tooltip, placement: tooltipPlacement, ...tooltipProps },\n        React.createElement(Button, { className: finalClassName, type: type, ...passThroughProps }, children)));\n};\nexport default SimpleButton;\n//# sourceMappingURL=SimpleButton.js.map","import React, { useCallback } from 'react';\nexport const MapComponent = ({ map, mapDivId = 'map', ...passThroughProps }) => {\n    const refCallback = useCallback((ref) => {\n        if (!map) {\n            return;\n        }\n        if (ref === null) {\n            map.setTarget(undefined);\n        }\n        else {\n            map.setTarget(ref);\n        }\n    }, [map]);\n    if (!map) {\n        return React.createElement(React.Fragment, null);\n    }\n    return (React.createElement(\"div\", { id: mapDivId, ref: refCallback, className: \"map\", role: \"presentation\", ...passThroughProps }));\n};\nexport default MapComponent;\n//# sourceMappingURL=MapComponent.js.map","const CSS_PREFIX = 'react-geo-';\nexport { CSS_PREFIX };\n//# sourceMappingURL=constants.js.map"],"names":["o","e","t","M","i","n","c"],"mappings":"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"}