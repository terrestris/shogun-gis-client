{"version":3,"file":"7002.6be8221e253e9f2b.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/ol-util/dist/MeasureUtil/MeasureUtil.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-util/dist/constants.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-util/dist/Hooks/useMeasure/useMeasure.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-geo/dist/Button/MeasureButton/MeasureButton.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-geo/dist/Button/ToggleButton/ToggleButton.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-geo/dist/constants.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-util/dist/Hooks/useOlInteraction/useOlInteraction.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-util/dist/Hooks/useOlLayer/useOlLayer.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-util/dist/Hooks/useOlListener/useOlListener.js"],"sourcesContent":["import _isNil from 'lodash/isNil';\nimport OlGeomCircle from 'ol/geom/Circle';\nimport { getArea, getLength } from 'ol/sphere';\n/**\n * This class provides some static methods which might be helpful when working\n * with measurements.\n *\n * @class MeasureUtil\n */\nclass MeasureUtil {\n    /**\n     * Get the length of a OlGeomLineString.\n     *\n     * @param {OlGeomLineString} line The drawn line.\n     * @param {OlMap} map An OlMap.\n     * @param {boolean} geodesic Is the measurement geodesic (default is true).\n     * @param {number} radius Sphere radius. By default, the radius of the earth\n     *                    \t  is used (Clarke 1866 Authalic Sphere, 6371008.8).\n     * @param {number} decimalPrecision Set the decimal precision on length value\n     *                    \t  for non-geodesic map (default value 6)\n     *\n     * @return {number} The length of line in meters.\n     */\n    static getLength(line, map, geodesic = true, radius = 6371008.8, decimalPrecision = 6) {\n        const decimalHelper = Math.pow(10, decimalPrecision);\n        if (geodesic) {\n            const opts = {\n                projection: map.getView().getProjection().getCode(),\n                radius\n            };\n            return getLength(line, opts);\n        }\n        else {\n            return Math.round(line.getLength() * decimalHelper) / decimalHelper;\n        }\n    }\n    /**\n     * Format length output for the tooltip.\n     *\n     * @param {OlGeomLineString} line The drawn line.\n     * @param {OlMap} map An OlMap.\n     * @param {number} decimalPlacesInToolTips How many decimal places will be\n     *   allowed for the measure tooltips\n     * @param {boolean} geodesic Is the measurement geodesic (default is true).\n     *\n     * @return {string} The formatted length of the line (units: km, m or mm).\n     */\n    static formatLength(line, map, decimalPlacesInToolTips, geodesic = true) {\n        const decimalHelper = Math.pow(10, decimalPlacesInToolTips);\n        const length = MeasureUtil.getLength(line, map, geodesic);\n        let output;\n        if (length > 1000) {\n            output = (Math.round(length / 1000 * decimalHelper) /\n                decimalHelper) + ' km';\n        }\n        else if (length > 1) {\n            output = (Math.round(length * decimalHelper) / decimalHelper) +\n                ' m';\n        }\n        else {\n            output = (Math.round(length * 1000 * decimalHelper) / decimalHelper) +\n                ' mm';\n        }\n        return output;\n    }\n    /**\n     * Get the area of an OlGeomPolygon.\n     *\n     * @param {OlGeomPolygon} polygon The drawn polygon.\n     * @param {OlMap} map An OlMap.\n     * @param {boolean} geodesic Is the measurement geodesic (default is true).\n     * @param {number} radius Sphere radius. By default, the radius of the earth\n     *                        is used (Clarke 1866 Authalic Sphere, 6371008.8).\n     *\n     * @return {number} The area of the polygon in square meter.\n     */\n    static getArea(polygon, map, geodesic = true, radius = 6371008.8) {\n        if (geodesic) {\n            const opts = {\n                projection: map.getView().getProjection().getCode(),\n                radius\n            };\n            return getArea(polygon, opts);\n        }\n        else {\n            return polygon.getArea();\n        }\n    }\n    /**\n     * Get the estimated area of an OlGeomCircle.\n     *\n     * @param {OlGeomCircle} circleGeom The drawn circle.\n     * @param {OlMap} map An OlMap.\n     *\n     * @return {number} The area of the circle in square meter.\n     */\n    static getAreaOfCircle(circleGeom, map) {\n        if (_isNil(map.getView().getProjection())) {\n            return NaN;\n        }\n        const sphericalUnits = ['radians', 'degrees'];\n        const projectionUnits = map.getView().getProjection().getUnits();\n        const useSpherical = sphericalUnits.includes(projectionUnits);\n        if (useSpherical) {\n            // see https://math.stackexchange.com/questions/1832110/area-of-a-circle-on-sphere\n            // the radius of the earth - Clarke 1866 authalic Sphere\n            const earthRadius = 6371008.8;\n            const radius = circleGeom.getRadius();\n            let area = 2.0 * Math.PI * Math.pow(earthRadius, 2);\n            area *= (1 - Math.cos(radius / earthRadius));\n            return area;\n        }\n        else {\n            return Math.PI * Math.pow(circleGeom.getRadius(), 2);\n        }\n    }\n    /**\n     * Format area output for the tooltip.\n     *\n     * @param {OlGeomPolygon | OlGeomCircle} geom The drawn geometry (circle or polygon).\n     * @param {OlMap} map An OlMap.\n     * @param {number} decimalPlacesInToolTips How many decimal places will be\n     *   allowed for the measure tooltips.\n     * @param {boolean} geodesic Is the measurement geodesic.\n     *\n     * @return {string} The formatted area of the polygon.\n     */\n    static formatArea(geom, map, decimalPlacesInToolTips, geodesic = true) {\n        const decimalHelper = Math.pow(10, decimalPlacesInToolTips);\n        let area;\n        if (geom instanceof OlGeomCircle) {\n            area = MeasureUtil.getAreaOfCircle(geom, map);\n        }\n        else {\n            area = MeasureUtil.getArea(geom, map, geodesic);\n        }\n        let output;\n        if (area > 10000) {\n            output = (Math.round(area / 1000000 * decimalHelper) /\n                decimalHelper) + ' km<sup>2</sup>';\n        }\n        else if (area > 0.01) {\n            output = (Math.round(area * decimalHelper) / decimalHelper) +\n                ' m<sup>2</sup>';\n        }\n        else {\n            output = (Math.round(area * 1000000 * decimalHelper) / decimalHelper) +\n                ' mm<sup>2</sup>';\n        }\n        return output;\n    }\n    /**\n     * Determine the angle between two coordinates. The angle will be between\n     * -180° and 180°, with 0° being in the east. The angle will increase\n     * counter-clockwise.\n     *\n     * Inspired by https://stackoverflow.com/a/31136507\n     *\n     * @param {Array<number>} start The start coordinates of the line with the\n     *     x-coordinate being at index `0` and y-coordinate being at index `1`.\n     * @param {Array<number>} end The end coordinates of the line with the\n     *     x-coordinate being at index `0` and y-coordinate being at index `1`.\n     *\n     * @return {number} the angle in degrees, ranging from -180° to 180°.\n     */\n    static angle(start, end) {\n        const dx = start[0] - end[0];\n        const dy = start[1] - end[1];\n        // range (-PI, PI]\n        let theta = Math.atan2(dy, dx);\n        // rads to degs, range (-180, 180]\n        theta *= 180 / Math.PI;\n        return theta;\n    }\n    /**\n     * Determine the angle between two coordinates. The angle will be between\n     * 0° and 360°, with 0° being in the east. The angle will increase\n     * counter-clockwise.\n     *\n     * Inspired by https://stackoverflow.com/a/31136507\n     *\n     * @param {Array<number>} start The start coordinates of the line with the\n     *     x-coordinate being at index `0` and y-coordinate being at index `1`.\n     * @param {Array<number>} end The end coordinates of the line with the\n     *     x-coordinate being at index `0` and y-coordinate being at index `1`.\n     *\n     * @return {number} the angle in degrees, ranging from 0° and 360°.\n     */\n    static angle360(start, end) {\n        // range (-180, 180]\n        let theta = MeasureUtil.angle(start, end);\n        if (theta < 0) {\n            // range [0, 360)\n            theta = 360 + theta;\n        }\n        return theta;\n    }\n    /**\n     * Given an angle between 0° and 360° this angle returns the exact opposite\n     * of the angle, e.g. for 90° you'll get back 270°. This effectively turns\n     * the direction of the angle from counter-clockwise to clockwise.\n     *\n     * @param {number} angle360 The input angle obtained counter-clockwise.\n     *\n     * @return {number} The clockwise angle.\n     */\n    static makeClockwise(angle360) {\n        return 360 - angle360;\n    }\n    /**\n     * This methods adds an offset of 90° to an counter-clockwise increasing\n     * angle of a line so that the origin (0°) lies at the top (in the north).\n     *\n     * @param {number} angle360 The input angle obtained counter-clockwise, with\n     *     0° degrees being in the east.\n     *\n     * @return {number} The adjusted angle, with 0° being in the north.\n     */\n    static makeZeroDegreesAtNorth(angle360) {\n        let corrected = angle360 + 90;\n        if (corrected > 360) {\n            corrected = corrected - 360;\n        }\n        return corrected;\n    }\n    /**\n     * Returns the angle of the passed linestring in degrees, with 'N' being the\n     * 0°-line and the angle increases in clockwise direction.\n     *\n     * @param {OlGeomLineString} line The linestring to get the\n     *   angle from. As this line is coming from our internal draw\n     *   interaction, we know that it will only consist of two points.\n     * @param {number} decimalPlacesInToolTips How many decimal places will be\n     *   allowed for the measure tooltips.\n     *\n     * @return {string} The formatted angle of the line.\n     */\n    static formatAngle(line, decimalPlacesInToolTips = 2) {\n        const coords = line.getCoordinates();\n        const numCoords = coords.length;\n        if (numCoords < 2) {\n            return '';\n        }\n        const lastPoint = coords[numCoords - 1];\n        const prevPoint = coords[numCoords - 2];\n        let angle = MeasureUtil.angle360(prevPoint, lastPoint);\n        angle = MeasureUtil.makeZeroDegreesAtNorth(angle);\n        angle = MeasureUtil.makeClockwise(angle);\n        return `${angle.toFixed(decimalPlacesInToolTips)}°`;\n    }\n}\nexport default MeasureUtil;\n//# sourceMappingURL=MeasureUtil.js.map","const CSS_PREFIX = 'react-util-';\nexport { CSS_PREFIX };\n//# sourceMappingURL=constants.js.map","import { useCallback, useEffect, useRef, useState } from 'react';\nimport OlCollection from 'ol/Collection';\nimport OlGeomCircle from 'ol/geom/Circle';\nimport OlGeomLineString from 'ol/geom/LineString';\nimport OlGeomMultiLineString from 'ol/geom/MultiLineString';\nimport OlGeomMultiPolygon from 'ol/geom/MultiPolygon';\nimport OlGeomPolygon from 'ol/geom/Polygon';\nimport OlInteractionDraw from 'ol/interaction/Draw';\nimport OlLayerVector from 'ol/layer/Vector';\nimport OlOverlay from 'ol/Overlay';\nimport OlSourceVector from 'ol/source/Vector';\nimport OlStyleCircle from 'ol/style/Circle';\nimport OlStyleFill from 'ol/style/Fill';\nimport OlStyleStroke from 'ol/style/Stroke';\nimport OlStyleStyle from 'ol/style/Style';\nimport MeasureUtil from '@terrestris/ol-util/dist/MeasureUtil/MeasureUtil';\nimport { CSS_PREFIX } from '../../constants';\nimport useMap from '../useMap/useMap';\nimport { useOlInteraction } from '../useOlInteraction/useOlInteraction';\nimport useOlLayer from '../useOlLayer/useOlLayer';\nimport useOlListener from '../useOlListener/useOlListener';\nexport const useMeasure = ({ measureType, measureLayerName = 'react-util-measure', fillColor = 'rgba(255, 0, 0, 0.5)', strokeColor = 'rgba(255, 0, 0, 0.8)', showMeasureInfoOnClickedPoints = false, showHelpTooltip = true, decimalPlacesInTooltips = 2, multipleDrawing = false, continuePolygonMsg = 'Click to draw area', continueLineMsg = 'Click to draw line', continueAngleMsg = 'Click to draw angle', clickToDrawText = 'Click to measure', measureTooltipCssClasses = {\n    tooltip: `${CSS_PREFIX}measure-tooltip`,\n    tooltipDynamic: `${CSS_PREFIX}measure-tooltip-dynamic`,\n    tooltipStatic: `${CSS_PREFIX}measure-tooltip-static`\n}, active = false, geodesic = true, measureRadius = false }) => {\n    const [feature, setFeature] = useState();\n    const measureTooltip = useRef();\n    const helpTooltip = useRef();\n    const stepMeasureTooltips = useRef([]);\n    const map = useMap();\n    const measureLayer = useOlLayer(() => new OlLayerVector({\n        properties: {\n            name: measureLayerName\n        },\n        source: new OlSourceVector({\n            features: new OlCollection()\n        }),\n        style: new OlStyleStyle({\n            fill: new OlStyleFill({\n                color: fillColor\n            }),\n            stroke: new OlStyleStroke({\n                color: strokeColor,\n                width: 2\n            }),\n            image: new OlStyleCircle({\n                radius: 7,\n                fill: new OlStyleFill({\n                    color: fillColor\n                })\n            })\n        })\n    }), [\n        measureLayerName,\n        fillColor,\n        strokeColor,\n        fillColor\n    ], active);\n    const drawInteraction = useOlInteraction(() => {\n        const getDrawType = (input) => {\n            switch (input) {\n                case 'line':\n                case 'angle':\n                    return 'MultiLineString';\n                case 'polygon':\n                    return 'MultiPolygon';\n                case 'circle':\n                    return 'Circle';\n                default:\n                    return 'MultiLineString';\n            }\n        };\n        return (new OlInteractionDraw({\n            source: measureLayer?.getSource() || undefined,\n            type: getDrawType(measureType),\n            maxPoints: measureType === 'angle' ? 2 : undefined,\n            style: new OlStyleStyle({\n                fill: new OlStyleFill({\n                    color: fillColor\n                }),\n                stroke: new OlStyleStroke({\n                    color: strokeColor,\n                    lineDash: [10, 10],\n                    width: 2\n                }),\n                image: new OlStyleCircle({\n                    radius: 5,\n                    stroke: new OlStyleStroke({\n                        color: strokeColor\n                    }),\n                    fill: new OlStyleFill({\n                        color: fillColor\n                    })\n                })\n            }),\n            freehandCondition: () => false\n        }));\n    }, [measureType, measureLayer, fillColor, strokeColor, fillColor], active);\n    const removeMeasureTooltip = useCallback(() => {\n        if (map && measureTooltip.current) {\n            map.removeOverlay(measureTooltip.current);\n            measureTooltip.current = undefined;\n        }\n    }, [map]);\n    const removeStepMeasureTooltips = useCallback(() => {\n        if (map && stepMeasureTooltips.current.length > 0) {\n            for (const overlay of stepMeasureTooltips.current) {\n                map.removeOverlay(overlay);\n            }\n            stepMeasureTooltips.current = [];\n        }\n    }, [map]);\n    const removeHelpTooltip = useCallback(() => {\n        if (map && helpTooltip.current) {\n            map.removeOverlay(helpTooltip.current);\n            helpTooltip.current = undefined;\n        }\n    }, [map]);\n    const cleanup = useCallback(() => {\n        removeMeasureTooltip();\n        removeStepMeasureTooltips();\n        removeHelpTooltip();\n        measureLayer?.getSource()?.clear();\n    }, [measureLayer, removeMeasureTooltip, removeStepMeasureTooltips, removeHelpTooltip]);\n    useEffect(() => {\n        if (active) {\n            return () => {\n                cleanup();\n            };\n        }\n        return undefined;\n    }, [active, cleanup]);\n    const createHelpTooltip = useCallback(() => {\n        if (!map || helpTooltip.current) {\n            return;\n        }\n        helpTooltip.current = new OlOverlay({\n            element: document.createElement('div'),\n            offset: [15, 0],\n            positioning: 'center-left',\n            className: measureTooltipCssClasses?.tooltip ?? ''\n        });\n        map.addOverlay(helpTooltip.current);\n    }, [map, measureTooltipCssClasses?.tooltip]);\n    const createMeasureTooltip = useCallback(() => {\n        if (!map || measureTooltip.current) {\n            return;\n        }\n        measureTooltip.current = new OlOverlay({\n            element: document.createElement('div'),\n            offset: [0, -15],\n            positioning: 'bottom-center',\n            className: measureTooltipCssClasses\n                ? `${measureTooltipCssClasses.tooltip} ${measureTooltipCssClasses.tooltipDynamic}`\n                : ''\n        });\n        map.addOverlay(measureTooltip.current);\n    }, [map, measureTooltip, measureTooltipCssClasses]);\n    const updateMeasureTooltip = useCallback(() => {\n        if (!measureTooltip.current || !feature || !map) {\n            return;\n        }\n        let output;\n        let geom = feature.getGeometry();\n        if (geom instanceof OlGeomMultiPolygon) {\n            geom = geom.getPolygons()[0];\n        }\n        else if (geom instanceof OlGeomMultiLineString) {\n            geom = geom.getLineStrings()[0];\n        }\n        let measureTooltipCoord;\n        if (geom instanceof OlGeomCircle) {\n            if (!measureRadius) {\n                output = MeasureUtil.formatArea(geom, map, decimalPlacesInTooltips, geodesic);\n            }\n            else {\n                const area = MeasureUtil.getAreaOfCircle(geom, map);\n                const decimalHelper = Math.pow(10, decimalPlacesInTooltips);\n                const radius = Math.round(geom.getRadius() * decimalHelper) / decimalHelper;\n                output = `${radius.toString()} m`;\n                if (area > (Math.PI * 1000000)) {\n                    output = (Math.round(geom.getRadius() / 1000 * decimalHelper) /\n                        decimalHelper) + ' km';\n                }\n            }\n            measureTooltipCoord = geom.getCenter();\n        }\n        else if (geom instanceof OlGeomPolygon) {\n            output = MeasureUtil.formatArea(geom, map, decimalPlacesInTooltips, geodesic);\n            // attach area at interior point\n            measureTooltipCoord = geom.getInteriorPoint().getCoordinates();\n        }\n        else if (geom instanceof OlGeomLineString) {\n            measureTooltipCoord = geom.getLastCoordinate();\n            if (measureType === 'line') {\n                output = MeasureUtil.formatLength(geom, map, decimalPlacesInTooltips, geodesic);\n            }\n            else if (measureType === 'angle') {\n                output = MeasureUtil.formatAngle(geom, 0);\n            }\n        }\n        else {\n            return;\n        }\n        const el = measureTooltip.current.getElement();\n        if (output && el) {\n            el.innerHTML = output;\n        }\n        measureTooltip.current.setPosition(measureTooltipCoord);\n    }, [decimalPlacesInTooltips, feature, geodesic, map, measureType, measureRadius]);\n    const onDrawStart = useCallback((evt) => {\n        if (!map) {\n            return;\n        }\n        if (!multipleDrawing) {\n            cleanup();\n        }\n        setFeature(evt.feature);\n    }, [cleanup, map, multipleDrawing]);\n    const addMeasureStopTooltip = useCallback((coordinate) => {\n        if (!feature || !map) {\n            return;\n        }\n        let geom = feature.getGeometry();\n        if (geom instanceof OlGeomMultiPolygon) {\n            geom = geom.getPolygons()[0];\n        }\n        if (geom instanceof OlGeomMultiLineString) {\n            geom = geom.getLineStrings()[0];\n        }\n        const value = measureType === 'line' ?\n            MeasureUtil.formatLength(geom, map, decimalPlacesInTooltips, geodesic) :\n            MeasureUtil.formatArea(geom, map, decimalPlacesInTooltips, geodesic);\n        if (parseInt(value, 10) > 0) {\n            const div = document.createElement('div');\n            if (measureTooltipCssClasses) {\n                div.className = `${measureTooltipCssClasses.tooltip} ${measureTooltipCssClasses.tooltipStatic}`;\n            }\n            div.innerHTML = value;\n            const tooltip = new OlOverlay({\n                element: div,\n                offset: [0, -15],\n                positioning: 'bottom-center'\n            });\n            map.addOverlay(tooltip);\n            tooltip.setPosition(coordinate);\n            stepMeasureTooltips.current.push(tooltip);\n        }\n    }, [decimalPlacesInTooltips, feature, geodesic, map, measureTooltipCssClasses, measureType]);\n    const onDrawEnd = useCallback((evt) => {\n        if (multipleDrawing) {\n            addMeasureStopTooltip(evt.feature.getGeometry()\n                .getLastCoordinate());\n        }\n        // TODO Recheck this\n        // Fix doubled label for lastPoint of line\n        if ((multipleDrawing || showMeasureInfoOnClickedPoints) &&\n            (measureType === 'line' || measureType === 'polygon')) {\n            removeMeasureTooltip();\n        }\n        else {\n            const el = measureTooltip.current?.getElement();\n            if (el && measureTooltipCssClasses) {\n                el.className = `${measureTooltipCssClasses.tooltip} ${measureTooltipCssClasses.tooltipStatic}`;\n            }\n            measureTooltip.current?.setOffset([0, -7]);\n        }\n        updateMeasureTooltip();\n        // unset sketch\n        setFeature(undefined);\n        // fix doubled label for last point of line\n        if ((multipleDrawing || showMeasureInfoOnClickedPoints) &&\n            (measureType === 'line' || measureType === 'polygon')) {\n            measureTooltip.current = undefined;\n            createMeasureTooltip();\n        }\n    }, [addMeasureStopTooltip, createMeasureTooltip, measureTooltipCssClasses,\n        measureType, multipleDrawing, removeMeasureTooltip, showMeasureInfoOnClickedPoints, updateMeasureTooltip]);\n    const updateHelpTooltip = useCallback((coordinate) => {\n        if (!helpTooltip.current) {\n            return;\n        }\n        const helpTooltipElement = helpTooltip.current?.getElement();\n        if (!helpTooltipElement) {\n            return;\n        }\n        let msg = clickToDrawText;\n        if (measureType === 'polygon') {\n            msg = continuePolygonMsg;\n        }\n        else if (measureType === 'line') {\n            msg = continueLineMsg;\n        }\n        else if (measureType === 'angle') {\n            msg = continueAngleMsg;\n        }\n        helpTooltipElement.innerHTML = msg ?? '';\n        helpTooltip.current.setPosition(coordinate);\n    }, [clickToDrawText, continueAngleMsg, continueLineMsg, continuePolygonMsg, helpTooltip, measureType]);\n    const onMapPointerMove = useCallback((evt) => {\n        if (!evt.dragging && active) {\n            updateHelpTooltip(evt.coordinate);\n        }\n    }, [updateHelpTooltip, active]);\n    const onMapClick = useCallback((evt) => {\n        if (showMeasureInfoOnClickedPoints && measureType === 'line') {\n            addMeasureStopTooltip(evt.coordinate);\n        }\n    }, [addMeasureStopTooltip, measureType, showMeasureInfoOnClickedPoints]);\n    useOlListener(drawInteraction, i => i.on('drawstart', (evt) => {\n        onDrawStart?.(evt);\n    }), [drawInteraction, onDrawStart]);\n    useOlListener(drawInteraction, i => i.on('drawend', (evt) => {\n        onDrawEnd?.(evt);\n    }), [drawInteraction, onDrawEnd]);\n    useOlListener(map, i => i.on('pointermove', (evt) => {\n        onMapPointerMove?.(evt);\n    }), [map, onMapPointerMove]);\n    useOlListener(map, i => i.on('click', (evt) => {\n        onMapClick?.(evt);\n    }), [map, onMapClick]);\n    useEffect(() => {\n        createMeasureTooltip();\n        if (showHelpTooltip) {\n            createHelpTooltip();\n        }\n    }, [createHelpTooltip, createMeasureTooltip, showHelpTooltip]);\n    useOlListener(feature, i => i.getGeometry()?.on('change', () => {\n        updateMeasureTooltip?.();\n    }), [feature, updateMeasureTooltip]);\n    return null;\n};\nexport default useMeasure;\n//# sourceMappingURL=useMeasure.js.map","import './MeasureButton.less';\nimport useMeasure from '@terrestris/react-util/dist/Hooks/useMeasure/useMeasure';\nimport React from 'react';\nimport { CSS_PREFIX } from '../../constants';\nimport ToggleButton from '../ToggleButton/ToggleButton';\nconst defaulClassName = `${CSS_PREFIX}measurebutton`;\nexport const MeasureButton = ({ measureType = 'line', measureLayerName = 'react-geo_measure', fillColor = 'rgba(255, 0, 0, 0.5)', strokeColor = 'rgba(255, 0, 0, 0.8)', showMeasureInfoOnClickedPoints = false, showHelpTooltip = true, decimalPlacesInTooltips = 2, multipleDrawing = false, continuePolygonMsg = 'Click to draw area', continueLineMsg = 'Click to draw line', continueAngleMsg = 'Click to draw angle', clickToDrawText = 'Click to measure', measureTooltipCssClasses = {\n    tooltip: `${CSS_PREFIX}measure-tooltip`,\n    tooltipDynamic: `${CSS_PREFIX}measure-tooltip-dynamic`,\n    tooltipStatic: `${CSS_PREFIX}measure-tooltip-static`\n}, pressed = false, geodesic = true, measureRadius = false, className, ...passThroughProps }) => {\n    useMeasure({\n        active: !!pressed,\n        measureType,\n        measureLayerName,\n        fillColor,\n        strokeColor,\n        showMeasureInfoOnClickedPoints,\n        showHelpTooltip,\n        decimalPlacesInTooltips,\n        multipleDrawing,\n        continuePolygonMsg,\n        continueLineMsg,\n        continueAngleMsg,\n        clickToDrawText,\n        measureTooltipCssClasses,\n        geodesic,\n        measureRadius\n    });\n    const finalClassName = className\n        ? `${className} ${defaulClassName}`\n        : defaulClassName;\n    return (React.createElement(ToggleButton, { pressed: pressed, className: finalClassName, ...passThroughProps }));\n};\nexport default MeasureButton;\n//# sourceMappingURL=MeasureButton.js.map","import './ToggleButton.less';\nimport { Button, Tooltip } from 'antd';\nimport React from 'react';\nimport { CSS_PREFIX } from '../../constants';\nexport const ToggleButton = ({ type = 'primary', pressed = false, tooltipProps = {\n    mouseEnterDelay: 1.5\n}, className, tooltip, tooltipPlacement, pressedIcon, icon, children, value, onClick, onChange = () => { }, ...passThroughProps }) => {\n    const handleChange = (evt) => {\n        if (onClick) {\n            onClick(evt);\n            if (evt.defaultPrevented) {\n                return;\n            }\n        }\n        onChange(evt, value);\n    };\n    const internalClassName = `${CSS_PREFIX}togglebutton`;\n    const finalClassName = className\n        ? `${className} ${internalClassName}`\n        : internalClassName;\n    let pressedClass = '';\n    if (pressed) {\n        pressedClass = ' btn-pressed';\n    }\n    return (React.createElement(Tooltip, { title: tooltip, placement: tooltipPlacement, ...tooltipProps },\n        React.createElement(Button, { type: type, onClick: handleChange, onChange: onChange, className: `${finalClassName}${pressedClass}`, \"aria-pressed\": pressed, icon: pressed ?\n                pressedIcon :\n                icon, ...passThroughProps }, children)));\n};\nexport default ToggleButton;\n//# sourceMappingURL=ToggleButton.js.map","const CSS_PREFIX = 'react-geo-';\nexport { CSS_PREFIX };\n//# sourceMappingURL=constants.js.map","import { useEffect, useState } from 'react';\nimport { isNil } from 'lodash';\nimport useMap from '../useMap/useMap';\n/**\n * This hook adds an interaction to the map and removes/updates it if the dependency array changes.\n * It accepts an optional active parameter that toggles the active state of the interaction. If it is undefined the\n * active state will not get changed.\n * @param constructor returns an interaction to be added to the map, will be called again, if the interaction needs\n * to be updated\n * @param dependencies\n * @param active\n */\nexport const useOlInteraction = (constructor, dependencies, active) => {\n    const map = useMap();\n    const [interaction, setInteraction] = useState();\n    useEffect(() => {\n        if (!map) {\n            return undefined;\n        }\n        const newInteraction = constructor();\n        if (!newInteraction) {\n            return undefined;\n        }\n        setInteraction(newInteraction);\n        map.addInteraction(newInteraction);\n        return () => {\n            map.removeInteraction(newInteraction);\n            setInteraction(undefined);\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [...dependencies, map]);\n    useEffect(() => {\n        if (!interaction || isNil(active)) {\n            return;\n        }\n        interaction.setActive(active);\n    }, [interaction, active]);\n    return interaction;\n};\nexport default useOlInteraction;\n//# sourceMappingURL=useOlInteraction.js.map","import { useEffect, useState } from 'react';\nimport { isNil } from 'lodash';\nimport useMap from '../useMap/useMap';\n/**\n * This hook adds a layer to the map and removes/updates it if the dependency array changes.\n * It accepts an optional visible parameter that toggles the visible state of the layer. If it is undefined the\n * visible state will not get changed.\n * @param constructor returns a layer to be added to the map, will be called again, if the layer needs\n * to be updated\n * @param dependencies\n * @param visible\n */\nexport const useOlLayer = (constructor, dependencies, visible) => {\n    const map = useMap();\n    const [layer, setLayer] = useState();\n    useEffect(() => {\n        if (!map) {\n            return undefined;\n        }\n        const newLayer = constructor();\n        if (!newLayer) {\n            return undefined;\n        }\n        map.addLayer(newLayer);\n        setLayer(newLayer);\n        return () => {\n            map.removeLayer(newLayer);\n            setLayer(undefined);\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [map, ...dependencies]);\n    useEffect(() => {\n        if (!layer || isNil(visible)) {\n            return;\n        }\n        layer.setVisible(visible);\n    }, [layer, visible]);\n    return layer;\n};\nexport default useOlLayer;\n//# sourceMappingURL=useOlLayer.js.map","import { useEffect } from 'react';\nimport { unByKey } from 'ol/Observable';\n/**\n * This hook unregisters listeners if the dependency array changes\n */\nexport const useOlListener = (observable, observe, dependencies, active) => {\n    useEffect(() => {\n        if (!observable || active === false) {\n            return undefined;\n        }\n        const observables = Array.isArray(observable) ? observable : [observable];\n        const keys = observables\n            .flatMap(o => {\n            const k = observe(o);\n            return Array.isArray(k) ? k : [k];\n        })\n            .filter(k => k !== undefined);\n        return () => {\n            for (const key of keys) {\n                unByKey(key);\n            }\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [observable, active, observe, ...dependencies]);\n};\nexport default useOlListener;\n//# sourceMappingURL=useOlListener.js.map"],"names":["MeasureUtil","line","map","geodesic","radius","decimalPrecision","decimalHelper","Math","opts","decimalPlacesInToolTips","output","length","polygon","circleGeom","NaN","sphericalUnits","area","geom","start","end","dx","dy","theta","angle360","corrected","coords","numCoords","lastPoint","prevPoint","angle","CSS_PREFIX","measureType","measureLayerName","fillColor","strokeColor","showMeasureInfoOnClickedPoints","showHelpTooltip","decimalPlacesInTooltips","multipleDrawing","continuePolygonMsg","continueLineMsg","continueAngleMsg","clickToDrawText","measureTooltipCssClasses","active","measureRadius","feature","setFeature","measureTooltip","helpTooltip","stepMeasureTooltips","useMap","measureLayer","useOlLayer","drawInteraction","useOlInteraction","undefined","getDrawType","input","removeMeasureTooltip","removeStepMeasureTooltips","overlay","removeHelpTooltip","cleanup","createHelpTooltip","document","createMeasureTooltip","updateMeasureTooltip","measureTooltipCoord","el","onDrawStart","evt","addMeasureStopTooltip","coordinate","value","parseInt","div","tooltip","onDrawEnd","updateHelpTooltip","helpTooltipElement","msg","onMapPointerMove","onMapClick","useOlListener","i","defaulClassName","MeasureButton","pressed","className","passThroughProps","finalClassName","ToggleButton","type","tooltipProps","tooltipPlacement","pressedIcon","icon","children","onClick","onChange","internalClassName","pressedClass","constructor","dependencies","interaction","setInteraction","newInteraction","visible","layer","setLayer","newLayer","observable","observe","keys","observables","Array","o","k","key"],"mappings":"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"}