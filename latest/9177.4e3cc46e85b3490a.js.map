{"version":3,"file":"9177.4e3cc46e85b3490a.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/ol/source/Source.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/source/Tile.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/tilegrid.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/tilegrid/WMTS.js"],"sourcesContent":["/**\n * @module ol/source/Source\n */\nimport BaseObject from '../Object.js';\nimport {get as getProjection} from '../proj.js';\n\n/**\n * @typedef {'undefined' | 'loading' | 'ready' | 'error'} State\n * State of the source, one of 'undefined', 'loading', 'ready' or 'error'.\n */\n\n/**\n * A function that takes a {@link import(\"../View.js\").ViewStateLayerStateExtent} and returns a string or\n * an array of strings representing source attributions.\n *\n * @typedef {function(import(\"../View.js\").ViewStateLayerStateExtent): (string|Array<string>)} Attribution\n */\n\n/**\n * A type that can be used to provide attribution information for data sources.\n *\n * It represents either\n * a simple string (e.g. `'© Acme Inc.'`)\n * an array of simple strings (e.g. `['© Acme Inc.', '© Bacme Inc.']`)\n * a function that returns a string or array of strings ({@link module:ol/source/Source~Attribution})\n *\n * @typedef {string|Array<string>|Attribution} AttributionLike\n */\n\n/**\n * @typedef {Object} Options\n * @property {AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {import(\"./Source.js\").State} [state='ready'] State.\n * @property {boolean} [wrapX=false] WrapX.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for {@link module:ol/layer/Layer~Layer} sources.\n *\n * A generic `change` event is triggered when the state of the source changes.\n * @abstract\n * @api\n */\nclass Source extends BaseObject {\n  /**\n   * @param {Options} options Source options.\n   */\n  constructor(options) {\n    super();\n\n    /**\n     * @protected\n     * @type {import(\"../proj/Projection.js\").default|null}\n     */\n    this.projection = getProjection(options.projection);\n\n    /**\n     * @private\n     * @type {?Attribution}\n     */\n    this.attributions_ = adaptAttributions(options.attributions);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.attributionsCollapsible_ = options.attributionsCollapsible ?? true;\n\n    /**\n     * This source is currently loading data. Sources that defer loading to the\n     * map's tile queue never set this to `true`.\n     * @type {boolean}\n     */\n    this.loading = false;\n\n    /**\n     * @private\n     * @type {import(\"./Source.js\").State}\n     */\n    this.state_ = options.state !== undefined ? options.state : 'ready';\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.wrapX_ = options.wrapX !== undefined ? options.wrapX : false;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.interpolate_ = !!options.interpolate;\n\n    /**\n     * @protected\n     * @type {function(import(\"../View.js\").ViewOptions):void}\n     */\n    this.viewResolver = null;\n\n    /**\n     * @protected\n     * @type {function(Error):void}\n     */\n    this.viewRejector = null;\n\n    const self = this;\n    /**\n     * @private\n     * @type {Promise<import(\"../View.js\").ViewOptions>}\n     */\n    this.viewPromise_ = new Promise(function (resolve, reject) {\n      self.viewResolver = resolve;\n      self.viewRejector = reject;\n    });\n  }\n\n  /**\n   * Get the attribution function for the source.\n   * @return {?Attribution} Attribution function.\n   * @api\n   */\n  getAttributions() {\n    return this.attributions_;\n  }\n\n  /**\n   * @return {boolean} Attributions are collapsible.\n   * @api\n   */\n  getAttributionsCollapsible() {\n    return this.attributionsCollapsible_;\n  }\n\n  /**\n   * Get the projection of the source.\n   * @return {import(\"../proj/Projection.js\").default|null} Projection.\n   * @api\n   */\n  getProjection() {\n    return this.projection;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection\").default} [projection] Projection.\n   * @return {Array<number>|null} Resolutions.\n   */\n  getResolutions(projection) {\n    return null;\n  }\n\n  /**\n   * @return {Promise<import(\"../View.js\").ViewOptions>} A promise for view-related properties.\n   */\n  getView() {\n    return this.viewPromise_;\n  }\n\n  /**\n   * Get the state of the source, see {@link import(\"./Source.js\").State} for possible states.\n   * @return {import(\"./Source.js\").State} State.\n   * @api\n   */\n  getState() {\n    return this.state_;\n  }\n\n  /**\n   * @return {boolean|undefined} Wrap X.\n   */\n  getWrapX() {\n    return this.wrapX_;\n  }\n\n  /**\n   * @return {boolean} Use linear interpolation when resampling.\n   */\n  getInterpolate() {\n    return this.interpolate_;\n  }\n\n  /**\n   * Refreshes the source. The source will be cleared, and data from the server will be reloaded.\n   * @api\n   */\n  refresh() {\n    this.changed();\n  }\n\n  /**\n   * Set the attributions of the source.\n   * @param {AttributionLike|undefined} attributions Attributions.\n   *     Can be passed as `string`, `Array<string>`, {@link module:ol/source/Source~Attribution},\n   *     or `undefined`.\n   * @api\n   */\n  setAttributions(attributions) {\n    this.attributions_ = adaptAttributions(attributions);\n    this.changed();\n  }\n\n  /**\n   * Set the state of the source.\n   * @param {import(\"./Source.js\").State} state State.\n   */\n  setState(state) {\n    this.state_ = state;\n    this.changed();\n  }\n}\n\n/**\n * Turns the attributions option into an attributions function.\n * @param {AttributionLike|undefined} attributionLike The attribution option.\n * @return {Attribution|null} An attribution function (or null).\n */\nfunction adaptAttributions(attributionLike) {\n  if (!attributionLike) {\n    return null;\n  }\n  if (typeof attributionLike === 'function') {\n    return attributionLike;\n  }\n  if (!Array.isArray(attributionLike)) {\n    attributionLike = [attributionLike];\n  }\n  return (frameState) => attributionLike;\n}\n\nexport default Source;\n","/**\n * @module ol/source/Tile\n */\nimport Event from '../events/Event.js';\nimport {scale as scaleSize, toSize} from '../size.js';\nimport {withinExtentAndZ} from '../tilecoord.js';\nimport {\n  getForProjection as getTileGridForProjection,\n  wrapX,\n} from '../tilegrid.js';\nimport {abstract, getUid} from '../util.js';\nimport Source from './Source.js';\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./TileEventType\").TileSourceEventTypes, TileSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     import(\"./TileEventType\").TileSourceEventTypes, Return>} TileSourceOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {number} [tilePixelRatio] TilePixelRatio.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {import(\"./Source.js\").State} [state] State.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\n * @property {boolean} [wrapX=false] WrapX.\n * @property {number} [transition] Transition.\n * @property {string} [key] Key.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for sources providing images divided into a tile grid.\n *\n * @template {import(\"../Tile.js\").default} [TileType=import(\"../Tile.js\").default]\n * @abstract\n * @api\n */\nclass TileSource extends Source {\n  /**\n   * @param {Options} options SourceTile source options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      projection: options.projection,\n      state: options.state,\n      wrapX: options.wrapX,\n      interpolate: options.interpolate,\n    });\n\n    /***\n     * @type {TileSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {TileSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {TileSourceOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.tilePixelRatio_ =\n      options.tilePixelRatio !== undefined ? options.tilePixelRatio : 1;\n\n    /**\n     * @type {import(\"../tilegrid/TileGrid.js\").default|null}\n     * @protected\n     */\n    this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;\n\n    const tileSize = [256, 256];\n    if (this.tileGrid) {\n      toSize(this.tileGrid.getTileSize(this.tileGrid.getMinZoom()), tileSize);\n    }\n\n    /**\n     * @protected\n     * @type {import(\"../size.js\").Size}\n     */\n    this.tmpSize = [0, 0];\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.key_ = options.key || getUid(this);\n\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").Options}\n     */\n    this.tileOptions = {\n      transition: options.transition,\n      interpolate: options.interpolate,\n    };\n\n    /**\n     * zDirection hint, read by the renderer. Indicates which resolution should be used\n     * by a renderer if the views resolution does not match any resolution of the tile source.\n     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n     * will be used. If -1, the nearest higher resolution will be used.\n     * @type {number|import(\"../array.js\").NearestDirectionFunction}\n     */\n    this.zDirection = options.zDirection ? options.zDirection : 0;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   */\n  getGutterForProjection(projection) {\n    return 0;\n  }\n\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   */\n  getKey() {\n    return this.key_;\n  }\n\n  /**\n   * Set the value to be used as the key for all tiles in the source.\n   * @param {string} key The key for tiles.\n   * @protected\n   */\n  setKey(key) {\n    if (this.key_ !== key) {\n      this.key_ = key;\n      this.changed();\n    }\n  }\n\n  /**\n   * @param {import(\"../proj/Projection\").default} [projection] Projection.\n   * @return {Array<number>|null} Resolutions.\n   * @override\n   */\n  getResolutions(projection) {\n    const tileGrid = projection\n      ? this.getTileGridForProjection(projection)\n      : this.tileGrid;\n    if (!tileGrid) {\n      return null;\n    }\n    return tileGrid.getResolutions();\n  }\n\n  /**\n   * @abstract\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {TileType|null} Tile.\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    return abstract();\n  }\n\n  /**\n   * Return the tile grid of the tile source.\n   * @return {import(\"../tilegrid/TileGrid.js\").default|null} Tile grid.\n   * @api\n   */\n  getTileGrid() {\n    return this.tileGrid;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   */\n  getTileGridForProjection(projection) {\n    if (!this.tileGrid) {\n      return getTileGridForProjection(projection);\n    }\n    return this.tileGrid;\n  }\n\n  /**\n   * Get the tile pixel ratio for this source. Subclasses may override this\n   * method, which is meant to return a supported pixel ratio that matches the\n   * provided `pixelRatio` as close as possible.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */\n  getTilePixelRatio(pixelRatio) {\n    return this.tilePixelRatio_;\n  }\n\n  /**\n   * @param {number} z Z.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../size.js\").Size} Tile size.\n   */\n  getTilePixelSize(z, pixelRatio, projection) {\n    const tileGrid = this.getTileGridForProjection(projection);\n    const tilePixelRatio = this.getTilePixelRatio(pixelRatio);\n    const tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);\n    if (tilePixelRatio == 1) {\n      return tileSize;\n    }\n    return scaleSize(tileSize, tilePixelRatio, this.tmpSize);\n  }\n\n  /**\n   * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate\n   * is outside the resolution and extent range of the tile grid, `null` will be\n   * returned.\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../proj/Projection.js\").default} [projection] Projection.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate to be passed to the tileUrlFunction or\n   *     null if no tile URL should be created for the passed `tileCoord`.\n   */\n  getTileCoordForTileUrlFunction(tileCoord, projection) {\n    const gridProjection =\n      projection !== undefined ? projection : this.getProjection();\n    const tileGrid =\n      projection !== undefined\n        ? this.getTileGridForProjection(gridProjection)\n        : this.tileGrid || this.getTileGridForProjection(gridProjection);\n    if (this.getWrapX() && gridProjection.isGlobal()) {\n      tileCoord = wrapX(tileGrid, tileCoord, gridProjection);\n    }\n    return withinExtentAndZ(tileCoord, tileGrid) ? tileCoord : null;\n  }\n\n  /**\n   * Remove all cached reprojected tiles from the source. The next render cycle will create new tiles.\n   * @api\n   */\n  clear() {}\n\n  /**\n   * @override\n   */\n  refresh() {\n    this.clear();\n    super.refresh();\n  }\n}\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Tile~TileSource} instances are instances of this\n * type.\n */\nexport class TileSourceEvent extends Event {\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Tile.js\").default} tile The tile.\n   */\n  constructor(type, tile) {\n    super(type);\n\n    /**\n     * The tile related to the event.\n     * @type {import(\"../Tile.js\").default}\n     * @api\n     */\n    this.tile = tile;\n  }\n}\n\nexport default TileSource;\n","/**\n * @module ol/tilegrid\n */\nimport {\n  containsCoordinate,\n  createOrUpdate,\n  getCorner,\n  getHeight,\n  getWidth,\n} from './extent.js';\nimport {METERS_PER_UNIT, get as getProjection} from './proj.js';\nimport {toSize} from './size.js';\nimport TileGrid from './tilegrid/TileGrid.js';\nimport {DEFAULT_MAX_ZOOM, DEFAULT_TILE_SIZE} from './tilegrid/common.js';\n\nexport {TileGrid};\nexport {default as WMTS} from './tilegrid/WMTS.js';\n\n/**\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {!TileGrid} Default tile grid for the\n * passed projection.\n */\nexport function getForProjection(projection) {\n  let tileGrid = projection.getDefaultTileGrid();\n  if (!tileGrid) {\n    tileGrid = createForProjection(projection);\n    projection.setDefaultTileGrid(tileGrid);\n  }\n  return tileGrid;\n}\n\n/**\n * @param {TileGrid} tileGrid Tile grid.\n * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {import(\"./tilecoord.js\").TileCoord} Tile coordinate.\n */\nexport function wrapX(tileGrid, tileCoord, projection) {\n  const z = tileCoord[0];\n  const center = tileGrid.getTileCoordCenter(tileCoord);\n  const projectionExtent = extentFromProjection(projection);\n  if (!containsCoordinate(projectionExtent, center)) {\n    const worldWidth = getWidth(projectionExtent);\n    const worldsAway = Math.ceil(\n      (projectionExtent[0] - center[0]) / worldWidth,\n    );\n    center[0] += worldWidth * worldsAway;\n    return tileGrid.getTileCoordForCoordAndZ(center, z);\n  }\n  return tileCoord;\n}\n\n/**\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} [maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {import(\"./extent.js\").Corner} [corner] Extent corner (default is `'top-left'`).\n * @return {!TileGrid} TileGrid instance.\n */\nexport function createForExtent(extent, maxZoom, tileSize, corner) {\n  corner = corner !== undefined ? corner : 'top-left';\n\n  const resolutions = resolutionsFromExtent(extent, maxZoom, tileSize);\n\n  return new TileGrid({\n    extent: extent,\n    origin: getCorner(extent, corner),\n    resolutions: resolutions,\n    tileSize: tileSize,\n  });\n}\n\n/**\n * @typedef {Object} XYZOptions\n * @property {import(\"./extent.js\").Extent} [extent] Extent for the tile grid. The origin for an XYZ tile grid is the\n * top-left corner of the extent. If `maxResolution` is not provided the zero level of the grid is defined by the resolution\n * at which one tile fits in the provided extent. If not provided, the extent of the EPSG:3857 projection is used.\n * @property {number} [maxResolution] Resolution at level zero.\n * @property {number} [maxZoom] Maximum zoom. The default is `42`. This determines the number of levels\n * in the grid set. For example, a `maxZoom` of 21 means there are 22 levels in the grid set.\n * @property {number} [minZoom=0] Minimum zoom.\n * @property {number|import(\"./size.js\").Size} [tileSize=[256, 256]] Tile size in pixels.\n */\n\n/**\n * Creates a tile grid with a standard XYZ tiling scheme.\n * @param {XYZOptions} [options] Tile grid options.\n * @return {!TileGrid} Tile grid instance.\n * @api\n */\nexport function createXYZ(options) {\n  const xyzOptions = options || {};\n\n  const extent = xyzOptions.extent || getProjection('EPSG:3857').getExtent();\n\n  const gridOptions = {\n    extent: extent,\n    minZoom: xyzOptions.minZoom,\n    tileSize: xyzOptions.tileSize,\n    resolutions: resolutionsFromExtent(\n      extent,\n      xyzOptions.maxZoom,\n      xyzOptions.tileSize,\n      xyzOptions.maxResolution,\n    ),\n  };\n  return new TileGrid(gridOptions);\n}\n\n/**\n * Create a resolutions array from an extent.  A zoom factor of 2 is assumed.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} [maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {number} [maxResolution] Resolution at level zero.\n * @return {!Array<number>} Resolutions array.\n */\nfunction resolutionsFromExtent(extent, maxZoom, tileSize, maxResolution) {\n  maxZoom = maxZoom !== undefined ? maxZoom : DEFAULT_MAX_ZOOM;\n  tileSize = toSize(tileSize !== undefined ? tileSize : DEFAULT_TILE_SIZE);\n\n  const height = getHeight(extent);\n  const width = getWidth(extent);\n\n  maxResolution =\n    maxResolution > 0\n      ? maxResolution\n      : Math.max(width / tileSize[0], height / tileSize[1]);\n\n  const length = maxZoom + 1;\n  const resolutions = new Array(length);\n  for (let z = 0; z < length; ++z) {\n    resolutions[z] = maxResolution / Math.pow(2, z);\n  }\n  return resolutions;\n}\n\n/**\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\n * @param {number} [maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {import(\"./extent.js\").Corner} [corner] Extent corner (default is `'top-left'`).\n * @return {!TileGrid} TileGrid instance.\n */\nexport function createForProjection(projection, maxZoom, tileSize, corner) {\n  const extent = extentFromProjection(projection);\n  return createForExtent(extent, maxZoom, tileSize, corner);\n}\n\n/**\n * Generate a tile grid extent from a projection.  If the projection has an\n * extent, it is used.  If not, a global extent is assumed.\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\n * @return {import(\"./extent.js\").Extent} Extent.\n */\nexport function extentFromProjection(projection) {\n  projection = getProjection(projection);\n  let extent = projection.getExtent();\n  if (!extent) {\n    const half =\n      (180 * METERS_PER_UNIT.degrees) / projection.getMetersPerUnit();\n    extent = createOrUpdate(-half, -half, half, half);\n  }\n  return extent;\n}\n","/**\n * @module ol/tilegrid/WMTS\n */\n\nimport {get as getProjection} from '../proj.js';\nimport TileGrid from './TileGrid.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the tile grid. No tiles\n * outside this extent will be requested by {@link module:ol/source/Tile~TileSource} sources.\n * When no `origin` or `origins` are configured, the `origin` will be set to the\n * top-left corner of the extent.\n * @property {import(\"../coordinate.js\").Coordinate} [origin] The tile grid origin, i.e.\n * where the `x` and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left\n * to right and downwards. If not specified, `extent` or `origins` must be provided.\n * @property {Array<import(\"../coordinate.js\").Coordinate>} [origins] Tile grid origins,\n * i.e. where the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If\n * given, the array length should match the length of the `resolutions` array, i.e.\n * each resolution can have a different origin. Tile coordinates increase left to\n * right and downwards. If not specified, `extent` or `origin` must be provided.\n * @property {!Array<number>} resolutions Resolutions. The array index of each\n * resolution needs to match the zoom level. This means that even if a `minZoom`\n * is configured, the resolutions array will have a length of `maxZoom + 1`\n * @property {!Array<string>} matrixIds matrix IDs. The length of this array needs\n * to match the length of the `resolutions` array.\n * @property {Array<import(\"../size.js\").Size>} [sizes] Number of tile rows and columns\n * of the grid for each zoom level. The values here are the `TileMatrixWidth` and\n * `TileMatrixHeight` advertised in the GetCapabilities response of the WMTS, and\n * define each zoom level's extent together with the `origin` or `origins`.\n * A grid `extent` can be configured in addition, and will further limit the extent for\n * which tile requests are made by sources. If the bottom-left corner of\n * an extent is used as `origin` or `origins`, then the `y` value must be\n * negative because OpenLayers tile coordinates use the top left as the origin.\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * @property {Array<number|import(\"../size.js\").Size>} [tileSizes] Tile sizes. The length of\n * this array needs to match the length of the `resolutions` array.\n */\n\n/**\n * @classdesc\n * Set the grid pattern for sources accessing WMTS tiled-image servers.\n * @api\n */\nclass WMTSTileGrid extends TileGrid {\n  /**\n   * @param {Options} options WMTS options.\n   */\n  constructor(options) {\n    super({\n      extent: options.extent,\n      origin: options.origin,\n      origins: options.origins,\n      resolutions: options.resolutions,\n      tileSize: options.tileSize,\n      tileSizes: options.tileSizes,\n      sizes: options.sizes,\n    });\n\n    /**\n     * @private\n     * @type {!Array<string>}\n     */\n    this.matrixIds_ = options.matrixIds;\n  }\n\n  /**\n   * @param {number} z Z.\n   * @return {string} MatrixId..\n   */\n  getMatrixId(z) {\n    return this.matrixIds_[z];\n  }\n\n  /**\n   * Get the list of matrix identifiers.\n   * @return {Array<string>} MatrixIds.\n   * @api\n   */\n  getMatrixIds() {\n    return this.matrixIds_;\n  }\n}\n\nexport default WMTSTileGrid;\n\n/**\n * Create a tile grid from a WMTS capabilities matrix set and an\n * optional TileMatrixSetLimits.\n * @param {Object} matrixSet An object representing a matrixSet in the\n *     capabilities document.\n * @param {import(\"../extent.js\").Extent} [extent] An optional extent to restrict the tile\n *     ranges the server provides.\n * @param {Array<Object>} [matrixLimits] An optional object representing\n *     the available matrices for tileGrid.\n * @return {WMTSTileGrid} WMTS tileGrid instance.\n * @api\n */\nexport function createFromCapabilitiesMatrixSet(\n  matrixSet,\n  extent,\n  matrixLimits,\n) {\n  /** @type {!Array<number>} */\n  const resolutions = [];\n  /** @type {!Array<string>} */\n  const matrixIds = [];\n  /** @type {!Array<import(\"../coordinate.js\").Coordinate>} */\n  const origins = [];\n  /** @type {!Array<number|import(\"../size.js\").Size>} */\n  const tileSizes = [];\n  /** @type {!Array<import(\"../size.js\").Size>} */\n  const sizes = [];\n\n  matrixLimits = matrixLimits !== undefined ? matrixLimits : [];\n\n  const supportedCRSPropName = 'SupportedCRS';\n  const matrixIdsPropName = 'TileMatrix';\n  const identifierPropName = 'Identifier';\n  const scaleDenominatorPropName = 'ScaleDenominator';\n  const topLeftCornerPropName = 'TopLeftCorner';\n  const tileWidthPropName = 'TileWidth';\n  const tileHeightPropName = 'TileHeight';\n\n  const code = matrixSet[supportedCRSPropName];\n  const projection = getProjection(code);\n  const metersPerUnit = projection.getMetersPerUnit();\n  // swap origin x and y coordinates if axis orientation is lat/long\n  const switchOriginXY = projection.getAxisOrientation().startsWith('ne');\n\n  matrixSet[matrixIdsPropName].sort(function (a, b) {\n    return b[scaleDenominatorPropName] - a[scaleDenominatorPropName];\n  });\n\n  matrixSet[matrixIdsPropName].forEach(function (elt) {\n    let matrixAvailable;\n    // use of matrixLimits to filter TileMatrices from GetCapabilities\n    // TileMatrixSet from unavailable matrix levels.\n    if (matrixLimits.length > 0) {\n      matrixAvailable = matrixLimits.find(function (elt_ml) {\n        if (elt[identifierPropName] == elt_ml[matrixIdsPropName]) {\n          return true;\n        }\n        // Fallback for tileMatrix identifiers that don't get prefixed\n        // by their tileMatrixSet identifiers.\n        if (!elt[identifierPropName].includes(':')) {\n          return (\n            matrixSet[identifierPropName] + ':' + elt[identifierPropName] ===\n            elt_ml[matrixIdsPropName]\n          );\n        }\n        return false;\n      });\n    } else {\n      matrixAvailable = true;\n    }\n\n    if (matrixAvailable) {\n      matrixIds.push(elt[identifierPropName]);\n      const resolution =\n        (elt[scaleDenominatorPropName] * 0.28e-3) / metersPerUnit;\n      const tileWidth = elt[tileWidthPropName];\n      const tileHeight = elt[tileHeightPropName];\n      if (switchOriginXY) {\n        origins.push([\n          elt[topLeftCornerPropName][1],\n          elt[topLeftCornerPropName][0],\n        ]);\n      } else {\n        origins.push(elt[topLeftCornerPropName]);\n      }\n      resolutions.push(resolution);\n      tileSizes.push(\n        tileWidth == tileHeight ? tileWidth : [tileWidth, tileHeight],\n      );\n      sizes.push([elt['MatrixWidth'], elt['MatrixHeight']]);\n    }\n  });\n\n  return new WMTSTileGrid({\n    extent: extent,\n    origins: origins,\n    resolutions: resolutions,\n    matrixIds: matrixIds,\n    tileSizes: tileSizes,\n    sizes: sizes,\n  });\n}\n"],"names":["Source","options","adaptAttributions","undefined","self","Promise","resolve","reject","projection","attributions","state","attributionLike","Array","frameState","TileSource","key","tileGrid","z","x","y","pixelRatio","tilePixelRatio","tileSize","tileCoord","gridProjection","TileSourceEvent","type","tile","getForProjection","createForProjection","wrapX","center","projectionExtent","extentFromProjection","worldWidth","worldsAway","Math","createForExtent","extent","maxZoom","corner","resolutions","resolutionsFromExtent","createXYZ","xyzOptions","gridOptions","maxResolution","height","width","length","half","WMTSTileGrid","createFromCapabilitiesMatrixSet","matrixSet","matrixLimits","matrixIds","origins","tileSizes","sizes","matrixIdsPropName","identifierPropName","scaleDenominatorPropName","topLeftCornerPropName","code","metersPerUnit","switchOriginXY","a","b","elt","matrixAvailable","elt_ml","resolution","tileWidth","tileHeight"],"mappings":"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"}