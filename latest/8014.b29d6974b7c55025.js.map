{"version":3,"file":"8014.b29d6974b7c55025.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/ol-util/dist/ProjectionUtil/ProjectionUtil.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-util/dist/Hooks/useCoordinateInfo/useCoordinateInfo.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-geo/dist/CoordinateInfo/CoordinateInfo.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-util/dist/Context/MapContext/MapContext.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-util/dist/Hooks/useMap/useMap.js","webpack://@terrestris/shogun-gis-client/./node_modules/lodash/isEmpty.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/util.js"],"sourcesContent":["import _isNil from 'lodash';\nimport _isEmpty from 'lodash/isEmpty';\nimport _isString from 'lodash/isString';\nimport { register } from 'ol/proj/proj4';\nimport proj4 from 'proj4';\n/**\n * Default proj4 CRS definitions.\n */\nexport const defaultProj4CrsDefinitions = [{\n        crsCode: 'EPSG:25832',\n        definition: '+proj=utm +zone=32 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs'\n    },\n    {\n        crsCode: 'EPSG:31466',\n        // eslint-disable-next-line\n        definition: '+proj=tmerc +lat_0=0 +lon_0=6 +k=1 +x_0=2500000 +y_0=0 +ellps=bessel +towgs84=598.1,73.7,418.2,0.202,0.045,-2.455,6.7 +units=m +no_defs'\n    }, {\n        crsCode: 'EPSG:31467',\n        // eslint-disable-next-line\n        definition: '+proj=tmerc +lat_0=0 +lon_0=9 +k=1 +x_0=3500000 +y_0=0 +ellps=bessel +towgs84=598.1,73.7,418.2,0.202,0.045,-2.455,6.7 +units=m +no_defs'\n    }];\n/**\n * Default mappings for CRS identifiers (e.g. \"urn:ogc:def:crs:EPSG::25832\").\n */\nexport const defaultProj4CrsMappings = [{\n        alias: 'urn:ogc:def:crs:EPSG::3857',\n        mappedCode: 'EPSG:3857'\n    }, {\n        alias: 'urn:ogc:def:crs:EPSG::25832',\n        mappedCode: 'EPSG:25832'\n    }, {\n        alias: 'urn:ogc:def:crs:EPSG::31466',\n        mappedCode: 'EPSG:31466'\n    }, {\n        alias: 'urn:ogc:def:crs:EPSG::31467',\n        mappedCode: 'EPSG:31467'\n    }];\n/**\n * Helper class for projection handling. Makes use of\n * [Proj4js](http://proj4js.org/).\n *\n * @class ProjectionUtil\n */\nexport class ProjectionUtil {\n    /**\n     * Registers custom CRS definitions to the application.\n     *\n     * @param { CrsDefinition | CrsDefinition[]} customCrsDefs The custom `proj4` definitions\n     *   which should be registered additionally to default available CRS (s.\n     *   `defaultProj4CrsDefinitions` above) as well.\n     *   Further CRS definitions in proj4 format can be checked under\n     *   http://epsg.io (e.g. http://epsg.io/3426.proj4).\n     * @param {boolean} registerDefaults Whether the default CRS should be\n     *   registered or not. Default is true.\n     */\n    static initProj4Definitions(customCrsDefs, registerDefaults = true) {\n        let proj4CrsDefinitions = [];\n        if (registerDefaults) {\n            proj4CrsDefinitions = defaultProj4CrsDefinitions;\n        }\n        if (!_isNil(customCrsDefs) || customCrsDefs) {\n            const crsDefs = Array.isArray(customCrsDefs) ?\n                customCrsDefs : [customCrsDefs];\n            crsDefs?.forEach(crsDef => {\n                if (proj4CrsDefinitions?.findIndex(tCrs => tCrs.crsCode === crsDef?.crsCode) === -1) {\n                    proj4CrsDefinitions.push(crsDef);\n                }\n            });\n        }\n        if (proj4CrsDefinitions?.length > 0) {\n            proj4CrsDefinitions.forEach(crsDef => proj4.defs(crsDef.crsCode, crsDef.definition));\n            register(proj4);\n        }\n    }\n    /**\n     * Registers custom CRS mappings to allow automatic CRS detection. Sometimes\n     * FeatureCollections returned by the GeoServer may be associated with\n     * CRS identifiers (e.g. \"urn:ogc:def:crs:EPSG::25832\") that aren't\n     * supported by `proj4` and `OpenLayers` per default. Add appropriate\n     * mappings to allow automatic CRS detection by `OpenLayers` here.\n     *\n     * @param {CrsMapping | CrsMapping[]} customCrsMappings The custom CRS mappings which will be\n     *   added additionally to the by default available (s. `defaultProj4CrsMappings`\n     *   above).\n     * @param {boolean} useDefaultMappings Whether the default CRS should be mapped\n     *   as well or not. Default is true.\n     */\n    static initProj4DefinitionMappings(customCrsMappings, useDefaultMappings = true) {\n        let proj4CrsMappings = [];\n        if (useDefaultMappings) {\n            proj4CrsMappings = defaultProj4CrsMappings;\n        }\n        if (!_isEmpty(customCrsMappings)) {\n            const crsMappings = Array.isArray(customCrsMappings) ?\n                customCrsMappings : [customCrsMappings];\n            crsMappings?.forEach(crsMapping => {\n                if (proj4CrsMappings?.findIndex(mapping => mapping.alias === crsMapping?.alias) === -1) {\n                    proj4CrsMappings.push(crsMapping);\n                }\n            });\n        }\n        proj4CrsMappings?.map(crsMapping => {\n            const projDef = proj4.defs(crsMapping.mappedCode);\n            proj4.defs(crsMapping.alias, projDef);\n        });\n    }\n    /**\n     * Converts geographic coordinates given in DDD format like `DD.DDDD°` to\n     * the degree, minutes, decimal seconds (DMS) format like\n     * `DDD° MM' SS.SSS\"`.\n     *\n     * @param {number} value Value to be converted.\n     *\n     * @return {string} Converted value.\n     */\n    static toDms(value) {\n        const deg = Math.floor(value);\n        const min = Math.floor((value - deg) * 60);\n        const sec = ((value - deg - min / 60) * 3600);\n        return `${deg}° ${ProjectionUtil.zerofill(min)}' ${ProjectionUtil.zerofill(sec.toFixed(2))}''`;\n    }\n    /**\n     * Converts geographic coordinates given in DDD format like `DD.DDDD°` to\n     * the degree, decimal minutes (DMM) format like `DDD° MM.MMMM`.\n     *\n     * @param {number} value Value to be converted.\n     *\n     * @return {string} Converted value.\n     */\n    static toDmm(value) {\n        const deg = Math.floor(value);\n        const min = ((value - deg) * 60);\n        return `${deg}° ${ProjectionUtil.zerofill(min.toFixed(4))}'`;\n    }\n    /**\n     * Adds leading zero to all values less than 10 and returns this new\n     * zerofilled value as String. Values which are greater than 10 are not\n     * affected.\n     *\n     * @param {number|string} value Value to be zerofilled.\n     *\n     * @return {string} converted value with leading zero if necessary.\n     */\n    static zerofill(value) {\n        const asNumber = _isString(value) ? parseFloat(value) : value;\n        return asNumber < 10 ? `0${asNumber}` : `${asNumber}`;\n    }\n}\nexport default ProjectionUtil;\n//# sourceMappingURL=ProjectionUtil.js.map","import { useCallback, useEffect, useState } from 'react';\nimport { cloneDeep, isString, uniqueId } from 'lodash';\nimport _isNil from 'lodash/isNil';\nimport OlFormatGeoJSON from 'ol/format/GeoJSON';\nimport OlFormatGML2 from 'ol/format/GML2';\nimport OlFormatGml3 from 'ol/format/GML3';\nimport OlFormatGml32 from 'ol/format/GML32';\nimport OlFormatWMSGetFeatureInfo from 'ol/format/WMSGetFeatureInfo';\nimport { getUid } from 'ol/util';\nimport Logger from '@terrestris/base-util/dist/Logger';\nimport { isWfsLayer, isWmsLayer } from '@terrestris/ol-util';\nimport useMap from '../useMap/useMap';\nconst getFeatureType = (feature) => {\n    const id = feature.getId() ?? feature.get('id');\n    return isString(id) ? id.split('.')[0] : id?.toString() ?? uniqueId('UNKNOWN');\n};\nexport const useCoordinateInfo = ({ active, clickEvent = 'click', drillDown = false, featureCount = 1, fetchOpts = {}, getInfoFormat = () => 'application/json', layerFilter = () => true, onError = () => undefined, onSuccess = () => undefined, registerOnClick = true, registerOnPointerMove = false, registerOnPointerRest = false }) => {\n    const map = useMap();\n    const [clickCoordinate, setClickCoordinate] = useState(null);\n    const [pixelCoordinate, setPixelCoordinate] = useState(null);\n    const [featureResults, setFeatureResults] = useState([]);\n    const [loading, setLoading] = useState(false);\n    useEffect(() => {\n        if (map && loading) {\n            map.getTargetElement().style.cursor = 'wait';\n            return () => {\n                map.getTargetElement().style.cursor = 'auto';\n            };\n        }\n        return undefined;\n    }, [loading, map]);\n    const onPointerMove = useCallback((olEvt) => {\n        if (olEvt.dragging || _isNil(map)) {\n            return;\n        }\n        const pixel = map.getEventPixel(olEvt.originalEvent);\n        const hits = map.getAllLayers()\n            .filter(l => layerFilter(l))\n            .filter(l => {\n            const pixelData = l.getData(pixel);\n            return pixelData && pixelData[3] > 0;\n        });\n        map.getTargetElement().style.cursor = hits?.length > 0 ? 'pointer' : '';\n    }, [layerFilter, map]);\n    const handleMapEvent = useCallback(async (olEvt) => {\n        if (_isNil(map)) {\n            return;\n        }\n        if (clickEvent === 'dblclick') {\n            // prevent map zoom on double click\n            olEvt.stopPropagation();\n        }\n        const mapView = map.getView();\n        const viewResolution = mapView.getResolution();\n        const viewProjection = mapView.getProjection();\n        const pixel = map.getEventPixel(olEvt.originalEvent);\n        const coordinate = olEvt.coordinate;\n        let evtPixelCoordinate = [0, 0];\n        if (olEvt.originalEvent instanceof PointerEvent) {\n            evtPixelCoordinate = [olEvt.originalEvent.x, olEvt.originalEvent.y];\n        }\n        const wmsMapLayers = map.getAllLayers()\n            .reverse()\n            .filter(layerFilter)\n            .filter(l => l.getData && l.getData(pixel) && isWmsLayer(l));\n        const wfsMapLayers = map.getAllLayers()\n            .reverse()\n            .filter(layerFilter)\n            .filter(l => isWfsLayer(l));\n        setLoading(true);\n        try {\n            const results = [];\n            for (const layer of wmsMapLayers) {\n                try {\n                    if (!drillDown && results.length > 0) {\n                        break;\n                    }\n                    const wmsLayerSource = layer.getSource();\n                    if (!wmsLayerSource) {\n                        continue;\n                    }\n                    const infoFormat = await getInfoFormat(layer);\n                    const featureInfoUrl = wmsLayerSource.getFeatureInfoUrl(coordinate, viewResolution, viewProjection, {\n                        INFO_FORMAT: infoFormat,\n                        FEATURE_COUNT: featureCount\n                    });\n                    if (featureInfoUrl) {\n                        let opts;\n                        if (fetchOpts instanceof Function) {\n                            opts = fetchOpts(layer);\n                        }\n                        else {\n                            opts = fetchOpts[getUid(layer)];\n                        }\n                        const response = await fetch(featureInfoUrl, opts);\n                        let format = null;\n                        let isJson = false;\n                        if (infoFormat === 'application/vnd.ogc.gml') {\n                            format = new OlFormatWMSGetFeatureInfo();\n                        }\n                        else if (infoFormat.indexOf('gml/2') > -1) {\n                            format = new OlFormatGML2();\n                        }\n                        else if (infoFormat === 'application/vnd.ogc.gml/3.1.1' || infoFormat === 'text/xml; subtype=gml/3.1.1') {\n                            format = new OlFormatGml3();\n                        }\n                        else if (infoFormat === 'application/vnd.ogc.gml/3.2' || infoFormat === 'text/xml; subtype=gml/3.2') {\n                            format = new OlFormatGml32();\n                        }\n                        else if (infoFormat === 'application/json' || infoFormat.indexOf('json') > -1) {\n                            format = new OlFormatGeoJSON();\n                            isJson = true;\n                        }\n                        else {\n                            continue;\n                        }\n                        const text = isJson ? await response.json() : await response.text();\n                        results.push(...format.readFeatures(text).map(f => ({\n                            feature: f,\n                            layer,\n                            featureType: getFeatureType(f)\n                        })));\n                    }\n                }\n                catch (error) {\n                    Logger.error(error);\n                }\n            }\n            for (const layer of wfsMapLayers) {\n                if (!drillDown && results.length > 0) {\n                    break;\n                }\n                const wfsLayerSource = layer.getSource();\n                if (!wfsLayerSource) {\n                    continue;\n                }\n                results.push(...wfsLayerSource.getFeaturesAtCoordinate(coordinate).map(f => ({\n                    feature: f,\n                    layer,\n                    featureType: getFeatureType(f)\n                })));\n            }\n            // We're cloning the click coordinate and features to be able\n            // to alter the features without affecting the original ones\n            // Also note that we explicitly don't use feature.clone() to\n            // keep all feature properties (in particular the id) intact.\n            const clonedResults = cloneDeep(results);\n            const clonedCoordinate = cloneDeep(coordinate);\n            const clonedPixelCoordinate = cloneDeep(evtPixelCoordinate);\n            setFeatureResults(clonedResults);\n            setClickCoordinate(clonedCoordinate);\n            setPixelCoordinate(clonedPixelCoordinate);\n            onSuccess?.({\n                clickCoordinate: clonedCoordinate,\n                pixelCoordinate: clonedPixelCoordinate,\n                loading: false,\n                features: clonedResults\n            });\n        }\n        catch (error) {\n            Logger.error(error);\n            onError?.(error);\n        }\n        setLoading(false);\n    }, [clickEvent, drillDown, featureCount, fetchOpts, getInfoFormat, layerFilter, map, onError, onSuccess]);\n    useEffect(() => {\n        let keyMove;\n        let keyRest;\n        let keyClick;\n        if (active) {\n            if (registerOnClick && clickEvent) {\n                keyClick = map?.on(clickEvent, handleMapEvent);\n            }\n            if (registerOnPointerMove) {\n                keyMove = map?.on('pointermove', onPointerMove);\n            }\n            if (registerOnPointerRest) {\n                // @ts-expect-error pointerrest is no default event\n                keyRest = map?.on('pointerrest', handleMapEvent);\n            }\n        }\n        return () => {\n            if (keyClick && clickEvent) {\n                map?.un(clickEvent, keyClick.listener);\n            }\n            if (keyMove) {\n                map?.un('pointermove', keyMove.listener);\n            }\n            if (keyRest) {\n                // @ts-expect-error pointerrest is no default event\n                map?.un('pointerrest', keyRest.listener);\n            }\n        };\n    }, [\n        active, map, onPointerMove, handleMapEvent, registerOnClick,\n        registerOnPointerMove, registerOnPointerRest, clickEvent\n    ]);\n    // We want to propagate the state here so the variables do\n    // not change on every render cycle.\n    return {\n        clickCoordinate,\n        features: featureResults,\n        loading,\n        pixelCoordinate\n    };\n};\nexport default useCoordinateInfo;\n//# sourceMappingURL=useCoordinateInfo.js.map","import React from 'react';\nimport _isNil from 'lodash/isNil';\nimport useCoordinateInfo from '@terrestris/react-util/dist/Hooks/useCoordinateInfo/useCoordinateInfo';\n/**\n * Constructs a wrapper component for querying features from the clicked\n * coordinate. The returned features can be passed to a child component\n * to be visualized.\n *\n */\nexport const CoordinateInfo = ({ resultRenderer = () => React.createElement(React.Fragment, null), ...passThroughProps }) => {\n    const result = useCoordinateInfo(passThroughProps);\n    if (_isNil(result)) {\n        return null;\n    }\n    return (React.createElement(React.Fragment, null, resultRenderer(result)));\n};\nexport default CoordinateInfo;\n//# sourceMappingURL=CoordinateInfo.js.map","import React from 'react';\nconst MapContext = React.createContext(null);\nexport default MapContext;\n//# sourceMappingURL=MapContext.js.map","import { useContext } from 'react';\nimport MapContext from '../../Context/MapContext/MapContext';\nexport const useMap = () => {\n    return useContext(MapContext);\n};\nexport default useMap;\n//# sourceMappingURL=useMap.js.map","var baseKeys = require('./_baseKeys'),\n    getTag = require('./_getTag'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isArrayLike = require('./isArrayLike'),\n    isBuffer = require('./isBuffer'),\n    isPrototype = require('./_isPrototype'),\n    isTypedArray = require('./isTypedArray');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    setTag = '[object Set]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if `value` is an empty object, collection, map, or set.\n *\n * Objects are considered empty if they have no own enumerable string keyed\n * properties.\n *\n * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n * jQuery-like collections are considered empty if they have a `length` of `0`.\n * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n * @example\n *\n * _.isEmpty(null);\n * // => true\n *\n * _.isEmpty(true);\n * // => true\n *\n * _.isEmpty(1);\n * // => true\n *\n * _.isEmpty([1, 2, 3]);\n * // => false\n *\n * _.isEmpty({ 'a': 1 });\n * // => false\n */\nfunction isEmpty(value) {\n  if (value == null) {\n    return true;\n  }\n  if (isArrayLike(value) &&\n      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n        isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n    return !value.length;\n  }\n  var tag = getTag(value);\n  if (tag == mapTag || tag == setTag) {\n    return !value.size;\n  }\n  if (isPrototype(value)) {\n    return !baseKeys(value).length;\n  }\n  for (var key in value) {\n    if (hasOwnProperty.call(value, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports = isEmpty;\n","/**\n * @module ol/util\n */\n\n/**\n * @return {never} Any return.\n */\nexport function abstract() {\n  throw new Error('Unimplemented abstract method.');\n}\n\n/**\n * Counter for getUid.\n * @type {number}\n * @private\n */\nlet uidCounter_ = 0;\n\n/**\n * Gets a unique ID for an object. This mutates the object so that further calls\n * with the same object as a parameter returns the same value. Unique IDs are generated\n * as a strictly increasing sequence. Adapted from goog.getUid.\n *\n * @param {Object} obj The object to get the unique ID for.\n * @return {string} The unique ID for the object.\n * @api\n */\nexport function getUid(obj) {\n  return obj.ol_uid || (obj.ol_uid = String(++uidCounter_));\n}\n\n/**\n * OpenLayers version.\n * @type {string}\n */\nexport const VERSION = '10.5.0';\n"],"names":["d","Array","t","Math","parseFloat","PointerEvent","Function","r","fetch","e","Object","Error","String"],"mappings":"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"}