{"version":3,"file":"8908.5d97f1ad5b2d71bd.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/ol-util/dist/PermalinkUtil/PermalinkUtil.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/ol-util/dist/ProjectionUtil/ProjectionUtil.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-util/dist/Context/MapContext/MapContext.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-util/dist/Hooks/useMap/useMap.js","webpack://@terrestris/shogun-gis-client/./node_modules/lodash/isEmpty.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/util.js"],"sourcesContent":["import _isEmpty from 'lodash/isEmpty';\nimport _isNil from 'lodash/isNil';\nimport { getUid } from 'ol';\nimport OlLayerGroup from 'ol/layer/Group';\nimport OlImageLayer from 'ol/layer/Image';\nimport OlTileLayer from 'ol/layer/Tile';\nimport MapUtil from '../MapUtil/MapUtil';\n/**\n * Helper class for some operations related to permalink function.\n *\n * @class\n */\nexport class PermalinkUtil {\n    /**\n     * Creates a permalink based on the given map state. It will contain\n     * the current view state of the map (center and zoom) as well as\n     * the current (filtered) list of layers.\n     *\n     * @param {OlMap} map The OpenLayers map\n     * @param {string} separator The separator for the layers list and center\n     *                           coordinates in the link. Default is to ';'.\n     * @param {(layer: OlBaseLayer) => string} identifier Function to generate the identifier of the\n     *                              layer in the link. Default is the name\n     *                              (given by the associated property) of\n     *                              the layer.\n     * @param {(layer: OlBaseLayer) => boolean} filter Function to filter layers that should be\n     *                          added to the link. Default is to add all\n     *                          visible layers of type ol/layer/Tile.\n     * @param {string[]} customAttributes Custom layer attributes which will be saved in the permalink for each layer.\n     * @return {string} The permalink.\n     */\n    static getLink = (map, separator = ';', identifier = (l) => l?.get('name'), filter = (l) => !_isNil(l) &&\n        (l instanceof OlTileLayer || l instanceof OlImageLayer) && l.getVisible(), customAttributes = []) => {\n        const center = map.getView().getCenter()?.join(separator) ?? '';\n        const zoom = map.getView().getZoom()?.toString() ?? '';\n        const layers = map.getAllLayers();\n        const visibleOnes = layers\n            .filter(filter)\n            .map(identifier)\n            .join(separator);\n        const link = new URL(window.location.href);\n        if (customAttributes.length > 0) {\n            const customLayerAttributes = [];\n            layers.forEach((layer) => {\n                const config = {};\n                customAttributes.forEach((attribute) => {\n                    if (!_isNil(layer.get(attribute))) {\n                        config[attribute] = layer.get(attribute);\n                    }\n                });\n                if (!_isEmpty(config)) {\n                    customLayerAttributes.push(config);\n                }\n            });\n            const customLayerAttributesString = JSON.stringify(customLayerAttributes);\n            link.searchParams.set('customLayerAttributes', customLayerAttributesString);\n        }\n        link.searchParams.set('center', center);\n        link.searchParams.set('zoom', zoom);\n        link.searchParams.set('layers', visibleOnes);\n        return link.href;\n    };\n    /**\n     * Applies an existing permalink to the given map.\n     *\n     * @param {OlMap} map The OpenLayers map.\n     * @param {string} separator The separator of the layers list and center\n     *                           coordinates in the link. Default is to ';'.\n     * @param {(layer: OlBaseLayer) => string} identifier Function to generate the identifier of the\n     *                              layer in the link. Default is the name\n     *                              (given by the associated property) of\n     *                              the layer.\n     * @param {(layer: OlBaseLayer) => boolean} filter Function to filter layers that should be\n     *                          handled by the link. Default is to consider all\n     *                          current map layers of type ol/layer/Tile.\n     * @return {string | null} The customLayerAttributes, if defined. Otherwise null.\n     */\n    static applyLink = (map, separator = ';', identifier = l => l?.get('name'), filter = (layer) => layer instanceof OlTileLayer || layer instanceof OlImageLayer) => {\n        const url = new URL(window.location.href);\n        const center = url.searchParams.get('center');\n        const zoom = url.searchParams.get('zoom');\n        const layers = url.searchParams.get('layers');\n        const customLayerAttributes = url.searchParams.get('customLayerAttributes');\n        const allLayers = MapUtil.getAllLayers(map);\n        if (layers) {\n            const layersSplitted = layers.split(separator);\n            allLayers\n                .filter(filter)\n                .forEach(l => {\n                const visible = layersSplitted.includes(identifier(l));\n                l.setVisible(visible);\n                // also make all parent folders / groups visible so\n                // that the layer becomes visible in map\n                if (visible) {\n                    PermalinkUtil.setParentsVisible(map, map.getLayerGroup().getLayers(), getUid(l));\n                }\n            });\n        }\n        if (center) {\n            map.getView().setCenter([\n                parseFloat(center.split(separator)[0]),\n                parseFloat(center.split(separator)[1])\n            ]);\n        }\n        if (zoom) {\n            map.getView().setZoom(parseInt(zoom, 10));\n        }\n        if (customLayerAttributes) {\n            return customLayerAttributes;\n        }\n        return null;\n    };\n    /**\n     * Search through the given Ol-Collection for the given id and\n     * set all parenting groups visible.\n     * @param {OlMap} map The openlayers map\n     * @param {OlCollection<OlBaseLayer>} coll The Openlayers Collection\n     * @param {string} id Ther layer ol uid to search for\n     */\n    static setParentsVisible = (map, coll, id) => {\n        coll.forEach(el => {\n            if (el instanceof OlLayerGroup) {\n                const layers = MapUtil.getLayersByGroup(map, el);\n                if (layers.map(layer => getUid(layer)).includes(id)) {\n                    el.setVisible(true);\n                }\n                PermalinkUtil.setParentsVisible(map, el.getLayers(), id);\n            }\n        });\n    };\n}\nexport default PermalinkUtil;\n//# sourceMappingURL=PermalinkUtil.js.map","import _isNil from 'lodash';\nimport _isEmpty from 'lodash/isEmpty';\nimport _isString from 'lodash/isString';\nimport { register } from 'ol/proj/proj4';\nimport proj4 from 'proj4';\n/**\n * Default proj4 CRS definitions.\n */\nexport const defaultProj4CrsDefinitions = [{\n        crsCode: 'EPSG:25832',\n        definition: '+proj=utm +zone=32 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs'\n    },\n    {\n        crsCode: 'EPSG:31466',\n        // eslint-disable-next-line\n        definition: '+proj=tmerc +lat_0=0 +lon_0=6 +k=1 +x_0=2500000 +y_0=0 +ellps=bessel +towgs84=598.1,73.7,418.2,0.202,0.045,-2.455,6.7 +units=m +no_defs'\n    }, {\n        crsCode: 'EPSG:31467',\n        // eslint-disable-next-line\n        definition: '+proj=tmerc +lat_0=0 +lon_0=9 +k=1 +x_0=3500000 +y_0=0 +ellps=bessel +towgs84=598.1,73.7,418.2,0.202,0.045,-2.455,6.7 +units=m +no_defs'\n    }];\n/**\n * Default mappings for CRS identifiers (e.g. \"urn:ogc:def:crs:EPSG::25832\").\n */\nexport const defaultProj4CrsMappings = [{\n        alias: 'urn:ogc:def:crs:EPSG::3857',\n        mappedCode: 'EPSG:3857'\n    }, {\n        alias: 'urn:ogc:def:crs:EPSG::25832',\n        mappedCode: 'EPSG:25832'\n    }, {\n        alias: 'urn:ogc:def:crs:EPSG::31466',\n        mappedCode: 'EPSG:31466'\n    }, {\n        alias: 'urn:ogc:def:crs:EPSG::31467',\n        mappedCode: 'EPSG:31467'\n    }];\n/**\n * Helper class for projection handling. Makes use of\n * [Proj4js](http://proj4js.org/).\n *\n * @class ProjectionUtil\n */\nexport class ProjectionUtil {\n    /**\n     * Registers custom CRS definitions to the application.\n     *\n     * @param { CrsDefinition | CrsDefinition[]} customCrsDefs The custom `proj4` definitions\n     *   which should be registered additionally to default available CRS (s.\n     *   `defaultProj4CrsDefinitions` above) as well.\n     *   Further CRS definitions in proj4 format can be checked under\n     *   http://epsg.io (e.g. http://epsg.io/3426.proj4).\n     * @param {boolean} registerDefaults Whether the default CRS should be\n     *   registered or not. Default is true.\n     */\n    static initProj4Definitions(customCrsDefs, registerDefaults = true) {\n        let proj4CrsDefinitions = [];\n        if (registerDefaults) {\n            proj4CrsDefinitions = defaultProj4CrsDefinitions;\n        }\n        if (!_isNil(customCrsDefs) || customCrsDefs) {\n            const crsDefs = Array.isArray(customCrsDefs) ?\n                customCrsDefs : [customCrsDefs];\n            crsDefs?.forEach(crsDef => {\n                if (proj4CrsDefinitions?.findIndex(tCrs => tCrs.crsCode === crsDef?.crsCode) === -1) {\n                    proj4CrsDefinitions.push(crsDef);\n                }\n            });\n        }\n        if (proj4CrsDefinitions?.length > 0) {\n            proj4CrsDefinitions.forEach(crsDef => proj4.defs(crsDef.crsCode, crsDef.definition));\n            register(proj4);\n        }\n    }\n    /**\n     * Registers custom CRS mappings to allow automatic CRS detection. Sometimes\n     * FeatureCollections returned by the GeoServer may be associated with\n     * CRS identifiers (e.g. \"urn:ogc:def:crs:EPSG::25832\") that aren't\n     * supported by `proj4` and `OpenLayers` per default. Add appropriate\n     * mappings to allow automatic CRS detection by `OpenLayers` here.\n     *\n     * @param {CrsMapping | CrsMapping[]} customCrsMappings The custom CRS mappings which will be\n     *   added additionally to the by default available (s. `defaultProj4CrsMappings`\n     *   above).\n     * @param {boolean} useDefaultMappings Whether the default CRS should be mapped\n     *   as well or not. Default is true.\n     */\n    static initProj4DefinitionMappings(customCrsMappings, useDefaultMappings = true) {\n        let proj4CrsMappings = [];\n        if (useDefaultMappings) {\n            proj4CrsMappings = defaultProj4CrsMappings;\n        }\n        if (!_isEmpty(customCrsMappings)) {\n            const crsMappings = Array.isArray(customCrsMappings) ?\n                customCrsMappings : [customCrsMappings];\n            crsMappings?.forEach(crsMapping => {\n                if (proj4CrsMappings?.findIndex(mapping => mapping.alias === crsMapping?.alias) === -1) {\n                    proj4CrsMappings.push(crsMapping);\n                }\n            });\n        }\n        proj4CrsMappings?.map(crsMapping => {\n            const projDef = proj4.defs(crsMapping.mappedCode);\n            proj4.defs(crsMapping.alias, projDef);\n        });\n    }\n    /**\n     * Converts geographic coordinates given in DDD format like `DD.DDDD°` to\n     * the degree, minutes, decimal seconds (DMS) format like\n     * `DDD° MM' SS.SSS\"`.\n     *\n     * @param {number} value Value to be converted.\n     *\n     * @return {string} Converted value.\n     */\n    static toDms(value) {\n        const deg = Math.floor(value);\n        const min = Math.floor((value - deg) * 60);\n        const sec = ((value - deg - min / 60) * 3600);\n        return `${deg}° ${ProjectionUtil.zerofill(min)}' ${ProjectionUtil.zerofill(sec.toFixed(2))}''`;\n    }\n    /**\n     * Converts geographic coordinates given in DDD format like `DD.DDDD°` to\n     * the degree, decimal minutes (DMM) format like `DDD° MM.MMMM`.\n     *\n     * @param {number} value Value to be converted.\n     *\n     * @return {string} Converted value.\n     */\n    static toDmm(value) {\n        const deg = Math.floor(value);\n        const min = ((value - deg) * 60);\n        return `${deg}° ${ProjectionUtil.zerofill(min.toFixed(4))}'`;\n    }\n    /**\n     * Adds leading zero to all values less than 10 and returns this new\n     * zerofilled value as String. Values which are greater than 10 are not\n     * affected.\n     *\n     * @param {number|string} value Value to be zerofilled.\n     *\n     * @return {string} converted value with leading zero if necessary.\n     */\n    static zerofill(value) {\n        const asNumber = _isString(value) ? parseFloat(value) : value;\n        return asNumber < 10 ? `0${asNumber}` : `${asNumber}`;\n    }\n}\nexport default ProjectionUtil;\n//# sourceMappingURL=ProjectionUtil.js.map","import React from 'react';\nconst MapContext = React.createContext(null);\nexport default MapContext;\n//# sourceMappingURL=MapContext.js.map","import { useContext } from 'react';\nimport MapContext from '../../Context/MapContext/MapContext';\nexport const useMap = () => {\n    return useContext(MapContext);\n};\nexport default useMap;\n//# sourceMappingURL=useMap.js.map","var baseKeys = require('./_baseKeys'),\n    getTag = require('./_getTag'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isArrayLike = require('./isArrayLike'),\n    isBuffer = require('./isBuffer'),\n    isPrototype = require('./_isPrototype'),\n    isTypedArray = require('./isTypedArray');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    setTag = '[object Set]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if `value` is an empty object, collection, map, or set.\n *\n * Objects are considered empty if they have no own enumerable string keyed\n * properties.\n *\n * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n * jQuery-like collections are considered empty if they have a `length` of `0`.\n * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n * @example\n *\n * _.isEmpty(null);\n * // => true\n *\n * _.isEmpty(true);\n * // => true\n *\n * _.isEmpty(1);\n * // => true\n *\n * _.isEmpty([1, 2, 3]);\n * // => false\n *\n * _.isEmpty({ 'a': 1 });\n * // => false\n */\nfunction isEmpty(value) {\n  if (value == null) {\n    return true;\n  }\n  if (isArrayLike(value) &&\n      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n        isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n    return !value.length;\n  }\n  var tag = getTag(value);\n  if (tag == mapTag || tag == setTag) {\n    return !value.size;\n  }\n  if (isPrototype(value)) {\n    return !baseKeys(value).length;\n  }\n  for (var key in value) {\n    if (hasOwnProperty.call(value, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports = isEmpty;\n","/**\n * @module ol/util\n */\n\n/**\n * @return {never} Any return.\n */\nexport function abstract() {\n  throw new Error('Unimplemented abstract method.');\n}\n\n/**\n * Counter for getUid.\n * @type {number}\n * @private\n */\nlet uidCounter_ = 0;\n\n/**\n * Gets a unique ID for an object. This mutates the object so that further calls\n * with the same object as a parameter returns the same value. Unique IDs are generated\n * as a strictly increasing sequence. Adapted from goog.getUid.\n *\n * @param {Object} obj The object to get the unique ID for.\n * @return {string} The unique ID for the object.\n * @api\n */\nexport function getUid(obj) {\n  return obj.ol_uid || (obj.ol_uid = String(++uidCounter_));\n}\n\n/**\n * OpenLayers version.\n * @type {string}\n */\nexport const VERSION = '10.4.0';\n"],"names":["PermalinkUtil","map","separator","identifier","l","filter","customAttributes","center","zoom","layers","visibleOnes","link","URL","window","customLayerAttributes","layer","config","attribute","customLayerAttributesString","JSON","url","allLayers","layersSplitted","visible","parseFloat","parseInt","coll","id","el","defaultProj4CrsDefinitions","defaultProj4CrsMappings","ProjectionUtil","customCrsDefs","registerDefaults","proj4CrsDefinitions","crsDefs","Array","crsDef","tCrs","customCrsMappings","useDefaultMappings","proj4CrsMappings","crsMappings","crsMapping","mapping","projDef","value","deg","Math","min","sec","asNumber","MapContext","useMap","baseKeys","getTag","isArguments","isArray","isArrayLike","isBuffer","isPrototype","isTypedArray","hasOwnProperty","objectProto","Object","module","tag","key","abstract","Error","uidCounter_","getUid","obj","String","VERSION"],"mappings":"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"}