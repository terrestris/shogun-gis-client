{"version":3,"file":"6174.14cbc1fac571e6db.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/ol/structs/PriorityQueue.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/TileQueue.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/renderer/canvas/ImageLayer.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/layer/BaseImage.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/layer/Image.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/resolution.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/reproj/Image.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/source/Image.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/ImageCanvas.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/source/Raster.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/source/common.js"],"sourcesContent":["/**\n * @module ol/structs/PriorityQueue\n */\nimport {assert} from '../asserts.js';\nimport {clear} from '../obj.js';\n\n/**\n * @type {number}\n */\nexport const DROP = Infinity;\n\n/**\n * @classdesc\n * Priority queue.\n *\n * The implementation is inspired from the Closure Library's Heap class and\n * Python's heapq module.\n *\n * See https://github.com/google/closure-library/blob/master/closure/goog/structs/heap.js\n * and https://hg.python.org/cpython/file/2.7/Lib/heapq.py.\n *\n * @template T\n */\nclass PriorityQueue {\n  /**\n   * @param {function(T): number} priorityFunction Priority function.\n   * @param {function(T): string} keyFunction Key function.\n   */\n  constructor(priorityFunction, keyFunction) {\n    /**\n     * @type {function(T): number}\n     * @private\n     */\n    this.priorityFunction_ = priorityFunction;\n\n    /**\n     * @type {function(T): string}\n     * @private\n     */\n    this.keyFunction_ = keyFunction;\n\n    /**\n     * @type {Array<T>}\n     * @private\n     */\n    this.elements_ = [];\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.priorities_ = [];\n\n    /**\n     * @type {!Object<string, boolean>}\n     * @private\n     */\n    this.queuedElements_ = {};\n  }\n\n  /**\n   * FIXME empty description for jsdoc\n   */\n  clear() {\n    this.elements_.length = 0;\n    this.priorities_.length = 0;\n    clear(this.queuedElements_);\n  }\n\n  /**\n   * Remove and return the highest-priority element. O(log N).\n   * @return {T} Element.\n   */\n  dequeue() {\n    const elements = this.elements_;\n    const priorities = this.priorities_;\n    const element = elements[0];\n    if (elements.length == 1) {\n      elements.length = 0;\n      priorities.length = 0;\n    } else {\n      elements[0] = /** @type {T} */ (elements.pop());\n      priorities[0] = /** @type {number} */ (priorities.pop());\n      this.siftUp_(0);\n    }\n    const elementKey = this.keyFunction_(element);\n    delete this.queuedElements_[elementKey];\n    return element;\n  }\n\n  /**\n   * Enqueue an element. O(log N).\n   * @param {T} element Element.\n   * @return {boolean} The element was added to the queue.\n   */\n  enqueue(element) {\n    assert(\n      !(this.keyFunction_(element) in this.queuedElements_),\n      'Tried to enqueue an `element` that was already added to the queue',\n    );\n    const priority = this.priorityFunction_(element);\n    if (priority != DROP) {\n      this.elements_.push(element);\n      this.priorities_.push(priority);\n      this.queuedElements_[this.keyFunction_(element)] = true;\n      this.siftDown_(0, this.elements_.length - 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @return {number} Count.\n   */\n  getCount() {\n    return this.elements_.length;\n  }\n\n  /**\n   * Gets the index of the left child of the node at the given index.\n   * @param {number} index The index of the node to get the left child for.\n   * @return {number} The index of the left child.\n   * @private\n   */\n  getLeftChildIndex_(index) {\n    return index * 2 + 1;\n  }\n\n  /**\n   * Gets the index of the right child of the node at the given index.\n   * @param {number} index The index of the node to get the right child for.\n   * @return {number} The index of the right child.\n   * @private\n   */\n  getRightChildIndex_(index) {\n    return index * 2 + 2;\n  }\n\n  /**\n   * Gets the index of the parent of the node at the given index.\n   * @param {number} index The index of the node to get the parent for.\n   * @return {number} The index of the parent.\n   * @private\n   */\n  getParentIndex_(index) {\n    return (index - 1) >> 1;\n  }\n\n  /**\n   * Make this a heap. O(N).\n   * @private\n   */\n  heapify_() {\n    let i;\n    for (i = (this.elements_.length >> 1) - 1; i >= 0; i--) {\n      this.siftUp_(i);\n    }\n  }\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  isEmpty() {\n    return this.elements_.length === 0;\n  }\n\n  /**\n   * @param {string} key Key.\n   * @return {boolean} Is key queued.\n   */\n  isKeyQueued(key) {\n    return key in this.queuedElements_;\n  }\n\n  /**\n   * @param {T} element Element.\n   * @return {boolean} Is queued.\n   */\n  isQueued(element) {\n    return this.isKeyQueued(this.keyFunction_(element));\n  }\n\n  /**\n   * @param {number} index The index of the node to move down.\n   * @private\n   */\n  siftUp_(index) {\n    const elements = this.elements_;\n    const priorities = this.priorities_;\n    const count = elements.length;\n    const element = elements[index];\n    const priority = priorities[index];\n    const startIndex = index;\n\n    while (index < count >> 1) {\n      const lIndex = this.getLeftChildIndex_(index);\n      const rIndex = this.getRightChildIndex_(index);\n\n      const smallerChildIndex =\n        rIndex < count && priorities[rIndex] < priorities[lIndex]\n          ? rIndex\n          : lIndex;\n\n      elements[index] = elements[smallerChildIndex];\n      priorities[index] = priorities[smallerChildIndex];\n      index = smallerChildIndex;\n    }\n\n    elements[index] = element;\n    priorities[index] = priority;\n    this.siftDown_(startIndex, index);\n  }\n\n  /**\n   * @param {number} startIndex The index of the root.\n   * @param {number} index The index of the node to move up.\n   * @private\n   */\n  siftDown_(startIndex, index) {\n    const elements = this.elements_;\n    const priorities = this.priorities_;\n    const element = elements[index];\n    const priority = priorities[index];\n\n    while (index > startIndex) {\n      const parentIndex = this.getParentIndex_(index);\n      if (priorities[parentIndex] > priority) {\n        elements[index] = elements[parentIndex];\n        priorities[index] = priorities[parentIndex];\n        index = parentIndex;\n      } else {\n        break;\n      }\n    }\n    elements[index] = element;\n    priorities[index] = priority;\n  }\n\n  /**\n   * FIXME empty description for jsdoc\n   */\n  reprioritize() {\n    const priorityFunction = this.priorityFunction_;\n    const elements = this.elements_;\n    const priorities = this.priorities_;\n    let index = 0;\n    const n = elements.length;\n    let element, i, priority;\n    for (i = 0; i < n; ++i) {\n      element = elements[i];\n      priority = priorityFunction(element);\n      if (priority == DROP) {\n        delete this.queuedElements_[this.keyFunction_(element)];\n      } else {\n        priorities[index] = priority;\n        elements[index++] = element;\n      }\n    }\n    elements.length = index;\n    priorities.length = index;\n    this.heapify_();\n  }\n}\n\nexport default PriorityQueue;\n","/**\n * @module ol/TileQueue\n */\nimport TileState from './TileState.js';\nimport EventType from './events/EventType.js';\nimport PriorityQueue, {DROP} from './structs/PriorityQueue.js';\n\n/**\n * @typedef {function(import(\"./Tile.js\").default, string, import('./tilecoord.js').TileCoord, number): number} PriorityFunction\n */\n\n/**\n * @typedef {[import('./Tile.js').default, string, import('./tilecoord.js').TileCoord, number]} TileQueueElement\n */\n\n/**\n * @extends PriorityQueue<TileQueueElement>}\n */\nclass TileQueue extends PriorityQueue {\n  /**\n   * @param {PriorityFunction} tilePriorityFunction Tile priority function.\n   * @param {function(): ?} tileChangeCallback Function called on each tile change event.\n   */\n  constructor(tilePriorityFunction, tileChangeCallback) {\n    super(\n      (element) => tilePriorityFunction.apply(null, element),\n      (element) => element[0].getKey(),\n    );\n\n    /** @private */\n    this.boundHandleTileChange_ = this.handleTileChange.bind(this);\n\n    /**\n     * @private\n     * @type {function(): ?}\n     */\n    this.tileChangeCallback_ = tileChangeCallback;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.tilesLoading_ = 0;\n\n    /**\n     * @private\n     * @type {!Object<string,boolean>}\n     */\n    this.tilesLoadingKeys_ = {};\n  }\n\n  /**\n   * @param {TileQueueElement} element Element.\n   * @return {boolean} The element was added to the queue.\n   * @override\n   */\n  enqueue(element) {\n    const added = super.enqueue(element);\n    if (added) {\n      const tile = element[0];\n      tile.addEventListener(EventType.CHANGE, this.boundHandleTileChange_);\n    }\n    return added;\n  }\n\n  /**\n   * @return {number} Number of tiles loading.\n   */\n  getTilesLoading() {\n    return this.tilesLoading_;\n  }\n\n  /**\n   * @param {import(\"./events/Event.js\").default} event Event.\n   * @protected\n   */\n  handleTileChange(event) {\n    const tile = /** @type {import(\"./Tile.js\").default} */ (event.target);\n    const state = tile.getState();\n    if (\n      state === TileState.LOADED ||\n      state === TileState.ERROR ||\n      state === TileState.EMPTY\n    ) {\n      if (state !== TileState.ERROR) {\n        tile.removeEventListener(EventType.CHANGE, this.boundHandleTileChange_);\n      }\n      const tileKey = tile.getKey();\n      if (tileKey in this.tilesLoadingKeys_) {\n        delete this.tilesLoadingKeys_[tileKey];\n        --this.tilesLoading_;\n      }\n      this.tileChangeCallback_();\n    }\n  }\n\n  /**\n   * @param {number} maxTotalLoading Maximum number tiles to load simultaneously.\n   * @param {number} maxNewLoads Maximum number of new tiles to load.\n   */\n  loadMoreTiles(maxTotalLoading, maxNewLoads) {\n    let newLoads = 0;\n    while (\n      this.tilesLoading_ < maxTotalLoading &&\n      newLoads < maxNewLoads &&\n      this.getCount() > 0\n    ) {\n      const tile = this.dequeue()[0];\n      const tileKey = tile.getKey();\n      const state = tile.getState();\n      if (state === TileState.IDLE && !(tileKey in this.tilesLoadingKeys_)) {\n        this.tilesLoadingKeys_[tileKey] = true;\n        ++this.tilesLoading_;\n        ++newLoads;\n        tile.load();\n      }\n    }\n  }\n}\n\nexport default TileQueue;\n\n/**\n * @param {import('./Map.js').FrameState} frameState Frame state.\n * @param {import(\"./Tile.js\").default} tile Tile.\n * @param {string} tileSourceKey Tile source key.\n * @param {import(\"./coordinate.js\").Coordinate} tileCenter Tile center.\n * @param {number} tileResolution Tile resolution.\n * @return {number} Tile priority.\n */\nexport function getTilePriority(\n  frameState,\n  tile,\n  tileSourceKey,\n  tileCenter,\n  tileResolution,\n) {\n  // Filter out tiles at higher zoom levels than the current zoom level, or that\n  // are outside the visible extent.\n  if (!frameState || !(tileSourceKey in frameState.wantedTiles)) {\n    return DROP;\n  }\n  if (!frameState.wantedTiles[tileSourceKey][tile.getKey()]) {\n    return DROP;\n  }\n  // Prioritize the highest zoom level tiles closest to the focus.\n  // Tiles at higher zoom levels are prioritized using Math.log(tileResolution).\n  // Within a zoom level, tiles are prioritized by the distance in pixels between\n  // the center of the tile and the center of the viewport.  The factor of 65536\n  // means that the prioritization should behave as desired for tiles up to\n  // 65536 * Math.log(2) = 45426 pixels from the focus.\n  const center = frameState.viewState.center;\n  const deltaX = tileCenter[0] - center[0];\n  const deltaY = tileCenter[1] - center[1];\n  return (\n    65536 * Math.log(tileResolution) +\n    Math.sqrt(deltaX * deltaX + deltaY * deltaY) / tileResolution\n  );\n}\n","/**\n * @module ol/renderer/canvas/ImageLayer\n */\nimport ImageState from '../../ImageState.js';\nimport ViewHint from '../../ViewHint.js';\nimport {\n  containsCoordinate,\n  containsExtent,\n  getHeight,\n  getIntersection,\n  getWidth,\n  intersects as intersectsExtent,\n  isEmpty,\n} from '../../extent.js';\nimport {fromUserExtent} from '../../proj.js';\nimport {\n  apply as applyTransform,\n  compose as composeTransform,\n} from '../../transform.js';\nimport CanvasLayerRenderer from './Layer.js';\n\n/**\n * @classdesc\n * Canvas renderer for image layers.\n * @api\n */\nclass CanvasImageLayerRenderer extends CanvasLayerRenderer {\n  /**\n   * @param {import(\"../../layer/Image.js\").default} imageLayer Image layer.\n   */\n  constructor(imageLayer) {\n    super(imageLayer);\n\n    /**\n     * @protected\n     * @type {?import(\"../../Image.js\").default}\n     */\n    this.image = null;\n  }\n\n  /**\n   * @return {import('../../DataTile.js').ImageLike} Image.\n   */\n  getImage() {\n    return !this.image ? null : this.image.getImage();\n  }\n\n  /**\n   * Determine whether render should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   * @override\n   */\n  prepareFrame(frameState) {\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    const pixelRatio = frameState.pixelRatio;\n    const viewState = frameState.viewState;\n    const viewResolution = viewState.resolution;\n\n    const imageSource = this.getLayer().getSource();\n\n    const hints = frameState.viewHints;\n\n    let renderedExtent = frameState.extent;\n    if (layerState.extent !== undefined) {\n      renderedExtent = getIntersection(\n        renderedExtent,\n        fromUserExtent(layerState.extent, viewState.projection),\n      );\n    }\n\n    if (\n      !hints[ViewHint.ANIMATING] &&\n      !hints[ViewHint.INTERACTING] &&\n      !isEmpty(renderedExtent)\n    ) {\n      if (imageSource) {\n        const projection = viewState.projection;\n        const image = imageSource.getImage(\n          renderedExtent,\n          viewResolution,\n          pixelRatio,\n          projection,\n        );\n        if (image) {\n          if (this.loadImage(image)) {\n            this.image = image;\n          } else if (image.getState() === ImageState.EMPTY) {\n            this.image = null;\n          }\n        }\n      } else {\n        this.image = null;\n      }\n    }\n\n    return !!this.image;\n  }\n\n  /**\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray} Data at the pixel location.\n   * @override\n   */\n  getData(pixel) {\n    const frameState = this.frameState;\n    if (!frameState) {\n      return null;\n    }\n\n    const layer = this.getLayer();\n    const coordinate = applyTransform(\n      frameState.pixelToCoordinateTransform,\n      pixel.slice(),\n    );\n\n    const layerExtent = layer.getExtent();\n    if (layerExtent) {\n      if (!containsCoordinate(layerExtent, coordinate)) {\n        return null;\n      }\n    }\n\n    const imageExtent = this.image.getExtent();\n    const img = this.image.getImage();\n\n    const imageMapWidth = getWidth(imageExtent);\n    const col = Math.floor(\n      img.width * ((coordinate[0] - imageExtent[0]) / imageMapWidth),\n    );\n    if (col < 0 || col >= img.width) {\n      return null;\n    }\n\n    const imageMapHeight = getHeight(imageExtent);\n    const row = Math.floor(\n      img.height * ((imageExtent[3] - coordinate[1]) / imageMapHeight),\n    );\n    if (row < 0 || row >= img.height) {\n      return null;\n    }\n\n    return this.getImageData(img, col, row);\n  }\n\n  /**\n   * Render the layer.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target that may be used to render content to.\n   * @return {HTMLElement} The rendered element.\n   * @override\n   */\n  renderFrame(frameState, target) {\n    const image = this.image;\n    const imageExtent = image.getExtent();\n    const imageResolution = image.getResolution();\n    const [imageResolutionX, imageResolutionY] = Array.isArray(imageResolution)\n      ? imageResolution\n      : [imageResolution, imageResolution];\n    const imagePixelRatio = image.getPixelRatio();\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    const pixelRatio = frameState.pixelRatio;\n    const viewState = frameState.viewState;\n    const viewCenter = viewState.center;\n    const viewResolution = viewState.resolution;\n    const scaleX =\n      (pixelRatio * imageResolutionX) / (viewResolution * imagePixelRatio);\n    const scaleY =\n      (pixelRatio * imageResolutionY) / (viewResolution * imagePixelRatio);\n\n    this.prepareContainer(frameState, target);\n\n    // desired dimensions of the canvas in pixels\n    const width = this.context.canvas.width;\n    const height = this.context.canvas.height;\n\n    const context = this.getRenderContext(frameState);\n\n    // clipped rendering if layer extent is set\n    let clipped = false;\n    let render = true;\n    if (layerState.extent) {\n      const layerExtent = fromUserExtent(\n        layerState.extent,\n        viewState.projection,\n      );\n      render = intersectsExtent(layerExtent, frameState.extent);\n      clipped = render && !containsExtent(layerExtent, frameState.extent);\n      if (clipped) {\n        this.clipUnrotated(context, frameState, layerExtent);\n      }\n    }\n\n    const img = image.getImage();\n\n    const transform = composeTransform(\n      this.tempTransform,\n      width / 2,\n      height / 2,\n      scaleX,\n      scaleY,\n      0,\n      (imagePixelRatio * (imageExtent[0] - viewCenter[0])) / imageResolutionX,\n      (imagePixelRatio * (viewCenter[1] - imageExtent[3])) / imageResolutionY,\n    );\n\n    this.renderedResolution = (imageResolutionY * pixelRatio) / imagePixelRatio;\n\n    const dw = img.width * transform[0];\n    const dh = img.height * transform[3];\n\n    if (!this.getLayer().getSource().getInterpolate()) {\n      context.imageSmoothingEnabled = false;\n    }\n\n    this.preRender(context, frameState);\n    if (render && dw >= 0.5 && dh >= 0.5) {\n      const dx = transform[4];\n      const dy = transform[5];\n      const opacity = layerState.opacity;\n      if (opacity !== 1) {\n        context.save();\n        context.globalAlpha = opacity;\n      }\n      context.drawImage(img, 0, 0, +img.width, +img.height, dx, dy, dw, dh);\n      if (opacity !== 1) {\n        context.restore();\n      }\n    }\n    this.postRender(this.context, frameState);\n\n    if (clipped) {\n      context.restore();\n    }\n    context.imageSmoothingEnabled = true;\n\n    return this.container;\n  }\n}\n\nexport default CanvasImageLayerRenderer;\n","/**\n * @module ol/layer/BaseImage\n */\nimport Layer from './Layer.js';\n\n/**\n * @template {import(\"../source/Image.js\").default} ImageSourceType\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use {@link import(\"../Map.js\").default#addLayer map.addLayer()}.\n * @property {ImageSourceType} [source] Source for this layer.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @classdesc\n * Server-rendered images that are available for arbitrary extents and\n * resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Image.js\").default} ImageSourceType\n * @template {import(\"../renderer/Layer.js\").default} RendererType\n * @extends {Layer<ImageSourceType, RendererType>}\n * @api\n */\nclass BaseImageLayer extends Layer {\n  /**\n   * @param {Options<ImageSourceType>} [options] Layer options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    super(options);\n  }\n}\n\nexport default BaseImageLayer;\n","/**\n * @module ol/layer/Image\n */\nimport CanvasImageLayerRenderer from '../renderer/canvas/ImageLayer.js';\nimport BaseImageLayer from './BaseImage.js';\n\n/**\n * @classdesc\n * Server-rendered images that are available for arbitrary extents and\n * resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Image.js\").default} ImageSourceType\n * @extends {BaseImageLayer<ImageSourceType, CanvasImageLayerRenderer>}\n * @api\n */\nclass ImageLayer extends BaseImageLayer {\n  /**\n   * @param {import(\"./BaseImage.js\").Options<ImageSourceType>} [options] Layer options.\n   */\n  constructor(options) {\n    super(options);\n  }\n\n  /**\n   * @override\n   */\n  createRenderer() {\n    return new CanvasImageLayerRenderer(this);\n  }\n\n  /**\n   * Get data for a pixel location.  A four element RGBA array will be returned.  For requests outside the\n   * layer extent, `null` will be returned.  Data for an image can only be retrieved if the\n   * source's `crossOrigin` property is set.\n   *\n   * ```js\n   * // display layer data on every pointer move\n   * map.on('pointermove', (event) => {\n   *   console.log(layer.getData(event.pixel));\n   * });\n   * ```\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\n   * @api\n   * @override\n   */\n  getData(pixel) {\n    return super.getData(pixel);\n  }\n}\n\nexport default ImageLayer;\n","/**\n * @module ol/resolution\n */\n\n/**\n * @typedef {number|Array<number>} ResolutionLike\n */\n\n/**\n * @param {ResolutionLike} resolution Resolution.\n * @return {number} Resolution.\n */\nexport function fromResolutionLike(resolution) {\n  if (Array.isArray(resolution)) {\n    return Math.min(...resolution);\n  }\n  return resolution;\n}\n","/**\n * @module ol/reproj/Image\n */\n\nimport ImageWrapper from '../Image.js';\nimport ImageState from '../ImageState.js';\nimport EventType from '../events/EventType.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport {\n  getCenter,\n  getHeight,\n  getIntersection,\n  getWidth,\n  isEmpty,\n} from '../extent.js';\nimport {\n  calculateSourceResolution,\n  render as renderReprojected,\n} from '../reproj.js';\nimport {fromResolutionLike} from '../resolution.js';\nimport Triangulation from './Triangulation.js';\nimport {ERROR_THRESHOLD} from './common.js';\n\n/**\n * @typedef {function(import(\"../extent.js\").Extent, number, number) : import(\"../Image.js\").default} FunctionType\n */\n\n/**\n * @classdesc\n * Class encapsulating single reprojected image.\n * See {@link module:ol/source/Image~ImageSource}.\n */\nclass ReprojImage extends ImageWrapper {\n  /**\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection (of the data).\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\n   * @param {import(\"../extent.js\").Extent} targetExtent Target extent.\n   * @param {number} targetResolution Target resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {FunctionType} getImageFunction\n   *     Function returning source images (extent, resolution, pixelRatio).\n   * @param {boolean} interpolate Use linear interpolation when resampling.\n   */\n  constructor(\n    sourceProj,\n    targetProj,\n    targetExtent,\n    targetResolution,\n    pixelRatio,\n    getImageFunction,\n    interpolate,\n  ) {\n    let maxSourceExtent = sourceProj.getExtent();\n    if (maxSourceExtent && sourceProj.canWrapX()) {\n      maxSourceExtent = maxSourceExtent.slice();\n      maxSourceExtent[0] = -Infinity;\n      maxSourceExtent[2] = Infinity;\n    }\n    let maxTargetExtent = targetProj.getExtent();\n    if (maxTargetExtent && targetProj.canWrapX()) {\n      maxTargetExtent = maxTargetExtent.slice();\n      maxTargetExtent[0] = -Infinity;\n      maxTargetExtent[2] = Infinity;\n    }\n\n    const limitedTargetExtent = maxTargetExtent\n      ? getIntersection(targetExtent, maxTargetExtent)\n      : targetExtent;\n\n    const targetCenter = getCenter(limitedTargetExtent);\n    const sourceResolution = calculateSourceResolution(\n      sourceProj,\n      targetProj,\n      targetCenter,\n      targetResolution,\n    );\n\n    const errorThresholdInPixels = ERROR_THRESHOLD;\n\n    const triangulation = new Triangulation(\n      sourceProj,\n      targetProj,\n      limitedTargetExtent,\n      maxSourceExtent,\n      sourceResolution * errorThresholdInPixels,\n      targetResolution,\n    );\n\n    const sourceExtent = triangulation.calculateSourceExtent();\n    const sourceImage = isEmpty(sourceExtent)\n      ? null\n      : getImageFunction(sourceExtent, sourceResolution, pixelRatio);\n    const state = sourceImage ? ImageState.IDLE : ImageState.EMPTY;\n    const sourcePixelRatio = sourceImage ? sourceImage.getPixelRatio() : 1;\n\n    super(targetExtent, targetResolution, sourcePixelRatio, state);\n\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.targetProj_ = targetProj;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.maxSourceExtent_ = maxSourceExtent;\n\n    /**\n     * @private\n     * @type {!import(\"./Triangulation.js\").default}\n     */\n    this.triangulation_ = triangulation;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.targetResolution_ = targetResolution;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.targetExtent_ = targetExtent;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n    this.sourceImage_ = sourceImage;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.sourcePixelRatio_ = sourcePixelRatio;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.interpolate_ = interpolate;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.sourceListenerKey_ = null;\n  }\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    if (this.state == ImageState.LOADING) {\n      this.unlistenSource_();\n    }\n    super.disposeInternal();\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Image.\n   * @override\n   */\n  getImage() {\n    return this.canvas_;\n  }\n\n  /**\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  getProjection() {\n    return this.targetProj_;\n  }\n\n  /**\n   * @private\n   */\n  reproject_() {\n    const sourceState = this.sourceImage_.getState();\n    if (sourceState == ImageState.LOADED) {\n      const width = getWidth(this.targetExtent_) / this.targetResolution_;\n      const height = getHeight(this.targetExtent_) / this.targetResolution_;\n      this.canvas_ = renderReprojected(\n        width,\n        height,\n        this.sourcePixelRatio_,\n        fromResolutionLike(this.sourceImage_.getResolution()),\n        this.maxSourceExtent_,\n        this.targetResolution_,\n        this.targetExtent_,\n        this.triangulation_,\n        [\n          {\n            extent: this.sourceImage_.getExtent(),\n            image: this.sourceImage_.getImage(),\n          },\n        ],\n        0,\n        undefined,\n        this.interpolate_,\n        true,\n      );\n    }\n    this.state = sourceState;\n    this.changed();\n  }\n\n  /**\n   * Load not yet loaded URI.\n   * @override\n   */\n  load() {\n    if (this.state == ImageState.IDLE) {\n      this.state = ImageState.LOADING;\n      this.changed();\n\n      const sourceState = this.sourceImage_.getState();\n      if (sourceState == ImageState.LOADED || sourceState == ImageState.ERROR) {\n        this.reproject_();\n      } else {\n        this.sourceListenerKey_ = listen(\n          this.sourceImage_,\n          EventType.CHANGE,\n          (e) => {\n            const sourceState = this.sourceImage_.getState();\n            if (\n              sourceState == ImageState.LOADED ||\n              sourceState == ImageState.ERROR\n            ) {\n              this.unlistenSource_();\n              this.reproject_();\n            }\n          },\n        );\n        this.sourceImage_.load();\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  unlistenSource_() {\n    unlistenByKey(\n      /** @type {!import(\"../events.js\").EventsKey} */ (\n        this.sourceListenerKey_\n      ),\n    );\n    this.sourceListenerKey_ = null;\n  }\n}\n\nexport default ReprojImage;\n","/**\n * @module ol/source/Image\n */\nimport ImageWrapper from '../Image.js';\nimport ImageState from '../ImageState.js';\nimport {linearFindNearest} from '../array.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport {\n  containsExtent,\n  equals,\n  getCenter,\n  getForViewAndSize,\n  getHeight,\n  getWidth,\n} from '../extent.js';\nimport {ceil} from '../math.js';\nimport {equivalent} from '../proj.js';\nimport ReprojImage from '../reproj/Image.js';\nimport {fromResolutionLike} from '../resolution.js';\nimport Source from './Source.js';\nimport {DECIMALS} from './common.js';\n\n/**\n * @enum {string}\n */\nexport const ImageSourceEventType = {\n  /**\n   * Triggered when an image starts loading.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloadstart\n   * @api\n   */\n  IMAGELOADSTART: 'imageloadstart',\n\n  /**\n   * Triggered when an image finishes loading.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloadend\n   * @api\n   */\n  IMAGELOADEND: 'imageloadend',\n\n  /**\n   * Triggered if image loading results in an error.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloaderror\n   * @api\n   */\n  IMAGELOADERROR: 'imageloaderror',\n};\n\n/**\n * @typedef {'imageloadend'|'imageloaderror'|'imageloadstart'} ImageSourceEventTypes\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Image~ImageSource} instances are instances of this\n * type.\n */\nexport class ImageSourceEvent extends Event {\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Image.js\").default} image The image.\n   */\n  constructor(type, image) {\n    super(type);\n\n    /**\n     * The image related to the event.\n     * @type {import(\"../Image.js\").default}\n     * @api\n     */\n    this.image = image;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<ImageSourceEventTypes, ImageSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types\n *     |ImageSourceEventTypes, Return>} ImageSourceOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../Image.js\").Loader} [loader] Loader. Can either be a custom loader, or one of the\n * loaders created with a `createLoader()` function ({@link module:ol/source/wms.createLoader wms},\n * {@link module:ol/source/arcgisRest.createLoader arcgisRest}, {@link module:ol/source/mapguide.createLoader mapguide},\n * {@link module:ol/source/static.createLoader static}).\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {Array<number>} [resolutions] Resolutions.\n * @property {import(\"./Source.js\").State} [state] State.\n */\n\n/**\n * @classdesc\n * Base class for sources providing a single image.\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nclass ImageSource extends Source {\n  /**\n   * @param {Options} options Single image source options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      projection: options.projection,\n      state: options.state,\n      interpolate:\n        options.interpolate !== undefined ? options.interpolate : true,\n    });\n\n    /***\n     * @type {ImageSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {ImageSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {ImageSourceOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @protected\n     * @type {import(\"../Image.js\").Loader}\n     */\n    this.loader = options.loader || null;\n\n    /**\n     * @private\n     * @type {Array<number>|null}\n     */\n    this.resolutions_ =\n      options.resolutions !== undefined ? options.resolutions : null;\n\n    /**\n     * @private\n     * @type {import(\"../reproj/Image.js\").default}\n     */\n    this.reprojectedImage_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.reprojectedRevision_ = 0;\n\n    /**\n     * @protected\n     * @type {import(\"../Image.js\").default}\n     */\n    this.image = null;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.wantedExtent_;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.wantedResolution_;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.static_ = options.loader ? options.loader.length === 0 : false;\n\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.wantedProjection_ = null;\n  }\n\n  /**\n   * @return {Array<number>|null} Resolutions.\n   * @override\n   */\n  getResolutions() {\n    return this.resolutions_;\n  }\n\n  /**\n   * @param {Array<number>|null} resolutions Resolutions.\n   */\n  setResolutions(resolutions) {\n    this.resolutions_ = resolutions;\n  }\n\n  /**\n   * @protected\n   * @param {number} resolution Resolution.\n   * @return {number} Resolution.\n   */\n  findNearestResolution(resolution) {\n    const resolutions = this.getResolutions();\n    if (resolutions) {\n      const idx = linearFindNearest(resolutions, resolution, 0);\n      resolution = resolutions[idx];\n    }\n    return resolution;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n  getImage(extent, resolution, pixelRatio, projection) {\n    const sourceProjection = this.getProjection();\n    if (\n      !sourceProjection ||\n      !projection ||\n      equivalent(sourceProjection, projection)\n    ) {\n      if (sourceProjection) {\n        projection = sourceProjection;\n      }\n\n      return this.getImageInternal(extent, resolution, pixelRatio, projection);\n    }\n    if (this.reprojectedImage_) {\n      if (\n        this.reprojectedRevision_ == this.getRevision() &&\n        equivalent(this.reprojectedImage_.getProjection(), projection) &&\n        this.reprojectedImage_.getResolution() == resolution &&\n        equals(this.reprojectedImage_.getExtent(), extent)\n      ) {\n        return this.reprojectedImage_;\n      }\n      this.reprojectedImage_.dispose();\n      this.reprojectedImage_ = null;\n    }\n\n    this.reprojectedImage_ = new ReprojImage(\n      sourceProjection,\n      projection,\n      extent,\n      resolution,\n      pixelRatio,\n      (extent, resolution, pixelRatio) =>\n        this.getImageInternal(extent, resolution, pixelRatio, sourceProjection),\n      this.getInterpolate(),\n    );\n    this.reprojectedRevision_ = this.getRevision();\n\n    return this.reprojectedImage_;\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   * @protected\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    if (this.loader) {\n      const requestExtent = getRequestExtent(extent, resolution, pixelRatio, 1);\n      const requestResolution = this.findNearestResolution(resolution);\n      if (\n        this.image &&\n        (this.static_ ||\n          (this.wantedProjection_ === projection &&\n            ((this.wantedExtent_ &&\n              containsExtent(this.wantedExtent_, requestExtent)) ||\n              containsExtent(this.image.getExtent(), requestExtent)) &&\n            ((this.wantedResolution_ &&\n              fromResolutionLike(this.wantedResolution_) ===\n                requestResolution) ||\n              fromResolutionLike(this.image.getResolution()) ===\n                requestResolution)))\n      ) {\n        return this.image;\n      }\n      this.wantedProjection_ = projection;\n      this.wantedExtent_ = requestExtent;\n      this.wantedResolution_ = requestResolution;\n      this.image = new ImageWrapper(\n        requestExtent,\n        requestResolution,\n        pixelRatio,\n        this.loader,\n      );\n      this.image.addEventListener(\n        EventType.CHANGE,\n        this.handleImageChange.bind(this),\n      );\n    }\n    return this.image;\n  }\n\n  /**\n   * Handle image change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */\n  handleImageChange(event) {\n    const image = /** @type {import(\"../Image.js\").default} */ (event.target);\n    let type;\n    switch (image.getState()) {\n      case ImageState.LOADING:\n        this.loading = true;\n        type = ImageSourceEventType.IMAGELOADSTART;\n        break;\n      case ImageState.LOADED:\n        this.loading = false;\n        type = ImageSourceEventType.IMAGELOADEND;\n        break;\n      case ImageState.ERROR:\n        this.loading = false;\n        type = ImageSourceEventType.IMAGELOADERROR;\n        break;\n      default:\n        return;\n    }\n    if (this.hasListener(type)) {\n      this.dispatchEvent(new ImageSourceEvent(type, image));\n    }\n  }\n}\n\n/**\n * Default image load function for image sources that use import(\"../Image.js\").Image image\n * instances.\n * @param {import(\"../Image.js\").default} image Image.\n * @param {string} src Source.\n */\nexport function defaultImageLoadFunction(image, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */ (image.getImage()).src = src;\n}\n\n/**\n * Adjusts the extent so it aligns with pixel boundaries.\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {number} resolution Reolution.\n * @param {number} pixelRatio Pixel ratio.\n * @param {number} ratio Ratio between request size and view size.\n * @return {import(\"../extent.js\").Extent} Request extent.\n */\nexport function getRequestExtent(extent, resolution, pixelRatio, ratio) {\n  const imageResolution = resolution / pixelRatio;\n  const center = getCenter(extent);\n  const viewWidth = ceil(getWidth(extent) / imageResolution, DECIMALS);\n  const viewHeight = ceil(getHeight(extent) / imageResolution, DECIMALS);\n  const marginWidth = ceil(((ratio - 1) * viewWidth) / 2, DECIMALS);\n  const requestWidth = viewWidth + 2 * marginWidth;\n  const marginHeight = ceil(((ratio - 1) * viewHeight) / 2, DECIMALS);\n  const requestHeight = viewHeight + 2 * marginHeight;\n  return getForViewAndSize(center, imageResolution, 0, [\n    requestWidth,\n    requestHeight,\n  ]);\n}\n\nexport default ImageSource;\n","/**\n * @module ol/ImageCanvas\n */\nimport ImageWrapper from './Image.js';\nimport ImageState from './ImageState.js';\n\n/**\n * A function that is called to trigger asynchronous canvas drawing.  It is\n * called with a \"done\" callback that should be called when drawing is done.\n * If any error occurs during drawing, the \"done\" callback should be called with\n * that error.\n *\n * @typedef {function(function(Error=): void): void} Loader\n */\n\nclass ImageCanvas extends ImageWrapper {\n  /**\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {HTMLCanvasElement} canvas Canvas.\n   * @param {Loader} [loader] Optional loader function to\n   *     support asynchronous canvas drawing.\n   */\n  constructor(extent, resolution, pixelRatio, canvas, loader) {\n    const state = loader !== undefined ? ImageState.IDLE : ImageState.LOADED;\n\n    super(extent, resolution, pixelRatio, state);\n\n    /**\n     * Optional canvas loader function.\n     * @type {?Loader}\n     * @private\n     */\n    this.loader_ = loader !== undefined ? loader : null;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = canvas;\n\n    /**\n     * @private\n     * @type {?Error}\n     */\n    this.error_ = null;\n  }\n\n  /**\n   * Get any error associated with asynchronous rendering.\n   * @return {?Error} Any error that occurred during rendering.\n   */\n  getError() {\n    return this.error_;\n  }\n\n  /**\n   * Handle async drawing complete.\n   * @param {Error} [err] Any error during drawing.\n   * @private\n   */\n  handleLoad_(err) {\n    if (err) {\n      this.error_ = err;\n      this.state = ImageState.ERROR;\n    } else {\n      this.state = ImageState.LOADED;\n    }\n    this.changed();\n  }\n\n  /**\n   * Load not yet loaded URI.\n   * @override\n   */\n  load() {\n    if (this.state == ImageState.IDLE) {\n      this.state = ImageState.LOADING;\n      this.changed();\n      this.loader_(this.handleLoad_.bind(this));\n    }\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Canvas element.\n   * @override\n   */\n  getImage() {\n    return this.canvas_;\n  }\n}\n\nexport default ImageCanvas;\n","/**\n * @module ol/source/Raster\n */\nimport Disposable from '../Disposable.js';\nimport ImageCanvas from '../ImageCanvas.js';\nimport TileQueue from '../TileQueue.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport {equals, getCenter, getHeight, getWidth} from '../extent.js';\nimport ImageLayer from '../layer/Image.js';\nimport TileLayer from '../layer/Tile.js';\nimport {create as createTransform} from '../transform.js';\nimport {getUid} from '../util.js';\nimport ImageSource from './Image.js';\nimport Source from './Source.js';\nimport TileSource from './Tile.js';\n\n/**\n * @typedef {Object} MinionData\n * @property {Array<ArrayBuffer>} buffers Array of buffers.\n * @property {Object} meta Operation metadata.\n * @property {boolean} imageOps The operation is an image operation.\n * @property {number} width The width of the image.\n * @property {number} height The height of the image.\n */\n\n/* istanbul ignore next */\n/**\n * Create a function for running operations.  This function is serialized for\n * use in a worker.\n * @param {function(Array, Object):*} operation The operation.\n * @return {function(MinionData):ArrayBuffer} A function that takes an object with\n * buffers, meta, imageOps, width, and height properties and returns an array\n * buffer.\n */\nfunction createMinion(operation) {\n  return function (data) {\n    // bracket notation for minification support\n    const buffers = data['buffers'];\n    const meta = data['meta'];\n    const imageOps = data['imageOps'];\n    const width = data['width'];\n    const height = data['height'];\n\n    const numBuffers = buffers.length;\n    const numBytes = buffers[0].byteLength;\n\n    if (imageOps) {\n      const images = new Array(numBuffers);\n      for (let b = 0; b < numBuffers; ++b) {\n        images[b] = new ImageData(\n          new Uint8ClampedArray(buffers[b]),\n          width,\n          height,\n        );\n      }\n      const output = operation(images, meta).data;\n      return output.buffer;\n    }\n\n    const output = new Uint8ClampedArray(numBytes);\n    const arrays = new Array(numBuffers);\n    const pixels = new Array(numBuffers);\n    for (let b = 0; b < numBuffers; ++b) {\n      arrays[b] = new Uint8ClampedArray(buffers[b]);\n      pixels[b] = [0, 0, 0, 0];\n    }\n    for (let i = 0; i < numBytes; i += 4) {\n      for (let j = 0; j < numBuffers; ++j) {\n        const array = arrays[j];\n        pixels[j][0] = array[i];\n        pixels[j][1] = array[i + 1];\n        pixels[j][2] = array[i + 2];\n        pixels[j][3] = array[i + 3];\n      }\n      const pixel = operation(pixels, meta);\n      output[i] = pixel[0];\n      output[i + 1] = pixel[1];\n      output[i + 2] = pixel[2];\n      output[i + 3] = pixel[3];\n    }\n    return output.buffer;\n  };\n}\n\n/**\n * Create a worker for running operations.\n * @param {ProcessorOptions} config Processor options.\n * @param {function(MessageEvent): void} onMessage Called with a message event.\n * @return {Worker} The worker.\n */\nfunction createWorker(config, onMessage) {\n  const lib = Object.keys(config.lib || {}).map(function (name) {\n    return 'const ' + name + ' = ' + config.lib[name].toString() + ';';\n  });\n\n  const lines = lib.concat([\n    'const __minion__ = (' + createMinion.toString() + ')(',\n    config.operation.toString(),\n    ');',\n    'self.addEventListener(\"message\", function(event) {',\n    '  const buffer = __minion__(event.data);',\n    '  self.postMessage({buffer: buffer, meta: event.data.meta}, [buffer]);',\n    '});',\n  ]);\n\n  const worker = new Worker(\n    typeof Blob === 'undefined'\n      ? 'data:text/javascript;base64,' +\n        Buffer.from(lines.join('\\n'), 'binary').toString('base64')\n      : URL.createObjectURL(new Blob(lines, {type: 'text/javascript'})),\n  );\n  worker.addEventListener('message', onMessage);\n  return worker;\n}\n\n/**\n * @typedef {Object} FauxMessageEvent\n * @property {Object} data Message data.\n */\n\n/**\n * Create a faux worker for running operations.\n * @param {ProcessorOptions} config Configuration.\n * @param {function(FauxMessageEvent): void} onMessage Called with a message event.\n * @return {Object} The faux worker.\n */\nfunction createFauxWorker(config, onMessage) {\n  const minion = createMinion(config.operation);\n  let terminated = false;\n  return {\n    postMessage: function (data) {\n      setTimeout(function () {\n        if (terminated) {\n          return;\n        }\n        onMessage({data: {buffer: minion(data), meta: data['meta']}});\n      }, 0);\n    },\n    terminate: function () {\n      terminated = true;\n    },\n  };\n}\n\n/**\n * @typedef {function(Error, ImageData, (Object|Array<Object>)): void} JobCallback\n */\n\n/**\n * @typedef {Object} Job\n * @property {Object} meta Job metadata.\n * @property {Array<ImageData>} inputs Array of input data.\n * @property {JobCallback} callback Called when the job is complete.\n */\n\n/**\n * @typedef {Object} ProcessorOptions\n * @property {number} threads Number of workers to spawn.\n * @property {Operation} operation The operation.\n * @property {Object<string, Function>} [lib] Functions that will be made available to operations run in a worker.\n * @property {number} queue The number of queued jobs to allow.\n * @property {boolean} [imageOps=false] Pass all the image data to the operation instead of a single pixel.\n */\n\n/**\n * @classdesc\n * A processor runs pixel or image operations in workers.\n */\nexport class Processor extends Disposable {\n  /**\n   * @param {ProcessorOptions} config Configuration.\n   */\n  constructor(config) {\n    super();\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.imageOps_ = !!config.imageOps;\n    let threads;\n    if (config.threads === 0) {\n      threads = 0;\n    } else if (this.imageOps_) {\n      threads = 1;\n    } else {\n      threads = config.threads || 1;\n    }\n\n    /**\n     * @type {Array<Worker>}\n     */\n    const workers = new Array(threads);\n    if (threads) {\n      for (let i = 0; i < threads; ++i) {\n        workers[i] = createWorker(config, this.onWorkerMessage_.bind(this, i));\n      }\n    } else {\n      workers[0] = createFauxWorker(\n        config,\n        this.onWorkerMessage_.bind(this, 0),\n      );\n    }\n    /**\n     * @type {Array<Worker>}\n     * @private\n     */\n    this.workers_ = workers;\n\n    /**\n     * @type {Array<Job>}\n     * @private\n     */\n    this.queue_ = [];\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.maxQueueLength_ = config.queue || Infinity;\n    /**\n     * @type {number}\n     * @private\n     */\n    this.running_ = 0;\n\n    /**\n     * @type {Object<number, any>}\n     * @private\n     */\n    this.dataLookup_ = {};\n\n    /**\n     * @type {Job|null}\n     * @private\n     */\n    this.job_ = null;\n  }\n\n  /**\n   * Run operation on input data.\n   * @param {Array<ImageData>} inputs Array of image data.\n   * @param {Object} meta A user data object.  This is passed to all operations\n   *     and must be serializable.\n   * @param {function(Error, ImageData, Object): void} callback Called when work\n   *     completes.  The first argument is any error.  The second is the ImageData\n   *     generated by operations.  The third is the user data object.\n   */\n  process(inputs, meta, callback) {\n    this.enqueue_({\n      inputs: inputs,\n      meta: meta,\n      callback: callback,\n    });\n    this.dispatch_();\n  }\n\n  /**\n   * Add a job to the queue.\n   * @param {Job} job The job.\n   */\n  enqueue_(job) {\n    this.queue_.push(job);\n    while (this.queue_.length > this.maxQueueLength_) {\n      this.queue_.shift().callback(null, null);\n    }\n  }\n\n  /**\n   * Dispatch a job.\n   */\n  dispatch_() {\n    if (this.running_ || this.queue_.length === 0) {\n      return;\n    }\n\n    const job = this.queue_.shift();\n    this.job_ = job;\n    const width = job.inputs[0].width;\n    const height = job.inputs[0].height;\n    const buffers = job.inputs.map(function (input) {\n      return input.data.buffer;\n    });\n    const threads = this.workers_.length;\n    this.running_ = threads;\n    if (threads === 1) {\n      this.workers_[0].postMessage(\n        {\n          buffers: buffers,\n          meta: job.meta,\n          imageOps: this.imageOps_,\n          width: width,\n          height: height,\n        },\n        buffers,\n      );\n      return;\n    }\n\n    const length = job.inputs[0].data.length;\n    const segmentLength = 4 * Math.ceil(length / 4 / threads);\n    for (let i = 0; i < threads; ++i) {\n      const offset = i * segmentLength;\n      const slices = [];\n      for (let j = 0, jj = buffers.length; j < jj; ++j) {\n        slices.push(buffers[j].slice(offset, offset + segmentLength));\n      }\n      this.workers_[i].postMessage(\n        {\n          buffers: slices,\n          meta: job.meta,\n          imageOps: this.imageOps_,\n          width: width,\n          height: height,\n        },\n        slices,\n      );\n    }\n  }\n\n  /**\n   * Handle messages from the worker.\n   * @param {number} index The worker index.\n   * @param {MessageEvent} event The message event.\n   */\n  onWorkerMessage_(index, event) {\n    if (this.disposed) {\n      return;\n    }\n    this.dataLookup_[index] = event.data;\n    --this.running_;\n    if (this.running_ === 0) {\n      this.resolveJob_();\n    }\n  }\n\n  /**\n   * Resolve a job.  If there are no more worker threads, the processor callback\n   * will be called.\n   */\n  resolveJob_() {\n    const job = this.job_;\n    const threads = this.workers_.length;\n    let data, meta;\n    if (threads === 1) {\n      data = new Uint8ClampedArray(this.dataLookup_[0]['buffer']);\n      meta = this.dataLookup_[0]['meta'];\n    } else {\n      const length = job.inputs[0].data.length;\n      data = new Uint8ClampedArray(length);\n      meta = new Array(threads);\n      const segmentLength = 4 * Math.ceil(length / 4 / threads);\n      for (let i = 0; i < threads; ++i) {\n        const buffer = this.dataLookup_[i]['buffer'];\n        const offset = i * segmentLength;\n        data.set(new Uint8ClampedArray(buffer), offset);\n        meta[i] = this.dataLookup_[i]['meta'];\n      }\n    }\n    this.job_ = null;\n    this.dataLookup_ = {};\n    job.callback(\n      null,\n      new ImageData(data, job.inputs[0].width, job.inputs[0].height),\n      meta,\n    );\n    this.dispatch_();\n  }\n\n  /**\n   * Terminate all workers associated with the processor.\n   * @override\n   */\n  disposeInternal() {\n    for (let i = 0; i < this.workers_.length; ++i) {\n      this.workers_[i].terminate();\n    }\n    this.workers_.length = 0;\n  }\n}\n\n/**\n * A function that takes an array of input data, performs some operation, and\n * returns an array of output data.\n * For `pixel` type operations, the function will be called with an array of\n * pixels, where each pixel is an array of four numbers (`[r, g, b, a]`) in the\n * range of 0 - 255. It should return a single pixel array.\n * For `'image'` type operations, functions will be called with an array of\n * [ImageData](https://developer.mozilla.org/en-US/docs/Web/API/ImageData)\n * and should return a single\n * [ImageData](https://developer.mozilla.org/en-US/docs/Web/API/ImageData).\n * The operations\n * are called with a second \"data\" argument, which can be used for storage.  The\n * data object is accessible from raster events, where it can be initialized in\n * \"beforeoperations\" and accessed again in \"afteroperations\".\n *\n * @typedef {function((Array<Array<number>>|Array<ImageData>), Object):\n *     (Array<number>|ImageData)} Operation\n */\n\n/**\n * @enum {string}\n */\nconst RasterEventType = {\n  /**\n   * Triggered before operations are run.  Listeners will receive an event object with\n   * a `data` property that can be used to make data available to operations.\n   * @event module:ol/source/Raster.RasterSourceEvent#beforeoperations\n   * @api\n   */\n  BEFOREOPERATIONS: 'beforeoperations',\n\n  /**\n   * Triggered after operations are run.  Listeners will receive an event object with\n   * a `data` property.  If more than one thread is used, `data` will be an array of\n   * objects.  If a single thread is used, `data` will be a single object.\n   * @event module:ol/source/Raster.RasterSourceEvent#afteroperations\n   * @api\n   */\n  AFTEROPERATIONS: 'afteroperations',\n};\n\n/**\n * @typedef {'pixel' | 'image'} RasterOperationType\n * Raster operation type. Supported values are `'pixel'` and `'image'`.\n */\n\n/**\n * @typedef {import(\"./Image.js\").ImageSourceEventTypes|'beforeoperations'|'afteroperations'} RasterSourceEventTypes\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Raster~RasterSource} instances are instances of this\n * type.\n */\nexport class RasterSourceEvent extends Event {\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Map.js\").FrameState} frameState The frame state.\n   * @param {Object|Array<Object>} data An object made available to operations.  For \"afteroperations\" evenets\n   * this will be an array of objects if more than one thread is used.\n   */\n  constructor(type, frameState, data) {\n    super(type);\n\n    /**\n     * The raster extent.\n     * @type {import(\"../extent.js\").Extent}\n     * @api\n     */\n    this.extent = frameState.extent;\n\n    /**\n     * The pixel resolution (map units per pixel).\n     * @type {number}\n     * @api\n     */\n    this.resolution = frameState.viewState.resolution / frameState.pixelRatio;\n\n    /**\n     * An object made available to all operations.  This can be used by operations\n     * as a storage object (e.g. for calculating statistics).\n     * @type {Object}\n     * @api\n     */\n    this.data = data;\n  }\n}\n\n/**\n * @typedef {Object} Options\n * @property {Array<import(\"./Source.js\").default|import(\"../layer/Layer.js\").default>} sources Input\n * sources or layers.  For vector data, use an VectorImage layer.\n * @property {Operation} [operation] Raster operation.\n * The operation will be called with data from input sources\n * and the output will be assigned to the raster source.\n * @property {Object} [lib] Functions that will be made available to operations run in a worker.\n * @property {number} [threads] By default, operations will be run in a single worker thread.\n * To avoid using workers altogether, set `threads: 0`.  For pixel operations, operations can\n * be run in multiple worker threads.  Note that there is additional overhead in\n * transferring data to multiple workers, and that depending on the user's\n * system, it may not be possible to parallelize the work.\n * @property {RasterOperationType} [operationType='pixel'] Operation type.\n * Supported values are `'pixel'` and `'image'`.  By default,\n * `'pixel'` operations are assumed, and operations will be called with an\n * array of pixels from input sources.  If set to `'image'`, operations will\n * be called with an array of ImageData objects from input sources.\n * @property {Array<number>|null} [resolutions] Resolutions. If specified, raster operations will only\n * be run at the given resolutions.  By default, the resolutions of the first source with resolutions\n * specified will be used, if any. Set to `null` to use any view resolution instead.\n */\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Image.js\").ImageSourceEventTypes, import(\"./Image.js\").ImageSourceEvent, Return> &\n *   import(\"../Observable\").OnSignature<RasterSourceEventTypes, RasterSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types\n *     |RasterSourceEventTypes, Return>} RasterSourceOnSignature\n */\n\n/**\n * @classdesc\n * A source that transforms data from any number of input sources using an\n * {@link module:ol/source/Raster~Operation} function to transform input pixel values into\n * output pixel values.\n *\n * @fires module:ol/source/Raster.RasterSourceEvent\n * @api\n */\nclass RasterSource extends ImageSource {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    super({\n      projection: null,\n    });\n\n    /***\n     * @type {RasterSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {RasterSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {RasterSourceOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @private\n     * @type {Processor}\n     */\n    this.processor_ = null;\n\n    /**\n     * @private\n     * @type {RasterOperationType}\n     */\n    this.operationType_ =\n      options.operationType !== undefined ? options.operationType : 'pixel';\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.threads_ = options.threads !== undefined ? options.threads : 1;\n\n    /**\n     * @private\n     * @type {Array<import(\"../layer/Layer.js\").default>}\n     */\n    this.layers_ = createLayers(options.sources);\n\n    const changed = this.changed.bind(this);\n    for (let i = 0, ii = this.layers_.length; i < ii; ++i) {\n      this.layers_[i].addEventListener(EventType.CHANGE, changed);\n    }\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.useResolutions_ = options.resolutions !== null;\n\n    /**\n     * @private\n     * @type {import(\"../TileQueue.js\").default}\n     */\n    this.tileQueue_ = new TileQueue(function () {\n      return 1;\n    }, this.processSources_.bind(this));\n\n    /**\n     * The most recently requested frame state.\n     * @type {import(\"../Map.js\").FrameState}\n     * @private\n     */\n    this.requestedFrameState_;\n\n    /**\n     * The most recently rendered image canvas.\n     * @type {import(\"../ImageCanvas.js\").default}\n     * @private\n     */\n    this.renderedImageCanvas_ = null;\n\n    /**\n     * The most recently rendered revision.\n     * @type {number}\n     * @private\n     */\n    this.renderedRevision_;\n\n    /**\n     * @private\n     * @type {import(\"../Map.js\").FrameState}\n     */\n    this.frameState_ = {\n      animate: false,\n      coordinateToPixelTransform: createTransform(),\n      declutter: null,\n      extent: null,\n      index: 0,\n      layerIndex: 0,\n      layerStatesArray: getLayerStatesArray(this.layers_),\n      pixelRatio: 1,\n      pixelToCoordinateTransform: createTransform(),\n      postRenderFunctions: [],\n      size: [0, 0],\n      tileQueue: this.tileQueue_,\n      time: Date.now(),\n      usedTiles: {},\n      viewState: /** @type {import(\"../View.js\").State} */ ({\n        rotation: 0,\n      }),\n      viewHints: [],\n      wantedTiles: {},\n      mapId: getUid(this),\n      renderTargets: {},\n    };\n\n    this.setAttributions(function (frameState) {\n      /** @type {Array<string>} */\n      const attributions = [];\n      for (let i = 0, iMax = options.sources.length; i < iMax; ++i) {\n        const sourceOrLayer = options.sources[i];\n        const source =\n          sourceOrLayer instanceof Source\n            ? sourceOrLayer\n            : sourceOrLayer.getSource();\n        if (!source) {\n          continue;\n        }\n        const sourceAttributions = source.getAttributions()?.(frameState);\n        if (typeof sourceAttributions === 'string') {\n          attributions.push(sourceAttributions);\n        } else if (sourceAttributions !== undefined) {\n          attributions.push(...sourceAttributions);\n        }\n      }\n      return attributions;\n    });\n\n    if (options.operation !== undefined) {\n      this.setOperation(options.operation, options.lib);\n    }\n  }\n\n  /**\n   * Set the operation.\n   * @param {Operation} operation New operation.\n   * @param {Object} [lib] Functions that will be available to operations run\n   *     in a worker.\n   * @api\n   */\n  setOperation(operation, lib) {\n    if (this.processor_) {\n      this.processor_.dispose();\n    }\n\n    this.processor_ = new Processor({\n      operation: operation,\n      imageOps: this.operationType_ === 'image',\n      queue: 1,\n      lib: lib,\n      threads: this.threads_,\n    });\n    this.changed();\n  }\n\n  /**\n   * Update the stored frame state.\n   * @param {import(\"../extent.js\").Extent} extent The view extent (in map units).\n   * @param {number} resolution The view resolution.\n   * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n   * @return {import(\"../Map.js\").FrameState} The updated frame state.\n   * @private\n   */\n  updateFrameState_(extent, resolution, projection) {\n    const frameState = /** @type {import(\"../Map.js\").FrameState} */ (\n      Object.assign({}, this.frameState_)\n    );\n\n    frameState.viewState = /** @type {import(\"../View.js\").State} */ (\n      Object.assign({}, frameState.viewState)\n    );\n\n    const center = getCenter(extent);\n\n    frameState.size[0] = Math.ceil(getWidth(extent) / resolution);\n    frameState.size[1] = Math.ceil(getHeight(extent) / resolution);\n    frameState.extent = [\n      center[0] - (frameState.size[0] * resolution) / 2,\n      center[1] - (frameState.size[1] * resolution) / 2,\n      center[0] + (frameState.size[0] * resolution) / 2,\n      center[1] + (frameState.size[1] * resolution) / 2,\n    ];\n    frameState.time = Date.now();\n\n    const viewState = frameState.viewState;\n    viewState.center = center;\n    viewState.projection = projection;\n    viewState.resolution = resolution;\n    return frameState;\n  }\n\n  /**\n   * Determine if all sources are ready.\n   * @return {boolean} All sources are ready.\n   * @private\n   */\n  allSourcesReady_() {\n    let ready = true;\n    let source;\n    for (let i = 0, ii = this.layers_.length; i < ii; ++i) {\n      source = this.layers_[i].getSource();\n      if (!source || source.getState() !== 'ready') {\n        ready = false;\n        break;\n      }\n    }\n    return ready;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../ImageCanvas.js\").default} Single image.\n   * @override\n   */\n  getImage(extent, resolution, pixelRatio, projection) {\n    if (!this.allSourcesReady_()) {\n      return null;\n    }\n\n    this.tileQueue_.loadMoreTiles(16, 16);\n\n    resolution = this.findNearestResolution(resolution);\n    const frameState = this.updateFrameState_(extent, resolution, projection);\n    this.requestedFrameState_ = frameState;\n\n    // check if we can't reuse the existing ol/ImageCanvas\n    if (this.renderedImageCanvas_) {\n      const renderedResolution = this.renderedImageCanvas_.getResolution();\n      const renderedExtent = this.renderedImageCanvas_.getExtent();\n      if (\n        resolution !== renderedResolution ||\n        !equals(frameState.extent, renderedExtent)\n      ) {\n        this.renderedImageCanvas_ = null;\n      }\n    }\n\n    if (\n      !this.renderedImageCanvas_ ||\n      this.getRevision() !== this.renderedRevision_\n    ) {\n      this.processSources_();\n    }\n\n    if (frameState.animate) {\n      requestAnimationFrame(this.changed.bind(this));\n    }\n\n    return this.renderedImageCanvas_;\n  }\n\n  /**\n   * Start processing source data.\n   * @private\n   */\n  processSources_() {\n    const frameState = this.requestedFrameState_;\n    const len = this.layers_.length;\n    const imageDatas = new Array(len);\n    for (let i = 0; i < len; ++i) {\n      frameState.layerIndex = i;\n      frameState.renderTargets = {};\n      const imageData = getImageData(this.layers_[i], frameState);\n      if (imageData) {\n        imageDatas[i] = imageData;\n      } else {\n        return;\n      }\n    }\n\n    const data = {};\n    this.dispatchEvent(\n      new RasterSourceEvent(RasterEventType.BEFOREOPERATIONS, frameState, data),\n    );\n    this.processor_.process(\n      imageDatas,\n      data,\n      this.onWorkerComplete_.bind(this, frameState),\n    );\n  }\n\n  /**\n   * Called when pixel processing is complete.\n   * @param {import(\"../Map.js\").FrameState} frameState The frame state.\n   * @param {Error} err Any error during processing.\n   * @param {ImageData} output The output image data.\n   * @param {Object|Array<Object>} data The user data (or an array if more than one thread).\n   * @private\n   */\n  onWorkerComplete_(frameState, err, output, data) {\n    if (err || !output) {\n      return;\n    }\n\n    // do nothing if extent or resolution changed\n    const extent = frameState.extent;\n    const resolution = frameState.viewState.resolution;\n    if (\n      resolution !== this.requestedFrameState_.viewState.resolution ||\n      !equals(extent, this.requestedFrameState_.extent)\n    ) {\n      return;\n    }\n\n    let context;\n    if (this.renderedImageCanvas_) {\n      context = this.renderedImageCanvas_.getImage().getContext('2d');\n    } else {\n      const width = Math.round(getWidth(extent) / resolution);\n      const height = Math.round(getHeight(extent) / resolution);\n      context = createCanvasContext2D(width, height);\n      this.renderedImageCanvas_ = new ImageCanvas(\n        extent,\n        resolution,\n        1,\n        context.canvas,\n      );\n    }\n    context.putImageData(output, 0, 0);\n\n    if (frameState.animate) {\n      requestAnimationFrame(this.changed.bind(this));\n    } else {\n      this.changed();\n    }\n    this.renderedRevision_ = this.getRevision();\n\n    this.dispatchEvent(\n      new RasterSourceEvent(RasterEventType.AFTEROPERATIONS, frameState, data),\n    );\n  }\n\n  /**\n   * @param {import(\"../proj/Projection\").default} [projection] Projection.\n   * @return {Array<number>|null} Resolutions.\n   * @override\n   */\n  getResolutions(projection) {\n    if (!this.useResolutions_) {\n      return null;\n    }\n    let resolutions = super.getResolutions();\n    if (!resolutions) {\n      for (let i = 0, ii = this.layers_.length; i < ii; ++i) {\n        const source = this.layers_[i].getSource();\n        resolutions = source.getResolutions(projection);\n        if (resolutions) {\n          break;\n        }\n      }\n    }\n    return resolutions;\n  }\n\n  /**\n   * @override\n   */\n  disposeInternal() {\n    if (this.processor_) {\n      this.processor_.dispose();\n    }\n    super.disposeInternal();\n  }\n}\n\n/**\n * Clean up and unregister the worker.\n * @function\n * @api\n */\nRasterSource.prototype.dispose;\n\n/**\n * A reusable canvas context.\n * @type {CanvasRenderingContext2D}\n * @private\n */\nlet sharedContext = null;\n\n/**\n * Get image data from a layer.\n * @param {import(\"../layer/Layer.js\").default} layer Layer to render.\n * @param {import(\"../Map.js\").FrameState} frameState The frame state.\n * @return {ImageData} The image data.\n */\nfunction getImageData(layer, frameState) {\n  const renderer = layer.getRenderer();\n  if (!renderer) {\n    throw new Error('Unsupported layer type: ' + layer);\n  }\n\n  if (!renderer.prepareFrame(frameState)) {\n    return null;\n  }\n  const width = frameState.size[0];\n  const height = frameState.size[1];\n  if (width === 0 || height === 0) {\n    return null;\n  }\n  const container = renderer.renderFrame(frameState, null);\n  let element;\n  if (container instanceof HTMLCanvasElement) {\n    element = container;\n  } else {\n    if (container) {\n      element = container.firstElementChild;\n    }\n    if (!(element instanceof HTMLCanvasElement)) {\n      throw new Error('Unsupported rendered element: ' + element);\n    }\n    if (element.width === width && element.height === height) {\n      const context = element.getContext('2d');\n      return context.getImageData(0, 0, width, height);\n    }\n  }\n\n  if (!sharedContext) {\n    sharedContext = createCanvasContext2D(width, height, undefined, {\n      willReadFrequently: true,\n    });\n  } else {\n    const canvas = sharedContext.canvas;\n    if (canvas.width !== width || canvas.height !== height) {\n      sharedContext = createCanvasContext2D(width, height, undefined, {\n        willReadFrequently: true,\n      });\n    } else {\n      sharedContext.clearRect(0, 0, width, height);\n    }\n  }\n  sharedContext.drawImage(element, 0, 0, width, height);\n  return sharedContext.getImageData(0, 0, width, height);\n}\n\n/**\n * Get a list of layer states from a list of layers.\n * @param {Array<import(\"../layer/Layer.js\").default>} layers Layers.\n * @return {Array<import(\"../layer/Layer.js\").State>} The layer states.\n */\nfunction getLayerStatesArray(layers) {\n  return layers.map(function (layer) {\n    return layer.getLayerState();\n  });\n}\n\n/**\n * Create layers for all sources.\n * @param {Array<import(\"./Source.js\").default|import(\"../layer/Layer.js\").default>} sources The sources.\n * @return {Array<import(\"../layer/Layer.js\").default>} Array of layers.\n */\nfunction createLayers(sources) {\n  const len = sources.length;\n  const layers = new Array(len);\n  for (let i = 0; i < len; ++i) {\n    layers[i] = createLayer(sources[i]);\n  }\n  return layers;\n}\n\n/**\n * Create a layer for the provided source.\n * @param {import(\"./Source.js\").default|import(\"../layer/Layer.js\").default} layerOrSource The layer or source.\n * @return {import(\"../layer/Layer.js\").default} The layer.\n */\nfunction createLayer(layerOrSource) {\n  // @type {import(\"../layer/Layer.js\").default}\n  let layer;\n  if (layerOrSource instanceof Source) {\n    if (layerOrSource instanceof TileSource) {\n      layer = new TileLayer({source: layerOrSource});\n    } else if (layerOrSource instanceof ImageSource) {\n      layer = new ImageLayer({source: layerOrSource});\n    }\n  } else {\n    layer = layerOrSource;\n  }\n  return layer;\n}\n\nexport default RasterSource;\n","/**\n * @module ol/source/common\n */\n\n/**\n * Default WMS version.\n * @type {string}\n */\nexport const DEFAULT_WMS_VERSION = '1.3.0';\n\n/**\n * Number of decimal digits to consider in integer values when rounding.\n * @type {number}\n */\nexport const DECIMALS = 4;\n"],"names":["e","r","t","Math","i","Array","I","ImageData","Uint8ClampedArray","Object","Worker","Blob","URL","setTimeout","Date","requestAnimationFrame","Error","HTMLCanvasElement"],"mappings":"8PASO,IAAM,EAAO,IA+PpB,MAjPA,MAKE,YAAY,CAAgB,CAAE,CAAW,CAAE,CAKzC,IAAI,CAAC,iBAAiB,CAAG,EAMzB,IAAI,CAAC,YAAY,CAAG,EAMpB,IAAI,CAAC,SAAS,CAAG,EAAE,CAMnB,IAAI,CAAC,WAAW,CAAG,EAAE,CAMrB,IAAI,CAAC,eAAe,CAAG,CAAC,CAC1B,CAKA,OAAQ,CACN,IAAI,CAAC,SAAS,CAAC,MAAM,CAAG,EACxB,IAAI,CAAC,WAAW,CAAC,MAAM,CAAG,EAC1B,QAAM,IAAI,CAAC,eAAe,CAC5B,CAMA,SAAU,CACR,IAAMA,EAAW,IAAI,CAAC,SAAS,CACzB,EAAa,IAAI,CAAC,WAAW,CAC7B,EAAUA,CAAQ,CAAC,EAAE,AACvBA,AAAmB,IAAnBA,EAAS,MAAM,EACjBA,EAAS,MAAM,CAAG,EAClB,EAAW,MAAM,CAAG,IAEpBA,CAAQ,CAAC,EAAE,CAAqBA,EAAS,GAAG,GAC5C,CAAU,CAAC,EAAE,CAA0B,EAAW,GAAG,GACrD,IAAI,CAAC,OAAO,CAAC,IAEf,IAAM,EAAa,IAAI,CAAC,YAAY,CAAC,GAErC,OADA,OAAO,IAAI,CAAC,eAAe,CAAC,EAAW,CAChC,CACT,CAOA,QAAQA,CAAO,CAAE,CACf,QACE,CAAE,KAAI,CAAC,YAAY,CAACA,KAAY,IAAI,CAAC,eAAe,AAAD,EACnD,qEAEF,IAAM,EAAW,IAAI,CAAC,iBAAiB,CAACA,UACxC,AAAI,GAAY,IACd,IAAI,CAAC,SAAS,CAAC,IAAI,CAACA,GACpB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GACtB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,CAACA,GAAS,CAAG,GACnD,IAAI,CAAC,SAAS,CAAC,EAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAG,GACnC,GAGX,CAKA,UAAW,CACT,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,AAC9B,CAQA,mBAAmB,CAAK,CAAE,CACxB,OAAO,AAAQ,EAAR,EAAY,CACrB,CAQA,oBAAoB,CAAK,CAAE,CACzB,OAAO,AAAQ,EAAR,EAAY,CACrB,CAQA,gBAAgB,CAAK,CAAE,CACrB,OAAO,AAAC,EAAQ,GAAM,CACxB,CAMA,UAAW,CACT,IAAI,EACJ,IAAK,EAAI,AAAC,KAAI,CAAC,SAAS,CAAC,MAAM,EAAI,GAAK,EAAG,GAAK,EAAG,IACjD,IAAI,CAAC,OAAO,CAAC,EAEjB,CAKA,SAAU,CACR,OAAO,AAA0B,IAA1B,IAAI,CAAC,SAAS,CAAC,MAAM,AAC9B,CAMA,YAAY,CAAG,CAAE,CACf,OAAO,KAAO,IAAI,CAAC,eAAe,AACpC,CAMA,SAASA,CAAO,CAAE,CAChB,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,CAACA,GAC5C,CAMA,QAAQ,CAAK,CAAE,CACb,IAAM,EAAW,IAAI,CAAC,SAAS,CACzB,EAAa,IAAI,CAAC,WAAW,CAC7B,EAAQ,EAAS,MAAM,CACvB,EAAU,CAAQ,CAAC,EAAM,CACzB,EAAW,CAAU,CAAC,EAAM,CAC5B,EAAa,EAEnB,KAAO,EAAQ,GAAS,GAAG,CACzB,IAAM,EAAS,IAAI,CAAC,kBAAkB,CAAC,GACjCC,EAAS,IAAI,CAAC,mBAAmB,CAAC,GAElC,EACJA,EAAS,GAAS,CAAU,CAACA,EAAO,CAAG,CAAU,CAAC,EAAO,CACrDA,EACA,CAEN,EAAQ,CAAC,EAAM,CAAG,CAAQ,CAAC,EAAkB,CAC7C,CAAU,CAAC,EAAM,CAAG,CAAU,CAAC,EAAkB,CACjD,EAAQ,CACV,CAEA,CAAQ,CAAC,EAAM,CAAG,EAClB,CAAU,CAAC,EAAM,CAAG,EACpB,IAAI,CAAC,SAAS,CAAC,EAAY,EAC7B,CAOA,UAAU,CAAU,CAAE,CAAK,CAAE,CAC3B,IAAM,EAAW,IAAI,CAAC,SAAS,CACzB,EAAa,IAAI,CAAC,WAAW,CAC7B,EAAU,CAAQ,CAAC,EAAM,CACzB,EAAW,CAAU,CAAC,EAAM,CAElC,KAAO,EAAQ,GAAY,CACzB,IAAM,EAAc,IAAI,CAAC,eAAe,CAAC,GACzC,GAAI,CAAU,CAAC,EAAY,CAAG,EAC5B,CAAQ,CAAC,EAAM,CAAG,CAAQ,CAAC,EAAY,CACvC,CAAU,CAAC,EAAM,CAAG,CAAU,CAAC,EAAY,CAC3C,EAAQ,OAER,KAEJ,CACA,CAAQ,CAAC,EAAM,CAAG,EAClB,CAAU,CAAC,EAAM,CAAG,CACtB,CAKA,cAAe,CACb,IAKID,EAAS,EAAG,EALV,EAAmB,IAAI,CAAC,iBAAiB,CACzC,EAAW,IAAI,CAAC,SAAS,CACzB,EAAa,IAAI,CAAC,WAAW,CAC/B,EAAQ,EACN,EAAI,EAAS,MAAM,CAEzB,IAAK,EAAI,EAAG,EAAI,EAAG,EAAE,EAGf,AADJ,GAAW,EADXA,EAAU,CAAQ,CAAC,EAAE,CACc,GACnB,EACd,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,CAACA,GAAS,EAEvD,CAAU,CAAC,EAAM,CAAG,EACpB,CAAQ,CAAC,IAAQ,CAAGA,EAGxB,GAAS,MAAM,CAAG,EAClB,EAAW,MAAM,CAAG,EACpB,IAAI,CAAC,QAAQ,EACf,CACF,EC9IA,EAtGA,cAAwB,EAKtB,YAAY,CAAoB,CAAEE,CAAkB,CAAE,CACpD,KAAK,CACH,AAAC,GAAY,EAAqB,KAAK,CAAC,KAAM,GAC9C,AAACF,GAAYA,CAAO,CAAC,EAAE,CAAC,MAAM,IAIhC,IAAI,CAAC,sBAAsB,CAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,EAM7D,IAAI,CAAC,mBAAmB,CAAGE,EAM3B,IAAI,CAAC,aAAa,CAAG,EAMrB,IAAI,CAAC,iBAAiB,CAAG,CAAC,CAC5B,CAOA,QAAQF,CAAO,CAAE,CACf,IAAM,EAAQ,KAAK,CAAC,QAAQA,GAK5B,OAJI,GAEF,AADaA,CAAO,CAAC,EAAE,CAClB,gBAAgB,CAAC,gBAAgB,CAAE,IAAI,CAAC,sBAAsB,EAE9D,CACT,CAKA,iBAAkB,CAChB,OAAO,IAAI,CAAC,aAAa,AAC3B,CAMA,iBAAiBA,CAAK,CAAE,CACtB,IAAME,EAAmDF,EAAM,MAAM,CAC/D,EAAQE,EAAK,QAAQ,GAC3B,GACE,IAAU,gBAAgB,EAC1B,IAAU,eAAe,EACzB,IAAU,eAAe,CACzB,CACI,IAAU,eAAe,EAC3BA,EAAK,mBAAmB,CAAC,gBAAgB,CAAE,IAAI,CAAC,sBAAsB,EAExE,IAAM,EAAUA,EAAK,MAAM,GACvB,KAAW,IAAI,CAAC,iBAAiB,GACnC,OAAO,IAAI,CAAC,iBAAiB,CAAC,EAAQ,CACtC,EAAE,IAAI,CAAC,aAAa,EAEtB,IAAI,CAAC,mBAAmB,EAC1B,CACF,CAMA,cAAc,CAAe,CAAE,CAAW,CAAE,CAC1C,IAAI,EAAW,EACf,KACE,IAAI,CAAC,aAAa,CAAG,GACrB,EAAW,GACX,IAAI,CAAC,QAAQ,GAAK,GAClB,CACA,IAAM,EAAO,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,CACxBA,EAAU,EAAK,MAAM,GACb,EAAK,QAAQ,KACb,cAAc,EAAMA,KAAW,IAAI,CAAC,iBAAiB,GACjE,IAAI,CAAC,iBAAiB,CAACA,EAAQ,CAAG,GAClC,EAAE,IAAI,CAAC,aAAa,CACpB,EAAE,EACF,EAAK,IAAI,GAEb,CACF,CACF,EAYO,SAAS,EACd,CAAU,CACVA,CAAI,CACJ,CAAa,CACb,CAAU,CACV,CAAc,EAId,GAAI,CAAC,GAAc,CAAE,MAAiB,EAAW,WAAW,AAAD,GAGvD,CAAC,EAAW,WAAW,CAAC,EAAc,CAACA,EAAK,MAAM,GAAG,CAFvD,OAAO,EAWT,IAAM,EAAS,EAAW,SAAS,CAAC,MAAM,CACpC,EAAS,CAAU,CAAC,EAAE,CAAG,CAAM,CAAC,EAAE,CAClC,EAAS,CAAU,CAAC,EAAE,CAAG,CAAM,CAAC,EAAE,CACxC,OACE,MAAQC,KAAK,GAAG,CAAC,GACjBA,KAAK,IAAI,CAAC,EAAS,EAAS,EAAS,GAAU,CAEnD,C,uICpIA,OAAM,UAAiC,GAAmB,CAIxD,YAAY,CAAU,CAAE,CACtB,KAAK,CAAC,GAMN,IAAI,CAAC,KAAK,CAAG,IACf,CAKA,UAAW,CACT,OAAO,AAAC,IAAI,CAAC,KAAK,CAAU,IAAI,CAAC,KAAK,CAAC,QAAQ,GAA1B,IACvB,CAQA,aAAa,CAAU,CAAE,CACvB,IAAM,EAAa,EAAW,gBAAgB,CAAC,EAAW,UAAU,CAAC,CAC/D,EAAa,EAAW,UAAU,CAClC,EAAY,EAAW,SAAS,CAChC,EAAiB,EAAU,UAAU,CAErC,EAAc,IAAI,CAAC,QAAQ,GAAG,SAAS,GAEvC,EAAQ,EAAW,SAAS,CAE9B,EAAiB,EAAW,MAAM,CAQtC,GAPI,AAAsB,SAAtB,EAAW,MAAM,EACnB,GAAiB,sBACf,EACA,qBAAe,EAAW,MAAM,CAAE,EAAU,UAAU,EACxD,EAIA,CAAC,CAAK,CAAC,aAAkB,CAAC,EAC1B,CAAC,CAAK,CAAC,eAAoB,CAAC,EAC5B,CAAC,cAAQ,GAET,GAAI,EAAa,CACf,IAAM,EAAa,EAAU,UAAU,CACjC,EAAQ,EAAY,QAAQ,CAChC,EACA,EACA,EACA,GAEE,IACE,IAAI,CAAC,SAAS,CAAC,GACjB,IAAI,CAAC,KAAK,CAAG,EACJ,EAAM,QAAQ,KAAO,eAAgB,EAC9C,KAAI,CAAC,KAAK,CAAG,IAAG,EAGtB,MACE,IAAI,CAAC,KAAK,CAAG,KAIjB,MAAO,CAAC,CAAC,IAAI,CAAC,KAAK,AACrB,CAOA,QAAQ,CAAK,CAAE,CACb,IAAM,EAAa,IAAI,CAAC,UAAU,CAClC,GAAI,CAAC,EACH,OAAO,KAGT,IAAM,EAAQ,IAAI,CAAC,QAAQ,GACrB,EAAa,SACjB,EAAW,0BAA0B,CACrC,EAAM,KAAK,IAGP,EAAc,EAAM,SAAS,GACnC,GAAI,GACE,CAAC,yBAAmB,EAAa,GACnC,OAAO,KAIX,IAAM,EAAc,IAAI,CAAC,KAAK,CAAC,SAAS,GAClC,EAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,GAEzB,EAAgB,eAAS,GACzB,EAAMA,KAAK,KAAK,CACpB,EAAI,KAAK,CAAI,CAAC,EAAU,CAAC,EAAE,CAAG,CAAW,CAAC,EAAE,AAAD,EAAK,CAAY,GAE9D,GAAI,EAAM,GAAK,GAAO,EAAI,KAAK,CAC7B,OAAO,KAGT,IAAM,EAAiB,gBAAU,GAC3B,EAAMA,KAAK,KAAK,CACpB,EAAI,MAAM,CAAI,CAAC,EAAW,CAAC,EAAE,CAAG,CAAU,CAAC,EAAE,AAAD,EAAK,CAAa,UAEhE,AAAI,EAAM,GAAK,GAAO,EAAI,MAAM,CACvB,KAGF,IAAI,CAAC,YAAY,CAAC,EAAK,EAAK,EACrC,CASA,YAAY,CAAU,CAAED,CAAM,CAAE,CAC9B,IAAME,EAAQ,IAAI,CAAC,KAAK,CAClB,EAAcA,EAAM,SAAS,GAC7B,EAAkBA,EAAM,aAAa,GACrC,CAAC,EAAkB,EAAiB,CAAGC,MAAM,OAAO,CAAC,GACvD,EACA,CAAC,EAAiB,EAAgB,CAChC,EAAkBD,EAAM,aAAa,GACrC,EAAa,EAAW,gBAAgB,CAAC,EAAW,UAAU,CAAC,CAC/D,EAAa,EAAW,UAAU,CAClC,EAAY,EAAW,SAAS,CAChC,EAAa,EAAU,MAAM,CAC7B,EAAiB,EAAU,UAAU,CAM3C,IAAI,CAAC,gBAAgB,CAAC,EAAYF,GAGlC,IAAM,EAAQ,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CACjC,EAAS,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAEnC,EAAU,IAAI,CAAC,gBAAgB,CAAC,GAGlC,EAAU,GACV,EAAS,GACb,GAAI,EAAW,MAAM,CAAE,CACrB,IAAM,EAAc,qBAClB,EAAW,MAAM,CACjB,EAAU,UAAU,CAIlB,CADJ,GAAU,AADV,GAAS,iBAAiB,EAAa,EAAW,MAAM,IACpC,CAAC,qBAAe,EAAa,EAAW,MAAM,IAEhE,IAAI,CAAC,aAAa,CAAC,EAAS,EAAY,EAE5C,CAEA,IAAM,EAAME,EAAM,QAAQ,GAEpB,EAAY,SAChB,IAAI,CAAC,aAAa,CAClB,EAAQ,EACR,EAAS,EAhCT,AAAC,EAAa,EAAqB,GAAiB,CAAc,EAElE,AAAC,EAAa,EAAqB,GAAiB,CAAc,EAiClE,EACA,AAAC,EAAmB,EAAW,CAAC,EAAE,CAAG,CAAU,CAAC,EAAE,AAAD,EAAM,EACvD,AAAC,EAAmB,EAAU,CAAC,EAAE,CAAG,CAAW,CAAC,EAAE,AAAD,EAAM,EAGzD,KAAI,CAAC,kBAAkB,CAAG,AAAC,EAAmB,EAAc,EAE5D,IAAM,EAAK,EAAI,KAAK,CAAG,CAAS,CAAC,EAAE,CAC7B,EAAK,EAAI,MAAM,CAAG,CAAS,CAAC,EAAE,CAOpC,GALI,AAAC,IAAI,CAAC,QAAQ,GAAG,SAAS,GAAG,cAAc,IAC7C,GAAQ,qBAAqB,CAAG,EAAI,EAGtC,IAAI,CAAC,SAAS,CAAC,EAAS,GACpB,GAAU,GAAM,IAAO,GAAM,GAAK,CACpC,IAAM,EAAK,CAAS,CAAC,EAAE,CACjB,EAAK,CAAS,CAAC,EAAE,CACjB,EAAU,EAAW,OAAO,AAClB,KAAZ,IACF,EAAQ,IAAI,GACZ,EAAQ,WAAW,CAAG,GAExB,EAAQ,SAAS,CAAC,EAAK,EAAG,EAAG,CAAC,EAAI,KAAK,CAAE,CAAC,EAAI,MAAM,CAAE,EAAI,EAAI,EAAI,GAC9D,AAAY,IAAZ,GACF,EAAQ,OAAO,EAEnB,CAQA,OAPA,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAE,GAE1B,GACF,EAAQ,OAAO,GAEjB,EAAQ,qBAAqB,CAAG,GAEzB,IAAI,CAAC,SAAS,AACvB,CACF,C,cChMA,OAAM,UAAuB,SAAK,CAIhC,YAAY,CAAO,CAAE,CAEnB,KAAK,CADL,EAAU,GAAoB,CAAC,EAEjC,CACF,CAEA,MAAe,ECFf,EApCA,cAAyB,EAIvB,YAAY,CAAO,CAAE,CACnB,KAAK,CAAC,EACR,CAKA,gBAAiB,CACf,OAAO,IFkNI,EElNyB,IAAI,CAC1C,CAkBA,QAAQ,CAAK,CAAE,CACb,OAAO,KAAK,CAAC,QAAQ,EACvB,CACF,C,wNCxCO,SAAS,EAAmB,CAAU,SAC3C,AAAIC,MAAM,OAAO,CAAC,GACTF,KAAK,GAAG,IAAI,GAEd,CACT,C,yBCeA,OAAM,UAAoB,IAAY,CAWpC,YACE,CAAU,CACVD,CAAU,CACV,CAAY,CACZ,CAAgB,CAChB,CAAU,CACV,CAAgB,CAChB,CAAW,CACX,CACA,IAAI,EAAkB,EAAW,SAAS,GACtC,GAAmB,EAAW,QAAQ,KAExC,AADA,GAAkB,EAAgB,KAAK,EAAC,CACzB,CAAC,EAAE,CAAG,CAAC,IACtB,CAAe,CAAC,EAAE,CAAG,KAEvB,IAAI,EAAkBA,EAAW,SAAS,GACtC,GAAmBA,EAAW,QAAQ,KAExC,AADA,GAAkB,EAAgB,KAAK,EAAC,CACzB,CAAC,EAAE,CAAG,CAAC,IACtB,CAAe,CAAC,EAAE,CAAG,KAGvB,IAAM,EAAsB,EACxB,sBAAgB,EAAc,GAC9B,EAEE,EAAe,gBAAU,GACzB,EAAmB,SACvB,EACAA,EACA,EACA,GAGI,EAAyB,GAAe,CAExC,EAAgB,IAAI,GAAa,CACrC,EACAA,EACA,EACA,EACA,EAAmB,EACnB,GAGI,EAAe,EAAc,qBAAqB,GAClD,EAAc,cAAQ,GACxB,KACA,EAAiB,EAAc,EAAkB,GAC/C,EAAQ,EAAc,cAAe,CAAG,eAAgB,CACxD,EAAmB,EAAc,EAAY,aAAa,GAAK,EAErE,KAAK,CAAC,EAAc,EAAkB,EAAkB,GAMxD,IAAI,CAAC,WAAW,CAAGA,EAMnB,IAAI,CAAC,gBAAgB,CAAG,EAMxB,IAAI,CAAC,cAAc,CAAG,EAMtB,IAAI,CAAC,iBAAiB,CAAG,EAMzB,IAAI,CAAC,aAAa,CAAG,EAMrB,IAAI,CAAC,YAAY,CAAG,EAMpB,IAAI,CAAC,iBAAiB,CAAG,EAMzB,IAAI,CAAC,YAAY,CAAG,EAMpB,IAAI,CAAC,OAAO,CAAG,KAMf,IAAI,CAAC,kBAAkB,CAAG,IAC5B,CAMA,iBAAkB,CACZ,IAAI,CAAC,KAAK,EAAI,iBAAkB,EAClC,IAAI,CAAC,eAAe,GAEtB,KAAK,CAAC,iBACR,CAMA,UAAW,CACT,OAAO,IAAI,CAAC,OAAO,AACrB,CAKA,eAAgB,CACd,OAAO,IAAI,CAAC,WAAW,AACzB,CAKA,YAAa,CACX,IAAM,EAAc,IAAI,CAAC,YAAY,CAAC,QAAQ,GAC9C,GAAI,GAAe,gBAAiB,CAAE,CACpC,IAAM,EAAQ,eAAS,IAAI,CAAC,aAAa,EAAI,IAAI,CAAC,iBAAiB,CAC7D,EAAS,gBAAU,IAAI,CAAC,aAAa,EAAI,IAAI,CAAC,iBAAiB,AACrE,KAAI,CAAC,OAAO,CAAG,SACb,EACA,EACA,IAAI,CAAC,iBAAiB,CACtB,EAAmB,IAAI,CAAC,YAAY,CAAC,aAAa,IAClD,IAAI,CAAC,gBAAgB,CACrB,IAAI,CAAC,iBAAiB,CACtB,IAAI,CAAC,aAAa,CAClB,IAAI,CAAC,cAAc,CACnB,CACE,CACE,OAAQ,IAAI,CAAC,YAAY,CAAC,SAAS,GACnC,MAAO,IAAI,CAAC,YAAY,CAAC,QAAQ,EACnC,EACD,CACD,EACA,OACA,IAAI,CAAC,YAAY,CACjB,GAEJ,CACA,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,OAAO,EACd,CAMA,MAAO,CACL,GAAI,IAAI,CAAC,KAAK,EAAI,cAAe,CAAE,CACjC,IAAI,CAAC,KAAK,CAAG,iBAAkB,CAC/B,IAAI,CAAC,OAAO,GAEZ,IAAM,EAAc,IAAI,CAAC,YAAY,CAAC,QAAQ,EAC1C,IAAe,gBAAiB,EAAI,GAAe,eAAgB,CACrE,IAAI,CAAC,UAAU,IAEf,IAAI,CAAC,kBAAkB,CAAG,SACxB,IAAI,CAAC,YAAY,CACjB,gBAAgB,CAChB,AAACF,IACC,IAAM,EAAc,IAAI,CAAC,YAAY,CAAC,QAAQ,GAE5C,IAAe,gBAAiB,EAChC,GAAe,eAAgB,AAAhB,IAEf,IAAI,CAAC,eAAe,GACpB,IAAI,CAAC,UAAU,GAEnB,GAEF,IAAI,CAAC,YAAY,CAAC,IAAI,GAE1B,CACF,CAKA,iBAAkB,CAChB,SAEI,IAAI,CAAC,kBAAkB,EAG3B,IAAI,CAAC,kBAAkB,CAAG,IAC5B,CACF,C,yBC1MO,OAAMM,UAAyB,SAAK,CAKzC,YAAY,CAAI,CAAE,CAAK,CAAE,CACvB,KAAK,CAAC,GAON,IAAI,CAAC,KAAK,CAAG,CACf,CACF,CA+BA,MAAM,UAAoB,SAAM,CAI9B,YAAY,CAAO,CAAE,CACnB,KAAK,CAAC,CACJ,aAAc,EAAQ,YAAY,CAClC,WAAY,EAAQ,UAAU,CAC9B,MAAO,EAAQ,KAAK,CACpB,YACE,AAAwB,SAAxB,EAAQ,WAAW,EAAiB,EAAQ,WAAW,AAC3D,GAKA,IAAI,CAAC,EAAE,CAKP,IAAI,CAAC,IAAI,CAKT,IAAI,CAAC,EAAE,CAMP,IAAI,CAAC,MAAM,CAAG,EAAQ,MAAM,EAAI,KAMhC,IAAI,CAAC,YAAY,CACf,AAAwB,SAAxB,EAAQ,WAAW,CAAiB,EAAQ,WAAW,CAAG,KAM5D,IAAI,CAAC,iBAAiB,CAAG,KAMzB,IAAI,CAAC,oBAAoB,CAAG,EAM5B,IAAI,CAAC,KAAK,CAAG,KAMb,IAAI,CAAC,aAAa,CAMlB,IAAI,CAAC,iBAAiB,CAMtB,IAAI,CAAC,OAAO,CAAG,IAAQ,MAAM,EAAG,AAA0B,IAA1B,EAAQ,MAAM,CAAC,MAAM,CAMrD,IAAI,CAAC,iBAAiB,CAAG,IAC3B,CAMA,gBAAiB,CACf,OAAO,IAAI,CAAC,YAAY,AAC1B,CAKA,eAAe,CAAW,CAAE,CAC1B,IAAI,CAAC,YAAY,CAAG,CACtB,CAOA,sBAAsB,CAAU,CAAE,CAChC,IAAM,EAAc,IAAI,CAAC,cAAc,GACvC,GAAI,EAAa,CACf,IAAMF,EAAM,SAAkB,EAAa,EAAY,GACvD,EAAa,CAAW,CAACA,EAAI,AAC/B,CACA,OAAO,CACT,CASA,SAASJ,CAAM,CAAE,CAAU,CAAE,CAAU,CAAE,CAAU,CAAE,CACnD,IAAM,EAAmB,IAAI,CAAC,aAAa,GAC3C,GACE,CAAC,GACD,CAAC,GACD,iBAAW,EAAkB,GAM7B,OAJI,GACF,GAAa,CAAe,EAGvB,IAAI,CAAC,gBAAgB,CAACA,EAAQ,EAAY,EAAY,GAE/D,GAAI,IAAI,CAAC,iBAAiB,CAAE,CAC1B,GACE,IAAI,CAAC,oBAAoB,EAAI,IAAI,CAAC,WAAW,IAC7C,iBAAW,IAAI,CAAC,iBAAiB,CAAC,aAAa,GAAI,IACnD,IAAI,CAAC,iBAAiB,CAAC,aAAa,IAAM,GAC1C,aAAO,IAAI,CAAC,iBAAiB,CAAC,SAAS,GAAIA,GAE3C,OAAO,IAAI,CAAC,iBAAiB,CAE/B,IAAI,CAAC,iBAAiB,CAAC,OAAO,GAC9B,IAAI,CAAC,iBAAiB,CAAG,IAC3B,CAcA,OAZA,IAAI,CAAC,iBAAiB,CAAG,IDYd,ECXT,EACA,EACAA,EACA,EACA,EACA,CAACA,EAAQ,EAAY,IACnB,IAAI,CAAC,gBAAgB,CAACA,EAAQ,EAAY,EAAY,GACxD,IAAI,CAAC,cAAc,IAErB,IAAI,CAAC,oBAAoB,CAAG,IAAI,CAAC,WAAW,GAErC,IAAI,CAAC,iBAAiB,AAC/B,CAWA,iBAAiBA,CAAM,CAAE,CAAU,CAAE,CAAU,CAAE,CAAU,CAAE,CAC3D,GAAI,IAAI,CAAC,MAAM,CAAE,CACf,IAAMC,EAAgB,EAAiBD,EAAQ,EAAY,EAAY,GACjE,EAAoB,IAAI,CAAC,qBAAqB,CAAC,GACrD,GACE,IAAI,CAAC,KAAK,EACT,KAAI,CAAC,OAAO,EACV,IAAI,CAAC,iBAAiB,GAAK,GACzB,CAAC,IAAI,CAAC,aAAa,EAClB,qBAAe,IAAI,CAAC,aAAa,CAAEC,IACnC,qBAAe,IAAI,CAAC,KAAK,CAAC,SAAS,GAAIA,EAAa,GACrD,CAAC,IAAI,CAAC,iBAAiB,EACtB,EAAmB,IAAI,CAAC,iBAAiB,IACvC,GACF,EAAmB,IAAI,CAAC,KAAK,CAAC,aAAa,MACzC,CAAgB,CAAE,EAE1B,OAAO,IAAI,CAAC,KAAK,AAEnB,KAAI,CAAC,iBAAiB,CAAG,EACzB,IAAI,CAAC,aAAa,CAAGA,EACrB,IAAI,CAAC,iBAAiB,CAAG,EACzB,IAAI,CAAC,KAAK,CAAG,IAAI,IAAY,CAC3BA,EACA,EACA,EACA,IAAI,CAAC,MAAM,EAEb,IAAI,CAAC,KAAK,CAAC,gBAAgB,CACzB,gBAAgB,CAChB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,EAEpC,CACA,OAAO,IAAI,CAAC,KAAK,AACnB,CAOA,kBAAkBD,CAAK,CAAE,CACvB,IACIE,EADEE,EAAsDJ,EAAM,MAAM,CAExE,OAAQI,EAAM,QAAQ,IACpB,KAAK,iBAAkB,CACrB,IAAI,CAAC,OAAO,CAAG,GACfF,EAjSU,iBAkSV,KACF,MAAK,gBAAiB,CACpB,IAAI,CAAC,OAAO,CAAG,GACfA,EA9RQ,eA+RR,KACF,MAAK,eAAgB,CACnB,IAAI,CAAC,OAAO,CAAG,GACfA,EA3RU,iBA4RV,KACF,SACE,MACJ,CACI,IAAI,CAAC,WAAW,CAACA,IACnB,IAAI,CAAC,aAAa,CAAC,IAAII,EAAiBJ,EAAME,GAElD,CACF,CAQO,SAAS,EAAyB,CAAK,CAAE,CAAG,EACA,AAAC,EAAM,QAAQ,GAAI,GAAG,CAAG,CAC5E,CAUO,SAAS,EAAiBJ,CAAM,CAAE,CAAU,CAAE,CAAU,CAAE,CAAK,EACpE,IAAM,EAAkB,EAAa,EAC/B,EAAS,gBAAUA,GACnB,EAAY,SAAK,eAASA,GAAU,EAAiB,GAAQ,EAC7D,EAAa,SAAK,gBAAUA,GAAU,EAAiB,GAAQ,EAC/D,EAAc,SAAK,AAAE,GAAQ,GAAK,EAAa,EAAG,GAAQ,EAE1D,EAAe,SAAK,AAAE,GAAQ,GAAK,EAAc,EAAG,GAAQ,EAElE,MAAO,wBAAkB,EAAQ,EAAiB,EAAG,CAHhC,EAAY,EAAI,EAEf,EAAa,EAAI,EAItC,CACH,CAEA,MAAe,C,6KCtWf,OAAM,UAAoB,IAAY,CASpC,YAAYA,CAAM,CAAE,CAAU,CAAE,CAAU,CAAE,CAAM,CAAE,CAAM,CAAE,CAG1D,KAAK,CAACA,EAAQ,EAAY,EAFZ,AAAW,SAAX,EAAuB,cAAe,CAAG,gBAAiB,EASxE,IAAI,CAAC,OAAO,CAAG,AAAW,SAAX,EAAuB,EAAS,KAM/C,IAAI,CAAC,OAAO,CAAG,EAMf,IAAI,CAAC,MAAM,CAAG,IAChB,CAMA,UAAW,CACT,OAAO,IAAI,CAAC,MAAM,AACpB,CAOA,YAAYA,CAAG,CAAE,CACXA,GACF,IAAI,CAAC,MAAM,CAAGA,EACd,IAAI,CAAC,KAAK,CAAG,eAAgB,EAE7B,IAAI,CAAC,KAAK,CAAG,gBAAiB,CAEhC,IAAI,CAAC,OAAO,EACd,CAMA,MAAO,CACD,IAAI,CAAC,KAAK,EAAI,cAAe,GAC/B,IAAI,CAAC,KAAK,CAAG,iBAAkB,CAC/B,IAAI,CAAC,OAAO,GACZ,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,GAE3C,CAMA,UAAW,CACT,OAAO,IAAI,CAAC,OAAO,AACrB,CACF,C,yJCvDA,SAAS,EAAa,CAAS,EAC7B,OAAO,SAAU,CAAI,EAEnB,IAAM,EAAU,EAAK,OAAU,CACzB,EAAO,EAAK,IAAO,CACnB,EAAW,EAAK,QAAW,CAC3B,EAAQ,EAAK,KAAQ,CACrB,EAAS,EAAK,MAAS,CAEvB,EAAa,EAAQ,MAAM,CAC3B,EAAW,CAAO,CAAC,EAAE,CAAC,UAAU,CAEtC,GAAI,EAAU,CACZ,IAAM,EAAS,AAAIK,MAAM,GACzB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAY,EAAE,EAChC,CAAM,CAAC,EAAE,CAAG,IAAIE,UACd,IAAIC,kBAAkB,CAAO,CAAC,EAAE,EAChC,EACA,GAIJ,OAAO,AADQ,EAAU,EAAQ,GAAM,IAAI,CAC7B,MAAM,AACtB,CAEA,IAAM,EAAS,IAAIA,kBAAkB,GAC/B,EAAS,AAAIH,MAAM,GACnB,EAAS,AAAIA,MAAM,GACzB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAY,EAAE,EAChC,CAAM,CAAC,EAAE,CAAG,IAAIG,kBAAkB,CAAO,CAAC,EAAE,EAC5C,CAAM,CAAC,EAAE,CAAG,CAAC,EAAG,EAAG,EAAG,EAAE,CAE1B,IAAK,IAAI,EAAI,EAAG,EAAI,EAAU,GAAK,EAAG,CACpC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAY,EAAE,EAAG,CACnC,IAAM,EAAQ,CAAM,CAAC,EAAE,AACvB,EAAM,CAAC,EAAE,CAAC,EAAE,CAAG,CAAK,CAAC,EAAE,CACvB,CAAM,CAAC,EAAE,CAAC,EAAE,CAAG,CAAK,CAAC,EAAI,EAAE,CAC3B,CAAM,CAAC,EAAE,CAAC,EAAE,CAAG,CAAK,CAAC,EAAI,EAAE,CAC3B,CAAM,CAAC,EAAE,CAAC,EAAE,CAAG,CAAK,CAAC,EAAI,EAAE,AAC7B,CACA,IAAM,EAAQ,EAAU,EAAQ,EAChC,EAAM,CAAC,EAAE,CAAG,CAAK,CAAC,EAAE,CACpB,CAAM,CAAC,EAAI,EAAE,CAAG,CAAK,CAAC,EAAE,CACxB,CAAM,CAAC,EAAI,EAAE,CAAG,CAAK,CAAC,EAAE,CACxB,CAAM,CAAC,EAAI,EAAE,CAAG,CAAK,CAAC,EAAE,AAC1B,CACA,OAAO,EAAO,MAAM,AACtB,CACF,CAsFO,MAAM,UAAkB,GAAU,CAIvC,YAAY,CAAM,CAAE,KAQdN,EAPJ,KAAK,GAML,IAAI,CAAC,SAAS,CAAG,CAAC,CAAC,EAAO,QAAQ,CAalC,IAAM,EAAU,AAAIG,MAVlBH,EADE,AAAmB,IAAnB,EAAO,OAAO,CACN,EACD,IAAI,CAAC,SAAS,CACb,EAEA,EAAO,OAAO,EAAI,GAO9B,GAAIA,EACF,IAAK,IAAI,EAAI,EAAG,EAAIA,EAAS,EAAE,EAC7B,CAAO,CAAC,EAAE,CAAG,AAzGrB,SAAsB,CAAM,CAAE,CAAS,EAKrC,IAAM,EAAQ,AAJFO,OAAO,IAAI,CAAC,EAAO,GAAG,EAAI,CAAC,GAAG,GAAG,CAAC,SAAU,CAAI,EAC1D,MAAO,SAAW,EAAO,MAAQ,EAAO,GAAG,CAAC,EAAK,CAAC,QAAQ,GAAK,GACjE,GAEkB,MAAM,CAAC,CACvB,uBAAyB,EAAa,QAAQ,GAAK,KACnD,EAAO,SAAS,CAAC,QAAQ,GACzB,KACA,qDACA,2CACA,yEACA,MACD,EAEK,EAAS,IAAIC,OACjB,AAAgB,aAAhB,OAAOC,KACH,+BACA,EAAO,IAAI,CAAC,EAAM,IAAI,CAAC,MAAO,UAAU,QAAQ,CAAC,UACjDC,IAAI,eAAe,CAAC,IAAID,KAAK,EAAO,CAAC,KAAM,iBAAiB,KAGlE,OADA,EAAO,gBAAgB,CAAC,UAAW,GAC5B,CACT,EAkFkC,EAAQ,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAE,SAGrE,CAAO,CAAC,EAAE,CAAG,AAxEnB,SAA0B,CAAM,CAAE,CAAS,EACzC,IAAM,EAAS,EAAa,EAAO,SAAS,EACxC,EAAa,GACjB,MAAO,CACL,YAAa,SAAU,CAAI,EACzBE,WAAW,WACL,GAGJ,EAAU,CAAC,KAAM,CAAC,OAAQ,EAAO,GAAO,KAAM,EAAK,IAAO,CAAC,EAC7D,EAAG,EACL,EACA,UAAW,WACT,EAAa,EACf,CACF,CACF,EAyDQ,EACA,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAE,GAOrC,KAAI,CAAC,QAAQ,CAAG,EAMhB,IAAI,CAAC,MAAM,CAAG,EAAE,CAMhB,IAAI,CAAC,eAAe,CAAG,EAAO,KAAK,EAAI,IAKvC,IAAI,CAAC,QAAQ,CAAG,EAMhB,IAAI,CAAC,WAAW,CAAG,CAAC,EAMpB,IAAI,CAAC,IAAI,CAAG,IACd,CAWA,QAAQ,CAAM,CAAE,CAAI,CAAE,CAAQ,CAAE,CAC9B,IAAI,CAAC,QAAQ,CAAC,CACZ,OAAQ,EACR,KAAM,EACN,SAAU,CACZ,GACA,IAAI,CAAC,SAAS,EAChB,CAMA,SAAS,CAAG,CAAE,CAEZ,IADA,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GACV,IAAI,CAAC,MAAM,CAAC,MAAM,CAAG,IAAI,CAAC,eAAe,EAC9C,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAM,KAEvC,CAKA,WAAY,CACV,GAAI,IAAI,CAAC,QAAQ,EAAI,AAAuB,IAAvB,IAAI,CAAC,MAAM,CAAC,MAAM,CACrC,OAGF,IAAM,EAAM,IAAI,CAAC,MAAM,CAAC,KAAK,EAC7B,KAAI,CAAC,IAAI,CAAG,EACZ,IAAM,EAAQ,EAAI,MAAM,CAAC,EAAE,CAAC,KAAK,CAC3B,EAAS,EAAI,MAAM,CAAC,EAAE,CAAC,MAAM,CAC7B,EAAU,EAAI,MAAM,CAAC,GAAG,CAAC,SAAU,CAAK,EAC5C,OAAO,EAAM,IAAI,CAAC,MAAM,AAC1B,GACM,EAAU,IAAI,CAAC,QAAQ,CAAC,MAAM,CAEpC,GADA,IAAI,CAAC,QAAQ,CAAG,EACZ,AAAY,IAAZ,EAAe,YACjB,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,WAAW,CAC1B,CACE,QAAS,EACT,KAAM,EAAI,IAAI,CACd,SAAU,IAAI,CAAC,SAAS,CACxB,MAAO,EACP,OAAQ,CACV,EACA,GAMJ,IAAM,EAAgB,EAAIV,KAAK,IAAI,CAAC,AADrB,EAAI,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CACK,EAAI,GACjD,IAAK,IAAI,EAAI,EAAG,EAAI,EAAS,EAAE,EAAG,CAChC,IAAM,EAAS,EAAI,EACb,EAAS,EAAE,CACjB,IAAK,IAAI,EAAI,EAAG,EAAK,EAAQ,MAAM,CAAE,EAAI,EAAI,EAAE,EAC7C,EAAO,IAAI,CAAC,CAAO,CAAC,EAAE,CAAC,KAAK,CAAC,EAAQ,EAAS,IAEhD,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,WAAW,CAC1B,CACE,QAAS,EACT,KAAM,EAAI,IAAI,CACd,SAAU,IAAI,CAAC,SAAS,CACxB,MAAO,EACP,OAAQ,CACV,EACA,EAEJ,CACF,CAOA,iBAAiB,CAAK,CAAE,CAAK,CAAE,CACzB,IAAI,CAAC,QAAQ,GAGjB,IAAI,CAAC,WAAW,CAAC,EAAM,CAAG,EAAM,IAAI,CACpC,EAAE,IAAI,CAAC,QAAQ,CACX,AAAkB,IAAlB,IAAI,CAAC,QAAQ,EACf,IAAI,CAAC,WAAW,GAEpB,CAMA,aAAc,CACZ,IAEI,EAAM,EAFJ,EAAM,IAAI,CAAC,IAAI,CACf,EAAU,IAAI,CAAC,QAAQ,CAAC,MAAM,CAEpC,GAAI,AAAY,IAAZ,EACF,EAAO,IAAIK,kBAAkB,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,MAAS,EAC1D,EAAO,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,IAAO,KAC7B,CACL,IAAM,EAAS,EAAI,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CACxC,EAAO,IAAIA,kBAAkB,GAC7B,EAAO,AAAIH,MAAM,GACjB,IAAM,EAAgB,EAAIF,KAAK,IAAI,CAAC,EAAS,EAAI,GACjD,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAS,EAAEA,EAAG,CAChC,IAAM,EAAS,IAAI,CAAC,WAAW,CAACA,EAAE,CAAC,MAAS,CACtC,EAASA,EAAI,EACnB,EAAK,GAAG,CAAC,IAAII,kBAAkB,GAAS,GACxC,CAAI,CAACJ,EAAE,CAAG,IAAI,CAAC,WAAW,CAACA,EAAE,CAAC,IAAO,AACvC,CACF,CACA,IAAI,CAAC,IAAI,CAAG,KACZ,IAAI,CAAC,WAAW,CAAG,CAAC,EACpB,EAAI,QAAQ,CACV,KACA,IAAIG,UAAU,EAAM,EAAI,MAAM,CAAC,EAAE,CAAC,KAAK,CAAE,EAAI,MAAM,CAAC,EAAE,CAAC,MAAM,EAC7D,GAEF,IAAI,CAAC,SAAS,EAChB,CAMA,iBAAkB,CAChB,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAE,EAAE,EAC1C,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,SAAS,EAE5B,KAAI,CAAC,QAAQ,CAAC,MAAM,CAAG,CACzB,CACF,CAyDO,MAAM,UAA0B,SAAK,CAO1C,YAAY,CAAI,CAAE,CAAU,CAAE,CAAI,CAAE,CAClC,KAAK,CAAC,GAON,IAAI,CAAC,MAAM,CAAG,EAAW,MAAM,CAO/B,IAAI,CAAC,UAAU,CAAG,EAAW,SAAS,CAAC,UAAU,CAAG,EAAW,UAAU,CAQzE,IAAI,CAAC,IAAI,CAAG,CACd,CACF,CA4CA,MAAM,UAAqB,IAAW,CAIpC,YAAY,CAAO,CAAE,CACnB,KAAK,CAAC,CACJ,WAAY,IACd,GAKA,IAAI,CAAC,EAAE,CAKP,IAAI,CAAC,IAAI,CAKT,IAAI,CAAC,EAAE,CAMP,IAAI,CAAC,UAAU,CAAG,KAMlB,IAAI,CAAC,cAAc,CACjB,AAA0B,SAA1B,EAAQ,aAAa,CAAiB,EAAQ,aAAa,CAAG,QAMhE,IAAI,CAAC,QAAQ,CAAG,AAAoB,SAApB,EAAQ,OAAO,CAAiB,EAAQ,OAAO,CAAG,EAMlE,IAAI,CAAC,OAAO,CAAG,AAianB,SAAsB,CAAO,EAC3B,IAAM,EAAM,EAAQ,MAAM,CACpB,EAAS,AAAIF,MAAM,GACzB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAK,EAAE,EACzB,CAAM,CAAC,EAAE,CAAG,AAUhB,SAAqB,CAAa,EAEhC,IAAI,EAUJ,OATI,aAAyB,SAAM,CAC7B,aAAyB,GAAU,CACrC,EAAQ,IAAI,SAAS,CAAC,CAAC,OAAQ,CAAa,GACnC,aAAyB,IAAW,EAC7C,GAAQ,IAAI,SAAU,CAAC,CAAC,OAAQ,CAAa,EAAC,EAGhD,EAAQ,EAEH,CACT,EAvB4B,CAAO,CAAC,EAAE,EAEpC,OAAO,CACT,EAxagC,EAAQ,OAAO,EAE3C,IAAM,EAAU,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EACtC,IAAK,IAAI,EAAI,EAAGD,EAAK,IAAI,CAAC,OAAO,CAAC,MAAM,CAAE,EAAIA,EAAI,EAAE,EAClD,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,gBAAgB,CAAC,gBAAgB,CAAE,EAOrD,KAAI,CAAC,eAAe,CAAG,AAAwB,OAAxB,EAAQ,WAAW,CAM1C,IAAI,CAAC,UAAU,CAAG,IAAI,GAAS,CAAC,WAC9B,OAAO,CACT,EAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,GAOjC,IAAI,CAAC,oBAAoB,CAOzB,IAAI,CAAC,oBAAoB,CAAG,KAO5B,IAAI,CAAC,iBAAiB,CAMtB,IAAI,CAAC,WAAW,CAAG,CACjB,QAAS,GACT,2BAA4B,WAC5B,UAAW,KACX,OAAQ,KACR,MAAO,EACP,WAAY,EACZ,iBAkWG,AAlWmC,IAAI,CAAC,OAAO,CAkWxC,GAAG,CAAC,SAAU,CAAK,EAC/B,OAAO,EAAM,aAAa,EAC5B,GAnWI,WAAY,EACZ,2BAA4B,WAC5B,oBAAqB,EAAE,CACvB,KAAM,CAAC,EAAG,EAAE,CACZ,UAAW,IAAI,CAAC,UAAU,CAC1B,KAAMU,KAAK,GAAG,GACd,UAAW,CAAC,EACZ,UAAsD,CACpD,SAAU,CACZ,EACA,UAAW,EAAE,CACb,YAAa,CAAC,EACd,MAAO,aAAO,IAAI,EAClB,cAAe,CAAC,CAClB,EAEA,IAAI,CAAC,eAAe,CAAC,SAAU,CAAU,EAEvC,IAAM,EAAe,EAAE,CACvB,IAAK,IAAI,EAAI,EAAG,EAAO,EAAQ,OAAO,CAAC,MAAM,CAAE,EAAI,EAAM,EAAE,EAAG,CAC5D,IAAM,EAAgB,EAAQ,OAAO,CAAC,EAAE,CAClC,EACJ,aAAyB,SAAM,CAC3B,EACA,EAAc,SAAS,GAC7B,GAAI,CAAC,EACH,SAEF,IAAM,EAAqB,EAAO,eAAe,KAAK,EAClD,AAA8B,WAA9B,OAAO,EACT,EAAa,IAAI,CAAC,GACT,AAAuB,SAAvB,GACT,EAAa,IAAI,IAAI,EAEzB,CACA,OAAO,CACT,GAEI,AAAsB,SAAtB,EAAQ,SAAS,EACnB,IAAI,CAAC,YAAY,CAAC,EAAQ,SAAS,CAAE,EAAQ,GAAG,CAEpD,CASA,aAAa,CAAS,CAAE,CAAG,CAAE,CACvB,IAAI,CAAC,UAAU,EACjB,IAAI,CAAC,UAAU,CAAC,OAAO,GAGzB,IAAI,CAAC,UAAU,CAAG,IAAI,EAAU,CAC9B,UAAW,EACX,SAAU,AAAwB,UAAxB,IAAI,CAAC,cAAc,CAC7B,MAAO,EACP,IAAK,EACL,QAAS,IAAI,CAAC,QAAQ,AACxB,GACA,IAAI,CAAC,OAAO,EACd,CAUA,kBAAkBd,CAAM,CAAE,CAAU,CAAE,CAAU,CAAE,CAChD,IAAM,EACJS,OAAO,MAAM,CAAC,CAAC,EAAG,IAAI,CAAC,WAAW,CAGpC,GAAW,SAAS,CAClBA,OAAO,MAAM,CAAC,CAAC,EAAG,EAAW,SAAS,EAGxC,IAAM,EAAS,gBAAUT,EAEzB,GAAW,IAAI,CAAC,EAAE,CAAGG,KAAK,IAAI,CAAC,eAASH,GAAU,GAClD,EAAW,IAAI,CAAC,EAAE,CAAGG,KAAK,IAAI,CAAC,gBAAUH,GAAU,GACnD,EAAW,MAAM,CAAG,CAClB,CAAM,CAAC,EAAE,CAAG,AAAC,EAAW,IAAI,CAAC,EAAE,CAAG,EAAc,EAChD,CAAM,CAAC,EAAE,CAAG,AAAC,EAAW,IAAI,CAAC,EAAE,CAAG,EAAc,EAChD,CAAM,CAAC,EAAE,CAAG,AAAC,EAAW,IAAI,CAAC,EAAE,CAAG,EAAc,EAChD,CAAM,CAAC,EAAE,CAAG,AAAC,EAAW,IAAI,CAAC,EAAE,CAAG,EAAc,EACjD,CACD,EAAW,IAAI,CAAGc,KAAK,GAAG,GAE1B,IAAM,EAAY,EAAW,SAAS,CAItC,OAHA,EAAU,MAAM,CAAG,EACnB,EAAU,UAAU,CAAG,EACvB,EAAU,UAAU,CAAG,EAChB,CACT,CAOA,kBAAmB,CACjB,IACI,EADA,EAAQ,GAEZ,IAAK,IAAIV,EAAI,EAAG,EAAK,IAAI,CAAC,OAAO,CAAC,MAAM,CAAEA,EAAI,EAAI,EAAEA,EAElD,GAAI,CADJ,GAAS,IAAI,CAAC,OAAO,CAACA,EAAE,CAAC,SAAS,EAAC,GACpB,AAAsB,UAAtB,EAAO,QAAQ,GAAgB,CAC5C,EAAQ,GACR,KACF,CAEF,OAAO,CACT,CAUA,SAASJ,CAAM,CAAE,CAAU,CAAE,CAAU,CAAE,CAAU,CAAE,CACnD,GAAI,CAAC,IAAI,CAAC,gBAAgB,GACxB,OAAO,KAGT,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,GAAI,IAElC,EAAa,IAAI,CAAC,qBAAqB,CAAC,GACxC,IAAM,EAAa,IAAI,CAAC,iBAAiB,CAACA,EAAQ,EAAY,GAI9D,GAHA,IAAI,CAAC,oBAAoB,CAAG,EAGxB,IAAI,CAAC,oBAAoB,CAAE,CAC7B,IAAM,EAAqB,IAAI,CAAC,oBAAoB,CAAC,aAAa,GAC5D,EAAiB,IAAI,CAAC,oBAAoB,CAAC,SAAS,EAExD,KAAe,GACd,aAAO,EAAW,MAAM,CAAE,IAE3B,KAAI,CAAC,oBAAoB,CAAG,IAAG,CAEnC,CAaA,OAVE,AAAC,IAAI,CAAC,oBAAoB,EAC1B,IAAI,CAAC,WAAW,KAAO,IAAI,CAAC,iBAAiB,EAE7C,IAAI,CAAC,eAAe,GAGlB,EAAW,OAAO,EACpBe,sBAAsB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,GAGvC,IAAI,CAAC,oBAAoB,AAClC,CAMA,iBAAkB,CAChB,IAAM,EAAa,IAAI,CAAC,oBAAoB,CACtC,EAAM,IAAI,CAAC,OAAO,CAAC,MAAM,CACzBX,EAAa,AAAIC,MAAM,GAC7B,IAAK,IAAI,EAAI,EAAG,EAAI,EAAK,EAAE,EAAG,CAC5B,EAAW,UAAU,CAAG,EACxB,EAAW,aAAa,CAAG,CAAC,EAC5B,IAAM,EAAY,AA2HxB,SAAsB,CAAK,CAAE,CAAU,EACrC,IAcI,EAdE,EAAW,EAAM,WAAW,GAClC,GAAI,CAAC,EACH,MAAM,AAAIW,MAAM,2BAA6B,GAG/C,GAAI,CAAC,EAAS,YAAY,CAAC,GACzB,OAAO,KAET,IAAM,EAAQ,EAAW,IAAI,CAAC,EAAE,CAC1B,EAAS,EAAW,IAAI,CAAC,EAAE,CACjC,GAAI,AAAU,IAAV,GAAe,AAAW,IAAX,EACjB,OAAO,KAET,IAAM,EAAY,EAAS,WAAW,CAAC,EAAY,MAEnD,GAAI,aAAqBC,kBACvB,EAAU,MACL,CAIL,GAHI,GACF,GAAU,EAAU,iBAAiB,AAAD,EAElC,CAAE,cAAmBA,iBAAgB,EACvC,MAAM,AAAID,MAAM,iCAAmC,GAErD,GAAI,EAAQ,KAAK,GAAK,GAAS,EAAQ,MAAM,GAAK,EAEhD,OAAO,AADS,EAAQ,UAAU,CAAC,MACpB,YAAY,CAAC,EAAG,EAAG,EAAO,EAE7C,CAEA,GAAK,EAIE,CACL,IAAM,EAAS,EAAc,MAAM,AAC/B,GAAO,KAAK,GAAK,GAAS,EAAO,MAAM,GAAK,EAC9C,EAAgB,SAAsB,EAAO,EAAQ,OAAW,CAC9D,mBAAoB,EACtB,GAEA,EAAc,SAAS,CAAC,EAAG,EAAG,EAAO,EAEzC,MAZE,EAAgB,SAAsB,EAAO,EAAQ,OAAW,CAC9D,mBAAoB,EACtB,GAYF,OADA,EAAc,SAAS,CAAC,EAAS,EAAG,EAAG,EAAO,GACvC,EAAc,YAAY,CAAC,EAAG,EAAG,EAAO,EACjD,EA1KqC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAE,GAChD,IAAI,EAGF,MAFAZ,CAAAA,CAAU,CAAC,EAAE,CAAG,CAIpB,CAEA,IAAM,EAAO,CAAC,EACd,IAAI,CAAC,aAAa,CAChB,IAAI,EApYU,mBAoY0C,EAAY,IAEtE,IAAI,CAAC,UAAU,CAAC,OAAO,CACrBA,EACA,EACA,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAE,GAEtC,CAUA,kBAAkB,CAAU,CAAE,CAAG,CAAE,CAAM,CAAE,CAAI,CAAE,KAe3C,EAdJ,GAAI,GAAO,CAAC,EACV,OAIF,IAAM,EAAS,EAAW,MAAM,CAC1B,EAAa,EAAW,SAAS,CAAC,UAAU,CAClD,GACE,IAAe,IAAI,CAAC,oBAAoB,CAAC,SAAS,CAAC,UAAU,EAC5D,aAAO,EAAQ,IAAI,CAAC,oBAAoB,CAAC,MAAM,GAMlD,GAAI,IAAI,CAAC,oBAAoB,CAC3B,EAAU,IAAI,CAAC,oBAAoB,CAAC,QAAQ,GAAG,UAAU,CAAC,UACrD,CACL,IAAM,EAAQD,KAAK,KAAK,CAAC,eAAS,GAAU,GACtC,EAASA,KAAK,KAAK,CAAC,gBAAU,GAAU,GAC9C,EAAU,SAAsB,EAAO,GACvC,IAAI,CAAC,oBAAoB,CAAG,ID1uBnB,EC2uBP,EACA,EACA,EACA,EAAQ,MAAM,CAElB,CACA,EAAQ,YAAY,CAAC,EAAQ,EAAG,GAE5B,EAAW,OAAO,CACpBY,sBAAsB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,GAE5C,IAAI,CAAC,OAAO,GAEd,IAAI,CAAC,iBAAiB,CAAG,IAAI,CAAC,WAAW,GAEzC,IAAI,CAAC,aAAa,CAChB,IAAI,EAnbS,kBAmb0C,EAAY,IAEvE,CAOA,eAAe,CAAU,CAAE,CACzB,GAAI,CAAC,IAAI,CAAC,eAAe,CACvB,OAAO,KAET,IAAI,EAAc,KAAK,CAAC,iBACxB,GAAI,CAAC,EACH,IAAK,IAAIX,EAAI,EAAG,EAAK,IAAI,CAAC,OAAO,CAAC,MAAM,CAAEA,EAAI,IAE5C,GAAc,AADC,IAAI,CAAC,OAAO,CAACA,EAAE,CAAC,SAAS,GACnB,cAAc,CAAC,EAAU,EAFE,EAAEA,GAQtD,OAAO,CACT,CAKA,iBAAkB,CACZ,IAAI,CAAC,UAAU,EACjB,IAAI,CAAC,UAAU,CAAC,OAAO,GAEzB,KAAK,CAAC,iBACR,CACF,CAOA,EAAa,SAAS,CAAC,OAAO,CAO9B,IAAI,EAAgB,KAsGpB,MAAe,C,wDCj+BR,IAAM,EAAW,C"}