"use strict";(self.webpackChunk_terrestris_shogun_gis_client=self.webpackChunk_terrestris_shogun_gis_client||[]).push([["3623"],{85098:function(e,t,r){r.r(t),r.d(t,{default:function(){return h}});var o=r(22772),a=r(57029),i=r(89564),n=r(53495),s=r(21128),u=r(35473),l=r(54970),c=r(94092);class p extends l.Ay{constructor(){super()}getType(){return"json"}readFeature(e,t){return this.readFeatureFromObject(d(e),this.getReadOptions(e,t))}readFeatures(e,t){return this.readFeaturesFromObject(d(e),this.getReadOptions(e,t))}readFeatureFromObject(e,t){return(0,c.abstract)()}readFeaturesFromObject(e,t){return(0,c.abstract)()}readGeometry(e,t){return this.readGeometryFromObject(d(e),this.getReadOptions(e,t))}readGeometryFromObject(e,t){return(0,c.abstract)()}readProjection(e){return this.readProjectionFromObject(d(e))}readProjectionFromObject(e){return(0,c.abstract)()}writeFeature(e,t){return JSON.stringify(this.writeFeatureObject(e,t))}writeFeatureObject(e,t){return(0,c.abstract)()}writeFeatures(e,t){return JSON.stringify(this.writeFeaturesObject(e,t))}writeFeaturesObject(e,t){return(0,c.abstract)()}writeGeometry(e,t){return JSON.stringify(this.writeGeometryObject(e,t))}writeGeometryObject(e,t){return(0,c.abstract)()}}function d(e){return"string"==typeof e?JSON.parse(e)||null:null!==e?e:null}var y=p;function g(e,t){let r;if(!e)return null;switch(e.type){case"Point":let o;r={type:"Point",flatCoordinates:o=e.coordinates,layout:(0,a.p0)(o.length)};break;case"LineString":let n,s;r={type:"LineString",flatCoordinates:s=(n=e.coordinates).flat(),ends:[s.length],layout:(0,a.p0)(n[0]?.length||2)};break;case"Polygon":let u,l,c,p;u=e.coordinates,l=[],c=u[0]?.[0]?.length,p=(0,i.KG)(l,0,u,c),r={type:"Polygon",flatCoordinates:l,ends:p,layout:(0,a.p0)(c)};break;case"MultiPoint":let d;r={type:"MultiPoint",flatCoordinates:(d=e.coordinates).flat(),layout:(0,a.p0)(d[0]?.length||2)};break;case"MultiLineString":let y,m,h,b;y=e.coordinates,m=y[0]?.[0]?.length||2,h=[],b=(0,i.KG)(h,0,y,m),r={type:"MultiLineString",flatCoordinates:h,ends:b,layout:(0,a.p0)(m)};break;case"MultiPolygon":let f,j,F,O;f=e.coordinates,j=[],F=f[0]?.[0]?.[0].length||2,O=(0,i.d6)(j,0,f,F),r={type:"MultiPolygon",flatCoordinates:j,ends:O,layout:(0,a.p0)(F)};break;case"GeometryCollection":r=e.geometries.map(function(e){return g(e,void 0)});break;default:throw Error("Unsupported GeoJSON type: "+e.type)}return r}function m(e,t){var r,o,a,i,n,s;let u,c=(e=(0,l.hX)(e,!0,t)).getType();switch(c){case"Point":u={type:"Point",coordinates:e.getCoordinates()};break;case"LineString":u={type:"LineString",coordinates:e.getCoordinates()};break;case"Polygon":let p;r=e,(o=t)&&(p=o.rightHanded),u={type:"Polygon",coordinates:r.getCoordinates(p)};break;case"MultiPoint":u={type:"MultiPoint",coordinates:e.getCoordinates()};break;case"MultiLineString":u={type:"MultiLineString",coordinates:e.getCoordinates()};break;case"MultiPolygon":let d;a=e,(i=t)&&(d=i.rightHanded),u={type:"MultiPolygon",coordinates:a.getCoordinates(d)};break;case"GeometryCollection":n=e,s=Object.assign({},s=t),delete s.featureProjection,u={type:"GeometryCollection",geometries:n.getGeometriesArray().map(function(e){return m(e,s)})};break;case"Circle":u={type:"GeometryCollection",geometries:[]};break;default:throw Error("Unsupported geometry type: "+c)}return u}var h=class extends y{constructor(e){e=e||{},super(),this.dataProjection=(0,s.get)(e.dataProjection?e.dataProjection:"EPSG:4326"),e.featureProjection&&(this.defaultFeatureProjection=(0,s.get)(e.featureProjection)),e.featureClass&&(this.featureClass=e.featureClass),this.geometryName_=e.geometryName,this.extractGeometryName_=e.extractGeometryName,this.supportedMediaTypes=["application/geo+json","application/vnd.geo+json"]}readFeatureFromObject(e,t){let r=null,a=g((r="Feature"===e.type?e:{type:"Feature",geometry:e,properties:null}).geometry,t);if(this.featureClass===u.default)return(0,l.Bs)({geometry:a,id:r.id,properties:r.properties},t);let i=new o.default;return this.geometryName_?i.setGeometryName(this.geometryName_):this.extractGeometryName_&&r.geometry_name&&i.setGeometryName(r.geometry_name),i.setGeometry((0,l.te)(a,t)),"id"in r&&i.setId(r.id),r.properties&&i.setProperties(r.properties,!0),i}readFeaturesFromObject(e,t){let r=null;if("FeatureCollection"===e.type){r=[];let o=e.features;for(let e=0,a=o.length;e<a;++e){let a=this.readFeatureFromObject(o[e],t);a&&r.push(a)}}else r=[this.readFeatureFromObject(e,t)];return r.flat()}readGeometryFromObject(e,t){var r;let o;return o=g(e,r=t),(0,l.te)(o,r)}readProjectionFromObject(e){let t,r=e.crs;if(r)if("name"==r.type)t=(0,s.get)(r.properties.name);else if("EPSG"===r.type)t=(0,s.get)("EPSG:"+r.properties.code);else throw Error("Unknown SRS type");else t=this.dataProjection;return t}writeFeatureObject(e,t){t=this.adaptOptions(t);let r={type:"Feature",geometry:null,properties:null},o=e.getId();if(void 0!==o&&(r.id=o),!e.hasProperties())return r;let a=e.getProperties(),i=e.getGeometry();return i&&(r.geometry=m(i,t),delete a[e.getGeometryName()]),(0,n.p)(a)||(r.properties=a),r}writeFeaturesObject(e,t){t=this.adaptOptions(t);let r=[];for(let o=0,a=e.length;o<a;++o)r.push(this.writeFeatureObject(e[o],t));return{type:"FeatureCollection",features:r}}writeGeometryObject(e,t){return m(e,this.adaptOptions(t))}}}}]);
//# sourceMappingURL=3623.67c3743481a9ff81.js.map