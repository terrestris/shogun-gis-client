{"version":3,"file":"5773.23b86b49375e2f1e.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/ol/format/JSONFeature.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/format/GeoJSON.js"],"sourcesContent":["/**\n * @module ol/format/JSONFeature\n */\nimport {abstract} from '../util.js';\nimport FeatureFormat from './Feature.js';\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for JSON feature formats.\n *\n * @template {import('../Feature.js').FeatureLike} [FeatureType=import(\"../Feature.js\").default]\n * @extends {FeatureFormat<FeatureType>}\n * @abstract\n */\nclass JSONFeature extends FeatureFormat {\n  constructor() {\n    super();\n  }\n\n  /**\n   * @return {import(\"./Feature.js\").Type} Format.\n   * @override\n   */\n  getType() {\n    return 'json';\n  }\n\n  /**\n   * Read a feature.  Only works for a single feature. Use `readFeatures` to\n   * read a feature collection.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {FeatureType|Array<FeatureType>} Feature.\n   * @api\n   * @override\n   */\n  readFeature(source, options) {\n    return this.readFeatureFromObject(\n      getObject(source),\n      this.getReadOptions(source, options),\n    );\n  }\n\n  /**\n   * Read all features.  Works with both a single feature and a feature\n   * collection.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {Array<FeatureType>} Features.\n   * @api\n   * @override\n   */\n  readFeatures(source, options) {\n    return this.readFeaturesFromObject(\n      getObject(source),\n      this.getReadOptions(source, options),\n    );\n  }\n\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {FeatureType|Array<FeatureType>} Feature.\n   */\n  readFeatureFromObject(object, options) {\n    return abstract();\n  }\n\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {Array<FeatureType>} Features.\n   */\n  readFeaturesFromObject(object, options) {\n    return abstract();\n  }\n\n  /**\n   * Read a geometry.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   * @api\n   * @override\n   */\n  readGeometry(source, options) {\n    return this.readGeometryFromObject(\n      getObject(source),\n      this.getReadOptions(source, options),\n    );\n  }\n\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n  readGeometryFromObject(object, options) {\n    return abstract();\n  }\n\n  /**\n   * Read the projection.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   * @api\n   * @override\n   */\n  readProjection(source) {\n    return this.readProjectionFromObject(getObject(source));\n  }\n\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  readProjectionFromObject(object) {\n    return abstract();\n  }\n\n  /**\n   * Encode a feature as string.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {string} Encoded feature.\n   * @api\n   * @override\n   */\n  writeFeature(feature, options) {\n    return JSON.stringify(this.writeFeatureObject(feature, options));\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {Object} Object.\n   */\n  writeFeatureObject(feature, options) {\n    return abstract();\n  }\n\n  /**\n   * Encode an array of features as string.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {string} Encoded features.\n   * @api\n   * @override\n   */\n  writeFeatures(features, options) {\n    return JSON.stringify(this.writeFeaturesObject(features, options));\n  }\n\n  /**\n   * @abstract\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {Object} Object.\n   */\n  writeFeaturesObject(features, options) {\n    return abstract();\n  }\n\n  /**\n   * Encode a geometry as string.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {string} Encoded geometry.\n   * @api\n   * @override\n   */\n  writeGeometry(geometry, options) {\n    return JSON.stringify(this.writeGeometryObject(geometry, options));\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {Object} Object.\n   */\n  writeGeometryObject(geometry, options) {\n    return abstract();\n  }\n}\n\n/**\n * @param {Document|Element|Object|string} source Source.\n * @return {Object} Object.\n */\nfunction getObject(source) {\n  if (typeof source === 'string') {\n    const object = JSON.parse(source);\n    return object ? /** @type {Object} */ (object) : null;\n  }\n  if (source !== null) {\n    return source;\n  }\n  return null;\n}\n\nexport default JSONFeature;\n","/**\n * @module ol/format/GeoJSON\n */\n\nimport Feature from '../Feature.js';\nimport {getLayoutForStride} from '../geom/SimpleGeometry.js';\nimport {\n  deflateCoordinatesArray,\n  deflateMultiCoordinatesArray,\n} from '../geom/flat/deflate.js';\nimport {isEmpty} from '../obj.js';\nimport {get as getProjection} from '../proj.js';\nimport RenderFeature from '../render/Feature.js';\nimport {\n  createGeometry,\n  createRenderFeature,\n  transformGeometryWithOptions,\n} from './Feature.js';\nimport JSONFeature from './JSONFeature.js';\n\n/**\n * @typedef {import(\"geojson\").GeoJSON} GeoJSONObject\n * @typedef {import(\"geojson\").Feature} GeoJSONFeature\n * @typedef {import(\"geojson\").FeatureCollection} GeoJSONFeatureCollection\n * @typedef {import(\"geojson\").Geometry} GeoJSONGeometry\n * @typedef {import(\"geojson\").Point} GeoJSONPoint\n * @typedef {import(\"geojson\").LineString} GeoJSONLineString\n * @typedef {import(\"geojson\").Polygon} GeoJSONPolygon\n * @typedef {import(\"geojson\").MultiPoint} GeoJSONMultiPoint\n * @typedef {import(\"geojson\").MultiLineString} GeoJSONMultiLineString\n * @typedef {import(\"geojson\").MultiPolygon} GeoJSONMultiPolygon\n * @typedef {import(\"geojson\").GeometryCollection} GeoJSONGeometryCollection\n */\n\n/**\n * @template {import(\"../Feature.js\").FeatureLike} [FeatureType=import(\"../Feature.js\").default]\n * @typedef {Object} Options\n *\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection for features read or\n * written by the format.  Options passed to read or write methods will take precedence.\n * @property {string} [geometryName] Geometry name to use when creating features.\n * @property {boolean} [extractGeometryName=false] Certain GeoJSON providers include\n * the geometry_name field in the feature GeoJSON. If set to `true` the GeoJSON reader\n * will look for that field to set the geometry name. If both this field is set to `true`\n * and a `geometryName` is provided, the `geometryName` will take precedence.\n * @property {import('./Feature.js').FeatureToFeatureClass<FeatureType>} [featureClass] Feature class\n * to be used when reading features. The default is {@link module:ol/Feature~Feature}. If performance is\n * the primary concern, and features are not going to be modified or round-tripped through the format,\n * consider using {@link module:ol/render/Feature~RenderFeature}\n */\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GeoJSON format.\n *\n * @template {import('../Feature.js').FeatureLike} [FeatureType=import(\"../Feature.js\").default]\n * @extends {JSONFeature<FeatureType>}\n * @api\n */\nclass GeoJSON extends JSONFeature {\n  /**\n   * @param {Options<FeatureType>} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super();\n\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.dataProjection = getProjection(\n      options.dataProjection ? options.dataProjection : 'EPSG:4326',\n    );\n\n    if (options.featureProjection) {\n      /**\n       * @type {import(\"../proj/Projection.js\").default}\n       */\n      this.defaultFeatureProjection = getProjection(options.featureProjection);\n    }\n\n    if (options.featureClass) {\n      this.featureClass = options.featureClass;\n    }\n\n    /**\n     * Name of the geometry attribute for features.\n     * @type {string|undefined}\n     * @private\n     */\n    this.geometryName_ = options.geometryName;\n\n    /**\n     * Look for the `geometry_name` in the feature GeoJSON\n     * @type {boolean|undefined}\n     * @private\n     */\n    this.extractGeometryName_ = options.extractGeometryName;\n\n    this.supportedMediaTypes = [\n      'application/geo+json',\n      'application/vnd.geo+json',\n    ];\n  }\n\n  /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {FeatureType|Array<FeatureType>} Feature.\n   * @override\n   */\n  readFeatureFromObject(object, options) {\n    /**\n     * @type {GeoJSONFeature}\n     */\n    let geoJSONFeature = null;\n    if (object['type'] === 'Feature') {\n      geoJSONFeature = /** @type {GeoJSONFeature} */ (object);\n    } else {\n      geoJSONFeature = {\n        'type': 'Feature',\n        'geometry': /** @type {GeoJSONGeometry} */ (object),\n        'properties': null,\n      };\n    }\n\n    const geometry = readGeometryInternal(geoJSONFeature['geometry'], options);\n    if (this.featureClass === RenderFeature) {\n      return /** @type {FeatureType|Array<FeatureType>} */ (\n        createRenderFeature(\n          {\n            geometry,\n            id: geoJSONFeature['id'],\n            properties: geoJSONFeature['properties'],\n          },\n          options,\n        )\n      );\n    }\n\n    const feature = new Feature();\n    if (this.geometryName_) {\n      feature.setGeometryName(this.geometryName_);\n    } else if (this.extractGeometryName_ && geoJSONFeature['geometry_name']) {\n      feature.setGeometryName(geoJSONFeature['geometry_name']);\n    }\n    feature.setGeometry(createGeometry(geometry, options));\n\n    if ('id' in geoJSONFeature) {\n      feature.setId(geoJSONFeature['id']);\n    }\n\n    if (geoJSONFeature['properties']) {\n      feature.setProperties(geoJSONFeature['properties'], true);\n    }\n    return /** @type {FeatureType|Array<FeatureType>} */ (feature);\n  }\n\n  /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {Array<FeatureType>} Features.\n   * @override\n   */\n  readFeaturesFromObject(object, options) {\n    const geoJSONObject = /** @type {GeoJSONObject} */ (object);\n    let features = null;\n    if (geoJSONObject['type'] === 'FeatureCollection') {\n      const geoJSONFeatureCollection = /** @type {GeoJSONFeatureCollection} */ (\n        object\n      );\n      features = [];\n      const geoJSONFeatures = geoJSONFeatureCollection['features'];\n      for (let i = 0, ii = geoJSONFeatures.length; i < ii; ++i) {\n        const featureObject = this.readFeatureFromObject(\n          geoJSONFeatures[i],\n          options,\n        );\n        if (!featureObject) {\n          continue;\n        }\n        features.push(featureObject);\n      }\n    } else {\n      features = [this.readFeatureFromObject(object, options)];\n    }\n    return /** @type {Array<FeatureType>} */ (features.flat());\n  }\n\n  /**\n   * @param {GeoJSONGeometry} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   * @override\n   */\n  readGeometryFromObject(object, options) {\n    return readGeometry(object, options);\n  }\n\n  /**\n   * @param {Object} object Object.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   * @override\n   */\n  readProjectionFromObject(object) {\n    const crs = object['crs'];\n    let projection;\n    if (crs) {\n      if (crs['type'] == 'name') {\n        projection = getProjection(crs['properties']['name']);\n      } else if (crs['type'] === 'EPSG') {\n        projection = getProjection('EPSG:' + crs['properties']['code']);\n      } else {\n        throw new Error('Unknown SRS type');\n      }\n    } else {\n      projection = this.dataProjection;\n    }\n    return /** @type {import(\"../proj/Projection.js\").default} */ (projection);\n  }\n\n  /**\n   * Encode a feature as a GeoJSON Feature object.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {GeoJSONFeature} Object.\n   * @api\n   * @override\n   */\n  writeFeatureObject(feature, options) {\n    options = this.adaptOptions(options);\n\n    /** @type {GeoJSONFeature} */\n    const object = {\n      'type': 'Feature',\n      geometry: null,\n      properties: null,\n    };\n\n    const id = feature.getId();\n    if (id !== undefined) {\n      object.id = id;\n    }\n\n    if (!feature.hasProperties()) {\n      return object;\n    }\n\n    const properties = feature.getProperties();\n    const geometry = feature.getGeometry();\n    if (geometry) {\n      object.geometry = writeGeometry(geometry, options);\n\n      delete properties[feature.getGeometryName()];\n    }\n\n    if (!isEmpty(properties)) {\n      object.properties = properties;\n    }\n\n    return object;\n  }\n\n  /**\n   * Encode an array of features as a GeoJSON object.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {GeoJSONFeatureCollection} GeoJSON Object.\n   * @api\n   * @override\n   */\n  writeFeaturesObject(features, options) {\n    options = this.adaptOptions(options);\n    const objects = [];\n    for (let i = 0, ii = features.length; i < ii; ++i) {\n      objects.push(this.writeFeatureObject(features[i], options));\n    }\n    return {\n      type: 'FeatureCollection',\n      features: objects,\n    };\n  }\n\n  /**\n   * Encode a geometry as a GeoJSON object.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.\n   * @api\n   * @override\n   */\n  writeGeometryObject(geometry, options) {\n    return writeGeometry(geometry, this.adaptOptions(options));\n  }\n}\n\n/**\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n * @return {import(\"./Feature.js\").GeometryObject} Geometry.\n */\nfunction readGeometryInternal(object, options) {\n  if (!object) {\n    return null;\n  }\n\n  /** @type {import(\"./Feature.js\").GeometryObject} */\n  let geometry;\n  switch (object['type']) {\n    case 'Point': {\n      geometry = readPointGeometry(/** @type {GeoJSONPoint} */ (object));\n      break;\n    }\n    case 'LineString': {\n      geometry = readLineStringGeometry(\n        /** @type {GeoJSONLineString} */ (object),\n      );\n      break;\n    }\n    case 'Polygon': {\n      geometry = readPolygonGeometry(/** @type {GeoJSONPolygon} */ (object));\n      break;\n    }\n    case 'MultiPoint': {\n      geometry = readMultiPointGeometry(\n        /** @type {GeoJSONMultiPoint} */ (object),\n      );\n      break;\n    }\n    case 'MultiLineString': {\n      geometry = readMultiLineStringGeometry(\n        /** @type {GeoJSONMultiLineString} */ (object),\n      );\n      break;\n    }\n    case 'MultiPolygon': {\n      geometry = readMultiPolygonGeometry(\n        /** @type {GeoJSONMultiPolygon} */ (object),\n      );\n      break;\n    }\n    case 'GeometryCollection': {\n      geometry = readGeometryCollectionGeometry(\n        /** @type {GeoJSONGeometryCollection} */ (object),\n      );\n      break;\n    }\n    default: {\n      throw new Error('Unsupported GeoJSON type: ' + object['type']);\n    }\n  }\n  return geometry;\n}\n\n/**\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\n */\nfunction readGeometry(object, options) {\n  const geometryObject = readGeometryInternal(object, options);\n  return createGeometry(geometryObject, options);\n}\n\n/**\n * @param {GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n * @return {import(\"./Feature.js\").GeometryCollectionObject} Geometry collection.\n */\nfunction readGeometryCollectionGeometry(object, options) {\n  const geometries = object['geometries'].map(\n    /**\n     * @param {GeoJSONGeometry} geometry Geometry.\n     * @return {import(\"./Feature.js\").GeometryObject} geometry Geometry.\n     */\n    function (geometry) {\n      return readGeometryInternal(geometry, options);\n    },\n  );\n  return geometries;\n}\n\n/**\n * @param {GeoJSONPoint} object Input object.\n * @return {import(\"./Feature.js\").GeometryObject} Point geometry.\n */\nfunction readPointGeometry(object) {\n  const flatCoordinates = object['coordinates'];\n  return {\n    type: 'Point',\n    flatCoordinates,\n    layout: getLayoutForStride(flatCoordinates.length),\n  };\n}\n\n/**\n * @param {GeoJSONLineString} object Object.\n * @return {import(\"./Feature.js\").GeometryObject} LineString geometry.\n */\nfunction readLineStringGeometry(object) {\n  const coordinates = object['coordinates'];\n  const flatCoordinates = coordinates.flat();\n  return {\n    type: 'LineString',\n    flatCoordinates,\n    ends: [flatCoordinates.length],\n    layout: getLayoutForStride(coordinates[0]?.length || 2),\n  };\n}\n\n/**\n * @param {GeoJSONMultiLineString} object Object.\n * @return {import(\"./Feature.js\").GeometryObject} MultiLineString geometry.\n */\nfunction readMultiLineStringGeometry(object) {\n  const coordinates = object['coordinates'];\n  const stride = coordinates[0]?.[0]?.length || 2;\n  const flatCoordinates = [];\n  const ends = deflateCoordinatesArray(flatCoordinates, 0, coordinates, stride);\n  return {\n    type: 'MultiLineString',\n    flatCoordinates,\n    ends,\n    layout: getLayoutForStride(stride),\n  };\n}\n\n/**\n * @param {GeoJSONMultiPoint} object Object.\n * @return {import(\"./Feature.js\").GeometryObject} MultiPoint geometry.\n */\nfunction readMultiPointGeometry(object) {\n  const coordinates = object['coordinates'];\n  return {\n    type: 'MultiPoint',\n    flatCoordinates: coordinates.flat(),\n    layout: getLayoutForStride(coordinates[0]?.length || 2),\n  };\n}\n\n/**\n * @param {GeoJSONMultiPolygon} object Object.\n * @return {import(\"./Feature.js\").GeometryObject} MultiPolygon geometry.\n */\nfunction readMultiPolygonGeometry(object) {\n  const coordinates = object['coordinates'];\n  const flatCoordinates = [];\n  const stride = coordinates[0]?.[0]?.[0].length || 2;\n  const endss = deflateMultiCoordinatesArray(\n    flatCoordinates,\n    0,\n    coordinates,\n    stride,\n  );\n  return {\n    type: 'MultiPolygon',\n    flatCoordinates,\n    ends: endss,\n    layout: getLayoutForStride(stride),\n  };\n}\n\n/**\n * @param {GeoJSONPolygon} object Object.\n * @return {import(\"./Feature.js\").GeometryObject} Polygon.\n */\nfunction readPolygonGeometry(object) {\n  const coordinates = object['coordinates'];\n  const flatCoordinates = [];\n  const stride = coordinates[0]?.[0]?.length;\n  const ends = deflateCoordinatesArray(flatCoordinates, 0, coordinates, stride);\n  return {\n    type: 'Polygon',\n    flatCoordinates,\n    ends,\n    layout: getLayoutForStride(stride),\n  };\n}\n\n/**\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeGeometry(geometry, options) {\n  geometry = transformGeometryWithOptions(geometry, true, options);\n\n  const type = geometry.getType();\n\n  /** @type {GeoJSONGeometry} */\n  let geoJSON;\n  switch (type) {\n    case 'Point': {\n      geoJSON = writePointGeometry(\n        /** @type {import(\"../geom/Point.js\").default} */ (geometry),\n        options,\n      );\n      break;\n    }\n    case 'LineString': {\n      geoJSON = writeLineStringGeometry(\n        /** @type {import(\"../geom/LineString.js\").default} */ (geometry),\n        options,\n      );\n      break;\n    }\n    case 'Polygon': {\n      geoJSON = writePolygonGeometry(\n        /** @type {import(\"../geom/Polygon.js\").default} */ (geometry),\n        options,\n      );\n      break;\n    }\n    case 'MultiPoint': {\n      geoJSON = writeMultiPointGeometry(\n        /** @type {import(\"../geom/MultiPoint.js\").default} */ (geometry),\n        options,\n      );\n      break;\n    }\n    case 'MultiLineString': {\n      geoJSON = writeMultiLineStringGeometry(\n        /** @type {import(\"../geom/MultiLineString.js\").default} */ (geometry),\n        options,\n      );\n      break;\n    }\n    case 'MultiPolygon': {\n      geoJSON = writeMultiPolygonGeometry(\n        /** @type {import(\"../geom/MultiPolygon.js\").default} */ (geometry),\n        options,\n      );\n      break;\n    }\n    case 'GeometryCollection': {\n      geoJSON = writeGeometryCollectionGeometry(\n        /** @type {import(\"../geom/GeometryCollection.js\").default} */ (\n          geometry\n        ),\n        options,\n      );\n      break;\n    }\n    case 'Circle': {\n      geoJSON = {\n        type: 'GeometryCollection',\n        geometries: [],\n      };\n      break;\n    }\n    default: {\n      throw new Error('Unsupported geometry type: ' + type);\n    }\n  }\n  return geoJSON;\n}\n\n/**\n * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometryCollection} GeoJSON geometry collection.\n */\nfunction writeGeometryCollectionGeometry(geometry, options) {\n  options = Object.assign({}, options);\n  delete options.featureProjection;\n  const geometries = geometry.getGeometriesArray().map(function (geometry) {\n    return writeGeometry(geometry, options);\n  });\n  return {\n    type: 'GeometryCollection',\n    geometries: geometries,\n  };\n}\n\n/**\n * @param {import(\"../geom/LineString.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeLineStringGeometry(geometry, options) {\n  return {\n    type: 'LineString',\n    coordinates: geometry.getCoordinates(),\n  };\n}\n\n/**\n * @param {import(\"../geom/MultiLineString.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiLineStringGeometry(geometry, options) {\n  return {\n    type: 'MultiLineString',\n    coordinates: geometry.getCoordinates(),\n  };\n}\n\n/**\n * @param {import(\"../geom/MultiPoint.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPointGeometry(geometry, options) {\n  return {\n    type: 'MultiPoint',\n    coordinates: geometry.getCoordinates(),\n  };\n}\n\n/**\n * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPolygonGeometry(geometry, options) {\n  let right;\n  if (options) {\n    right = options.rightHanded;\n  }\n  return {\n    type: 'MultiPolygon',\n    coordinates: geometry.getCoordinates(right),\n  };\n}\n\n/**\n * @param {import(\"../geom/Point.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePointGeometry(geometry, options) {\n  return {\n    type: 'Point',\n    coordinates: geometry.getCoordinates(),\n  };\n}\n\n/**\n * @param {import(\"../geom/Polygon.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePolygonGeometry(geometry, options) {\n  let right;\n  if (options) {\n    right = options.rightHanded;\n  }\n  return {\n    type: 'Polygon',\n    coordinates: geometry.getCoordinates(right),\n  };\n}\n\nexport default GeoJSON;\n"],"names":["JSONFeature","source","options","getObject","object","feature","JSON","features","geometry","readGeometryInternal","readPointGeometry","flatCoordinates","readLineStringGeometry","coordinates","readPolygonGeometry","stride","ends","deflate","readMultiPointGeometry","readMultiLineStringGeometry","readMultiPolygonGeometry","endss","Error","writeGeometry","geoJSON","right","type","Object","geoJSONFeature","Feature","geoJSONObject","geoJSONFeatures","geoJSONFeatureCollection","i","ii","featureObject","geometryObject","projection","crs","id","undefined","properties","objects"],"mappings":"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"}