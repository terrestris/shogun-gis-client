{"version":3,"file":"3087.9b1e1846079d60fa.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/ol/source/TileWMS.js"],"sourcesContent":["/**\n * @module ol/source/TileWMS\n */\n\nimport TileImage from './TileImage.js';\nimport {DEFAULT_VERSION, getImageSrc, getRequestParams} from './wms.js';\nimport {appendParams} from '../uri.js';\nimport {buffer, createEmpty} from '../extent.js';\nimport {calculateSourceResolution} from '../reproj.js';\nimport {compareVersions} from '../string.js';\nimport {get as getProjection, transform} from '../proj.js';\nimport {modulo} from '../math.js';\nimport {hash as tileCoordHash} from '../tilecoord.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object<string,*>} params WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`\n * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.\n * @property {number} [gutter=0]\n * The size in pixels of the gutter around image tiles to ignore. By setting\n * this property to a non-zero value, images will be requested that are wider\n * and taller than the tile size by a value of `2 x gutter`.\n * Using a non-zero value allows artifacts of rendering at tile edges to be\n * ignored. If you control the WMS service it is recommended to address\n * \"artifacts at tile edges\" issues by properly configuring the WMS service. For\n * example, MapServer has a `tile_map_edge_buffer` configuration parameter for\n * this. See https://mapserver.org/output/tile_mode.html.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid. Base this on the resolutions,\n * tilesize and extent supported by the server.\n * If this is not defined, a default grid will be used: if there is a projection\n * extent, the grid will be based on that; if not, a grid based on a global\n * extent with origin at 0,0 will be used.\n * @property {import(\"./wms.js\").ServerType} [serverType] The type of\n * the remote WMS server: `mapserver`, `geoserver`, `carmentaserver`, or `qgis`.\n * Only needed if `hidpi` is `true`.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {string} [url] WMS service URL.\n * @property {Array<string>} [urls] WMS service urls.\n * Use this instead of `url` when the WMS supports multiple urls for GetMap requests.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * When set to `false`, only one world\n * will be rendered. When `true`, tiles will be requested for one world only,\n * but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data from WMS servers.\n * @api\n */\nclass TileWMS extends TileImage {\n  /**\n   * @param {Options} [options] Tile WMS options.\n   */\n  constructor(options) {\n    options = options ? options : /** @type {Options} */ ({});\n\n    const params = Object.assign({}, options.params);\n\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: options.tileClass,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.gutter_ = options.gutter !== undefined ? options.gutter : 0;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = params;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.v13_ = true;\n\n    /**\n     * @private\n     * @type {import(\"./wms.js\").ServerType}\n     */\n    this.serverType_ = options.serverType;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.tmpExtent_ = createEmpty();\n\n    this.updateV13_();\n    this.setKey(this.getKeyForParams_());\n  }\n\n  /**\n   * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n   * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n   * constructed.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n   *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n   *     in the `LAYERS` parameter will be used. `VERSION` should not be\n   *     specified here.\n   * @return {string|undefined} GetFeatureInfo URL.\n   * @api\n   */\n  getFeatureInfoUrl(coordinate, resolution, projection, params) {\n    const projectionObj = getProjection(projection);\n    const sourceProjectionObj = this.getProjection() || projectionObj;\n\n    let tileGrid = this.getTileGrid();\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(sourceProjectionObj);\n    }\n\n    const sourceProjCoord = transform(\n      coordinate,\n      projectionObj,\n      sourceProjectionObj,\n    );\n    const sourceResolution = calculateSourceResolution(\n      sourceProjectionObj,\n      projectionObj,\n      coordinate,\n      resolution,\n    );\n\n    const z = tileGrid.getZForResolution(sourceResolution, this.zDirection);\n    const tileResolution = tileGrid.getResolution(z);\n    const tileCoord = tileGrid.getTileCoordForCoordAndZ(sourceProjCoord, z);\n\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n\n    let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n\n    const gutter = this.gutter_;\n    if (gutter !== 0) {\n      tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n    }\n\n    const baseParams = {\n      'QUERY_LAYERS': this.params_['LAYERS'],\n    };\n    Object.assign(\n      baseParams,\n      getRequestParams(this.params_, 'GetFeatureInfo'),\n      params,\n    );\n\n    const x = Math.floor((sourceProjCoord[0] - tileExtent[0]) / tileResolution);\n    const y = Math.floor((tileExtent[3] - sourceProjCoord[1]) / tileResolution);\n\n    baseParams[this.v13_ ? 'I' : 'X'] = x;\n    baseParams[this.v13_ ? 'J' : 'Y'] = y;\n\n    return this.getRequestUrl_(\n      tileCoord,\n      tileExtent,\n      1,\n      sourceProjectionObj || projectionObj,\n      baseParams,\n    );\n  }\n\n  /**\n   * Return the GetLegendGraphic URL, optionally optimized for the passed\n   * resolution and possibly including any passed specific parameters. Returns\n   * `undefined` if the GetLegendGraphic URL cannot be constructed.\n   *\n   * @param {number} [resolution] Resolution. If set to undefined, `SCALE`\n   *     will not be calculated and included in URL.\n   * @param {Object} [params] GetLegendGraphic params. If `LAYER` is set, the\n   *     request is generated for this wms layer, else it will try to use the\n   *     configured wms layer. Default `FORMAT` is `image/png`.\n   *     `VERSION` should not be specified here.\n   * @return {string|undefined} GetLegendGraphic URL.\n   * @api\n   */\n  getLegendUrl(resolution, params) {\n    if (this.urls[0] === undefined) {\n      return undefined;\n    }\n\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_VERSION,\n      'REQUEST': 'GetLegendGraphic',\n      'FORMAT': 'image/png',\n    };\n\n    if (params === undefined || params['LAYER'] === undefined) {\n      const layers = this.params_.LAYERS;\n      const isSingleLayer = !Array.isArray(layers) || layers.length === 1;\n      if (!isSingleLayer) {\n        return undefined;\n      }\n      baseParams['LAYER'] = layers;\n    }\n\n    if (resolution !== undefined) {\n      const mpu = this.getProjection()\n        ? this.getProjection().getMetersPerUnit()\n        : 1;\n      const pixelSize = 0.00028;\n      baseParams['SCALE'] = (resolution * mpu) / pixelSize;\n    }\n\n    Object.assign(baseParams, params);\n\n    return appendParams(/** @type {string} */ (this.urls[0]), baseParams);\n  }\n\n  /**\n   * @return {number} Gutter.\n   * @override\n   */\n  getGutter() {\n    return this.gutter_;\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../extent.js\").Extent} tileExtent Tile extent.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string|undefined} Request URL.\n   * @private\n   */\n  getRequestUrl_(tileCoord, tileExtent, pixelRatio, projection, params) {\n    const urls = this.urls;\n    if (!urls) {\n      return undefined;\n    }\n    let url;\n    if (urls.length == 1) {\n      url = urls[0];\n    } else {\n      const index = modulo(tileCoordHash(tileCoord), urls.length);\n      url = urls[index];\n    }\n\n    return getImageSrc(\n      tileExtent,\n      (\n        this.tileGrid || this.getTileGridForProjection(projection)\n      ).getResolution(tileCoord[0]),\n      pixelRatio,\n      projection,\n      url,\n      params,\n      this.serverType_,\n    );\n  }\n\n  /**\n   * Get the tile pixel ratio for this source.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   * @override\n   */\n  getTilePixelRatio(pixelRatio) {\n    return !this.hidpi_ || this.serverType_ === undefined ? 1 : pixelRatio;\n  }\n\n  /**\n   * @private\n   * @return {string} The key for the current params.\n   */\n  getKeyForParams_() {\n    let i = 0;\n    const res = [];\n    for (const key in this.params_) {\n      res[i++] = key + '-' + this.params_[key];\n    }\n    return res.join('/');\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    Object.assign(this.params_, params);\n    this.updateV13_();\n    this.setKey(this.getKeyForParams_());\n  }\n\n  /**\n   * @private\n   */\n  updateV13_() {\n    const version = this.params_['VERSION'] || DEFAULT_VERSION;\n    this.v13_ = compareVersions(version, '1.3') >= 0;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord The tile coordinate\n   * @param {number} pixelRatio The pixel ratio\n   * @param {import(\"../proj/Projection.js\").default} projection The projection\n   * @return {string|undefined} The tile URL\n   * @override\n   */\n  tileUrlFunction(tileCoord, pixelRatio, projection) {\n    let tileGrid = this.getTileGrid();\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(projection);\n    }\n\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n\n    if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\n      pixelRatio = 1;\n    }\n\n    const tileResolution = tileGrid.getResolution(tileCoord[0]);\n    let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n\n    const gutter = this.gutter_;\n    if (gutter !== 0) {\n      tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n    }\n\n    const baseParams = Object.assign(\n      {},\n      getRequestParams(this.params_, 'GetMap'),\n    );\n\n    return this.getRequestUrl_(\n      tileCoord,\n      tileExtent,\n      pixelRatio,\n      projection,\n      baseParams,\n    );\n  }\n}\n\nexport default TileWMS;\n"],"names":["TileWMS","options","params","Object","undefined","coordinate","resolution","projection","projectionObj","sourceProjectionObj","tileGrid","sourceProjCoord","sourceResolution","z","tileResolution","tileCoord","tileExtent","gutter","baseParams","x","Math","y","layers","Array","mpu","pixelRatio","url","urls","index","i","res","key","version"],"mappings":"mQA6EA,OAAMA,UAAgB,GAAS,CAI7B,YAAYC,CAAO,CAAE,CAGnB,IAAMC,EAASC,OAAO,MAAM,CAAC,CAAC,EAAGF,AAFjCA,CAAAA,EAAUA,GAA4C,CAAC,CAAC,EAEf,MAAM,EAE/C,KAAK,CAAC,CACJ,aAAcA,EAAQ,YAAY,CAClC,wBAAyBA,EAAQ,uBAAuB,CACxD,UAAWA,EAAQ,SAAS,CAC5B,YAAaA,EAAQ,WAAW,CAChC,YAAaA,EAAQ,WAAW,CAChC,WAAYA,EAAQ,UAAU,CAC9B,2BAA4BA,EAAQ,0BAA0B,CAC9D,UAAWA,EAAQ,SAAS,CAC5B,SAAUA,EAAQ,QAAQ,CAC1B,iBAAkBA,EAAQ,gBAAgB,CAC1C,IAAKA,EAAQ,GAAG,CAChB,KAAMA,EAAQ,IAAI,CAClB,MAAOA,AAAkBG,KAAAA,IAAlBH,EAAQ,KAAK,EAAiBA,EAAQ,KAAK,CAClD,WAAYA,EAAQ,UAAU,CAC9B,WAAYA,EAAQ,UAAU,AAChC,GAMA,IAAI,CAAC,OAAO,CAAGA,AAAmBG,KAAAA,IAAnBH,EAAQ,MAAM,CAAiBA,EAAQ,MAAM,CAAG,EAM/D,IAAI,CAAC,OAAO,CAAGC,EAMf,IAAI,CAAC,IAAI,CAAG,GAMZ,IAAI,CAAC,WAAW,CAAGD,EAAQ,UAAU,CAMrC,IAAI,CAAC,MAAM,CAAGA,AAAkBG,KAAAA,IAAlBH,EAAQ,KAAK,EAAiBA,EAAQ,KAAK,CAMzD,IAAI,CAAC,UAAU,CAAG,oBAElB,IAAI,CAAC,UAAU,GACf,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,GACnC,CAgBA,kBAAkBI,CAAU,CAAEC,CAAU,CAAEC,CAAU,CAAEL,CAAM,CAAE,CAC5D,IAAMM,EAAgB,UAAcD,GAC9BE,EAAsB,IAAI,CAAC,aAAa,IAAMD,EAEhDE,EAAW,IAAI,CAAC,WAAW,EAC3B,EAACA,GACHA,CAAAA,EAAW,IAAI,CAAC,wBAAwB,CAACD,EAAmB,EAG9D,IAAME,EAAkB,gBACtBN,EACAG,EACAC,GAEIG,EAAmB,SACvBH,EACAD,EACAH,EACAC,GAGIO,EAAIH,EAAS,iBAAiB,CAACE,EAAkB,IAAI,CAAC,UAAU,EAChEE,EAAiBJ,EAAS,aAAa,CAACG,GACxCE,EAAYL,EAAS,wBAAwB,CAACC,EAAiBE,GAErE,GAAIH,EAAS,cAAc,GAAG,MAAM,EAAIK,CAAS,CAAC,EAAE,CAClD,OAGF,IAAIC,EAAaN,EAAS,kBAAkB,CAACK,EAAW,IAAI,CAAC,UAAU,EAEjEE,EAAS,IAAI,CAAC,OAAO,AACZ,KAAXA,GACFD,CAAAA,EAAa,aAAOA,EAAYF,EAAiBG,EAAQD,EAAU,EAGrE,IAAME,EAAa,CACjB,aAAgB,IAAI,CAAC,OAAO,CAAC,MAAS,AACxC,EACAf,OAAO,MAAM,CACXe,EACA,SAAiB,IAAI,CAAC,OAAO,CAAE,kBAC/BhB,GAGF,IAAMiB,EAAIC,KAAK,KAAK,CAAC,AAACT,CAAAA,CAAe,CAAC,EAAE,CAAGK,CAAU,CAAC,EAAE,AAAD,EAAKF,GACtDO,EAAID,KAAK,KAAK,CAAC,AAACJ,CAAAA,CAAU,CAAC,EAAE,CAAGL,CAAe,CAAC,EAAE,AAAD,EAAKG,GAK5D,OAHAI,CAAU,CAAC,IAAI,CAAC,IAAI,CAAG,IAAM,IAAI,CAAGC,EACpCD,CAAU,CAAC,IAAI,CAAC,IAAI,CAAG,IAAM,IAAI,CAAGG,EAE7B,IAAI,CAAC,cAAc,CACxBN,EACAC,EACA,EACAP,GAAuBD,EACvBU,EAEJ,CAgBA,aAAaZ,CAAU,CAAEJ,CAAM,CAAE,CAC/B,GAAI,AAAiBE,KAAAA,IAAjB,IAAI,CAAC,IAAI,CAAC,EAAE,CACd,OAGF,IAAMc,EAAa,CACjB,QAAW,MACX,QAAW,IAAe,CAC1B,QAAW,mBACX,OAAU,WACZ,EAEA,GAAIhB,AAAWE,KAAAA,IAAXF,GAAwBA,AAAoBE,KAAAA,IAApBF,EAAO,KAAQ,CAAgB,CACzD,IAAMoB,EAAS,IAAI,CAAC,OAAO,CAAC,MAAM,CAElC,GAAI,CADkB,EAACC,MAAM,OAAO,CAACD,IAAWA,AAAkB,IAAlBA,EAAO,MAAM,AAAK,EAEhE,MAEFJ,CAAAA,EAAW,KAAQ,CAAGI,CACxB,CAEA,GAAIhB,AAAeF,KAAAA,IAAfE,EAA0B,CAC5B,IAAMkB,EAAM,IAAI,CAAC,aAAa,GAC1B,IAAI,CAAC,aAAa,GAAG,gBAAgB,GACrC,CAEJN,CAAAA,EAAW,KAAQ,CAAG,AAACZ,EAAakB,EADlB,KAEpB,CAIA,OAFArB,OAAO,MAAM,CAACe,EAAYhB,GAEnB,SAAoC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAGgB,EAC5D,CAMA,WAAY,CACV,OAAO,IAAI,CAAC,OAAO,AACrB,CAQA,WAAY,CACV,OAAO,IAAI,CAAC,OAAO,AACrB,CAWA,eAAeH,CAAS,CAAEC,CAAU,CAAES,CAAU,CAAElB,CAAU,CAAEL,CAAM,CAAE,KAKhEwB,EAJJ,IAAMC,EAAO,IAAI,CAAC,IAAI,CACtB,IAAI,CAACA,GAIL,GAAIA,AAAe,GAAfA,EAAK,MAAM,CACbD,EAAMC,CAAI,CAAC,EAAE,KACR,CACL,IAAMC,EAAQ,SAAO,SAAcb,GAAYY,EAAK,MAAM,EAC1DD,EAAMC,CAAI,CAACC,EAAM,AACnB,CAEA,MAAO,SACLZ,EACA,AACE,KAAI,CAAC,QAAQ,EAAI,IAAI,CAAC,wBAAwB,CAACT,EAAU,EACzD,aAAa,CAACQ,CAAS,CAAC,EAAE,EAC5BU,EACAlB,EACAmB,EACAxB,EACA,IAAI,CAAC,WAAW,EAEpB,CAQA,kBAAkBuB,CAAU,CAAE,CAC5B,OAAO,AAAC,IAAI,CAAC,MAAM,EAAI,AAAqBrB,KAAAA,IAArB,IAAI,CAAC,WAAW,CAAqBqB,EAAJ,CAC1D,CAMA,kBAAmB,CACjB,IAAII,EAAI,EACFC,EAAM,EAAE,CACd,IAAK,IAAMC,KAAO,IAAI,CAAC,OAAO,CAC5BD,CAAG,CAACD,IAAI,CAAGE,EAAM,IAAM,IAAI,CAAC,OAAO,CAACA,EAAI,CAE1C,OAAOD,EAAI,IAAI,CAAC,IAClB,CAOA,aAAa5B,CAAM,CAAE,CACnBC,OAAO,MAAM,CAAC,IAAI,CAAC,OAAO,CAAED,GAC5B,IAAI,CAAC,UAAU,GACf,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,GACnC,CAKA,YAAa,CACX,IAAM8B,EAAU,IAAI,CAAC,OAAO,CAAC,OAAU,EAAI,IAAe,AAC1D,KAAI,CAAC,IAAI,CAAG,QAAgBA,EAAS,QAAU,CACjD,CASA,gBAAgBjB,CAAS,CAAEU,CAAU,CAAElB,CAAU,CAAE,CACjD,IAAIG,EAAW,IAAI,CAAC,WAAW,GAK/B,GAJI,CAACA,GACHA,CAAAA,EAAW,IAAI,CAAC,wBAAwB,CAACH,EAAU,EAGjDG,EAAS,cAAc,GAAG,MAAM,EAAIK,CAAS,CAAC,EAAE,CAClD,MAGgB,IAAdU,GAAoB,EAAC,IAAI,CAAC,MAAM,EAAI,AAAqBrB,KAAAA,IAArB,IAAI,CAAC,WAAW,AAAa,GACnEqB,CAAAA,EAAa,GAGf,IAAMX,EAAiBJ,EAAS,aAAa,CAACK,CAAS,CAAC,EAAE,EACtDC,EAAaN,EAAS,kBAAkB,CAACK,EAAW,IAAI,CAAC,UAAU,EAEjEE,EAAS,IAAI,CAAC,OAAO,AACZ,KAAXA,GACFD,CAAAA,EAAa,aAAOA,EAAYF,EAAiBG,EAAQD,EAAU,EAGrE,IAAME,EAAaf,OAAO,MAAM,CAC9B,CAAC,EACD,SAAiB,IAAI,CAAC,OAAO,CAAE,WAGjC,OAAO,IAAI,CAAC,cAAc,CACxBY,EACAC,EACAS,EACAlB,EACAW,EAEJ,CACF,CAEA,UAAelB,C"}