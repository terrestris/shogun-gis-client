{"version":3,"file":"2132.e2421b7b62ccaf57.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-geo/dist/Grid/PropertyGrid/PropertyGrid.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-geo/dist/constants.js"],"sourcesContent":["import './PropertyGrid.less';\nimport React, { useMemo } from 'react';\nimport { Table } from 'antd';\nimport _get from 'lodash/get';\nimport { getUid } from 'ol';\nimport { CSS_PREFIX } from '../../constants';\nconst defaultClassName = `${CSS_PREFIX}propertygrid`;\n/**\n * Component representing a feature grid showing the attribute values of a simple feature.\n */\nconst PropertyGrid = ({ attributeNameColumnTitle = 'Attribute name', attributeNameColumnWidthInPercent = 50, attributeValueColumnTitle = 'Attribute value', className, attributeFilter, attributeNames, feature, ...passThroughProps }) => {\n    const dataSource = useMemo(() => {\n        let filter = attributeFilter;\n        if (!filter) {\n            filter = feature.getKeys().filter((attrName) => attrName !== 'geometry');\n        }\n        return filter.map((attr) => {\n            const fid = getUid(feature);\n            return {\n                attributeName: (attributeNames && _get(attributeNames, attr)) ?\n                    _get(attributeNames, attr) :\n                    attr,\n                attributeValue: feature.get(attr),\n                key: `ATTR_${attr}_fid_${fid}`\n            };\n        });\n    }, [attributeFilter, attributeNames, feature]);\n    /**\n     * Uses the WHATWG URL parser to validate candidate URLs and avoids\n     * catastrophic backtracking from complex regexes. We intentionally take a\n     * slightly more restrictive interpretation of \"what counts as a URL\" than\n     * some permissive parsers. This keeps the UI from treating visually-broken\n     * or odd inputs as links.\n     *\n     * Tightened checks applied (in addition to URL parsing):\n     * - reject empty or whitespace-only values\n     * - reject inputs with 3 or more leading slashes (e.g. \"////weird\")\n     * - accept only http: and https: schemes (reject ftp:, mailto:, etc.)\n     * - require a non-empty hostname\n     * - reject hostnames that start or end with a dot (\".com\", \"example.\")\n     * - reject hostnames containing consecutive dots (\"example..com\")\n     *\n     * Rationale: the WHATWG URL parser is safe and avoids regex backtracking\n     * issues; the extra checks above encode our UX decision to avoid treating\n     * malformed or surprising user input as clickable links. If you need a\n     * different policy (e.g. accept single-label hosts like \"localhost\"),\n     * extract this logic to a shared util and adjust the rules there.\n     *\n     * TODO: Extract this function into a shared utility package (e.g.\n     * @terrestris/base-util) so other components can reuse the same logic and\n     * we can add unit tests in isolation.\n     *\n     * @param {string} value - candidate string to test as URL\n     * @return {boolean} true if value is an http(s) URL with a hostname\n     */\n    const isUrl = (value) => {\n        try {\n            // quick reject: non-strings or empty/whitespace\n            if (typeof value !== 'string' || value.trim() === '') {\n                return false;\n            }\n            // Reject inputs with 3 or more leading slashes (////weird)\n            // Allow exactly '//' (protocol-relative).\n            if (/^\\/{3,}/.test(value)) {\n                return false;\n            }\n            // Support protocol-relative URLs like //example.com\n            const candidate = value.startsWith('//') ? `https:${value}` : value;\n            const u = new URL(candidate);\n            // Accept only http(s) URLs\n            if (u.protocol !== 'http:' && u.protocol !== 'https:') {\n                return false;\n            }\n            // Basic host presence check\n            const host = u.hostname || '';\n            if (!host) {\n                return false;\n            }\n            // Reject hostnames that start or end with a dot, or contain consecutive\n            // dots (e.g. \".com\", \"example..com\")\n            if (host.startsWith('.') || host.endsWith('.') || host.includes('..')) {\n                return false;\n            }\n            return true;\n        }\n        catch {\n            return false;\n        }\n    };\n    const columns = useMemo(() => {\n        return [{\n                title: attributeNameColumnTitle,\n                dataIndex: 'attributeName',\n                key: 'attributeName',\n                width: `${attributeNameColumnWidthInPercent}%`\n            }, {\n                title: attributeValueColumnTitle,\n                dataIndex: 'attributeValue',\n                key: 'attributeValue',\n                width: `${100 - attributeNameColumnWidthInPercent}%`,\n                render: (value) => {\n                    if (isUrl(value)) {\n                        return React.createElement(\"a\", { href: value, target: \"_blank\" }, value);\n                    }\n                    else {\n                        return value;\n                    }\n                }\n            }];\n    }, [attributeNameColumnTitle, attributeNameColumnWidthInPercent, attributeValueColumnTitle]);\n    const finalClassName = className\n        ? `${className} ${defaultClassName}`\n        : defaultClassName;\n    return (React.createElement(Table, { className: finalClassName, rowKey: record => record.key, dataSource: dataSource, columns: columns, pagination: false, ...passThroughProps }));\n};\nexport default PropertyGrid;\n//# sourceMappingURL=PropertyGrid.js.map","const CSS_PREFIX = 'react-geo-';\nexport { CSS_PREFIX };\n//# sourceMappingURL=constants.js.map"],"names":["e","URL"],"mappings":"2OAMA,IAAM,EAAmB,CAAC,EAAE,GAAU,CAAC,YAAY,CAAC,AA6GpDA,CAAAA,EAAA,QAzGqB,CAAC,CAAE,2BAA2B,gBAAgB,CAAE,oCAAoC,EAAE,CAAE,4BAA4B,iBAAiB,CAAE,WAAS,CAAE,iBAAe,CAAE,gBAAc,CAAE,SAAO,CAAE,GAAG,EAAkB,IAClO,IAAM,EAAa,cAAQ,KACvB,IAAI,EAAS,EAIb,OAHI,AAAC,GACD,GAAS,EAAQ,OAAO,GAAG,MAAM,CAAC,AAAC,GAAa,AAAa,aAAb,EAAuB,EAEpE,EAAO,GAAG,CAAC,AAAC,IACf,IAAM,EAAM,aAAO,GACnB,MAAO,CACH,cAAe,AAAC,GAAkB,IAAK,EAAgB,GACnD,IAAK,EAAgB,GACrB,EACJ,eAAgB,EAAQ,GAAG,CAAC,GAC5B,IAAK,CAAC,KAAK,EAAE,EAAK,KAAK,EAAE,EAAI,CAAC,AAClC,CACJ,EACJ,EAAG,CAAC,EAAiB,EAAgB,EAAQ,EA+DvC,EAAU,cAAQ,IACb,CAAC,CACA,MAAO,EACP,UAAW,gBACX,IAAK,gBACL,MAAO,CAAC,EAAE,EAAkC,CAAC,CAAC,AAClD,EAAG,CACC,MAAO,EACP,UAAW,iBACX,IAAK,iBACL,MAAO,CAAC,EAAE,IAAM,EAAkC,CAAC,CAAC,CACpD,OAAQ,AAAC,GACL,AAAI,AA9CN,CAAC,IACX,GAAI,CAEA,GAAqB,UAAjB,OAAO,GAAsB,AAAiB,KAAjB,EAAM,IAAI,IAKvC,UAAU,IAAI,CAAC,GAJf,MAAO,GAQX,IAAM,EAAY,EAAM,UAAU,CAAC,MAAQ,CAAC,MAAM,EAAE,EAAM,CAAC,CAAG,EACxD,EAAI,IAAIC,IAAI,GAElB,GAAI,AAAe,UAAf,EAAE,QAAQ,EAAgB,AAAe,WAAf,EAAE,QAAQ,CACpC,MAAO,GAGX,IAAM,EAAO,EAAE,QAAQ,EAAI,GAC3B,GAAI,CAAC,GAKD,EAAK,UAAU,CAAC,MAAQ,EAAK,QAAQ,CAAC,MAAQ,EAAK,QAAQ,CAAC,MAJ5D,MAAO,GAOX,MAAO,EACX,CACA,KAAM,CACF,MAAO,EACX,CACJ,GAa0B,GACC,iBAAmB,CAAC,IAAK,CAAE,KAAM,EAAO,OAAQ,QAAS,EAAG,GAG5D,CAGnB,EAAE,CACP,CAAC,EAA0B,EAAmC,EAA0B,EACrF,EAAiB,EACjB,CAAC,EAAE,EAAU,CAAC,EAAE,EAAiB,CAAC,CAClC,EACN,OAAQ,iBAAmB,CAAC,GAAK,CAAE,CAAE,UAAW,EAAgB,OAAQ,GAAU,EAAO,GAAG,CAAE,WAAY,EAAY,QAAS,EAAS,WAAY,GAAO,GAAG,CAAgB,AAAC,EACnL,C,wDClHA,IAAM,EAAa,Y"}