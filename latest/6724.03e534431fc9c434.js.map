{"version":3,"file":"6724.03e534431fc9c434.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/ol/Overlay.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/control/OverviewMap.js"],"sourcesContent":["/**\n * @module ol/Overlay\n */\nimport MapEventType from './MapEventType.js';\nimport BaseObject from './Object.js';\nimport {CLASS_SELECTABLE} from './css.js';\nimport {outerHeight, outerWidth, removeChildren} from './dom.js';\nimport {listen, unlistenByKey} from './events.js';\nimport {containsExtent} from './extent.js';\n\n/**\n * @typedef {'bottom-left' | 'bottom-center' | 'bottom-right' | 'center-left' | 'center-center' | 'center-right' | 'top-left' | 'top-center' | 'top-right'} Positioning\n * The overlay position: `'bottom-left'`, `'bottom-center'`,  `'bottom-right'`,\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\n * `'top-center'`, or `'top-right'`.\n */\n\n/**\n * @typedef {Object} Options\n * @property {number|string} [id] Set the overlay id. The overlay id can be used\n * with the {@link module:ol/Map~Map#getOverlayById} method.\n * @property {HTMLElement} [element] The overlay element.\n * @property {Array<number>} [offset=[0, 0]] Offsets in pixels used when positioning\n * the overlay. The first element in the\n * array is the horizontal offset. A positive value shifts the overlay right.\n * The second element in the array is the vertical offset. A positive value\n * shifts the overlay down.\n * @property {import(\"./coordinate.js\").Coordinate} [position] The overlay position\n * in map projection.\n * @property {Positioning} [positioning='top-left'] Defines how\n * the overlay is actually positioned with respect to its `position` property.\n * Possible values are `'bottom-left'`, `'bottom-center'`, `'bottom-right'`,\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\n * `'top-center'`, and `'top-right'`.\n * @property {boolean} [stopEvent=true] Whether event propagation to the map\n * viewport should be stopped. If `true` the overlay is placed in the same\n * container as that of the controls (CSS class name\n * `ol-overlaycontainer-stopevent`); if `false` it is placed in the container\n * with CSS class name specified by the `className` property.\n * @property {boolean} [insertFirst=true] Whether the overlay is inserted first\n * in the overlay container, or appended. If the overlay is placed in the same\n * container as that of the controls (see the `stopEvent` option) you will\n * probably set `insertFirst` to `true` so the overlay is displayed below the\n * controls.\n * @property {PanIntoViewOptions|boolean} [autoPan=false] Pan the map when calling\n * `setPosition`, so that the overlay is entirely visible in the current viewport.\n * @property {string} [className='ol-overlay-container ol-selectable'] CSS class\n * name.\n */\n\n/**\n * @typedef {Object} PanOptions\n * @property {number} [duration=1000] The duration of the animation in\n * milliseconds.\n * @property {function(number):number} [easing] The easing function to use. Can\n * be one from {@link module:ol/easing} or a custom function.\n * Default is {@link module:ol/easing.inAndOut}.\n */\n\n/**\n * @typedef {Object} PanIntoViewOptions\n * @property {PanOptions} [animation={}] The animation parameters for the pan\n * @property {number} [margin=20] The margin (in pixels) between the\n * overlay and the borders of the map when panning into view.\n */\n\n/**\n * @enum {string}\n * @protected\n */\nconst Property = {\n  ELEMENT: 'element',\n  MAP: 'map',\n  OFFSET: 'offset',\n  POSITION: 'position',\n  POSITIONING: 'positioning',\n};\n\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:element'|'change:map'|'change:offset'|'change:position'|\n *   'change:positioning'} OverlayObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<OverlayObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|OverlayObjectEventTypes, Return>} OverlayOnSignature\n */\n\n/**\n * @classdesc\n * An element to be displayed over the map and attached to a single map\n * location.  Like {@link module:ol/control/Control~Control}, Overlays are\n * visible widgets. Unlike Controls, they are not in a fixed position on the\n * screen, but are tied to a geographical coordinate, so panning the map will\n * move an Overlay but not a Control.\n *\n * Example:\n *\n *     import Overlay from 'ol/Overlay.js';\n *\n *     // ...\n *     const popup = new Overlay({\n *       element: document.getElementById('popup'),\n *     });\n *     popup.setPosition(coordinate);\n *     map.addOverlay(popup);\n *\n * @api\n */\nclass Overlay extends BaseObject {\n  /**\n   * @param {Options} options Overlay options.\n   */\n  constructor(options) {\n    super();\n\n    /***\n     * @type {OverlayOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {OverlayOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {OverlayOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @protected\n     * @type {Options}\n     */\n    this.options = options;\n\n    /**\n     * @protected\n     * @type {number|string|undefined}\n     */\n    this.id = options.id;\n\n    /**\n     * @protected\n     * @type {boolean}\n     */\n    this.insertFirst =\n      options.insertFirst !== undefined ? options.insertFirst : true;\n\n    /**\n     * @protected\n     * @type {boolean}\n     */\n    this.stopEvent = options.stopEvent !== undefined ? options.stopEvent : true;\n\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n    this.element = document.createElement('div');\n    this.element.className =\n      options.className !== undefined\n        ? options.className\n        : 'ol-overlay-container ' + CLASS_SELECTABLE;\n    this.element.style.position = 'absolute';\n    this.element.style.pointerEvents = 'auto';\n\n    /**\n     * @protected\n     * @type {PanIntoViewOptions|undefined}\n     */\n    this.autoPan = options.autoPan === true ? {} : options.autoPan || undefined;\n\n    /**\n     * @protected\n     * @type {{transform_: string,\n     *         visible: boolean}}\n     */\n    this.rendered = {\n      transform_: '',\n      visible: true,\n    };\n\n    /**\n     * @protected\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n    this.mapPostrenderListenerKey = null;\n\n    this.addChangeListener(Property.ELEMENT, this.handleElementChanged);\n    this.addChangeListener(Property.MAP, this.handleMapChanged);\n    this.addChangeListener(Property.OFFSET, this.handleOffsetChanged);\n    this.addChangeListener(Property.POSITION, this.handlePositionChanged);\n    this.addChangeListener(Property.POSITIONING, this.handlePositioningChanged);\n\n    if (options.element !== undefined) {\n      this.setElement(options.element);\n    }\n\n    this.setOffset(options.offset !== undefined ? options.offset : [0, 0]);\n\n    this.setPositioning(options.positioning || 'top-left');\n\n    if (options.position !== undefined) {\n      this.setPosition(options.position);\n    }\n  }\n\n  /**\n   * Get the DOM element of this overlay.\n   * @return {HTMLElement|undefined} The Element containing the overlay.\n   * @observable\n   * @api\n   */\n  getElement() {\n    return /** @type {HTMLElement|undefined} */ (this.get(Property.ELEMENT));\n  }\n\n  /**\n   * Get the overlay identifier which is set on constructor.\n   * @return {number|string|undefined} Id.\n   * @api\n   */\n  getId() {\n    return this.id;\n  }\n\n  /**\n   * Get the map associated with this overlay.\n   * @return {import(\"./Map.js\").default|null} The map that the\n   * overlay is part of.\n   * @observable\n   * @api\n   */\n  getMap() {\n    return /** @type {import(\"./Map.js\").default|null} */ (\n      this.get(Property.MAP) || null\n    );\n  }\n\n  /**\n   * Get the offset of this overlay.\n   * @return {Array<number>} The offset.\n   * @observable\n   * @api\n   */\n  getOffset() {\n    return /** @type {Array<number>} */ (this.get(Property.OFFSET));\n  }\n\n  /**\n   * Get the current position of this overlay.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The spatial point that the overlay is\n   *     anchored at.\n   * @observable\n   * @api\n   */\n  getPosition() {\n    return /** @type {import(\"./coordinate.js\").Coordinate|undefined} */ (\n      this.get(Property.POSITION)\n    );\n  }\n\n  /**\n   * Get the current positioning of this overlay.\n   * @return {Positioning} How the overlay is positioned\n   *     relative to its point on the map.\n   * @observable\n   * @api\n   */\n  getPositioning() {\n    return /** @type {Positioning} */ (this.get(Property.POSITIONING));\n  }\n\n  /**\n   * @protected\n   */\n  handleElementChanged() {\n    removeChildren(this.element);\n    const element = this.getElement();\n    if (element) {\n      this.element.appendChild(element);\n    }\n  }\n\n  /**\n   * @protected\n   */\n  handleMapChanged() {\n    if (this.mapPostrenderListenerKey) {\n      this.element?.remove();\n      unlistenByKey(this.mapPostrenderListenerKey);\n      this.mapPostrenderListenerKey = null;\n    }\n    const map = this.getMap();\n    if (map) {\n      this.mapPostrenderListenerKey = listen(\n        map,\n        MapEventType.POSTRENDER,\n        this.render,\n        this,\n      );\n      this.updatePixelPosition();\n      const container = this.stopEvent\n        ? map.getOverlayContainerStopEvent()\n        : map.getOverlayContainer();\n      if (this.insertFirst) {\n        container.insertBefore(this.element, container.childNodes[0] || null);\n      } else {\n        container.appendChild(this.element);\n      }\n      this.performAutoPan();\n    }\n  }\n\n  /**\n   * @protected\n   */\n  render() {\n    this.updatePixelPosition();\n  }\n\n  /**\n   * @protected\n   */\n  handleOffsetChanged() {\n    this.updatePixelPosition();\n  }\n\n  /**\n   * @protected\n   */\n  handlePositionChanged() {\n    this.updatePixelPosition();\n    this.performAutoPan();\n  }\n\n  /**\n   * @protected\n   */\n  handlePositioningChanged() {\n    this.updatePixelPosition();\n  }\n\n  /**\n   * Set the DOM element to be associated with this overlay.\n   * @param {HTMLElement|undefined} element The Element containing the overlay.\n   * @observable\n   * @api\n   */\n  setElement(element) {\n    this.set(Property.ELEMENT, element);\n  }\n\n  /**\n   * Set the map to be associated with this overlay.\n   * @param {import(\"./Map.js\").default|null} map The map that the\n   * overlay is part of. Pass `null` to just remove the overlay from the current map.\n   * @observable\n   * @api\n   */\n  setMap(map) {\n    this.set(Property.MAP, map);\n  }\n\n  /**\n   * Set the offset for this overlay.\n   * @param {Array<number>} offset Offset.\n   * @observable\n   * @api\n   */\n  setOffset(offset) {\n    this.set(Property.OFFSET, offset);\n  }\n\n  /**\n   * Set the position for this overlay. If the position is `undefined` the\n   * overlay is hidden.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} position The spatial point that the overlay\n   *     is anchored at.\n   * @observable\n   * @api\n   */\n  setPosition(position) {\n    this.set(Property.POSITION, position);\n  }\n\n  /**\n   * Pan the map so that the overlay is entirely visible in the current viewport\n   * (if necessary) using the configured autoPan parameters\n   * @protected\n   */\n  performAutoPan() {\n    if (this.autoPan) {\n      this.panIntoView(this.autoPan);\n    }\n  }\n\n  /**\n   * Pan the map so that the overlay is entirely visible in the current viewport\n   * (if necessary).\n   * @param {PanIntoViewOptions} [panIntoViewOptions] Options for the pan action\n   * @api\n   */\n  panIntoView(panIntoViewOptions) {\n    const map = this.getMap();\n\n    if (!map || !map.getTargetElement() || !this.get(Property.POSITION)) {\n      return;\n    }\n\n    const mapRect = this.getRect(map.getTargetElement(), map.getSize());\n    const element = this.getElement();\n    const overlayRect = this.getRect(element, [\n      outerWidth(element),\n      outerHeight(element),\n    ]);\n\n    panIntoViewOptions = panIntoViewOptions || {};\n\n    const myMargin =\n      panIntoViewOptions.margin === undefined ? 20 : panIntoViewOptions.margin;\n    if (!containsExtent(mapRect, overlayRect)) {\n      // the overlay is not completely inside the viewport, so pan the map\n      const offsetLeft = overlayRect[0] - mapRect[0];\n      const offsetRight = mapRect[2] - overlayRect[2];\n      const offsetTop = overlayRect[1] - mapRect[1];\n      const offsetBottom = mapRect[3] - overlayRect[3];\n\n      const delta = [0, 0];\n      if (offsetLeft < 0) {\n        // move map to the left\n        delta[0] = offsetLeft - myMargin;\n      } else if (offsetRight < 0) {\n        // move map to the right\n        delta[0] = Math.abs(offsetRight) + myMargin;\n      }\n      if (offsetTop < 0) {\n        // move map up\n        delta[1] = offsetTop - myMargin;\n      } else if (offsetBottom < 0) {\n        // move map down\n        delta[1] = Math.abs(offsetBottom) + myMargin;\n      }\n\n      if (delta[0] !== 0 || delta[1] !== 0) {\n        const center = /** @type {import(\"./coordinate.js\").Coordinate} */ (\n          map.getView().getCenterInternal()\n        );\n        const centerPx = map.getPixelFromCoordinateInternal(center);\n        if (!centerPx) {\n          return;\n        }\n        const newCenterPx = [centerPx[0] + delta[0], centerPx[1] + delta[1]];\n\n        const panOptions = panIntoViewOptions.animation || {};\n        map.getView().animateInternal({\n          center: map.getCoordinateFromPixelInternal(newCenterPx),\n          duration: panOptions.duration,\n          easing: panOptions.easing,\n        });\n      }\n    }\n  }\n\n  /**\n   * Get the extent of an element relative to the document\n   * @param {HTMLElement} element The element.\n   * @param {import(\"./size.js\").Size} size The size of the element.\n   * @return {import(\"./extent.js\").Extent} The extent.\n   * @protected\n   */\n  getRect(element, size) {\n    const box = element.getBoundingClientRect();\n    const offsetX = box.left + window.pageXOffset;\n    const offsetY = box.top + window.pageYOffset;\n    return [offsetX, offsetY, offsetX + size[0], offsetY + size[1]];\n  }\n\n  /**\n   * Set the positioning for this overlay.\n   * @param {Positioning} positioning how the overlay is\n   *     positioned relative to its point on the map.\n   * @observable\n   * @api\n   */\n  setPositioning(positioning) {\n    this.set(Property.POSITIONING, positioning);\n  }\n\n  /**\n   * Modify the visibility of the element.\n   * @param {boolean} visible Element visibility.\n   * @protected\n   */\n  setVisible(visible) {\n    if (this.rendered.visible !== visible) {\n      this.element.style.display = visible ? '' : 'none';\n      this.rendered.visible = visible;\n    }\n  }\n\n  /**\n   * Update pixel position.\n   * @protected\n   */\n  updatePixelPosition() {\n    const map = this.getMap();\n    const position = this.getPosition();\n    if (!map || !map.isRendered() || !position) {\n      this.setVisible(false);\n      return;\n    }\n\n    const pixel = map.getPixelFromCoordinate(position);\n    const mapSize = map.getSize();\n    this.updateRenderedPosition(pixel, mapSize);\n  }\n\n  /**\n   * @param {import(\"./pixel.js\").Pixel} pixel The pixel location.\n   * @param {import(\"./size.js\").Size|undefined} mapSize The map size.\n   * @protected\n   */\n  updateRenderedPosition(pixel, mapSize) {\n    const style = this.element.style;\n    const offset = this.getOffset();\n\n    const positioning = this.getPositioning();\n\n    this.setVisible(true);\n\n    const x = `${pixel[0] + offset[0]}px`;\n    const y = `${pixel[1] + offset[1]}px`;\n    let posX = '0%';\n    let posY = '0%';\n    if (\n      positioning == 'bottom-right' ||\n      positioning == 'center-right' ||\n      positioning == 'top-right'\n    ) {\n      posX = '-100%';\n    } else if (\n      positioning == 'bottom-center' ||\n      positioning == 'center-center' ||\n      positioning == 'top-center'\n    ) {\n      posX = '-50%';\n    }\n    if (\n      positioning == 'bottom-left' ||\n      positioning == 'bottom-center' ||\n      positioning == 'bottom-right'\n    ) {\n      posY = '-100%';\n    } else if (\n      positioning == 'center-left' ||\n      positioning == 'center-center' ||\n      positioning == 'center-right'\n    ) {\n      posY = '-50%';\n    }\n    const transform = `translate(${posX}, ${posY}) translate(${x}, ${y})`;\n    if (this.rendered.transform_ != transform) {\n      this.rendered.transform_ = transform;\n      style.transform = transform;\n    }\n  }\n\n  /**\n   * returns the options this Overlay has been created with\n   * @return {Options} overlay options\n   */\n  getOptions() {\n    return this.options;\n  }\n}\n\nexport default Overlay;\n","/**\n * @module ol/control/OverviewMap\n */\nimport Collection from '../Collection.js';\nimport Map from '../Map.js';\nimport MapEventType from '../MapEventType.js';\nimport MapProperty from '../MapProperty.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport Overlay from '../Overlay.js';\nimport View from '../View.js';\nimport ViewProperty from '../ViewProperty.js';\nimport {CLASS_COLLAPSED, CLASS_CONTROL, CLASS_UNSELECTABLE} from '../css.js';\nimport {replaceNode} from '../dom.js';\nimport EventType from '../events/EventType.js';\nimport {listen, listenOnce} from '../events.js';\nimport {\n  containsExtent,\n  equals as equalsExtent,\n  getBottomRight,\n  getTopLeft,\n  scaleFromCenter,\n} from '../extent.js';\nimport {fromExtent as polygonFromExtent} from '../geom/Polygon.js';\nimport Control from './Control.js';\n\n/**\n * Maximum width and/or height extent ratio that determines when the overview\n * map should be zoomed out.\n * @type {number}\n */\nconst MAX_RATIO = 0.75;\n\n/**\n * Minimum width and/or height extent ratio that determines when the overview\n * map should be zoomed in.\n * @type {number}\n */\nconst MIN_RATIO = 0.1;\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-overviewmap'] CSS class name.\n * @property {boolean} [collapsed=true] Whether the control should start collapsed or not (expanded).\n * @property {string|HTMLElement} [collapseLabel='‹'] Text label to use for the\n * expanded overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {boolean} [collapsible=true] Whether the control can be collapsed or not.\n * @property {string|HTMLElement} [label='›'] Text label to use for the collapsed\n * overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {Array<import(\"../layer/Base.js\").default>|import(\"../Collection.js\").default<import(\"../layer/Base.js\").default>} [layers]\n * Layers for the overview map.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n * @property {boolean} [rotateWithView=false] Whether the control view should rotate with the main map view.\n * @property {HTMLElement|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {string} [tipLabel='Overview map'] Text label to use for the button tip.\n * @property {View} [view] Custom view for the overview map (should use same projection as main map). If not provided,\n * a default view with the same projection as the main map will be used.\n */\n\n/**\n * Create a new control with a map acting as an overview map for another\n * defined map.\n *\n * @api\n */\nclass OverviewMap extends Control {\n  /**\n   * @param {Options} [options] OverviewMap options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super({\n      element: document.createElement('div'),\n      render: options.render,\n      target: options.target,\n    });\n\n    /**\n     * @private\n     */\n    this.boundHandleRotationChanged_ = this.handleRotationChanged_.bind(this);\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.collapsed_ =\n      options.collapsed !== undefined ? options.collapsed : true;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.collapsible_ =\n      options.collapsible !== undefined ? options.collapsible : true;\n\n    if (!this.collapsible_) {\n      this.collapsed_ = false;\n    }\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.rotateWithView_ =\n      options.rotateWithView !== undefined ? options.rotateWithView : false;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent|undefined}\n     */\n    this.viewExtent_ = undefined;\n\n    const className =\n      options.className !== undefined ? options.className : 'ol-overviewmap';\n\n    const tipLabel =\n      options.tipLabel !== undefined ? options.tipLabel : 'Overview map';\n\n    const collapseLabel =\n      options.collapseLabel !== undefined ? options.collapseLabel : '\\u2039';\n\n    if (typeof collapseLabel === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.collapseLabel_ = document.createElement('span');\n      this.collapseLabel_.textContent = collapseLabel;\n    } else {\n      this.collapseLabel_ = collapseLabel;\n    }\n\n    const label = options.label !== undefined ? options.label : '\\u203A';\n\n    if (typeof label === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.label_ = document.createElement('span');\n      this.label_.textContent = label;\n    } else {\n      this.label_ = label;\n    }\n\n    const activeLabel =\n      this.collapsible_ && !this.collapsed_ ? this.collapseLabel_ : this.label_;\n    const button = document.createElement('button');\n    button.setAttribute('type', 'button');\n    button.title = tipLabel;\n    button.appendChild(activeLabel);\n\n    button.addEventListener(\n      EventType.CLICK,\n      this.handleClick_.bind(this),\n      false,\n    );\n\n    /**\n     * @type {HTMLElement}\n     * @private\n     */\n    this.ovmapDiv_ = document.createElement('div');\n    this.ovmapDiv_.className = 'ol-overviewmap-map';\n\n    /**\n     * Explicitly given view to be used instead of a view derived from the main map.\n     * @type {View}\n     * @private\n     */\n    this.view_ = options.view;\n\n    const ovmap = new Map({\n      view: options.view,\n      controls: new Collection(),\n      interactions: new Collection(),\n    });\n\n    /**\n     * @type {Map}\n     * @private\n     */\n    this.ovmap_ = ovmap;\n\n    if (options.layers) {\n      options.layers.forEach(function (layer) {\n        ovmap.addLayer(layer);\n      });\n    }\n\n    const box = document.createElement('div');\n    box.className = 'ol-overviewmap-box';\n    box.style.boxSizing = 'border-box';\n\n    /**\n     * @type {import(\"../Overlay.js\").default}\n     * @private\n     */\n    this.boxOverlay_ = new Overlay({\n      position: [0, 0],\n      positioning: 'center-center',\n      element: box,\n    });\n    this.ovmap_.addOverlay(this.boxOverlay_);\n\n    const cssClasses =\n      className +\n      ' ' +\n      CLASS_UNSELECTABLE +\n      ' ' +\n      CLASS_CONTROL +\n      (this.collapsed_ && this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') +\n      (this.collapsible_ ? '' : ' ol-uncollapsible');\n    const element = this.element;\n    element.className = cssClasses;\n    element.appendChild(this.ovmapDiv_);\n    element.appendChild(button);\n\n    /* Interactive map */\n\n    const overlay = this.boxOverlay_;\n    const overlayBox = this.boxOverlay_.getElement();\n\n    /* Functions definition */\n\n    const computeDesiredMousePosition = (mousePosition) => {\n      return {\n        clientX: mousePosition.clientX,\n        clientY: mousePosition.clientY,\n      };\n    };\n\n    const move = function (event) {\n      const position = /** @type {?} */ (computeDesiredMousePosition(event));\n      const coordinates = ovmap.getEventCoordinate(\n        /** @type {MouseEvent} */ (position),\n      );\n\n      overlay.setPosition(coordinates);\n    };\n\n    const endMoving = (event) => {\n      const coordinates = ovmap.getEventCoordinateInternal(event);\n\n      const map = this.getMap();\n\n      map.getView().setCenterInternal(coordinates);\n\n      const ownerDocument = map.getOwnerDocument();\n      ownerDocument.removeEventListener('pointermove', move);\n      ownerDocument.removeEventListener('pointerup', endMoving);\n    };\n\n    /* Binding */\n\n    this.ovmapDiv_.addEventListener('pointerdown', (event) => {\n      const ownerDocument = this.getMap().getOwnerDocument();\n      if (event.target === overlayBox) {\n        ownerDocument.addEventListener('pointermove', move);\n      }\n      ownerDocument.addEventListener('pointerup', endMoving);\n    });\n  }\n\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   * @api\n   * @override\n   */\n  setMap(map) {\n    const oldMap = this.getMap();\n    if (map === oldMap) {\n      return;\n    }\n    if (oldMap) {\n      const oldView = oldMap.getView();\n      if (oldView) {\n        this.unbindView_(oldView);\n      }\n      this.ovmap_.setTarget(null);\n    }\n    super.setMap(map);\n\n    if (map) {\n      this.ovmap_.setTarget(this.ovmapDiv_);\n      this.listenerKeys.push(\n        listen(\n          map,\n          ObjectEventType.PROPERTYCHANGE,\n          this.handleMapPropertyChange_,\n          this,\n        ),\n      );\n\n      const view = map.getView();\n      if (view) {\n        this.bindView_(view);\n      }\n\n      if (!this.ovmap_.isRendered()) {\n        this.updateBoxAfterOvmapIsRendered_();\n      }\n    }\n  }\n\n  /**\n   * Handle map property changes.  This only deals with changes to the map's view.\n   * @param {import(\"../Object.js\").ObjectEvent} event The propertychange event.\n   * @private\n   */\n  handleMapPropertyChange_(event) {\n    if (event.key === MapProperty.VIEW) {\n      const oldView = /** @type {import(\"../View.js\").default} */ (\n        event.oldValue\n      );\n      if (oldView) {\n        this.unbindView_(oldView);\n      }\n      const newView = this.getMap().getView();\n      this.bindView_(newView);\n    } else if (\n      !this.ovmap_.isRendered() &&\n      (event.key === MapProperty.TARGET || event.key === MapProperty.SIZE)\n    ) {\n      this.ovmap_.updateSize();\n    }\n  }\n\n  /**\n   * Register listeners for view property changes.\n   * @param {import(\"../View.js\").default} view The view.\n   * @private\n   */\n  bindView_(view) {\n    if (!this.view_) {\n      // Unless an explicit view definition was given, derive default from whatever main map uses.\n      const newView = new View({\n        projection: view.getProjection(),\n      });\n      this.ovmap_.setView(newView);\n    }\n\n    view.addChangeListener(\n      ViewProperty.ROTATION,\n      this.boundHandleRotationChanged_,\n    );\n    // Sync once with the new view\n    this.handleRotationChanged_();\n\n    if (view.isDef()) {\n      this.ovmap_.updateSize();\n      this.resetExtent_();\n    }\n  }\n\n  /**\n   * Unregister listeners for view property changes.\n   * @param {import(\"../View.js\").default} view The view.\n   * @private\n   */\n  unbindView_(view) {\n    view.removeChangeListener(\n      ViewProperty.ROTATION,\n      this.boundHandleRotationChanged_,\n    );\n  }\n\n  /**\n   * Handle rotation changes to the main map.\n   * @private\n   */\n  handleRotationChanged_() {\n    if (this.rotateWithView_) {\n      this.ovmap_.getView().setRotation(this.getMap().getView().getRotation());\n    }\n  }\n\n  /**\n   * Reset the overview map extent if the box size (width or\n   * height) is less than the size of the overview map size times minRatio\n   * or is greater than the size of the overview size times maxRatio.\n   *\n   * If the map extent was not reset, the box size can fits in the defined\n   * ratio sizes. This method then checks if is contained inside the overview\n   * map current extent. If not, recenter the overview map to the current\n   * main map center location.\n   * @private\n   */\n  validateExtent_() {\n    const map = this.getMap();\n    const ovmap = this.ovmap_;\n\n    if (!map.isRendered() || !ovmap.isRendered()) {\n      return;\n    }\n\n    const mapSize = /** @type {import(\"../size.js\").Size} */ (map.getSize());\n\n    const view = map.getView();\n    const extent = view.calculateExtentInternal(mapSize);\n\n    if (this.viewExtent_ && equalsExtent(extent, this.viewExtent_)) {\n      // repeats of the same extent may indicate constraint conflicts leading to an endless cycle\n      return;\n    }\n    this.viewExtent_ = extent;\n\n    const ovmapSize = /** @type {import(\"../size.js\").Size} */ (\n      ovmap.getSize()\n    );\n\n    const ovview = ovmap.getView();\n    const ovextent = ovview.calculateExtentInternal(ovmapSize);\n\n    const topLeftPixel = ovmap.getPixelFromCoordinateInternal(\n      getTopLeft(extent),\n    );\n    const bottomRightPixel = ovmap.getPixelFromCoordinateInternal(\n      getBottomRight(extent),\n    );\n\n    const boxWidth = Math.abs(topLeftPixel[0] - bottomRightPixel[0]);\n    const boxHeight = Math.abs(topLeftPixel[1] - bottomRightPixel[1]);\n\n    const ovmapWidth = ovmapSize[0];\n    const ovmapHeight = ovmapSize[1];\n\n    if (\n      boxWidth < ovmapWidth * MIN_RATIO ||\n      boxHeight < ovmapHeight * MIN_RATIO ||\n      boxWidth > ovmapWidth * MAX_RATIO ||\n      boxHeight > ovmapHeight * MAX_RATIO\n    ) {\n      this.resetExtent_();\n    } else if (!containsExtent(ovextent, extent)) {\n      this.recenter_();\n    }\n  }\n\n  /**\n   * Reset the overview map extent to half calculated min and max ratio times\n   * the extent of the main map.\n   * @private\n   */\n  resetExtent_() {\n    if (MAX_RATIO === 0 || MIN_RATIO === 0) {\n      return;\n    }\n\n    const map = this.getMap();\n    const ovmap = this.ovmap_;\n\n    const mapSize = /** @type {import(\"../size.js\").Size} */ (map.getSize());\n\n    const view = map.getView();\n    const extent = view.calculateExtentInternal(mapSize);\n\n    const ovview = ovmap.getView();\n\n    // get how many times the current map overview could hold different\n    // box sizes using the min and max ratio, pick the step in the middle used\n    // to calculate the extent from the main map to set it to the overview map,\n    const steps = Math.log(MAX_RATIO / MIN_RATIO) / Math.LN2;\n    const ratio = 1 / (Math.pow(2, steps / 2) * MIN_RATIO);\n    scaleFromCenter(extent, ratio);\n    ovview.fitInternal(polygonFromExtent(extent));\n  }\n\n  /**\n   * Set the center of the overview map to the map center without changing its\n   * resolution.\n   * @private\n   */\n  recenter_() {\n    const map = this.getMap();\n    const ovmap = this.ovmap_;\n\n    const view = map.getView();\n\n    const ovview = ovmap.getView();\n\n    ovview.setCenterInternal(view.getCenterInternal());\n  }\n\n  /**\n   * Update the box using the main map extent\n   * @private\n   */\n  updateBox_() {\n    const map = this.getMap();\n    const ovmap = this.ovmap_;\n\n    if (!map.isRendered() || !ovmap.isRendered()) {\n      return;\n    }\n\n    const mapSize = /** @type {import(\"../size.js\").Size} */ (map.getSize());\n\n    const view = map.getView();\n\n    const ovview = ovmap.getView();\n\n    const rotation = this.rotateWithView_ ? 0 : -view.getRotation();\n\n    const overlay = this.boxOverlay_;\n    const box = this.boxOverlay_.getElement();\n    const center = view.getCenter();\n    const resolution = view.getResolution();\n    const ovresolution = ovview.getResolution();\n    const width = (mapSize[0] * resolution) / ovresolution;\n    const height = (mapSize[1] * resolution) / ovresolution;\n\n    // set position using center coordinates\n    overlay.setPosition(center);\n\n    // set box size calculated from map extent size and overview map resolution\n    if (box) {\n      box.style.width = width + 'px';\n      box.style.height = height + 'px';\n      const transform = 'rotate(' + rotation + 'rad)';\n      box.style.transform = transform;\n    }\n  }\n\n  /**\n   * @private\n   */\n  updateBoxAfterOvmapIsRendered_() {\n    if (this.ovmapPostrenderKey_) {\n      return;\n    }\n    this.ovmapPostrenderKey_ = listenOnce(\n      this.ovmap_,\n      MapEventType.POSTRENDER,\n      (event) => {\n        delete this.ovmapPostrenderKey_;\n        this.updateBox_();\n      },\n    );\n  }\n\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  handleClick_(event) {\n    event.preventDefault();\n    this.handleToggle_();\n  }\n\n  /**\n   * @private\n   */\n  handleToggle_() {\n    this.element.classList.toggle(CLASS_COLLAPSED);\n    if (this.collapsed_) {\n      replaceNode(this.collapseLabel_, this.label_);\n    } else {\n      replaceNode(this.label_, this.collapseLabel_);\n    }\n    this.collapsed_ = !this.collapsed_;\n\n    // manage overview map if it had not been rendered before and control\n    // is expanded\n    const ovmap = this.ovmap_;\n    if (!this.collapsed_) {\n      if (ovmap.isRendered()) {\n        this.viewExtent_ = undefined;\n        ovmap.render();\n        return;\n      }\n      ovmap.updateSize();\n      this.resetExtent_();\n      this.updateBoxAfterOvmapIsRendered_();\n    }\n  }\n\n  /**\n   * Return `true` if the overview map is collapsible, `false` otherwise.\n   * @return {boolean} True if the widget is collapsible.\n   * @api\n   */\n  getCollapsible() {\n    return this.collapsible_;\n  }\n\n  /**\n   * Set whether the overview map should be collapsible.\n   * @param {boolean} collapsible True if the widget is collapsible.\n   * @api\n   */\n  setCollapsible(collapsible) {\n    if (this.collapsible_ === collapsible) {\n      return;\n    }\n    this.collapsible_ = collapsible;\n    this.element.classList.toggle('ol-uncollapsible');\n    if (!collapsible && this.collapsed_) {\n      this.handleToggle_();\n    }\n  }\n\n  /**\n   * Collapse or expand the overview map according to the passed parameter. Will\n   * not do anything if the overview map isn't collapsible or if the current\n   * collapsed state is already the one requested.\n   * @param {boolean} collapsed True if the widget is collapsed.\n   * @api\n   */\n  setCollapsed(collapsed) {\n    if (!this.collapsible_ || this.collapsed_ === collapsed) {\n      return;\n    }\n    this.handleToggle_();\n  }\n\n  /**\n   * Determine if the overview map is collapsed.\n   * @return {boolean} The overview map is collapsed.\n   * @api\n   */\n  getCollapsed() {\n    return this.collapsed_;\n  }\n\n  /**\n   * Return `true` if the overview map view can rotate, `false` otherwise.\n   * @return {boolean} True if the control view can rotate.\n   * @api\n   */\n  getRotateWithView() {\n    return this.rotateWithView_;\n  }\n\n  /**\n   * Set whether the overview map view should rotate with the main map view.\n   * @param {boolean} rotateWithView True if the control view should rotate.\n   * @api\n   */\n  setRotateWithView(rotateWithView) {\n    if (this.rotateWithView_ === rotateWithView) {\n      return;\n    }\n    this.rotateWithView_ = rotateWithView;\n    if (this.getMap().getView().getRotation() !== 0) {\n      if (this.rotateWithView_) {\n        this.handleRotationChanged_();\n      } else {\n        this.ovmap_.getView().setRotation(0);\n      }\n      this.viewExtent_ = undefined;\n      this.validateExtent_();\n      this.updateBox_();\n    }\n  }\n\n  /**\n   * Return the overview map.\n   * @return {import(\"../Map.js\").default} Overview map.\n   * @api\n   */\n  getOverviewMap() {\n    return this.ovmap_;\n  }\n\n  /**\n   * Update the overview map element.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n  render(mapEvent) {\n    this.validateExtent_();\n    this.updateBox_();\n  }\n}\n\nexport default OverviewMap;\n"],"names":["document","e","l","o","Math","n","window","c"],"mappings":"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"}