{"version":3,"file":"8065.d2c788505a882056.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/ol/proj/proj4.js"],"sourcesContent":["/**\n * @module ol/proj/proj4\n */\nimport {\n  addCoordinateTransforms,\n  addEquivalentProjections,\n  addProjection,\n  createSafeCoordinateTransform,\n} from '../proj.js';\nimport Projection from './Projection.js';\nimport {get as getCachedProjection} from './projections.js';\nimport {get as getTransform} from './transforms.js';\n\n/**\n * @type {import(\"proj4\")|null}\n */\nlet registered = null;\n\n/**\n * @return {boolean} Proj4 has been registered.\n */\nexport function isRegistered() {\n  return !!registered;\n}\n\n/**\n * Unsets the shared proj4 previously set with register.\n */\nexport function unregister() {\n  registered = null;\n}\n\n/**\n * Make projections defined in proj4 (with `proj4.defs()`) available in\n * OpenLayers. Requires proj4 >= 2.8.0.\n *\n * This function should be called whenever changes are made to the proj4\n * registry, e.g. after calling `proj4.defs()`. Existing transforms will not be\n * modified by this function.\n *\n * @param {import(\"proj4\")} proj4 Proj4.\n * @api\n */\nexport function register(proj4) {\n  registered = proj4;\n\n  const projCodes = Object.keys(proj4.defs);\n  const len = projCodes.length;\n  let i, j;\n  for (i = 0; i < len; ++i) {\n    const code = projCodes[i];\n    if (!getCachedProjection(code)) {\n      const def = proj4.defs(code);\n      let units = /** @type {import(\"./Units.js\").Units} */ (def.units);\n      if (!units && def.projName === 'longlat') {\n        units = 'degrees';\n      }\n      addProjection(\n        new Projection({\n          code: code,\n          axisOrientation: def.axis,\n          metersPerUnit: def.to_meter,\n          units,\n        }),\n      );\n    }\n  }\n  for (i = 0; i < len; ++i) {\n    const code1 = projCodes[i];\n    const proj1 = getCachedProjection(code1);\n    for (j = 0; j < len; ++j) {\n      const code2 = projCodes[j];\n      const proj2 = getCachedProjection(code2);\n      if (!getTransform(code1, code2)) {\n        if (proj4.defs[code1] === proj4.defs[code2]) {\n          addEquivalentProjections([proj1, proj2]);\n        } else {\n          const transform = proj4(code1, code2);\n          addCoordinateTransforms(\n            proj1,\n            proj2,\n            createSafeCoordinateTransform(proj1, proj2, transform.forward),\n            createSafeCoordinateTransform(proj2, proj1, transform.inverse),\n          );\n        }\n      }\n    }\n  }\n}\n\n/**\n * @param {number} code The EPSG code.\n * @return {Promise<string>} The proj4 definition.\n */\nlet epsgLookup = async function (code) {\n  const response = await fetch(`https://epsg.io/${code}.proj4`);\n  if (!response.ok) {\n    throw new Error(`Unexpected response from epsg.io: ${response.status}`);\n  }\n  return response.text();\n};\n\n/**\n * Set the lookup function for getting proj4 definitions given an EPSG code.\n * By default, the {@link module:ol/proj/proj4.fromEPSGCode} function uses the\n * epsg.io website for proj4 definitions.  This can be changed by providing a\n * different lookup function.\n *\n * @param {function(number):Promise<string>} func The lookup function.\n * @api\n */\nexport function setEPSGLookup(func) {\n  epsgLookup = func;\n}\n\n/**\n * Get the current EPSG lookup function.\n *\n * @return {function(number):Promise<string>} The EPSG lookup function.\n */\nexport function getEPSGLookup() {\n  return epsgLookup;\n}\n\n/**\n * Get a projection from an EPSG code.  This function fetches the projection\n * definition from the epsg.io website, registers this definition for use with\n * proj4, and returns a configured projection.  You must call import proj4 and\n * call {@link module:ol/proj/proj4.register} before using this function.\n *\n * If the projection definition is already registered with proj4, it will not\n * be fetched again (so it is ok to call this function multiple times with the\n * same code).\n *\n * @param {number|string} code The EPSG code (e.g. 4326 or 'EPSG:4326').\n * @return {Promise<Projection>} The projection.\n * @api\n */\nexport async function fromEPSGCode(code) {\n  if (typeof code === 'string') {\n    code = parseInt(code.split(':').pop(), 10);\n  }\n\n  const proj4 = registered;\n  if (!proj4) {\n    throw new Error('Proj4 must be registered first with register(proj4)');\n  }\n\n  const epsgCode = 'EPSG:' + code;\n  if (proj4.defs(epsgCode)) {\n    return getCachedProjection(epsgCode);\n  }\n\n  proj4.defs(epsgCode, await epsgLookup(code));\n  register(proj4);\n\n  return getCachedProjection(epsgCode);\n}\n\n/**\n * Generate an EPSG lookup function which uses the MapTiler Coordinates API to find projection\n * definitions which do not require proj4 to be configured to handle `+nadgrids` parameters.\n * Call {@link module:ol/proj/proj4.setEPSGLookup} use the function for lookups\n * `setEPSGLookup(epsgLookupMapTiler('{YOUR_MAPTILER_API_KEY_HERE}'))`.\n *\n * @param {string} key MapTiler API key.  Get your own API key at https://www.maptiler.com/cloud/.\n * @return {function(number):Promise<string>} The EPSG lookup function.\n * @api\n */\nexport function epsgLookupMapTiler(key) {\n  return async function (code) {\n    const response = await fetch(\n      `https://api.maptiler.com/coordinates/search/code:${code}.json?transformations=true&exports=true&key=${key}`,\n    );\n    if (!response.ok) {\n      throw new Error(\n        `Unexpected response from maptiler.com: ${response.status}`,\n      );\n    }\n    return response.json().then((json) => {\n      const results = json['results'];\n      if (results?.length > 0) {\n        const result = results.filter(\n          (r) =>\n            r['id']?.['authority'] === 'EPSG' && r['id']?.['code'] === code,\n        )[0];\n        if (result) {\n          const transforms = result['transformations'];\n          if (transforms?.length > 0) {\n            // use default transform if it does not require grids\n            const defaultTransform = result['default_transformation'];\n            if (\n              transforms.filter(\n                (t) =>\n                  t['id']?.['authority'] === defaultTransform?.['authority'] &&\n                  t['id']?.['code'] === defaultTransform?.['code'] &&\n                  t['grids']?.length === 0,\n              ).length > 0\n            ) {\n              return result['exports']?.['proj4'];\n            }\n            // otherwise use most accurate alternative without grids\n            const transform = transforms\n              .filter(\n                (t) =>\n                  t['grids']?.length === 0 &&\n                  t['target_crs']?.['authority'] === 'EPSG' &&\n                  t['target_crs']?.['code'] === 4326 &&\n                  t['deprecated'] === false &&\n                  t['usable'] === true,\n              )\n              .sort((t1, t2) => t1['accuracy'] - t2['accuracy'])[0]?.[\n              'exports'\n            ]?.['proj4'];\n            if (transform) {\n              return transform;\n            }\n          }\n          // fallback to default\n          return result['exports']?.['proj4'];\n        }\n      }\n    });\n  };\n}\n"],"names":["Object","fetch","Error","parseInt","r","t"],"mappings":"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"}