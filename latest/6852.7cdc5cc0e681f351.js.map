{"version":3,"file":"6852.7cdc5cc0e681f351.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/ol-util/dist/MeasureUtil/MeasureUtil.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-util/dist/constants.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-util/dist/Hooks/useMeasure/useMeasure.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-geo/dist/Button/MeasureButton/MeasureButton.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-geo/dist/Button/ToggleButton/ToggleButton.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-geo/dist/constants.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-util/dist/Hooks/useOlInteraction/useOlInteraction.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-util/dist/Hooks/useOlLayer/useOlLayer.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-util/dist/Hooks/useOlListener/useOlListener.js"],"sourcesContent":["import _isNil from 'lodash/isNil';\nimport OlGeomCircle from 'ol/geom/Circle';\nimport { getArea, getLength } from 'ol/sphere';\n/**\n * This class provides some static methods which might be helpful when working\n * with measurements.\n *\n * @class MeasureUtil\n */\nclass MeasureUtil {\n    /**\n     * Get the length of a OlGeomLineString.\n     *\n     * @param {OlGeomLineString} line The drawn line.\n     * @param {OlMap} map An OlMap.\n     * @param {boolean} geodesic Is the measurement geodesic (default is true).\n     * @param {number} radius Sphere radius. By default, the radius of the earth\n     *                    \t  is used (Clarke 1866 Authalic Sphere, 6371008.8).\n     * @param {number} decimalPrecision Set the decimal precision on length value\n     *                    \t  for non-geodesic map (default value 6)\n     *\n     * @return {number} The length of line in meters.\n     */\n    static getLength(line, map, geodesic = true, radius = 6371008.8, decimalPrecision = 6) {\n        const decimalHelper = Math.pow(10, decimalPrecision);\n        if (geodesic) {\n            const opts = {\n                projection: map.getView().getProjection().getCode(),\n                radius\n            };\n            return getLength(line, opts);\n        }\n        else {\n            return Math.round(line.getLength() * decimalHelper) / decimalHelper;\n        }\n    }\n    /**\n     * Format length output for the tooltip.\n     *\n     * @param {OlGeomLineString} line The drawn line.\n     * @param {OlMap} map An OlMap.\n     * @param {number} decimalPlacesInToolTips How many decimal places will be\n     *   allowed for the measure tooltips\n     * @param {boolean} geodesic Is the measurement geodesic (default is true).\n     *\n     * @return {string} The formatted length of the line (units: km, m or mm).\n     */\n    static formatLength(line, map, decimalPlacesInToolTips, geodesic = true) {\n        const decimalHelper = Math.pow(10, decimalPlacesInToolTips);\n        const length = MeasureUtil.getLength(line, map, geodesic);\n        let output;\n        if (length > 1000) {\n            output = (Math.round(length / 1000 * decimalHelper) /\n                decimalHelper) + ' km';\n        }\n        else if (length > 1) {\n            output = (Math.round(length * decimalHelper) / decimalHelper) +\n                ' m';\n        }\n        else {\n            output = (Math.round(length * 1000 * decimalHelper) / decimalHelper) +\n                ' mm';\n        }\n        return output;\n    }\n    /**\n     * Get the area of an OlGeomPolygon.\n     *\n     * @param {OlGeomPolygon} polygon The drawn polygon.\n     * @param {OlMap} map An OlMap.\n     * @param {boolean} geodesic Is the measurement geodesic (default is true).\n     * @param {number} radius Sphere radius. By default, the radius of the earth\n     *                        is used (Clarke 1866 Authalic Sphere, 6371008.8).\n     *\n     * @return {number} The area of the polygon in square meter.\n     */\n    static getArea(polygon, map, geodesic = true, radius = 6371008.8) {\n        if (geodesic) {\n            const opts = {\n                projection: map.getView().getProjection().getCode(),\n                radius\n            };\n            return getArea(polygon, opts);\n        }\n        else {\n            return polygon.getArea();\n        }\n    }\n    /**\n     * Get the estimated area of an OlGeomCircle.\n     *\n     * @param {OlGeomCircle} circleGeom The drawn circle.\n     * @param {OlMap} map An OlMap.\n     *\n     * @return {number} The area of the circle in square meter.\n     */\n    static getAreaOfCircle(circleGeom, map) {\n        if (_isNil(map.getView().getProjection())) {\n            return NaN;\n        }\n        const sphericalUnits = ['radians', 'degrees'];\n        const projectionUnits = map.getView().getProjection().getUnits();\n        const useSpherical = sphericalUnits.includes(projectionUnits);\n        if (useSpherical) {\n            // see https://math.stackexchange.com/questions/1832110/area-of-a-circle-on-sphere\n            // the radius of the earth - Clarke 1866 authalic Sphere\n            const earthRadius = 6371008.8;\n            const radius = circleGeom.getRadius();\n            let area = 2.0 * Math.PI * Math.pow(earthRadius, 2);\n            area *= (1 - Math.cos(radius / earthRadius));\n            return area;\n        }\n        else {\n            return Math.PI * Math.pow(circleGeom.getRadius(), 2);\n        }\n    }\n    /**\n     * Format area output for the tooltip.\n     *\n     * @param {OlGeomPolygon | OlGeomCircle} geom The drawn geometry (circle or polygon).\n     * @param {OlMap} map An OlMap.\n     * @param {number} decimalPlacesInToolTips How many decimal places will be\n     *   allowed for the measure tooltips.\n     * @param {boolean} geodesic Is the measurement geodesic.\n     *\n     * @return {string} The formatted area of the polygon.\n     */\n    static formatArea(geom, map, decimalPlacesInToolTips, geodesic = true) {\n        const decimalHelper = Math.pow(10, decimalPlacesInToolTips);\n        let area;\n        if (geom instanceof OlGeomCircle) {\n            area = MeasureUtil.getAreaOfCircle(geom, map);\n        }\n        else {\n            area = MeasureUtil.getArea(geom, map, geodesic);\n        }\n        let output;\n        if (area > 10000) {\n            output = (Math.round(area / 1000000 * decimalHelper) /\n                decimalHelper) + ' km<sup>2</sup>';\n        }\n        else if (area > 0.01) {\n            output = (Math.round(area * decimalHelper) / decimalHelper) +\n                ' m<sup>2</sup>';\n        }\n        else {\n            output = (Math.round(area * 1000000 * decimalHelper) / decimalHelper) +\n                ' mm<sup>2</sup>';\n        }\n        return output;\n    }\n    /**\n     * Determine the angle between two coordinates. The angle will be between\n     * -180° and 180°, with 0° being in the east. The angle will increase\n     * counter-clockwise.\n     *\n     * Inspired by https://stackoverflow.com/a/31136507\n     *\n     * @param {Array<number>} start The start coordinates of the line with the\n     *     x-coordinate being at index `0` and y-coordinate being at index `1`.\n     * @param {Array<number>} end The end coordinates of the line with the\n     *     x-coordinate being at index `0` and y-coordinate being at index `1`.\n     *\n     * @return {number} the angle in degrees, ranging from -180° to 180°.\n     */\n    static angle(start, end) {\n        const dx = start[0] - end[0];\n        const dy = start[1] - end[1];\n        // range (-PI, PI]\n        let theta = Math.atan2(dy, dx);\n        // rads to degs, range (-180, 180]\n        theta *= 180 / Math.PI;\n        return theta;\n    }\n    /**\n     * Determine the angle between two coordinates. The angle will be between\n     * 0° and 360°, with 0° being in the east. The angle will increase\n     * counter-clockwise.\n     *\n     * Inspired by https://stackoverflow.com/a/31136507\n     *\n     * @param {Array<number>} start The start coordinates of the line with the\n     *     x-coordinate being at index `0` and y-coordinate being at index `1`.\n     * @param {Array<number>} end The end coordinates of the line with the\n     *     x-coordinate being at index `0` and y-coordinate being at index `1`.\n     *\n     * @return {number} the angle in degrees, ranging from 0° and 360°.\n     */\n    static angle360(start, end) {\n        // range (-180, 180]\n        let theta = MeasureUtil.angle(start, end);\n        if (theta < 0) {\n            // range [0, 360)\n            theta = 360 + theta;\n        }\n        return theta;\n    }\n    /**\n     * Given an angle between 0° and 360° this angle returns the exact opposite\n     * of the angle, e.g. for 90° you'll get back 270°. This effectively turns\n     * the direction of the angle from counter-clockwise to clockwise.\n     *\n     * @param {number} angle360 The input angle obtained counter-clockwise.\n     *\n     * @return {number} The clockwise angle.\n     */\n    static makeClockwise(angle360) {\n        return 360 - angle360;\n    }\n    /**\n     * This methods adds an offset of 90° to an counter-clockwise increasing\n     * angle of a line so that the origin (0°) lies at the top (in the north).\n     *\n     * @param {number} angle360 The input angle obtained counter-clockwise, with\n     *     0° degrees being in the east.\n     *\n     * @return {number} The adjusted angle, with 0° being in the north.\n     */\n    static makeZeroDegreesAtNorth(angle360) {\n        let corrected = angle360 + 90;\n        if (corrected > 360) {\n            corrected = corrected - 360;\n        }\n        return corrected;\n    }\n    /**\n     * Returns the angle of the passed linestring in degrees, with 'N' being the\n     * 0°-line and the angle increases in clockwise direction.\n     *\n     * @param {OlGeomLineString} line The linestring to get the\n     *   angle from. As this line is coming from our internal draw\n     *   interaction, we know that it will only consist of two points.\n     * @param {number} decimalPlacesInToolTips How many decimal places will be\n     *   allowed for the measure tooltips.\n     *\n     * @return {string} The formatted angle of the line.\n     */\n    static formatAngle(line, decimalPlacesInToolTips = 2) {\n        const coords = line.getCoordinates();\n        const numCoords = coords.length;\n        if (numCoords < 2) {\n            return '';\n        }\n        const lastPoint = coords[numCoords - 1];\n        const prevPoint = coords[numCoords - 2];\n        let angle = MeasureUtil.angle360(prevPoint, lastPoint);\n        angle = MeasureUtil.makeZeroDegreesAtNorth(angle);\n        angle = MeasureUtil.makeClockwise(angle);\n        return `${angle.toFixed(decimalPlacesInToolTips)}°`;\n    }\n}\nexport default MeasureUtil;\n//# sourceMappingURL=MeasureUtil.js.map","const CSS_PREFIX = 'react-util-';\nexport { CSS_PREFIX };\n//# sourceMappingURL=constants.js.map","import { useCallback, useEffect, useRef, useState } from 'react';\nimport OlCollection from 'ol/Collection';\nimport OlGeomCircle from 'ol/geom/Circle';\nimport OlGeomLineString from 'ol/geom/LineString';\nimport OlGeomMultiLineString from 'ol/geom/MultiLineString';\nimport OlGeomMultiPolygon from 'ol/geom/MultiPolygon';\nimport OlGeomPolygon from 'ol/geom/Polygon';\nimport OlInteractionDraw from 'ol/interaction/Draw';\nimport OlLayerVector from 'ol/layer/Vector';\nimport OlOverlay from 'ol/Overlay';\nimport OlSourceVector from 'ol/source/Vector';\nimport OlStyleCircle from 'ol/style/Circle';\nimport OlStyleFill from 'ol/style/Fill';\nimport OlStyleStroke from 'ol/style/Stroke';\nimport OlStyleStyle from 'ol/style/Style';\nimport MeasureUtil from '@terrestris/ol-util/dist/MeasureUtil/MeasureUtil';\nimport { CSS_PREFIX } from '../../constants';\nimport useMap from '../useMap/useMap';\nimport { useOlInteraction } from '../useOlInteraction/useOlInteraction';\nimport useOlLayer from '../useOlLayer/useOlLayer';\nimport useOlListener from '../useOlListener/useOlListener';\nexport const useMeasure = ({ measureType, measureLayerName = 'react-util-measure', fillColor = 'rgba(255, 0, 0, 0.5)', strokeColor = 'rgba(255, 0, 0, 0.8)', showMeasureInfoOnClickedPoints = false, showHelpTooltip = true, decimalPlacesInTooltips = 2, multipleDrawing = false, continuePolygonMsg = 'Click to draw area', continueLineMsg = 'Click to draw line', continueAngleMsg = 'Click to draw angle', clickToDrawText = 'Click to measure', measureTooltipCssClasses = {\n    tooltip: `${CSS_PREFIX}measure-tooltip`,\n    tooltipDynamic: `${CSS_PREFIX}measure-tooltip-dynamic`,\n    tooltipStatic: `${CSS_PREFIX}measure-tooltip-static`\n}, active = false, geodesic = true, measureRadius = false }) => {\n    const [feature, setFeature] = useState();\n    const measureTooltip = useRef();\n    const helpTooltip = useRef();\n    const stepMeasureTooltips = useRef([]);\n    const map = useMap();\n    const measureLayer = useOlLayer(() => new OlLayerVector({\n        properties: {\n            name: measureLayerName\n        },\n        source: new OlSourceVector({\n            features: new OlCollection()\n        }),\n        style: new OlStyleStyle({\n            fill: new OlStyleFill({\n                color: fillColor\n            }),\n            stroke: new OlStyleStroke({\n                color: strokeColor,\n                width: 2\n            }),\n            image: new OlStyleCircle({\n                radius: 7,\n                fill: new OlStyleFill({\n                    color: fillColor\n                })\n            })\n        })\n    }), [\n        measureLayerName,\n        fillColor,\n        strokeColor,\n        fillColor\n    ], active);\n    const drawInteraction = useOlInteraction(() => {\n        const getDrawType = (input) => {\n            switch (input) {\n                case 'line':\n                case 'angle':\n                    return 'MultiLineString';\n                case 'polygon':\n                    return 'MultiPolygon';\n                case 'circle':\n                    return 'Circle';\n                default:\n                    return 'MultiLineString';\n            }\n        };\n        return (new OlInteractionDraw({\n            source: measureLayer?.getSource() || undefined,\n            type: getDrawType(measureType),\n            maxPoints: measureType === 'angle' ? 2 : undefined,\n            style: new OlStyleStyle({\n                fill: new OlStyleFill({\n                    color: fillColor\n                }),\n                stroke: new OlStyleStroke({\n                    color: strokeColor,\n                    lineDash: [10, 10],\n                    width: 2\n                }),\n                image: new OlStyleCircle({\n                    radius: 5,\n                    stroke: new OlStyleStroke({\n                        color: strokeColor\n                    }),\n                    fill: new OlStyleFill({\n                        color: fillColor\n                    })\n                })\n            }),\n            freehandCondition: () => false\n        }));\n    }, [measureType, measureLayer, fillColor, strokeColor, fillColor], active);\n    const removeMeasureTooltip = useCallback(() => {\n        if (map && measureTooltip.current) {\n            map.removeOverlay(measureTooltip.current);\n            measureTooltip.current = undefined;\n        }\n    }, [map]);\n    const removeStepMeasureTooltips = useCallback(() => {\n        if (map && stepMeasureTooltips.current.length > 0) {\n            for (const overlay of stepMeasureTooltips.current) {\n                map.removeOverlay(overlay);\n            }\n            stepMeasureTooltips.current = [];\n        }\n    }, [map]);\n    const removeHelpTooltip = useCallback(() => {\n        if (map && helpTooltip.current) {\n            map.removeOverlay(helpTooltip.current);\n            helpTooltip.current = undefined;\n        }\n    }, [map]);\n    const cleanup = useCallback(() => {\n        removeMeasureTooltip();\n        removeStepMeasureTooltips();\n        removeHelpTooltip();\n        measureLayer?.getSource()?.clear();\n    }, [measureLayer, removeMeasureTooltip, removeStepMeasureTooltips, removeHelpTooltip]);\n    useEffect(() => {\n        if (active) {\n            return () => {\n                cleanup();\n            };\n        }\n        return undefined;\n    }, [active, cleanup]);\n    const createHelpTooltip = useCallback(() => {\n        if (!map || helpTooltip.current) {\n            return;\n        }\n        helpTooltip.current = new OlOverlay({\n            element: document.createElement('div'),\n            offset: [15, 0],\n            positioning: 'center-left',\n            className: measureTooltipCssClasses?.tooltip ?? ''\n        });\n        map.addOverlay(helpTooltip.current);\n    }, [map, measureTooltipCssClasses?.tooltip]);\n    const createMeasureTooltip = useCallback(() => {\n        if (!map || measureTooltip.current) {\n            return;\n        }\n        measureTooltip.current = new OlOverlay({\n            element: document.createElement('div'),\n            offset: [0, -15],\n            positioning: 'bottom-center',\n            className: measureTooltipCssClasses\n                ? `${measureTooltipCssClasses.tooltip} ${measureTooltipCssClasses.tooltipDynamic}`\n                : ''\n        });\n        map.addOverlay(measureTooltip.current);\n    }, [map, measureTooltip, measureTooltipCssClasses]);\n    const updateMeasureTooltip = useCallback(() => {\n        if (!measureTooltip.current || !feature || !map) {\n            return;\n        }\n        let output;\n        let geom = feature.getGeometry();\n        if (geom instanceof OlGeomMultiPolygon) {\n            geom = geom.getPolygons()[0];\n        }\n        else if (geom instanceof OlGeomMultiLineString) {\n            geom = geom.getLineStrings()[0];\n        }\n        let measureTooltipCoord;\n        if (geom instanceof OlGeomCircle) {\n            if (!measureRadius) {\n                output = MeasureUtil.formatArea(geom, map, decimalPlacesInTooltips, geodesic);\n            }\n            else {\n                const area = MeasureUtil.getAreaOfCircle(geom, map);\n                const decimalHelper = Math.pow(10, decimalPlacesInTooltips);\n                const radius = Math.round(geom.getRadius() * decimalHelper) / decimalHelper;\n                output = `${radius.toString()} m`;\n                if (area > (Math.PI * 1000000)) {\n                    output = (Math.round(geom.getRadius() / 1000 * decimalHelper) /\n                        decimalHelper) + ' km';\n                }\n            }\n            measureTooltipCoord = geom.getCenter();\n        }\n        else if (geom instanceof OlGeomPolygon) {\n            output = MeasureUtil.formatArea(geom, map, decimalPlacesInTooltips, geodesic);\n            // attach area at interior point\n            measureTooltipCoord = geom.getInteriorPoint().getCoordinates();\n        }\n        else if (geom instanceof OlGeomLineString) {\n            measureTooltipCoord = geom.getLastCoordinate();\n            if (measureType === 'line') {\n                output = MeasureUtil.formatLength(geom, map, decimalPlacesInTooltips, geodesic);\n            }\n            else if (measureType === 'angle') {\n                output = MeasureUtil.formatAngle(geom, 0);\n            }\n        }\n        else {\n            return;\n        }\n        const el = measureTooltip.current.getElement();\n        if (output && el) {\n            el.innerHTML = output;\n        }\n        measureTooltip.current.setPosition(measureTooltipCoord);\n    }, [decimalPlacesInTooltips, feature, geodesic, map, measureType, measureRadius]);\n    const onDrawStart = useCallback((evt) => {\n        if (!map) {\n            return;\n        }\n        if (!multipleDrawing) {\n            cleanup();\n        }\n        setFeature(evt.feature);\n    }, [cleanup, map, multipleDrawing]);\n    const addMeasureStopTooltip = useCallback((coordinate) => {\n        if (!feature || !map) {\n            return;\n        }\n        let geom = feature.getGeometry();\n        if (geom instanceof OlGeomMultiPolygon) {\n            geom = geom.getPolygons()[0];\n        }\n        if (geom instanceof OlGeomMultiLineString) {\n            geom = geom.getLineStrings()[0];\n        }\n        const value = measureType === 'line' ?\n            MeasureUtil.formatLength(geom, map, decimalPlacesInTooltips, geodesic) :\n            MeasureUtil.formatArea(geom, map, decimalPlacesInTooltips, geodesic);\n        if (parseInt(value, 10) > 0) {\n            const div = document.createElement('div');\n            if (measureTooltipCssClasses) {\n                div.className = `${measureTooltipCssClasses.tooltip} ${measureTooltipCssClasses.tooltipStatic}`;\n            }\n            div.innerHTML = value;\n            const tooltip = new OlOverlay({\n                element: div,\n                offset: [0, -15],\n                positioning: 'bottom-center'\n            });\n            map.addOverlay(tooltip);\n            tooltip.setPosition(coordinate);\n            stepMeasureTooltips.current.push(tooltip);\n        }\n    }, [decimalPlacesInTooltips, feature, geodesic, map, measureTooltipCssClasses, measureType]);\n    const onDrawEnd = useCallback((evt) => {\n        if (multipleDrawing) {\n            addMeasureStopTooltip(evt.feature.getGeometry()\n                .getLastCoordinate());\n        }\n        // TODO Recheck this\n        // Fix doubled label for lastPoint of line\n        if ((multipleDrawing || showMeasureInfoOnClickedPoints) &&\n            (measureType === 'line' || measureType === 'polygon')) {\n            removeMeasureTooltip();\n        }\n        else {\n            const el = measureTooltip.current?.getElement();\n            if (el && measureTooltipCssClasses) {\n                el.className = `${measureTooltipCssClasses.tooltip} ${measureTooltipCssClasses.tooltipStatic}`;\n            }\n            measureTooltip.current?.setOffset([0, -7]);\n        }\n        updateMeasureTooltip();\n        // unset sketch\n        setFeature(undefined);\n        // fix doubled label for last point of line\n        if ((multipleDrawing || showMeasureInfoOnClickedPoints) &&\n            (measureType === 'line' || measureType === 'polygon')) {\n            measureTooltip.current = undefined;\n            createMeasureTooltip();\n        }\n    }, [addMeasureStopTooltip, createMeasureTooltip, measureTooltipCssClasses,\n        measureType, multipleDrawing, removeMeasureTooltip, showMeasureInfoOnClickedPoints, updateMeasureTooltip]);\n    const updateHelpTooltip = useCallback((coordinate) => {\n        if (!helpTooltip.current) {\n            return;\n        }\n        const helpTooltipElement = helpTooltip.current?.getElement();\n        if (!helpTooltipElement) {\n            return;\n        }\n        let msg = clickToDrawText;\n        if (measureType === 'polygon') {\n            msg = continuePolygonMsg;\n        }\n        else if (measureType === 'line') {\n            msg = continueLineMsg;\n        }\n        else if (measureType === 'angle') {\n            msg = continueAngleMsg;\n        }\n        helpTooltipElement.innerHTML = msg ?? '';\n        helpTooltip.current.setPosition(coordinate);\n    }, [clickToDrawText, continueAngleMsg, continueLineMsg, continuePolygonMsg, helpTooltip, measureType]);\n    const onMapPointerMove = useCallback((evt) => {\n        if (!evt.dragging && active) {\n            updateHelpTooltip(evt.coordinate);\n        }\n    }, [updateHelpTooltip, active]);\n    const onMapClick = useCallback((evt) => {\n        if (showMeasureInfoOnClickedPoints && measureType === 'line') {\n            addMeasureStopTooltip(evt.coordinate);\n        }\n    }, [addMeasureStopTooltip, measureType, showMeasureInfoOnClickedPoints]);\n    useOlListener(drawInteraction, i => i.on('drawstart', (evt) => {\n        onDrawStart?.(evt);\n    }), [drawInteraction, onDrawStart]);\n    useOlListener(drawInteraction, i => i.on('drawend', (evt) => {\n        onDrawEnd?.(evt);\n    }), [drawInteraction, onDrawEnd]);\n    useOlListener(map, i => i.on('pointermove', (evt) => {\n        onMapPointerMove?.(evt);\n    }), [map, onMapPointerMove]);\n    useOlListener(map, i => i.on('click', (evt) => {\n        onMapClick?.(evt);\n    }), [map, onMapClick]);\n    useEffect(() => {\n        createMeasureTooltip();\n        if (showHelpTooltip) {\n            createHelpTooltip();\n        }\n    }, [createHelpTooltip, createMeasureTooltip, showHelpTooltip]);\n    useOlListener(feature, i => i.getGeometry()?.on('change', () => {\n        updateMeasureTooltip?.();\n    }), [feature, updateMeasureTooltip]);\n    return null;\n};\nexport default useMeasure;\n//# sourceMappingURL=useMeasure.js.map","import './MeasureButton.less';\nimport useMeasure from '@terrestris/react-util/dist/Hooks/useMeasure/useMeasure';\nimport React from 'react';\nimport { CSS_PREFIX } from '../../constants';\nimport ToggleButton from '../ToggleButton/ToggleButton';\nconst defaulClassName = `${CSS_PREFIX}measurebutton`;\nexport const MeasureButton = ({ measureType = 'line', measureLayerName = 'react-geo_measure', fillColor = 'rgba(255, 0, 0, 0.5)', strokeColor = 'rgba(255, 0, 0, 0.8)', showMeasureInfoOnClickedPoints = false, showHelpTooltip = true, decimalPlacesInTooltips = 2, multipleDrawing = false, continuePolygonMsg = 'Click to draw area', continueLineMsg = 'Click to draw line', continueAngleMsg = 'Click to draw angle', clickToDrawText = 'Click to measure', measureTooltipCssClasses = {\n    tooltip: `${CSS_PREFIX}measure-tooltip`,\n    tooltipDynamic: `${CSS_PREFIX}measure-tooltip-dynamic`,\n    tooltipStatic: `${CSS_PREFIX}measure-tooltip-static`\n}, pressed = false, geodesic = true, measureRadius = false, className, ...passThroughProps }) => {\n    useMeasure({\n        active: !!pressed,\n        measureType,\n        measureLayerName,\n        fillColor,\n        strokeColor,\n        showMeasureInfoOnClickedPoints,\n        showHelpTooltip,\n        decimalPlacesInTooltips,\n        multipleDrawing,\n        continuePolygonMsg,\n        continueLineMsg,\n        continueAngleMsg,\n        clickToDrawText,\n        measureTooltipCssClasses,\n        geodesic,\n        measureRadius\n    });\n    const finalClassName = className\n        ? `${className} ${defaulClassName}`\n        : defaulClassName;\n    return (React.createElement(ToggleButton, { pressed: pressed, className: finalClassName, ...passThroughProps }));\n};\nexport default MeasureButton;\n//# sourceMappingURL=MeasureButton.js.map","import './ToggleButton.less';\nimport { Button, Tooltip } from 'antd';\nimport React from 'react';\nimport { CSS_PREFIX } from '../../constants';\nexport const ToggleButton = ({ type = 'primary', pressed = false, tooltipProps = {\n    mouseEnterDelay: 1.5\n}, className, tooltip, tooltipPlacement, pressedIcon, icon, children, value, onClick, onChange = () => { }, ...passThroughProps }) => {\n    const handleChange = (evt) => {\n        if (onClick) {\n            onClick(evt);\n            if (evt.defaultPrevented) {\n                return;\n            }\n        }\n        onChange(evt, value);\n    };\n    const internalClassName = `${CSS_PREFIX}togglebutton`;\n    const finalClassName = className\n        ? `${className} ${internalClassName}`\n        : internalClassName;\n    let pressedClass = '';\n    if (pressed) {\n        pressedClass = ' btn-pressed';\n    }\n    return (React.createElement(Tooltip, { title: tooltip, placement: tooltipPlacement, ...tooltipProps },\n        React.createElement(Button, { type: type, onClick: handleChange, onChange: onChange, className: `${finalClassName}${pressedClass}`, \"aria-pressed\": pressed, icon: pressed ?\n                pressedIcon :\n                icon, ...passThroughProps }, children)));\n};\nexport default ToggleButton;\n//# sourceMappingURL=ToggleButton.js.map","const CSS_PREFIX = 'react-geo-';\nexport { CSS_PREFIX };\n//# sourceMappingURL=constants.js.map","import { useEffect, useState } from 'react';\nimport { isNil } from 'lodash';\nimport useMap from '../useMap/useMap';\n/**\n * This hook adds an interaction to the map and removes/updates it if the dependency array changes.\n * It accepts an optional active parameter that toggles the active state of the interaction. If it is undefined the\n * active state will not get changed.\n * @param constructor returns an interaction to be added to the map, will be called again, if the interaction needs\n * to be updated\n * @param dependencies\n * @param active\n */\nexport const useOlInteraction = (constructor, dependencies, active) => {\n    const map = useMap();\n    const [interaction, setInteraction] = useState();\n    useEffect(() => {\n        if (!map) {\n            return undefined;\n        }\n        const newInteraction = constructor();\n        if (!newInteraction) {\n            return undefined;\n        }\n        setInteraction(newInteraction);\n        map.addInteraction(newInteraction);\n        return () => {\n            map.removeInteraction(newInteraction);\n            setInteraction(undefined);\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [...dependencies, map]);\n    useEffect(() => {\n        if (!interaction || isNil(active)) {\n            return;\n        }\n        interaction.setActive(active);\n    }, [interaction, active]);\n    return interaction;\n};\nexport default useOlInteraction;\n//# sourceMappingURL=useOlInteraction.js.map","import { useEffect, useState } from 'react';\nimport { isNil } from 'lodash';\nimport useMap from '../useMap/useMap';\n/**\n * This hook adds a layer to the map and removes/updates it if the dependency array changes.\n * It accepts an optional visible parameter that toggles the visible state of the layer. If it is undefined the\n * visible state will not get changed.\n * @param constructor returns a layer to be added to the map, will be called again, if the layer needs\n * to be updated\n * @param dependencies\n * @param visible\n */\nexport const useOlLayer = (constructor, dependencies, visible) => {\n    const map = useMap();\n    const [layer, setLayer] = useState();\n    useEffect(() => {\n        if (!map) {\n            return undefined;\n        }\n        const newLayer = constructor();\n        if (!newLayer) {\n            return undefined;\n        }\n        map.addLayer(newLayer);\n        setLayer(newLayer);\n        return () => {\n            map.removeLayer(newLayer);\n            setLayer(undefined);\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [map, ...dependencies]);\n    useEffect(() => {\n        if (!layer || isNil(visible)) {\n            return;\n        }\n        layer.setVisible(visible);\n    }, [layer, visible]);\n    return layer;\n};\nexport default useOlLayer;\n//# sourceMappingURL=useOlLayer.js.map","import { useEffect } from 'react';\nimport { unByKey } from 'ol/Observable';\n/**\n * This hook unregisters listeners if the dependency array changes\n */\nexport const useOlListener = (observable, observe, dependencies, active) => {\n    useEffect(() => {\n        if (!observable || active === false) {\n            return undefined;\n        }\n        const observables = Array.isArray(observable) ? observable : [observable];\n        const keys = observables\n            .flatMap(o => {\n            const k = observe(o);\n            return Array.isArray(k) ? k : [k];\n        })\n            .filter(k => k !== undefined);\n        return () => {\n            for (const key of keys) {\n                unByKey(key);\n            }\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [observable, active, observe, ...dependencies]);\n};\nexport default useOlListener;\n//# sourceMappingURL=useOlListener.js.map"],"names":["Math","NaN","a","o","n","O","document","e","parseInt","c","l","Array"],"mappings":"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"}