{"version":3,"file":"1313.0456eb7712f86d6c.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/ol/MapEventType.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/Object.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/ObjectEventType.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/Observable.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/control/Control.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/control/MousePosition.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/events.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/pointer/EventType.js"],"sourcesContent":["/**\n * @module ol/MapEventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  /**\n   * Triggered after a map frame is rendered.\n   * @event module:ol/MapEvent~MapEvent#postrender\n   * @api\n   */\n  POSTRENDER: 'postrender',\n\n  /**\n   * Triggered when the map starts moving.\n   * @event module:ol/MapEvent~MapEvent#movestart\n   * @api\n   */\n  MOVESTART: 'movestart',\n\n  /**\n   * Triggered after the map is moved.\n   * @event module:ol/MapEvent~MapEvent#moveend\n   * @api\n   */\n  MOVEEND: 'moveend',\n\n  /**\n   * Triggered when loading of additional map data (tiles, images, features) starts.\n   * @event module:ol/MapEvent~MapEvent#loadstart\n   * @api\n   */\n  LOADSTART: 'loadstart',\n\n  /**\n   * Triggered when loading of additional map data has completed.\n   * @event module:ol/MapEvent~MapEvent#loadend\n   * @api\n   */\n  LOADEND: 'loadend',\n};\n\n/***\n * @typedef {'postrender'|'movestart'|'moveend'|'loadstart'|'loadend'} Types\n */\n","/**\n * @module ol/Object\n */\nimport ObjectEventType from './ObjectEventType.js';\nimport Observable from './Observable.js';\nimport Event from './events/Event.js';\nimport {isEmpty} from './obj.js';\nimport {getUid} from './util.js';\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/Object~BaseObject} instances are instances of this type.\n */\nexport class ObjectEvent extends Event {\n  /**\n   * @param {string} type The event type.\n   * @param {string} key The property name.\n   * @param {*} oldValue The old value for `key`.\n   */\n  constructor(type, key, oldValue) {\n    super(type);\n\n    /**\n     * The name of the property whose value is changing.\n     * @type {string}\n     * @api\n     */\n    this.key = key;\n\n    /**\n     * The old value. To get the new value use `e.target.get(e.key)` where\n     * `e` is the event object.\n     * @type {*}\n     * @api\n     */\n    this.oldValue = oldValue;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types, ObjectEvent, Return> &\n *    import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types, Return>} ObjectOnSignature\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Most non-trivial classes inherit from this.\n *\n * This extends {@link module:ol/Observable~Observable} with observable\n * properties, where each property is observable as well as the object as a\n * whole.\n *\n * Classes that inherit from this have pre-defined properties, to which you can\n * add your owns. The pre-defined properties are listed in this documentation as\n * 'Observable Properties', and have their own accessors; for example,\n * {@link module:ol/Map~Map} has a `target` property, accessed with\n * `getTarget()` and changed with `setTarget()`. Not all properties are however\n * settable. There are also general-purpose accessors `get()` and `set()`. For\n * example, `get('target')` is equivalent to `getTarget()`.\n *\n * The `set` accessors trigger a change event, and you can monitor this by\n * registering a listener. For example, {@link module:ol/View~View} has a\n * `center` property, so `view.on('change:center', function(evt) {...});` would\n * call the function whenever the value of the center property changes. Within\n * the function, `evt.target` would be the view, so `evt.target.getCenter()`\n * would return the new center.\n *\n * You can add your own observable properties with\n * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.\n * You can listen for changes on that property value with\n * `object.on('change:prop', listener)`. You can get a list of all\n * properties with {@link module:ol/Object~BaseObject#getProperties}.\n *\n * Note that the observable properties are separate from standard JS properties.\n * You can, for example, give your map object a title with\n * `map.title='New title'` and with `map.set('title', 'Another title')`. The\n * first will be a `hasOwnProperty`; the second will appear in\n * `getProperties()`. Only the second is observable.\n *\n * Properties can be deleted by using the unset method. E.g.\n * object.unset('foo').\n *\n * @fires ObjectEvent\n * @api\n */\nclass BaseObject extends Observable {\n  /**\n   * @param {Object<string, *>} [values] An object with key-value pairs.\n   */\n  constructor(values) {\n    super();\n\n    /***\n     * @type {ObjectOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {ObjectOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {ObjectOnSignature<void>}\n     */\n    this.un;\n\n    // Call {@link module:ol/util.getUid} to ensure that the order of objects' ids is\n    // the same as the order in which they were created.  This also helps to\n    // ensure that object properties are always added in the same order, which\n    // helps many JavaScript engines generate faster code.\n    getUid(this);\n\n    /**\n     * @private\n     * @type {Object<string, *>|null}\n     */\n    this.values_ = null;\n\n    if (values !== undefined) {\n      this.setProperties(values);\n    }\n  }\n\n  /**\n   * Gets a value.\n   * @param {string} key Key name.\n   * @return {*} Value.\n   * @api\n   */\n  get(key) {\n    let value;\n    if (this.values_ && this.values_.hasOwnProperty(key)) {\n      value = this.values_[key];\n    }\n    return value;\n  }\n\n  /**\n   * Get a list of object property names.\n   * @return {Array<string>} List of property names.\n   * @api\n   */\n  getKeys() {\n    return (this.values_ && Object.keys(this.values_)) || [];\n  }\n\n  /**\n   * Get an object of all property names and values.\n   * @return {Object<string, *>} Object.\n   * @api\n   */\n  getProperties() {\n    return (this.values_ && Object.assign({}, this.values_)) || {};\n  }\n\n  /**\n   * Get an object of all property names and values.\n   * @return {Object<string, *>?} Object.\n   */\n  getPropertiesInternal() {\n    return this.values_;\n  }\n\n  /**\n   * @return {boolean} The object has properties.\n   */\n  hasProperties() {\n    return !!this.values_;\n  }\n\n  /**\n   * @param {string} key Key name.\n   * @param {*} oldValue Old value.\n   */\n  notify(key, oldValue) {\n    let eventType;\n    eventType = `change:${key}`;\n    if (this.hasListener(eventType)) {\n      this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n    }\n    eventType = ObjectEventType.PROPERTYCHANGE;\n    if (this.hasListener(eventType)) {\n      this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n    }\n  }\n\n  /**\n   * @param {string} key Key name.\n   * @param {import(\"./events.js\").Listener} listener Listener.\n   */\n  addChangeListener(key, listener) {\n    this.addEventListener(`change:${key}`, listener);\n  }\n\n  /**\n   * @param {string} key Key name.\n   * @param {import(\"./events.js\").Listener} listener Listener.\n   */\n  removeChangeListener(key, listener) {\n    this.removeEventListener(`change:${key}`, listener);\n  }\n\n  /**\n   * Sets a value.\n   * @param {string} key Key name.\n   * @param {*} value Value.\n   * @param {boolean} [silent] Update without triggering an event.\n   * @api\n   */\n  set(key, value, silent) {\n    const values = this.values_ || (this.values_ = {});\n    if (silent) {\n      values[key] = value;\n    } else {\n      const oldValue = values[key];\n      values[key] = value;\n      if (oldValue !== value) {\n        this.notify(key, oldValue);\n      }\n    }\n  }\n\n  /**\n   * Sets a collection of key-value pairs.  Note that this changes any existing\n   * properties and adds new ones (it does not remove any existing properties).\n   * @param {Object<string, *>} values Values.\n   * @param {boolean} [silent] Update without triggering an event.\n   * @api\n   */\n  setProperties(values, silent) {\n    for (const key in values) {\n      this.set(key, values[key], silent);\n    }\n  }\n\n  /**\n   * Apply any properties from another object without triggering events.\n   * @param {BaseObject} source The source object.\n   * @protected\n   */\n  applyProperties(source) {\n    if (!source.values_) {\n      return;\n    }\n    Object.assign(this.values_ || (this.values_ = {}), source.values_);\n  }\n\n  /**\n   * Unsets a property.\n   * @param {string} key Key name.\n   * @param {boolean} [silent] Unset without triggering an event.\n   * @api\n   */\n  unset(key, silent) {\n    if (this.values_ && key in this.values_) {\n      const oldValue = this.values_[key];\n      delete this.values_[key];\n      if (isEmpty(this.values_)) {\n        this.values_ = null;\n      }\n      if (!silent) {\n        this.notify(key, oldValue);\n      }\n    }\n  }\n}\n\nexport default BaseObject;\n","/**\n * @module ol/ObjectEventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  /**\n   * Triggered when a property is changed.\n   * @event module:ol/Object.ObjectEvent#propertychange\n   * @api\n   */\n  PROPERTYCHANGE: 'propertychange',\n};\n\n/**\n * @typedef {'propertychange'} Types\n */\n","/**\n * @module ol/Observable\n */\nimport EventType from './events/EventType.js';\nimport EventTarget from './events/Target.js';\nimport {listen, listenOnce, unlistenByKey} from './events.js';\n\n/***\n * @template {string} Type\n * @template {Event|import(\"./events/Event.js\").default} EventClass\n * @template Return\n * @typedef {(type: Type, listener: (event: EventClass) => ?) => Return} OnSignature\n */\n\n/***\n * @template {string} Type\n * @template Return\n * @typedef {(type: Type[], listener: (event: Event|import(\"./events/Event\").default) => ?) => Return extends void ? void : Return[]} CombinedOnSignature\n */\n\n/**\n * @typedef {'change'|'error'} EventTypes\n */\n\n/***\n * @template Return\n * @typedef {OnSignature<EventTypes, import(\"./events/Event.js\").default, Return> & CombinedOnSignature<EventTypes, Return>} ObservableOnSignature\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * An event target providing convenient methods for listener registration\n * and unregistration. A generic `change` event is always available through\n * {@link module:ol/Observable~Observable#changed}.\n *\n * @fires import(\"./events/Event.js\").default\n * @api\n */\nclass Observable extends EventTarget {\n  constructor() {\n    super();\n\n    this.on =\n      /** @type {ObservableOnSignature<import(\"./events\").EventsKey>} */ (\n        this.onInternal\n      );\n\n    this.once =\n      /** @type {ObservableOnSignature<import(\"./events\").EventsKey>} */ (\n        this.onceInternal\n      );\n\n    this.un = /** @type {ObservableOnSignature<void>} */ (this.unInternal);\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.revision_ = 0;\n  }\n\n  /**\n   * Increases the revision counter and dispatches a 'change' event.\n   * @api\n   */\n  changed() {\n    ++this.revision_;\n    this.dispatchEvent(EventType.CHANGE);\n  }\n\n  /**\n   * Get the version number for this object.  Each time the object is modified,\n   * its version number will be incremented.\n   * @return {number} Revision.\n   * @api\n   */\n  getRevision() {\n    return this.revision_;\n  }\n\n  /**\n   * @param {string|Array<string>} type Type.\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Event key.\n   * @protected\n   */\n  onInternal(type, listener) {\n    if (Array.isArray(type)) {\n      const len = type.length;\n      const keys = new Array(len);\n      for (let i = 0; i < len; ++i) {\n        keys[i] = listen(this, type[i], listener);\n      }\n      return keys;\n    }\n    return listen(this, /** @type {string} */ (type), listener);\n  }\n\n  /**\n   * @param {string|Array<string>} type Type.\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Event key.\n   * @protected\n   */\n  onceInternal(type, listener) {\n    let key;\n    if (Array.isArray(type)) {\n      const len = type.length;\n      key = new Array(len);\n      for (let i = 0; i < len; ++i) {\n        key[i] = listenOnce(this, type[i], listener);\n      }\n    } else {\n      key = listenOnce(this, /** @type {string} */ (type), listener);\n    }\n    /** @type {Object} */ (listener).ol_key = key;\n    return key;\n  }\n\n  /**\n   * Unlisten for a certain type of event.\n   * @param {string|Array<string>} type Type.\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\n   * @protected\n   */\n  unInternal(type, listener) {\n    const key = /** @type {Object} */ (listener).ol_key;\n    if (key) {\n      unByKey(key);\n    } else if (Array.isArray(type)) {\n      for (let i = 0, ii = type.length; i < ii; ++i) {\n        this.removeEventListener(type[i], listener);\n      }\n    } else {\n      this.removeEventListener(type, listener);\n    }\n  }\n}\n\n/**\n * Listen for a certain type of event.\n * @function\n * @param {string|Array<string>} type The event type or array of event types.\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\n * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n *     called with an array of event types as the first argument, the return\n *     will be an array of keys.\n * @api\n */\nObservable.prototype.on;\n\n/**\n * Listen once for a certain type of event.\n * @function\n * @param {string|Array<string>} type The event type or array of event types.\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\n * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n *     called with an array of event types as the first argument, the return\n *     will be an array of keys.\n * @api\n */\nObservable.prototype.once;\n\n/**\n * Unlisten for a certain type of event.\n * @function\n * @param {string|Array<string>} type The event type or array of event types.\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\n * @api\n */\nObservable.prototype.un;\n\n/**\n * Removes an event listener using the key returned by `on()` or `once()`.\n * @param {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} key The key returned by `on()`\n *     or `once()` (or an array of keys).\n * @api\n */\nexport function unByKey(key) {\n  if (Array.isArray(key)) {\n    for (let i = 0, ii = key.length; i < ii; ++i) {\n      unlistenByKey(key[i]);\n    }\n  } else {\n    unlistenByKey(/** @type {import(\"./events.js\").EventsKey} */ (key));\n  }\n}\n\nexport default Observable;\n","/**\n * @module ol/control/Control\n */\nimport MapEventType from '../MapEventType.js';\nimport BaseObject from '../Object.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport {VOID} from '../functions.js';\n\n/**\n * @typedef {Object} Options\n * @property {HTMLElement} [element] The element is the control's\n * container element. This only needs to be specified if you're developing\n * a custom control.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n * @property {HTMLElement|string} [target] Specify a target if you want\n * the control to be rendered outside of the map's viewport.\n */\n\n/**\n * @classdesc\n * A control is a visible widget with a DOM element in a fixed position on the\n * screen. They can involve user input (buttons), or be informational only;\n * the position is determined using CSS. By default these are placed in the\n * container with CSS class name `ol-overlaycontainer-stopevent`, but can use\n * any outside DOM element.\n *\n * This is the base class for controls. You can use it for simple custom\n * controls by creating the element with listeners, creating an instance:\n * ```js\n * const myControl = new Control({element: myElement});\n * ```\n * and then adding this to the map.\n *\n * The main advantage of having this as a control rather than a simple separate\n * DOM element is that preventing propagation is handled for you. Controls\n * will also be objects in a {@link module:ol/Collection~Collection}, so you can use their methods.\n *\n * You can also extend this base for your own control class. See\n * examples/custom-controls for an example of how to do this.\n *\n * @api\n */\nclass Control extends BaseObject {\n  /**\n   * @param {Options} options Control options.\n   */\n  constructor(options) {\n    super();\n\n    const element = options.element;\n    if (element && !options.target && !element.style.pointerEvents) {\n      element.style.pointerEvents = 'auto';\n    }\n\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n    this.element = element ? element : null;\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this.target_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../Map.js\").default|null}\n     */\n    this.map_ = null;\n\n    /**\n     * @protected\n     * @type {!Array<import(\"../events.js\").EventsKey>}\n     */\n    this.listenerKeys = [];\n\n    if (options.render) {\n      this.render = options.render;\n    }\n\n    if (options.target) {\n      this.setTarget(options.target);\n    }\n  }\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    this.element?.remove();\n    super.disposeInternal();\n  }\n\n  /**\n   * Get the map associated with this control.\n   * @return {import(\"../Map.js\").default|null} Map.\n   * @api\n   */\n  getMap() {\n    return this.map_;\n  }\n\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   * @api\n   */\n  setMap(map) {\n    if (this.map_) {\n      this.element?.remove();\n    }\n    for (let i = 0, ii = this.listenerKeys.length; i < ii; ++i) {\n      unlistenByKey(this.listenerKeys[i]);\n    }\n    this.listenerKeys.length = 0;\n    this.map_ = map;\n    if (map) {\n      const target = this.target_ ?? map.getOverlayContainerStopEvent();\n      if (this.element) {\n        target.appendChild(this.element);\n      }\n      if (this.render !== VOID) {\n        this.listenerKeys.push(\n          listen(map, MapEventType.POSTRENDER, this.render, this),\n        );\n      }\n      map.render();\n    }\n  }\n\n  /**\n   * Renders the control.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @api\n   */\n  render(mapEvent) {}\n\n  /**\n   * This function is used to set a target element for the control. It has no\n   * effect if it is called after the control has been added to the map (i.e.\n   * after `setMap` is called on the control). If no `target` is set in the\n   * options passed to the control constructor and if `setTarget` is not called\n   * then the control is added to the map's overlay container.\n   * @param {HTMLElement|string} target Target.\n   * @api\n   */\n  setTarget(target) {\n    this.target_ =\n      typeof target === 'string' ? document.getElementById(target) : target;\n  }\n}\n\nexport default Control;\n","/**\n * @module ol/control/MousePosition\n */\n\nimport {wrapX} from '../coordinate.js';\nimport {listen} from '../events.js';\nimport EventType from '../pointer/EventType.js';\nimport {\n  get as getProjection,\n  getTransformFromProjections,\n  getUserProjection,\n  identityTransform,\n} from '../proj.js';\nimport Control from './Control.js';\n\n/**\n * @type {string}\n */\nconst PROJECTION = 'projection';\n\n/**\n * @type {string}\n */\nconst COORDINATE_FORMAT = 'coordinateFormat';\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:coordinateFormat'|'change:projection', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:coordinateFormat'|'change:projection', Return>} MousePositionOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-mouse-position'] CSS class name.\n * @property {import(\"../coordinate.js\").CoordinateFormat} [coordinateFormat] Coordinate format.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the\n * control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n * @property {HTMLElement|string} [target] Specify a target if you want the\n * control to be rendered outside of the map's viewport.\n * @property {string} [placeholder] Markup to show when the mouse position is not\n * available (e.g. when the pointer leaves the map viewport).  By default, a non-breaking space is rendered\n * initially and the last position is retained when the mouse leaves the viewport.\n * When a string is provided (e.g. `'no position'` or `''` for an empty string) it is used as a\n * placeholder.\n * @property {boolean} [wrapX=true] Wrap the world horizontally on the projection's antimeridian, if it\n * is a global projection.\n */\n\n/**\n * @classdesc\n * A control to show the 2D coordinates of the mouse cursor. By default, these\n * are in the view projection, but can be in any supported projection.\n * By default the control is shown in the top right corner of the map, but this\n * can be changed by using the css selector `.ol-mouse-position`.\n *\n * On touch devices, which usually do not have a mouse cursor, the coordinates\n * of the currently touched position are shown.\n *\n * @api\n */\nclass MousePosition extends Control {\n  /**\n   * @param {Options} [options] Mouse position options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    const element = document.createElement('div');\n    element.className =\n      options.className !== undefined ? options.className : 'ol-mouse-position';\n\n    super({\n      element: element,\n      render: options.render,\n      target: options.target,\n    });\n\n    /***\n     * @type {MousePositionOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {MousePositionOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {MousePositionOnSignature<void>}\n     */\n    this.un;\n\n    this.addChangeListener(PROJECTION, this.handleProjectionChanged_);\n\n    if (options.coordinateFormat) {\n      this.setCoordinateFormat(options.coordinateFormat);\n    }\n    if (options.projection) {\n      this.setProjection(options.projection);\n    }\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderOnMouseOut_ = options.placeholder !== undefined;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.placeholder_ = this.renderOnMouseOut_ ? options.placeholder : '&#160;';\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.renderedHTML_ = element.innerHTML;\n\n    /**\n     * @private\n     * @type {?import(\"../proj/Projection.js\").default}\n     */\n    this.mapProjection_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../proj.js\").TransformFunction}\n     */\n    this.transform_ = null;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.wrapX_ = options.wrapX === false ? false : true;\n  }\n\n  /**\n   * @private\n   */\n  handleProjectionChanged_() {\n    this.transform_ = null;\n  }\n\n  /**\n   * Return the coordinate format type used to render the current position or\n   * undefined.\n   * @return {import(\"../coordinate.js\").CoordinateFormat|undefined} The format to render the current\n   *     position in.\n   * @observable\n   * @api\n   */\n  getCoordinateFormat() {\n    return /** @type {import(\"../coordinate.js\").CoordinateFormat|undefined} */ (\n      this.get(COORDINATE_FORMAT)\n    );\n  }\n\n  /**\n   * Return the projection that is used to report the mouse position.\n   * @return {import(\"../proj/Projection.js\").default|undefined} The projection to report mouse\n   *     position in.\n   * @observable\n   * @api\n   */\n  getProjection() {\n    return /** @type {import(\"../proj/Projection.js\").default|undefined} */ (\n      this.get(PROJECTION)\n    );\n  }\n\n  /**\n   * @param {MouseEvent} event Browser event.\n   * @protected\n   */\n  handleMouseMove(event) {\n    const map = this.getMap();\n    this.updateHTML_(map.getEventPixel(event));\n  }\n\n  /**\n   * @param {Event} event Browser event.\n   * @protected\n   */\n  handleMouseOut(event) {\n    this.updateHTML_(null);\n  }\n\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   * @api\n   * @override\n   */\n  setMap(map) {\n    super.setMap(map);\n    if (map) {\n      const viewport = map.getViewport();\n      this.listenerKeys.push(\n        listen(viewport, EventType.POINTERMOVE, this.handleMouseMove, this),\n      );\n      if (this.renderOnMouseOut_) {\n        this.listenerKeys.push(\n          listen(viewport, EventType.POINTEROUT, this.handleMouseOut, this),\n        );\n      }\n      this.updateHTML_(null);\n    }\n  }\n\n  /**\n   * Set the coordinate format type used to render the current position.\n   * @param {import(\"../coordinate.js\").CoordinateFormat} format The format to render the current\n   *     position in.\n   * @observable\n   * @api\n   */\n  setCoordinateFormat(format) {\n    this.set(COORDINATE_FORMAT, format);\n  }\n\n  /**\n   * Set the projection that is used to report the mouse position.\n   * @param {import(\"../proj.js\").ProjectionLike} projection The projection to report mouse\n   *     position in.\n   * @observable\n   * @api\n   */\n  setProjection(projection) {\n    this.set(PROJECTION, getProjection(projection));\n  }\n\n  /**\n   * @param {?import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @private\n   */\n  updateHTML_(pixel) {\n    let html = this.placeholder_;\n    if (pixel && this.mapProjection_) {\n      if (!this.transform_) {\n        const projection = this.getProjection();\n        if (projection) {\n          this.transform_ = getTransformFromProjections(\n            this.mapProjection_,\n            projection,\n          );\n        } else {\n          this.transform_ = identityTransform;\n        }\n      }\n      const map = this.getMap();\n      const coordinate = map.getCoordinateFromPixelInternal(pixel);\n      if (coordinate) {\n        const userProjection = getUserProjection();\n        if (userProjection) {\n          this.transform_ = getTransformFromProjections(\n            this.mapProjection_,\n            userProjection,\n          );\n        }\n        this.transform_(coordinate, coordinate);\n        if (this.wrapX_) {\n          const projection =\n            userProjection || this.getProjection() || this.mapProjection_;\n          wrapX(coordinate, projection);\n        }\n        const coordinateFormat = this.getCoordinateFormat();\n        if (coordinateFormat) {\n          html = coordinateFormat(coordinate);\n        } else {\n          html = coordinate.toString();\n        }\n      }\n    }\n    if (!this.renderedHTML_ || html !== this.renderedHTML_) {\n      this.element.innerHTML = html;\n      this.renderedHTML_ = html;\n    }\n  }\n\n  /**\n   * Update the projection. Rendering of the coordinates is done in\n   * `handleMouseMove` and `handleMouseUp`.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n  render(mapEvent) {\n    const frameState = mapEvent.frameState;\n    if (!frameState) {\n      this.mapProjection_ = null;\n    } else {\n      if (this.mapProjection_ != frameState.viewState.projection) {\n        this.mapProjection_ = frameState.viewState.projection;\n        this.transform_ = null;\n      }\n    }\n  }\n}\n\nexport default MousePosition;\n","/**\n * @module ol/events\n */\nimport {clear} from './obj.js';\n\n/**\n * Key to use with {@link module:ol/Observable.unByKey}.\n * @typedef {Object} EventsKey\n * @property {ListenerFunction} listener Listener.\n * @property {import(\"./events/Target.js\").EventTargetLike} target Target.\n * @property {string} type Type.\n * @api\n */\n\n/**\n * Listener function. This function is called with an event object as argument.\n * When the function returns `false`, event propagation will stop.\n *\n * @typedef {function((Event|import(\"./events/Event.js\").default)): (void|boolean)} ListenerFunction\n * @api\n */\n\n/**\n * @typedef {Object} ListenerObject\n * @property {ListenerFunction} handleEvent HandleEvent listener function.\n */\n\n/**\n * @typedef {ListenerFunction|ListenerObject} Listener\n */\n\n/**\n * Registers an event listener on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * This function efficiently binds a `listener` to a `this` object, and returns\n * a key for use with {@link module:ol/events.unlistenByKey}.\n *\n * @param {import(\"./events/Target.js\").EventTargetLike} target Event target.\n * @param {string} type Event type.\n * @param {ListenerFunction} listener Listener.\n * @param {Object} [thisArg] Object referenced by the `this` keyword in the\n *     listener. Default is the `target`.\n * @param {boolean} [once] If true, add the listener as one-off listener.\n * @return {EventsKey} Unique key for the listener.\n */\nexport function listen(target, type, listener, thisArg, once) {\n  if (once) {\n    const originalListener = listener;\n    /**\n     * @param {Event|import('./events/Event.js').default} event The event\n     * @return {void|boolean} When the function returns `false`, event propagation will stop.\n     * @this {typeof target}\n     */\n    listener = function (event) {\n      target.removeEventListener(type, listener);\n      return originalListener.call(thisArg ?? this, event);\n    };\n  } else if (thisArg && thisArg !== target) {\n    listener = listener.bind(thisArg);\n  }\n  const eventsKey = {\n    target: target,\n    type: type,\n    listener: listener,\n  };\n  target.addEventListener(type, listener);\n  return eventsKey;\n}\n\n/**\n * Registers a one-off event listener on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * This function efficiently binds a `listener` as self-unregistering listener\n * to a `this` object, and returns a key for use with\n * {@link module:ol/events.unlistenByKey} in case the listener needs to be\n * unregistered before it is called.\n *\n * When {@link module:ol/events.listen} is called with the same arguments after this\n * function, the self-unregistering listener will be turned into a permanent\n * listener.\n *\n * @param {import(\"./events/Target.js\").EventTargetLike} target Event target.\n * @param {string} type Event type.\n * @param {ListenerFunction} listener Listener.\n * @param {Object} [thisArg] Object referenced by the `this` keyword in the\n *     listener. Default is the `target`.\n * @return {EventsKey} Key for unlistenByKey.\n */\nexport function listenOnce(target, type, listener, thisArg) {\n  return listen(target, type, listener, thisArg, true);\n}\n\n/**\n * Unregisters event listeners on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * The argument passed to this function is the key returned from\n * {@link module:ol/events.listen} or {@link module:ol/events.listenOnce}.\n *\n * @param {EventsKey} key The key.\n */\nexport function unlistenByKey(key) {\n  if (key && key.target) {\n    key.target.removeEventListener(key.type, key.listener);\n    clear(key);\n  }\n}\n","/**\n * @module ol/pointer/EventType\n */\n\n/**\n * Constants for event names.\n * @enum {string}\n */\nexport default {\n  POINTERMOVE: 'pointermove',\n  POINTERDOWN: 'pointerdown',\n  POINTERUP: 'pointerup',\n  POINTEROVER: 'pointerover',\n  POINTEROUT: 'pointerout',\n  POINTERENTER: 'pointerenter',\n  POINTERLEAVE: 'pointerleave',\n  POINTERCANCEL: 'pointercancel',\n};\n"],"names":["Object","s","Array","t","document","e"],"mappings":"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"}