{"version":3,"file":"9096.aa79954c2f214126.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-geo/dist/Button/DeleteButton/DeleteButton.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-geo/dist/Button/ToggleButton/ToggleButton.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-geo/dist/constants.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-util/dist/Context/MapContext/MapContext.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-util/dist/Hooks/useMap/useMap.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-util/dist/Hooks/useOlInteraction/useOlInteraction.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-util/dist/Hooks/useOlListener/useOlListener.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-util/dist/Hooks/usePropOrDefault/usePropOrDefault.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-util/dist/Hooks/useSelectFeatures/useSelectFeatures.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-util/dist/Util/DigitizeUtil.js"],"sourcesContent":["import useMap from '@terrestris/react-util/dist/Hooks/useMap/useMap';\nimport { usePropOrDefault } from '@terrestris/react-util/dist/Hooks/usePropOrDefault/usePropOrDefault';\nimport { useSelectFeatures } from '@terrestris/react-util/dist/Hooks/useSelectFeatures/useSelectFeatures';\nimport { DigitizeUtil } from '@terrestris/react-util/dist/Util/DigitizeUtil';\nimport * as React from 'react';\nimport { useCallback, useMemo } from 'react';\nimport { CSS_PREFIX } from '../../constants';\nimport ToggleButton from '../ToggleButton/ToggleButton';\n/**\n * The className added to this component.\n */\nconst defaultClassName = `${CSS_PREFIX}deletebutton`;\nexport const DeleteButton = ({ className, digitizeLayer, onFeatureRemove, selectStyle, selectInteractionConfig, hitTolerance, pressed, ...passThroughProps }) => {\n    const map = useMap();\n    const layer = usePropOrDefault(digitizeLayer, () => map ? DigitizeUtil.getDigitizeLayer(map) : undefined, [map]);\n    const layers = useMemo(() => layer ? [layer] : [], [layer]);\n    const onFeatureSelect = useCallback((event) => {\n        if (!layer) {\n            return;\n        }\n        onFeatureRemove?.(event);\n        const feat = event.selected[0];\n        layer.getSource()?.removeFeature(feat);\n    }, [layer, onFeatureRemove]);\n    useSelectFeatures({\n        selectStyle,\n        selectInteractionConfig,\n        layers,\n        active: !!pressed,\n        hitTolerance,\n        onFeatureSelect,\n        clearAfterSelect: true\n    });\n    const finalClassName = className\n        ? `${defaultClassName} ${className}`\n        : defaultClassName;\n    return (React.createElement(ToggleButton, { pressed: pressed, className: finalClassName, ...passThroughProps }));\n};\nexport default DeleteButton;\n//# sourceMappingURL=DeleteButton.js.map","import './ToggleButton.less';\nimport { Button, Tooltip } from 'antd';\nimport React from 'react';\nimport { CSS_PREFIX } from '../../constants';\nexport const ToggleButton = ({ type = 'primary', pressed = false, tooltipProps = {\n    mouseEnterDelay: 1.5\n}, className, tooltip, tooltipPlacement, pressedIcon, icon, children, value, onClick, onChange = () => { }, ...passThroughProps }) => {\n    const handleChange = (evt) => {\n        if (onClick) {\n            onClick(evt);\n            if (evt.defaultPrevented) {\n                return;\n            }\n        }\n        onChange(evt, value);\n    };\n    const internalClassName = `${CSS_PREFIX}togglebutton`;\n    const finalClassName = className\n        ? `${className} ${internalClassName}`\n        : internalClassName;\n    let pressedClass = '';\n    if (pressed) {\n        pressedClass = ' btn-pressed';\n    }\n    return (React.createElement(Tooltip, { title: tooltip, placement: tooltipPlacement, ...tooltipProps },\n        React.createElement(Button, { type: type, onClick: handleChange, onChange: onChange, className: `${finalClassName}${pressedClass}`, \"aria-pressed\": pressed, icon: pressed ?\n                pressedIcon :\n                icon, ...passThroughProps }, children)));\n};\nexport default ToggleButton;\n//# sourceMappingURL=ToggleButton.js.map","const CSS_PREFIX = 'react-geo-';\nexport { CSS_PREFIX };\n//# sourceMappingURL=constants.js.map","import React from 'react';\nconst MapContext = React.createContext(null);\nexport default MapContext;\n//# sourceMappingURL=MapContext.js.map","import { useContext } from 'react';\nimport MapContext from '../../Context/MapContext/MapContext';\nexport const useMap = () => {\n    return useContext(MapContext);\n};\nexport default useMap;\n//# sourceMappingURL=useMap.js.map","import { useEffect, useState } from 'react';\nimport { isNil } from 'lodash';\nimport useMap from '../useMap/useMap';\n/**\n * This hook adds an interaction to the map and removes/updates it if the dependency array changes.\n * It accepts an optional active parameter that toggles the active state of the interaction. If it is undefined the\n * active state will not get changed.\n * @param constructor returns an interaction to be added to the map, will be called again, if the interaction needs\n * to be updated\n * @param dependencies\n * @param active\n */\nexport const useOlInteraction = (constructor, dependencies, active) => {\n    const map = useMap();\n    const [interaction, setInteraction] = useState();\n    useEffect(() => {\n        if (!map) {\n            return undefined;\n        }\n        const newInteraction = constructor();\n        if (!newInteraction) {\n            return undefined;\n        }\n        setInteraction(newInteraction);\n        map.addInteraction(newInteraction);\n        return () => {\n            map.removeInteraction(newInteraction);\n            setInteraction(undefined);\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [...dependencies, map]);\n    useEffect(() => {\n        if (!interaction || isNil(active)) {\n            return;\n        }\n        interaction.setActive(active);\n    }, [interaction, active]);\n    return interaction;\n};\nexport default useOlInteraction;\n//# sourceMappingURL=useOlInteraction.js.map","import { useEffect } from 'react';\nimport { unByKey } from 'ol/Observable';\n/**\n * This hook unregisters listeners if the dependency array changes\n */\nexport const useOlListener = (observable, observe, dependencies, active) => {\n    useEffect(() => {\n        if (!observable || active === false) {\n            return undefined;\n        }\n        const observables = Array.isArray(observable) ? observable : [observable];\n        const keys = observables\n            .flatMap(o => {\n            const k = observe(o);\n            return Array.isArray(k) ? k : [k];\n        })\n            .filter(k => k !== undefined);\n        return () => {\n            for (const key of keys) {\n                unByKey(key);\n            }\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [observable, active, observe, ...dependencies]);\n};\nexport default useOlListener;\n//# sourceMappingURL=useOlListener.js.map","import { useEffect, useState } from 'react';\nexport const usePropOrDefault = (prop, defaultFunc, dependencies) => {\n    const [value, setValue] = useState();\n    useEffect(() => {\n        if (prop) {\n            setValue(prop);\n        }\n        else {\n            setValue(defaultFunc());\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [prop, ...dependencies]);\n    return value;\n};\nexport default usePropOrDefault;\n//# sourceMappingURL=usePropOrDefault.js.map","import { useEffect } from 'react';\nimport OlCollection from 'ol/Collection';\nimport * as OlEventConditions from 'ol/events/condition';\nimport OlInteractionSelect from 'ol/interaction/Select';\nimport { DigitizeUtil } from '../../Util/DigitizeUtil';\nimport { useOlInteraction } from '../useOlInteraction/useOlInteraction';\nimport { useOlListener } from '../useOlListener/useOlListener';\nimport { usePropOrDefault } from '../usePropOrDefault/usePropOrDefault';\nexport const useSelectFeatures = ({ active, selectStyle, selectInteractionConfig, onFeatureSelect, hitTolerance = 5, layers, clearAfterSelect = false, featuresCollection }) => {\n    const features = usePropOrDefault(featuresCollection, () => new OlCollection(), []);\n    const selectInteraction = useOlInteraction(() => {\n        if (!features) {\n            return undefined;\n        }\n        const newInteraction = new OlInteractionSelect({\n            condition: OlEventConditions.singleClick,\n            features,\n            hitTolerance: hitTolerance,\n            style: selectStyle ?? DigitizeUtil.DEFAULT_SELECT_STYLE,\n            layers: layers,\n            ...(selectInteractionConfig ?? {})\n        });\n        newInteraction.set('name', 'react-util-select-interaction');\n        return newInteraction;\n    }, [features, hitTolerance, selectStyle, layers, selectInteractionConfig], active);\n    useOlListener(selectInteraction, i => i.on('select', e => {\n        if (features && clearAfterSelect) {\n            features.clear();\n        }\n        onFeatureSelect?.(e);\n    }), [features, clearAfterSelect, onFeatureSelect]);\n    useEffect(() => {\n        if (!active && features) {\n            features.clear();\n        }\n    }, [active, features]);\n};\nexport default useSelectFeatures;\n//# sourceMappingURL=useSelectFeatures.js.map","import OlCollection from 'ol/Collection';\nimport OlLayerVector from 'ol/layer/Vector';\nimport OlSourceVector from 'ol/source/Vector';\nimport OlStyleCircle from 'ol/style/Circle';\nimport OlStyleFill from 'ol/style/Fill';\nimport OlStyleStroke from 'ol/style/Stroke';\nimport OlStyleStyle from 'ol/style/Style';\nimport OlStyleText from 'ol/style/Text';\nimport MapUtil from '@terrestris/ol-util/dist/MapUtil/MapUtil';\nexport class DigitizeUtil {\n    /**\n     * Default fill color used in style object of drawn features.\n     */\n    static DEFAULT_FILL_COLOR = 'rgba(0, 183, 43, 0.5)';\n    /**\n     * Default stroke color used in style object of drawn features.\n     */\n    static DEFAULT_STROKE_COLOR = 'rgba(0, 183, 43, 0.8)';\n    /**\n     * Default style for digitized points.\n     */\n    static DEFAULT_POINT_STYLE = new OlStyleStyle({\n        image: new OlStyleCircle({\n            radius: 7,\n            fill: new OlStyleFill({\n                color: DigitizeUtil.DEFAULT_FILL_COLOR\n            }),\n            stroke: new OlStyleStroke({\n                color: DigitizeUtil.DEFAULT_STROKE_COLOR\n            })\n        })\n    });\n    /**\n     * Default style for digitized lines.\n     */\n    static DEFAULT_LINESTRING_STYLE = new OlStyleStyle({\n        stroke: new OlStyleStroke({\n            color: DigitizeUtil.DEFAULT_STROKE_COLOR,\n            width: 2\n        })\n    });\n    /**\n     * Default style for digitized polygons or circles.\n     */\n    static DEFAULT_POLYGON_STYLE = new OlStyleStyle({\n        fill: new OlStyleFill({\n            color: DigitizeUtil.DEFAULT_FILL_COLOR\n        }),\n        stroke: new OlStyleStroke({\n            color: DigitizeUtil.DEFAULT_STROKE_COLOR,\n            width: 2\n        })\n    });\n    /**\n     * Default style for digitized labels.\n     */\n    static DEFAULT_TEXT_STYLE = new OlStyleStyle({\n        text: new OlStyleText({\n            text: '',\n            offsetX: 5,\n            offsetY: 5,\n            font: '12px sans-serif',\n            fill: new OlStyleFill({\n                color: DigitizeUtil.DEFAULT_FILL_COLOR\n            }),\n            stroke: new OlStyleStroke({\n                color: DigitizeUtil.DEFAULT_STROKE_COLOR\n            })\n        })\n    });\n    static DIGITIZE_LAYER_NAME = 'react-geo_digitize';\n    static DEFAULT_SELECT_STYLE = DigitizeUtil.selectStyleFunction('rgba(154, 26, 56, 0.5)', 'rgba(154, 26, 56, 0.8)');\n    /**\n     * This function gets the standard react geo digitize layer and creates it if it does not exist.\n     * If another layer should be used, the layer property of the respective button should be used.\n     * By default, the digitize layer is styled via {@link DigitizeUtil.defaultDigitizeStyleFunction},\n     * if another style is desired either use another layer or set the style of the digitize layer\n     * via `setStyle`.\n     *\n     * @param map\n     */\n    static getDigitizeLayer(map) {\n        let digitizeLayer = MapUtil.getLayerByName(map, DigitizeUtil.DIGITIZE_LAYER_NAME);\n        if (!digitizeLayer) {\n            digitizeLayer = new OlLayerVector({\n                source: new OlSourceVector({\n                    features: new OlCollection()\n                }),\n                properties: {\n                    name: DigitizeUtil.DIGITIZE_LAYER_NAME\n                }\n            });\n            digitizeLayer.setStyle(DigitizeUtil.defaultDigitizeStyleFunction);\n            map.addLayer(digitizeLayer);\n        }\n        return digitizeLayer;\n    }\n    /**\n     * The styling function for the digitize vector layer, which considers\n     * different geometry types of drawn features.\n     *\n     * @param feature The feature which is being styled.\n     * @return The style to use.\n     */\n    static defaultDigitizeStyleFunction(feature) {\n        const geom = feature.getGeometry();\n        if (!geom) {\n            return undefined;\n        }\n        switch (geom.getType()) {\n            case 'MultiPoint':\n            case 'Point': {\n                if (!feature.get('isLabel')) {\n                    return new OlStyleStyle({\n                        image: new OlStyleCircle({\n                            radius: 7,\n                            fill: new OlStyleFill({\n                                color: DigitizeUtil.DEFAULT_FILL_COLOR\n                            }),\n                            stroke: new OlStyleStroke({\n                                color: DigitizeUtil.DEFAULT_STROKE_COLOR\n                            })\n                        })\n                    });\n                }\n                else {\n                    return new OlStyleStyle({\n                        text: new OlStyleText({\n                            text: feature.get('label'),\n                            offsetX: 5,\n                            offsetY: 5,\n                            font: '12px sans-serif',\n                            fill: new OlStyleFill({\n                                color: DigitizeUtil.DEFAULT_FILL_COLOR\n                            }),\n                            stroke: new OlStyleStroke({\n                                color: DigitizeUtil.DEFAULT_STROKE_COLOR\n                            })\n                        })\n                    });\n                }\n            }\n            case 'MultiLineString':\n            case 'LineString': {\n                return new OlStyleStyle({\n                    stroke: new OlStyleStroke({\n                        color: DigitizeUtil.DEFAULT_STROKE_COLOR,\n                        width: 2\n                    })\n                });\n            }\n            case 'MultiPolygon':\n            case 'Polygon':\n            case 'Circle': {\n                return new OlStyleStyle({\n                    fill: new OlStyleFill({\n                        color: DigitizeUtil.DEFAULT_FILL_COLOR\n                    }),\n                    stroke: new OlStyleStroke({\n                        color: DigitizeUtil.DEFAULT_STROKE_COLOR,\n                        width: 2\n                    })\n                });\n            }\n            default:\n                return undefined;\n        }\n    }\n    /**\n     * This functions creates a select style with some default values from fill and stroke colors.\n     * This can be used as a style function for an OpenLayers layer or feature.\n     *\n     * @param selectFillColor\n     * @param selectStrokeColor\n     */\n    static selectStyleFunction(selectFillColor, selectStrokeColor) {\n        return (feature) => {\n            const text = feature.get('label') ?? '';\n            return new OlStyleStyle({\n                image: new OlStyleCircle({\n                    radius: 7,\n                    fill: new OlStyleFill({\n                        color: selectFillColor\n                    }),\n                    stroke: new OlStyleStroke({\n                        color: selectStrokeColor\n                    })\n                }),\n                text: new OlStyleText({\n                    text: text,\n                    offsetX: 5,\n                    offsetY: 5,\n                    font: '12px sans-serif',\n                    fill: new OlStyleFill({\n                        color: selectFillColor\n                    }),\n                    stroke: new OlStyleStroke({\n                        color: selectStrokeColor\n                    })\n                }),\n                stroke: new OlStyleStroke({\n                    color: selectStrokeColor,\n                    width: 2\n                }),\n                fill: new OlStyleFill({\n                    color: selectFillColor\n                })\n            });\n        };\n    }\n}\nexport default DigitizeUtil;\n//# sourceMappingURL=DigitizeUtil.js.map"],"names":["defaultClassName","DeleteButton","className","digitizeLayer","onFeatureRemove","selectStyle","selectInteractionConfig","hitTolerance","pressed","passThroughProps","map","layer","undefined","layers","onFeatureSelect","event","feat","finalClassName","type","tooltipProps","tooltip","tooltipPlacement","pressedIcon","icon","children","value","onClick","onChange","internalClassName","pressedClass","evt","CSS_PREFIX","MapContext","useMap","useOlInteraction","constructor","dependencies","active","interaction","setInteraction","newInteraction","useOlListener","observable","observe","keys","observables","Array","o","k","key","usePropOrDefault","prop","defaultFunc","setValue","useSelectFeatures","clearAfterSelect","featuresCollection","features","selectInteraction","i","e","DigitizeUtil","feature","geom","selectFillColor","selectStrokeColor","text"],"mappings":"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"}