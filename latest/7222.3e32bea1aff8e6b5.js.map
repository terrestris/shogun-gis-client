{"version":3,"file":"7222.3e32bea1aff8e6b5.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/ol/TileRange.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/size.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/tilecoord.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/tilegrid/TileGrid.js"],"sourcesContent":["/**\n * @module ol/TileRange\n */\n\n/**\n * A representation of a contiguous block of tiles.  A tile range is specified\n * by its min/max tile coordinates and is inclusive of coordinates.\n */\nclass TileRange {\n  /**\n   * @param {number} minX Minimum X.\n   * @param {number} maxX Maximum X.\n   * @param {number} minY Minimum Y.\n   * @param {number} maxY Maximum Y.\n   */\n  constructor(minX, maxX, minY, maxY) {\n    /**\n     * @type {number}\n     */\n    this.minX = minX;\n\n    /**\n     * @type {number}\n     */\n    this.maxX = maxX;\n\n    /**\n     * @type {number}\n     */\n    this.minY = minY;\n\n    /**\n     * @type {number}\n     */\n    this.maxY = maxY;\n  }\n\n  /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {boolean} Contains tile coordinate.\n   */\n  contains(tileCoord) {\n    return this.containsXY(tileCoord[1], tileCoord[2]);\n  }\n\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Contains.\n   */\n  containsTileRange(tileRange) {\n    return (\n      this.minX <= tileRange.minX &&\n      tileRange.maxX <= this.maxX &&\n      this.minY <= tileRange.minY &&\n      tileRange.maxY <= this.maxY\n    );\n  }\n\n  /**\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @return {boolean} Contains coordinate.\n   */\n  containsXY(x, y) {\n    return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;\n  }\n\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Equals.\n   */\n  equals(tileRange) {\n    return (\n      this.minX == tileRange.minX &&\n      this.minY == tileRange.minY &&\n      this.maxX == tileRange.maxX &&\n      this.maxY == tileRange.maxY\n    );\n  }\n\n  /**\n   * @param {TileRange} tileRange Tile range.\n   */\n  extend(tileRange) {\n    if (tileRange.minX < this.minX) {\n      this.minX = tileRange.minX;\n    }\n    if (tileRange.maxX > this.maxX) {\n      this.maxX = tileRange.maxX;\n    }\n    if (tileRange.minY < this.minY) {\n      this.minY = tileRange.minY;\n    }\n    if (tileRange.maxY > this.maxY) {\n      this.maxY = tileRange.maxY;\n    }\n  }\n\n  /**\n   * @return {number} Height.\n   */\n  getHeight() {\n    return this.maxY - this.minY + 1;\n  }\n\n  /**\n   * @return {import(\"./size.js\").Size} Size.\n   */\n  getSize() {\n    return [this.getWidth(), this.getHeight()];\n  }\n\n  /**\n   * @return {number} Width.\n   */\n  getWidth() {\n    return this.maxX - this.minX + 1;\n  }\n\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Intersects.\n   */\n  intersects(tileRange) {\n    return (\n      this.minX <= tileRange.maxX &&\n      this.maxX >= tileRange.minX &&\n      this.minY <= tileRange.maxY &&\n      this.maxY >= tileRange.minY\n    );\n  }\n}\n\n/**\n * @param {number} minX Minimum X.\n * @param {number} maxX Maximum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxY Maximum Y.\n * @param {TileRange} [tileRange] TileRange.\n * @return {TileRange} Tile range.\n */\nexport function createOrUpdate(minX, maxX, minY, maxY, tileRange) {\n  if (tileRange !== undefined) {\n    tileRange.minX = minX;\n    tileRange.maxX = maxX;\n    tileRange.minY = minY;\n    tileRange.maxY = maxY;\n    return tileRange;\n  }\n  return new TileRange(minX, maxX, minY, maxY);\n}\n\nexport default TileRange;\n","/**\n * @module ol/size\n */\n\n/**\n * An array of numbers representing a size: `[width, height]`.\n * @typedef {Array<number>} Size\n * @api\n */\n\n/**\n * Returns a buffered size.\n * @param {Size} size Size.\n * @param {number} num The amount by which to buffer.\n * @param {Size} [dest] Optional reusable size array.\n * @return {Size} The buffered size.\n */\nexport function buffer(size, num, dest) {\n  if (dest === undefined) {\n    dest = [0, 0];\n  }\n  dest[0] = size[0] + 2 * num;\n  dest[1] = size[1] + 2 * num;\n  return dest;\n}\n\n/**\n * Determines if a size has a positive area.\n * @param {Size} size The size to test.\n * @return {boolean} The size has a positive area.\n */\nexport function hasArea(size) {\n  return size[0] > 0 && size[1] > 0;\n}\n\n/**\n * Returns a size scaled by a ratio. The result will be an array of integers.\n * @param {Size} size Size.\n * @param {number} ratio Ratio.\n * @param {Size} [dest] Optional reusable size array.\n * @return {Size} The scaled size.\n */\nexport function scale(size, ratio, dest) {\n  if (dest === undefined) {\n    dest = [0, 0];\n  }\n  dest[0] = (size[0] * ratio + 0.5) | 0;\n  dest[1] = (size[1] * ratio + 0.5) | 0;\n  return dest;\n}\n\n/**\n * Returns an `Size` array for the passed in number (meaning: square) or\n * `Size` array.\n * (meaning: non-square),\n * @param {number|Size} size Width and height.\n * @param {Size} [dest] Optional reusable size array.\n * @return {Size} Size.\n * @api\n */\nexport function toSize(size, dest) {\n  if (Array.isArray(size)) {\n    return size;\n  }\n  if (dest === undefined) {\n    dest = [size, size];\n  } else {\n    dest[0] = size;\n    dest[1] = size;\n  }\n  return dest;\n}\n","/**\n * @module ol/tilecoord\n */\n\n/**\n * An array of three numbers representing the location of a tile in a tile\n * grid. The order is `z` (zoom level), `x` (column), and `y` (row).\n * @typedef {Array<number>} TileCoord\n * @api\n */\n\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {TileCoord} [tileCoord] Tile coordinate.\n * @return {TileCoord} Tile coordinate.\n */\nexport function createOrUpdate(z, x, y, tileCoord) {\n  if (tileCoord !== undefined) {\n    tileCoord[0] = z;\n    tileCoord[1] = x;\n    tileCoord[2] = y;\n    return tileCoord;\n  }\n  return [z, x, y];\n}\n\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {string} Key.\n */\nexport function getKeyZXY(z, x, y) {\n  return z + '/' + x + '/' + y;\n}\n\n/**\n * Get the key for a tile coord.\n * @param {TileCoord} tileCoord The tile coord.\n * @return {string} Key.\n */\nexport function getKey(tileCoord) {\n  return getKeyZXY(tileCoord[0], tileCoord[1], tileCoord[2]);\n}\n\n/**\n * Get the tile cache key for a tile key obtained through `tile.getKey()`.\n * @param {string} tileKey The tile key.\n * @return {string} The cache key.\n */\nexport function getCacheKeyForTileKey(tileKey) {\n  const [z, x, y] = tileKey\n    .substring(tileKey.lastIndexOf('/') + 1, tileKey.length)\n    .split(',')\n    .map(Number);\n  return getKeyZXY(z, x, y);\n}\n\n/**\n * Get a tile coord given a key.\n * @param {string} key The tile coord key.\n * @return {TileCoord} The tile coord.\n */\nexport function fromKey(key) {\n  return key.split('/').map(Number);\n}\n\n/**\n * @param {TileCoord} tileCoord Tile coord.\n * @return {number} Hash.\n */\nexport function hash(tileCoord) {\n  return hashZXY(tileCoord[0], tileCoord[1], tileCoord[2]);\n}\n\n/**\n * @param {number} z The tile z coordinate.\n * @param {number} x The tile x coordinate.\n * @param {number} y The tile y coordinate.\n * @return {number} Hash.\n */\nexport function hashZXY(z, x, y) {\n  return (x << z) + y;\n}\n\n/**\n * @param {TileCoord} tileCoord Tile coordinate.\n * @param {!import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {boolean} Tile coordinate is within extent and zoom level range.\n */\nexport function withinExtentAndZ(tileCoord, tileGrid) {\n  const z = tileCoord[0];\n  const x = tileCoord[1];\n  const y = tileCoord[2];\n\n  if (tileGrid.getMinZoom() > z || z > tileGrid.getMaxZoom()) {\n    return false;\n  }\n  const tileRange = tileGrid.getFullTileRange(z);\n  if (!tileRange) {\n    return true;\n  }\n  return tileRange.containsXY(x, y);\n}\n","/**\n * @module ol/tilegrid/TileGrid\n */\nimport TileRange, {\n  createOrUpdate as createOrUpdateTileRange,\n} from '../TileRange.js';\nimport {isSorted, linearFindNearest} from '../array.js';\nimport {assert} from '../asserts.js';\nimport {createOrUpdate, getTopLeft} from '../extent.js';\nimport {intersectsLinearRing} from '../geom/flat/intersectsextent.js';\nimport {ceil, clamp, floor} from '../math.js';\nimport {toSize} from '../size.js';\nimport {createOrUpdate as createOrUpdateTileCoord} from '../tilecoord.js';\nimport {DEFAULT_TILE_SIZE} from './common.js';\n\n/**\n * @private\n * @type {import(\"../tilecoord.js\").TileCoord}\n */\nconst tmpTileCoord = [0, 0, 0];\n\n/**\n * Number of decimal digits to consider in integer values when rounding.\n * @type {number}\n */\nconst DECIMALS = 5;\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the tile grid. No tiles outside this\n * extent will be requested by {@link module:ol/source/Tile~TileSource} sources. When no `origin` or\n * `origins` are configured, the `origin` will be set to the top-left corner of the extent.\n * @property {number} [minZoom=0] Minimum zoom.\n * @property {import(\"../coordinate.js\").Coordinate} [origin] The tile grid origin, i.e. where the `x`\n * and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left to right and downwards. If not\n * specified, `extent` or `origins` must be provided.\n * @property {Array<import(\"../coordinate.js\").Coordinate>} [origins] Tile grid origins, i.e. where\n * the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If given, the array length\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\n * origin. Tile coordinates increase left to right and downwards. If not specified, `extent` or\n * `origin` must be provided.\n * @property {!Array<number>} resolutions Resolutions. The array index of each resolution needs\n * to match the zoom level. This means that even if a `minZoom` is configured, the resolutions\n * array will have a length of `maxZoom + 1`.\n * @property {Array<import(\"../size.js\").Size>} [sizes] Number of tile rows and columns\n * of the grid for each zoom level. If specified the values\n * define each zoom level's extent together with the `origin` or `origins`.\n * A grid `extent` can be configured in addition, and will further limit the extent\n * for which tile requests are made by sources. If the bottom-left corner of\n * an extent is used as `origin` or `origins`, then the `y` value must be\n * negative because OpenLayers tile coordinates use the top left as the origin.\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * Default is `[256, 256]`.\n * @property {Array<number|import(\"../size.js\").Size>} [tileSizes] Tile sizes. If given, the array length\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\n * tile size.\n */\n\n/**\n * @classdesc\n * Base class for setting the grid pattern for sources accessing tiled-image\n * servers.\n * @api\n */\nclass TileGrid {\n  /**\n   * @param {Options} options Tile grid options.\n   */\n  constructor(options) {\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.minZoom = options.minZoom !== undefined ? options.minZoom : 0;\n\n    /**\n     * @private\n     * @type {!Array<number>}\n     */\n    this.resolutions_ = options.resolutions;\n    assert(\n      isSorted(\n        this.resolutions_,\n        /**\n         * @param {number} a First resolution\n         * @param {number} b Second resolution\n         * @return {number} Comparison result\n         */\n        (a, b) => b - a,\n        true,\n      ),\n      '`resolutions` must be sorted in descending order',\n    );\n\n    // check if we've got a consistent zoom factor and origin\n    let zoomFactor;\n    if (!options.origins) {\n      for (let i = 0, ii = this.resolutions_.length - 1; i < ii; ++i) {\n        if (!zoomFactor) {\n          zoomFactor = this.resolutions_[i] / this.resolutions_[i + 1];\n        } else {\n          if (this.resolutions_[i] / this.resolutions_[i + 1] !== zoomFactor) {\n            zoomFactor = undefined;\n            break;\n          }\n        }\n      }\n    }\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.zoomFactor_ = zoomFactor;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.maxZoom = this.resolutions_.length - 1;\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate|null}\n     */\n    this.origin_ = options.origin !== undefined ? options.origin : null;\n\n    /**\n     * @private\n     * @type {Array<import(\"../coordinate.js\").Coordinate>}\n     */\n    this.origins_ = null;\n    if (options.origins !== undefined) {\n      this.origins_ = options.origins;\n      assert(\n        this.origins_.length == this.resolutions_.length,\n        'Number of `origins` and `resolutions` must be equal',\n      );\n    }\n\n    const extent = options.extent;\n\n    if (extent !== undefined && !this.origin_ && !this.origins_) {\n      this.origin_ = getTopLeft(extent);\n    }\n\n    assert(\n      (!this.origin_ && this.origins_) || (this.origin_ && !this.origins_),\n      'Either `origin` or `origins` must be configured, never both',\n    );\n\n    /**\n     * @private\n     * @type {Array<number|import(\"../size.js\").Size>}\n     */\n    this.tileSizes_ = null;\n    if (options.tileSizes !== undefined) {\n      this.tileSizes_ = options.tileSizes;\n      assert(\n        this.tileSizes_.length == this.resolutions_.length,\n        'Number of `tileSizes` and `resolutions` must be equal',\n      );\n    }\n\n    /**\n     * @private\n     * @type {number|import(\"../size.js\").Size}\n     */\n    this.tileSize_ =\n      options.tileSize !== undefined\n        ? options.tileSize\n        : !this.tileSizes_\n          ? DEFAULT_TILE_SIZE\n          : null;\n    assert(\n      (!this.tileSize_ && this.tileSizes_) ||\n        (this.tileSize_ && !this.tileSizes_),\n      'Either `tileSize` or `tileSizes` must be configured, never both',\n    );\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.extent_ = extent !== undefined ? extent : null;\n\n    /**\n     * @private\n     * @type {Array<import(\"../TileRange.js\").default>}\n     */\n    this.fullTileRanges_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.tmpSize_ = [0, 0];\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.tmpExtent_ = [0, 0, 0, 0];\n\n    if (options.sizes !== undefined) {\n      this.fullTileRanges_ = options.sizes.map((size, z) => {\n        const tileRange = new TileRange(\n          Math.min(0, size[0]),\n          Math.max(size[0] - 1, -1),\n          Math.min(0, size[1]),\n          Math.max(size[1] - 1, -1),\n        );\n        if (extent) {\n          const restrictedTileRange = this.getTileRangeForExtentAndZ(extent, z);\n          tileRange.minX = Math.max(restrictedTileRange.minX, tileRange.minX);\n          tileRange.maxX = Math.min(restrictedTileRange.maxX, tileRange.maxX);\n          tileRange.minY = Math.max(restrictedTileRange.minY, tileRange.minY);\n          tileRange.maxY = Math.min(restrictedTileRange.maxY, tileRange.maxY);\n        }\n        return tileRange;\n      });\n    } else if (extent) {\n      this.calculateTileRanges_(extent);\n    }\n  }\n\n  /**\n   * Call a function with each tile coordinate for a given extent and zoom level.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} zoom Integer zoom level.\n   * @param {function(import(\"../tilecoord.js\").TileCoord): void} callback Function called with each tile coordinate.\n   * @api\n   */\n  forEachTileCoord(extent, zoom, callback) {\n    const tileRange = this.getTileRangeForExtentAndZ(extent, zoom);\n    for (let i = tileRange.minX, ii = tileRange.maxX; i <= ii; ++i) {\n      for (let j = tileRange.minY, jj = tileRange.maxY; j <= jj; ++j) {\n        callback([zoom, i, j]);\n      }\n    }\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {function(number, import(\"../TileRange.js\").default): boolean} callback Callback.\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary import(\"../TileRange.js\").default object.\n   * @param {import(\"../extent.js\").Extent} [tempExtent] Temporary import(\"../extent.js\").Extent object.\n   * @return {boolean} Callback succeeded.\n   */\n  forEachTileCoordParentTileRange(\n    tileCoord,\n    callback,\n    tempTileRange,\n    tempExtent,\n  ) {\n    let tileRange, x, y;\n    let tileCoordExtent = null;\n    let z = tileCoord[0] - 1;\n    if (this.zoomFactor_ === 2) {\n      x = tileCoord[1];\n      y = tileCoord[2];\n    } else {\n      tileCoordExtent = this.getTileCoordExtent(tileCoord, tempExtent);\n    }\n    while (z >= this.minZoom) {\n      if (x !== undefined && y !== undefined) {\n        x = Math.floor(x / 2);\n        y = Math.floor(y / 2);\n        tileRange = createOrUpdateTileRange(x, x, y, y, tempTileRange);\n      } else {\n        tileRange = this.getTileRangeForExtentAndZ(\n          tileCoordExtent,\n          z,\n          tempTileRange,\n        );\n      }\n      if (callback(z, tileRange)) {\n        return true;\n      }\n      --z;\n    }\n    return false;\n  }\n\n  /**\n   * Get the extent for this tile grid, if it was configured.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  getExtent() {\n    return this.extent_;\n  }\n\n  /**\n   * Get the maximum zoom level for the grid.\n   * @return {number} Max zoom.\n   * @api\n   */\n  getMaxZoom() {\n    return this.maxZoom;\n  }\n\n  /**\n   * Get the minimum zoom level for the grid.\n   * @return {number} Min zoom.\n   * @api\n   */\n  getMinZoom() {\n    return this.minZoom;\n  }\n\n  /**\n   * Get the origin for the grid at the given zoom level.\n   * @param {number} z Integer zoom level.\n   * @return {import(\"../coordinate.js\").Coordinate} Origin.\n   * @api\n   */\n  getOrigin(z) {\n    if (this.origin_) {\n      return this.origin_;\n    }\n    return this.origins_[z];\n  }\n\n  /**\n   * Get the resolution for the given zoom level.\n   * @param {number} z Integer zoom level.\n   * @return {number} Resolution.\n   * @api\n   */\n  getResolution(z) {\n    return this.resolutions_[z];\n  }\n\n  /**\n   * Get the list of resolutions for the tile grid.\n   * @return {Array<number>} Resolutions.\n   * @api\n   */\n  getResolutions() {\n    return this.resolutions_;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary import(\"../TileRange.js\").default object.\n   * @param {import(\"../extent.js\").Extent} [tempExtent] Temporary import(\"../extent.js\").Extent object.\n   * @return {import(\"../TileRange.js\").default|null} Tile range.\n   */\n  getTileCoordChildTileRange(tileCoord, tempTileRange, tempExtent) {\n    if (tileCoord[0] < this.maxZoom) {\n      if (this.zoomFactor_ === 2) {\n        const minX = tileCoord[1] * 2;\n        const minY = tileCoord[2] * 2;\n        return createOrUpdateTileRange(\n          minX,\n          minX + 1,\n          minY,\n          minY + 1,\n          tempTileRange,\n        );\n      }\n      const tileCoordExtent = this.getTileCoordExtent(\n        tileCoord,\n        tempExtent || this.tmpExtent_,\n      );\n      return this.getTileRangeForExtentAndZ(\n        tileCoordExtent,\n        tileCoord[0] + 1,\n        tempTileRange,\n      );\n    }\n    return null;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {number} z Integer zoom level.\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary import(\"../TileRange.js\").default object.\n   * @return {import(\"../TileRange.js\").default|null} Tile range.\n   */\n  getTileRangeForTileCoordAndZ(tileCoord, z, tempTileRange) {\n    if (z > this.maxZoom || z < this.minZoom) {\n      return null;\n    }\n\n    const tileCoordZ = tileCoord[0];\n    const tileCoordX = tileCoord[1];\n    const tileCoordY = tileCoord[2];\n\n    if (z === tileCoordZ) {\n      return createOrUpdateTileRange(\n        tileCoordX,\n        tileCoordY,\n        tileCoordX,\n        tileCoordY,\n        tempTileRange,\n      );\n    }\n\n    if (this.zoomFactor_) {\n      const factor = Math.pow(this.zoomFactor_, z - tileCoordZ);\n      const minX = Math.floor(tileCoordX * factor);\n      const minY = Math.floor(tileCoordY * factor);\n      if (z < tileCoordZ) {\n        return createOrUpdateTileRange(minX, minX, minY, minY, tempTileRange);\n      }\n\n      const maxX = Math.floor(factor * (tileCoordX + 1)) - 1;\n      const maxY = Math.floor(factor * (tileCoordY + 1)) - 1;\n      return createOrUpdateTileRange(minX, maxX, minY, maxY, tempTileRange);\n    }\n\n    const tileCoordExtent = this.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    return this.getTileRangeForExtentAndZ(tileCoordExtent, z, tempTileRange);\n  }\n\n  /**\n   * Get a tile range for the given extent and integer zoom level.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} z Integer zoom level.\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary tile range object.\n   * @return {import(\"../TileRange.js\").default} Tile range.\n   */\n  getTileRangeForExtentAndZ(extent, z, tempTileRange) {\n    this.getTileCoordForXYAndZ_(extent[0], extent[3], z, false, tmpTileCoord);\n    const minX = tmpTileCoord[1];\n    const minY = tmpTileCoord[2];\n    this.getTileCoordForXYAndZ_(extent[2], extent[1], z, true, tmpTileCoord);\n    const maxX = tmpTileCoord[1];\n    const maxY = tmpTileCoord[2];\n    return createOrUpdateTileRange(minX, maxX, minY, maxY, tempTileRange);\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {import(\"../coordinate.js\").Coordinate} Tile center.\n   */\n  getTileCoordCenter(tileCoord) {\n    const origin = this.getOrigin(tileCoord[0]);\n    const resolution = this.getResolution(tileCoord[0]);\n    const tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\n    return [\n      origin[0] + (tileCoord[1] + 0.5) * tileSize[0] * resolution,\n      origin[1] - (tileCoord[2] + 0.5) * tileSize[1] * resolution,\n    ];\n  }\n\n  /**\n   * Get the extent of a tile coordinate.\n   *\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../extent.js\").Extent} [tempExtent] Temporary extent object.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  getTileCoordExtent(tileCoord, tempExtent) {\n    const origin = this.getOrigin(tileCoord[0]);\n    const resolution = this.getResolution(tileCoord[0]);\n    const tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\n    const minX = origin[0] + tileCoord[1] * tileSize[0] * resolution;\n    const minY = origin[1] - (tileCoord[2] + 1) * tileSize[1] * resolution;\n    const maxX = minX + tileSize[0] * resolution;\n    const maxY = minY + tileSize[1] * resolution;\n    return createOrUpdate(minX, minY, maxX, maxY, tempExtent);\n  }\n\n  /**\n   * Get the tile coordinate for the given map coordinate and resolution.  This\n   * method considers that coordinates that intersect tile boundaries should be\n   * assigned the higher tile coordinate.\n   *\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Destination import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @api\n   */\n  getTileCoordForCoordAndResolution(coordinate, resolution, opt_tileCoord) {\n    return this.getTileCoordForXYAndResolution_(\n      coordinate[0],\n      coordinate[1],\n      resolution,\n      false,\n      opt_tileCoord,\n    );\n  }\n\n  /**\n   * Note that this method should not be called for resolutions that correspond\n   * to an integer zoom level.  Instead call the `getTileCoordForXYAndZ_` method.\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {number} resolution Resolution (for a non-integer zoom level).\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\n   *     intersections go to the higher tile coordinate, let edge intersections\n   *     go to the lower tile coordinate.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Temporary import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @private\n   */\n  getTileCoordForXYAndResolution_(\n    x,\n    y,\n    resolution,\n    reverseIntersectionPolicy,\n    opt_tileCoord,\n  ) {\n    const z = this.getZForResolution(resolution);\n    const scale = resolution / this.getResolution(z);\n    const origin = this.getOrigin(z);\n    const tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n\n    let tileCoordX = (scale * (x - origin[0])) / resolution / tileSize[0];\n    let tileCoordY = (scale * (origin[1] - y)) / resolution / tileSize[1];\n\n    if (reverseIntersectionPolicy) {\n      tileCoordX = ceil(tileCoordX, DECIMALS) - 1;\n      tileCoordY = ceil(tileCoordY, DECIMALS) - 1;\n    } else {\n      tileCoordX = floor(tileCoordX, DECIMALS);\n      tileCoordY = floor(tileCoordY, DECIMALS);\n    }\n\n    return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\n  }\n\n  /**\n   * Although there is repetition between this method and `getTileCoordForXYAndResolution_`,\n   * they should have separate implementations.  This method is for integer zoom\n   * levels.  The other method should only be called for resolutions corresponding\n   * to non-integer zoom levels.\n   * @param {number} x Map x coordinate.\n   * @param {number} y Map y coordinate.\n   * @param {number} z Integer zoom level.\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\n   *     intersections go to the higher tile coordinate, let edge intersections\n   *     go to the lower tile coordinate.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Temporary import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @private\n   */\n  getTileCoordForXYAndZ_(x, y, z, reverseIntersectionPolicy, opt_tileCoord) {\n    const origin = this.getOrigin(z);\n    const resolution = this.getResolution(z);\n    const tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n\n    let tileCoordX = (x - origin[0]) / resolution / tileSize[0];\n    let tileCoordY = (origin[1] - y) / resolution / tileSize[1];\n\n    if (reverseIntersectionPolicy) {\n      tileCoordX = ceil(tileCoordX, DECIMALS) - 1;\n      tileCoordY = ceil(tileCoordY, DECIMALS) - 1;\n    } else {\n      tileCoordX = floor(tileCoordX, DECIMALS);\n      tileCoordY = floor(tileCoordY, DECIMALS);\n    }\n\n    return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\n  }\n\n  /**\n   * Get a tile coordinate given a map coordinate and zoom level.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} z Integer zoom level, e.g. the result of a `getZForResolution()` method call\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Destination import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @api\n   */\n  getTileCoordForCoordAndZ(coordinate, z, opt_tileCoord) {\n    return this.getTileCoordForXYAndZ_(\n      coordinate[0],\n      coordinate[1],\n      z,\n      false,\n      opt_tileCoord,\n    );\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {number} Tile resolution.\n   */\n  getTileCoordResolution(tileCoord) {\n    return this.resolutions_[tileCoord[0]];\n  }\n\n  /**\n   * Get the tile size for a zoom level. The type of the return value matches the\n   * `tileSize` or `tileSizes` that the tile grid was configured with. To always\n   * get an {@link import(\"../size.js\").Size}, run the result through {@link module:ol/size.toSize}.\n   * @param {number} z Z.\n   * @return {number|import(\"../size.js\").Size} Tile size.\n   * @api\n   */\n  getTileSize(z) {\n    if (this.tileSize_) {\n      return this.tileSize_;\n    }\n    return this.tileSizes_[z];\n  }\n\n  /**\n   * @param {number} z Zoom level.\n   * @return {import(\"../TileRange.js\").default|null} Extent tile range for the specified zoom level.\n   */\n  getFullTileRange(z) {\n    if (!this.fullTileRanges_) {\n      return this.extent_\n        ? this.getTileRangeForExtentAndZ(this.extent_, z)\n        : null;\n    }\n    return this.fullTileRanges_[z];\n  }\n\n  /**\n   * @param {number} resolution Resolution.\n   * @param {number|import(\"../array.js\").NearestDirectionFunction} [opt_direction]\n   *     If 0, the nearest resolution will be used.\n   *     If 1, the nearest higher resolution (lower Z) will be used. If -1, the\n   *     nearest lower resolution (higher Z) will be used. Default is 0.\n   *     Use a {@link module:ol/array~NearestDirectionFunction} for more precise control.\n   *\n   * For example to change tile Z at the midpoint of zoom levels\n   * ```js\n   * function(value, high, low) {\n   *   return value - low * Math.sqrt(high / low);\n   * }\n   * ```\n   * @return {number} Z.\n   * @api\n   */\n  getZForResolution(resolution, opt_direction) {\n    const z = linearFindNearest(\n      this.resolutions_,\n      resolution,\n      opt_direction || 0,\n    );\n    return clamp(z, this.minZoom, this.maxZoom);\n  }\n\n  /**\n   * The tile with the provided tile coordinate intersects the given viewport.\n   * @param {import('../tilecoord.js').TileCoord} tileCoord Tile coordinate.\n   * @param {Array<number>} viewport Viewport as returned from {@link module:ol/extent.getRotatedViewport}.\n   * @return {boolean} The tile with the provided tile coordinate intersects the given viewport.\n   */\n  tileCoordIntersectsViewport(tileCoord, viewport) {\n    return intersectsLinearRing(\n      viewport,\n      0,\n      viewport.length,\n      2,\n      this.getTileCoordExtent(tileCoord),\n    );\n  }\n\n  /**\n   * @param {!import(\"../extent.js\").Extent} extent Extent for this tile grid.\n   * @private\n   */\n  calculateTileRanges_(extent) {\n    const length = this.resolutions_.length;\n    const fullTileRanges = new Array(length);\n    for (let z = this.minZoom; z < length; ++z) {\n      fullTileRanges[z] = this.getTileRangeForExtentAndZ(extent, z);\n    }\n    this.fullTileRanges_ = fullTileRanges;\n  }\n}\n\nexport default TileGrid;\n"],"names":["TileRange","minX","maxX","minY","maxY","tileCoord","tileRange","x","y","createOrUpdate","undefined","hasArea","size","scale","ratio","dest","toSize","Array","z","getKeyZXY","hash","hashZXY","withinExtentAndZ","tileGrid","tmpTileCoord","TileGrid","options","zoomFactor","a","b","i","ii","extent","Math","restrictedTileRange","zoom","callback","j","jj","tempTileRange","tempExtent","tileCoordExtent","tileCoordZ","tileCoordX","tileCoordY","factor","origin","resolution","tileSize","coordinate","opt_tileCoord","reverseIntersectionPolicy","opt_direction","viewport","length","fullTileRanges"],"mappings":"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"}