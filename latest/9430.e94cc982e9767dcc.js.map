{"version":3,"file":"9430.e94cc982e9767dcc.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/ol/colorlike.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/css.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/render/canvas.js"],"sourcesContent":["/**\n * @module ol/colorlike\n */\nimport ImageState from './ImageState.js';\nimport {toString} from './color.js';\nimport {createCanvasContext2D} from './dom.js';\nimport {get as getIconImage} from './style/IconImage.js';\nimport {shared as iconCache} from './style/IconImageCache.js';\n\n/**\n * @typedef {Object} PatternDescriptor\n * @property {string} src Pattern image URL\n * @property {import(\"./color.js\").Color|string} [color] Color to tint the pattern with.\n * @property {import(\"./size.js\").Size} [size] Size of the desired slice from the pattern image.\n * Use this together with `offset` when the pattern image is a sprite sheet.\n * @property {import(\"./size.js\").Size} [offset] Offset of the desired slice from the pattern image.\n * Use this together with `size` when the pattern image is a sprite sheet.\n */\n\n/**\n * A type accepted by CanvasRenderingContext2D.fillStyle\n * or CanvasRenderingContext2D.strokeStyle.\n * Represents a color, [CanvasPattern](https://developer.mozilla.org/en-US/docs/Web/API/CanvasPattern),\n * or [CanvasGradient](https://developer.mozilla.org/en-US/docs/Web/API/CanvasGradient). The origin for\n * patterns and gradients as fill style is an increment of 512 css pixels from map coordinate\n * `[0, 0]`. For seamless repeat patterns, width and height of the pattern image\n * must be a factor of two (2, 4, 8, ..., 512).\n *\n * @typedef {string|CanvasPattern|CanvasGradient} ColorLike\n * @api\n */\n\n/**\n * @param {import(\"./color.js\").Color|ColorLike|PatternDescriptor|null} color Color.\n * @return {ColorLike|null} The color as an {@link ol/colorlike~ColorLike}.\n * @api\n */\nexport function asColorLike(color) {\n  if (!color) {\n    return null;\n  }\n  if (Array.isArray(color)) {\n    return toString(color);\n  }\n  if (typeof color === 'object' && 'src' in color) {\n    return asCanvasPattern(color);\n  }\n  return color;\n}\n\n/**\n * @param {PatternDescriptor} pattern Pattern descriptor.\n * @return {CanvasPattern|null} Canvas pattern or null if the pattern referenced in the\n * PatternDescriptor was not found in the icon image cache.\n */\nfunction asCanvasPattern(pattern) {\n  if (!pattern.offset || !pattern.size) {\n    return iconCache.getPattern(pattern.src, 'anonymous', pattern.color);\n  }\n\n  const cacheKey = pattern.src + ':' + pattern.offset;\n\n  const canvasPattern = iconCache.getPattern(\n    cacheKey,\n    undefined,\n    pattern.color,\n  );\n  if (canvasPattern) {\n    return canvasPattern;\n  }\n\n  const iconImage = iconCache.get(pattern.src, 'anonymous', null);\n  if (iconImage.getImageState() !== ImageState.LOADED) {\n    return null;\n  }\n  const patternCanvasContext = createCanvasContext2D(\n    pattern.size[0],\n    pattern.size[1],\n  );\n  patternCanvasContext.drawImage(\n    iconImage.getImage(1),\n    pattern.offset[0],\n    pattern.offset[1],\n    pattern.size[0],\n    pattern.size[1],\n    0,\n    0,\n    pattern.size[0],\n    pattern.size[1],\n  );\n  getIconImage(\n    patternCanvasContext.canvas,\n    cacheKey,\n    undefined,\n    ImageState.LOADED,\n    pattern.color,\n    true,\n  );\n  return iconCache.getPattern(cacheKey, undefined, pattern.color);\n}\n","/**\n * @module ol/css\n */\n\n/**\n * @typedef {Object} FontParameters\n * @property {string} style Style.\n * @property {string} variant Variant.\n * @property {string} weight Weight.\n * @property {string} size Size.\n * @property {string} lineHeight LineHeight.\n * @property {string} family Family.\n * @property {Array<string>} families Families.\n */\n\n/**\n * The CSS class for hidden feature.\n *\n * @const\n * @type {string}\n */\nexport const CLASS_HIDDEN = 'ol-hidden';\n\n/**\n * The CSS class that we'll give the DOM elements to have them selectable.\n *\n * @const\n * @type {string}\n */\nexport const CLASS_SELECTABLE = 'ol-selectable';\n\n/**\n * The CSS class that we'll give the DOM elements to have them unselectable.\n *\n * @const\n * @type {string}\n */\nexport const CLASS_UNSELECTABLE = 'ol-unselectable';\n\n/**\n * The CSS class for unsupported feature.\n *\n * @const\n * @type {string}\n */\nexport const CLASS_UNSUPPORTED = 'ol-unsupported';\n\n/**\n * The CSS class for controls.\n *\n * @const\n * @type {string}\n */\nexport const CLASS_CONTROL = 'ol-control';\n\n/**\n * The CSS class that we'll give the DOM elements that are collapsed, i.e.\n * to those elements which usually can be expanded.\n *\n * @const\n * @type {string}\n */\nexport const CLASS_COLLAPSED = 'ol-collapsed';\n\n/**\n * From https://stackoverflow.com/questions/10135697/regex-to-parse-any-css-font\n * @type {RegExp}\n */\nconst fontRegEx = new RegExp(\n  [\n    '^\\\\s*(?=(?:(?:[-a-z]+\\\\s*){0,2}(italic|oblique))?)',\n    '(?=(?:(?:[-a-z]+\\\\s*){0,2}(small-caps))?)',\n    '(?=(?:(?:[-a-z]+\\\\s*){0,2}(bold(?:er)?|lighter|[1-9]00 ))?)',\n    '(?:(?:normal|\\\\1|\\\\2|\\\\3)\\\\s*){0,3}((?:xx?-)?',\n    '(?:small|large)|medium|smaller|larger|[\\\\.\\\\d]+(?:\\\\%|in|[cem]m|ex|p[ctx]))',\n    '(?:\\\\s*\\\\/\\\\s*(normal|[\\\\.\\\\d]+(?:\\\\%|in|[cem]m|ex|p[ctx])?))',\n    '?\\\\s*([-,\\\\\"\\\\\\'\\\\sa-z0-9]+?)\\\\s*$',\n  ].join(''),\n  'i',\n);\n/** @type {Array<'style'|'variant'|'weight'|'size'|'lineHeight'|'family'>} */\nconst fontRegExMatchIndex = [\n  'style',\n  'variant',\n  'weight',\n  'size',\n  'lineHeight',\n  'family',\n];\n\n/** @type {Object<string|number, number>} */\nexport const fontWeights = {\n  normal: 400,\n  bold: 700,\n};\n\n/**\n * Get the list of font families from a font spec.  Note that this doesn't work\n * for font families that have commas in them.\n * @param {string} fontSpec The CSS font property.\n * @return {FontParameters|null} The font parameters (or null if the input spec is invalid).\n */\nexport const getFontParameters = function (fontSpec) {\n  const match = fontSpec.match(fontRegEx);\n  if (!match) {\n    return null;\n  }\n  const style = /** @type {FontParameters} */ ({\n    lineHeight: 'normal',\n    size: '1.2em',\n    style: 'normal',\n    weight: '400',\n    variant: 'normal',\n  });\n  for (let i = 0, ii = fontRegExMatchIndex.length; i < ii; ++i) {\n    const value = match[i + 1];\n    if (value !== undefined) {\n      style[fontRegExMatchIndex[i]] =\n        typeof value === 'string' ? value.trim() : value;\n    }\n  }\n  if (isNaN(Number(style.weight)) && style.weight in fontWeights) {\n    style.weight = fontWeights[style.weight];\n  }\n  style.families = style.family\n    .split(/,\\s?/)\n    .map((f) => f.trim().replace(/^['\"]|['\"]$/g, ''));\n  return style;\n};\n","/**\n * @module ol/render/canvas\n */\nimport BaseObject from '../Object.js';\nimport {fontWeights, getFontParameters} from '../css.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport {WORKER_OFFSCREEN_CANVAS} from '../has.js';\nimport {clear} from '../obj.js';\n\n/**\n * @typedef {'Circle' | 'Image' | 'LineString' | 'Polygon' | 'Text' | 'Default'} BuilderType\n */\n\n/**\n * @typedef {Object} FillState\n * @property {import(\"../colorlike.js\").ColorLike} fillStyle FillStyle.\n */\n\n/**\n * @typedef Label\n * @property {number} width Width.\n * @property {number} height Height.\n * @property {Array<string|number>} contextInstructions ContextInstructions.\n */\n\n/**\n * @typedef {Object} FillStrokeState\n * @property {import(\"../colorlike.js\").ColorLike} [currentFillStyle] Current FillStyle.\n * @property {import(\"../colorlike.js\").ColorLike} [currentStrokeStyle] Current StrokeStyle.\n * @property {CanvasLineCap} [currentLineCap] Current LineCap.\n * @property {Array<number>} currentLineDash Current LineDash.\n * @property {number} [currentLineDashOffset] Current LineDashOffset.\n * @property {CanvasLineJoin} [currentLineJoin] Current LineJoin.\n * @property {number} [currentLineWidth] Current LineWidth.\n * @property {number} [currentMiterLimit] Current MiterLimit.\n * @property {number} [lastStroke] Last stroke.\n * @property {import(\"../colorlike.js\").ColorLike} [fillStyle] FillStyle.\n * @property {import(\"../colorlike.js\").ColorLike} [strokeStyle] StrokeStyle.\n * @property {CanvasLineCap} [lineCap] LineCap.\n * @property {Array<number>} lineDash LineDash.\n * @property {number} [lineDashOffset] LineDashOffset.\n * @property {CanvasLineJoin} [lineJoin] LineJoin.\n * @property {number} [lineWidth] LineWidth.\n * @property {number} [miterLimit] MiterLimit.\n * @property {number} [fillPatternScale] Fill pattern scale.\n */\n\n/**\n * @typedef {Object} StrokeState\n * @property {CanvasLineCap} lineCap LineCap.\n * @property {Array<number>} lineDash LineDash.\n * @property {number} lineDashOffset LineDashOffset.\n * @property {CanvasLineJoin} lineJoin LineJoin.\n * @property {number} lineWidth LineWidth.\n * @property {number} miterLimit MiterLimit.\n * @property {import(\"../colorlike.js\").ColorLike} strokeStyle StrokeStyle.\n */\n\n/**\n * @typedef {Object} TextState\n * @property {string} font Font.\n * @property {CanvasTextAlign} [textAlign] TextAlign.\n * @property {number} [repeat] Repeat.\n * @property {import(\"../style/Text.js\").TextJustify} [justify] Justify.\n * @property {CanvasTextBaseline} textBaseline TextBaseline.\n * @property {import(\"../style/Text.js\").TextPlacement} [placement] Placement.\n * @property {number} [maxAngle] MaxAngle.\n * @property {boolean} [overflow] Overflow.\n * @property {import(\"../style/Fill.js\").default} [backgroundFill] BackgroundFill.\n * @property {import(\"../style/Stroke.js\").default} [backgroundStroke] BackgroundStroke.\n * @property {import(\"../size.js\").Size} [scale] Scale.\n * @property {Array<number>} [padding] Padding.\n */\n\n/**\n * @typedef {Object} SerializableInstructions\n * @property {Array<*>} instructions The rendering instructions.\n * @property {Array<*>} hitDetectionInstructions The rendering hit detection instructions.\n * @property {Array<number>} coordinates The array of all coordinates.\n * @property {!Object<string, TextState>} [textStates] The text states (decluttering).\n * @property {!Object<string, FillState>} [fillStates] The fill states (decluttering).\n * @property {!Object<string, StrokeState>} [strokeStates] The stroke states (decluttering).\n */\n\n/**\n * @typedef {Object<number, import(\"./canvas/Executor.js\").ReplayImageOrLabelArgs>} DeclutterImageWithText\n */\n\n/**\n * @const\n * @type {string}\n */\nexport const defaultFont = '10px sans-serif';\n\n/**\n * @const\n * @type {string}\n */\nexport const defaultFillStyle = '#000';\n\n/**\n * @const\n * @type {CanvasLineCap}\n */\nexport const defaultLineCap = 'round';\n\n/**\n * @const\n * @type {Array<number>}\n */\nexport const defaultLineDash = [];\n\n/**\n * @const\n * @type {number}\n */\nexport const defaultLineDashOffset = 0;\n\n/**\n * @const\n * @type {CanvasLineJoin}\n */\nexport const defaultLineJoin = 'round';\n\n/**\n * @const\n * @type {number}\n */\nexport const defaultMiterLimit = 10;\n\n/**\n * @const\n * @type {import(\"../colorlike.js\").ColorLike}\n */\nexport const defaultStrokeStyle = '#000';\n\n/**\n * @const\n * @type {CanvasTextAlign}\n */\nexport const defaultTextAlign = 'center';\n\n/**\n * @const\n * @type {CanvasTextBaseline}\n */\nexport const defaultTextBaseline = 'middle';\n\n/**\n * @const\n * @type {Array<number>}\n */\nexport const defaultPadding = [0, 0, 0, 0];\n\n/**\n * @const\n * @type {number}\n */\nexport const defaultLineWidth = 1;\n\n/**\n * @type {BaseObject}\n */\nexport const checkedFonts = new BaseObject();\n\n/**\n * @type {CanvasRenderingContext2D}\n */\nlet measureContext = null;\n\n/**\n * @type {string}\n */\nlet measureFont;\n\n/**\n * @type {!Object<string, number>}\n */\nexport const textHeights = {};\n\nconst genericFontFamilies = new Set([\n  'serif',\n  'sans-serif',\n  'monospace',\n  'cursive',\n  'fantasy',\n  'system-ui',\n  'ui-serif',\n  'ui-sans-serif',\n  'ui-monospace',\n  'ui-rounded',\n  'emoji',\n  'math',\n  'fangsong',\n]);\n\n/**\n * @param {string} style Css font-style\n * @param {string} weight Css font-weight\n * @param {string} family Css font-family\n * @return {string} Font key.\n */\nfunction getFontKey(style, weight, family) {\n  return `${style} ${weight} 16px \"${family}\"`;\n}\n\n/**\n * Clears the label cache when a font becomes available.\n * @param {string} fontSpec CSS font spec.\n */\nexport const registerFont = (function () {\n  const retries = 100;\n  let timeout, fontFaceSet;\n\n  /**\n   * @param {string} fontSpec Css font spec\n   * @return {Promise<boolean>} Font with style and weight is available\n   */\n  async function isAvailable(fontSpec) {\n    await fontFaceSet.ready;\n    const fontFaces = await fontFaceSet.load(fontSpec);\n    if (fontFaces.length === 0) {\n      return false;\n    }\n    const font = getFontParameters(fontSpec);\n    const checkFamily = font.families[0].toLowerCase();\n    const checkWeight = font.weight;\n    return fontFaces.some(\n      /**\n       * @param {import('../css.js').FontParameters} f Font.\n       * @return {boolean} Font matches.\n       */\n      (f) => {\n        const family = f.family.replace(/^['\"]|['\"]$/g, '').toLowerCase();\n        const weight = fontWeights[f.weight] || f.weight;\n        return (\n          family === checkFamily &&\n          f.style === font.style &&\n          weight == checkWeight\n        );\n      },\n    );\n  }\n\n  async function check() {\n    await fontFaceSet.ready;\n    let done = true;\n    const checkedFontsProperties = checkedFonts.getProperties();\n    const fonts = Object.keys(checkedFontsProperties).filter(\n      (key) => checkedFontsProperties[key] < retries,\n    );\n    for (let i = fonts.length - 1; i >= 0; --i) {\n      const font = fonts[i];\n      let currentRetries = checkedFontsProperties[font];\n      if (currentRetries < retries) {\n        if (await isAvailable(font)) {\n          clear(textHeights);\n          checkedFonts.set(font, retries);\n        } else {\n          currentRetries += 10;\n          checkedFonts.set(font, currentRetries, true);\n          if (currentRetries < retries) {\n            done = false;\n          }\n        }\n      }\n    }\n    timeout = undefined;\n    if (!done) {\n      timeout = setTimeout(check, 100);\n    }\n  }\n\n  return async function (fontSpec) {\n    if (!fontFaceSet) {\n      fontFaceSet = WORKER_OFFSCREEN_CANVAS ? self.fonts : document.fonts;\n    }\n    const font = getFontParameters(fontSpec);\n    if (!font) {\n      return;\n    }\n    const families = font.families;\n    let needCheck = false;\n    for (const family of families) {\n      if (genericFontFamilies.has(family)) {\n        continue;\n      }\n      const key = getFontKey(font.style, font.weight, family);\n      if (checkedFonts.get(key) !== undefined) {\n        continue;\n      }\n      checkedFonts.set(key, 0, true);\n      needCheck = true;\n    }\n    if (needCheck) {\n      clearTimeout(timeout);\n      timeout = setTimeout(check, 100);\n    }\n  };\n})();\n\n/**\n * @param {string} font Font to use for measuring.\n * @return {import(\"../size.js\").Size} Measurement.\n */\nexport const measureTextHeight = (function () {\n  /**\n   * @type {HTMLDivElement}\n   */\n  let measureElement;\n  return function (fontSpec) {\n    let height = textHeights[fontSpec];\n    if (height == undefined) {\n      if (WORKER_OFFSCREEN_CANVAS) {\n        const font = getFontParameters(fontSpec);\n        const metrics = measureText(fontSpec, 'Žg');\n        const lineHeight = isNaN(Number(font.lineHeight))\n          ? 1.2\n          : Number(font.lineHeight);\n        height =\n          lineHeight *\n          (metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent);\n      } else {\n        if (!measureElement) {\n          measureElement = document.createElement('div');\n          measureElement.innerHTML = 'M';\n          measureElement.style.minHeight = '0';\n          measureElement.style.maxHeight = 'none';\n          measureElement.style.height = 'auto';\n          measureElement.style.padding = '0';\n          measureElement.style.border = 'none';\n          measureElement.style.position = 'absolute';\n          measureElement.style.display = 'block';\n          measureElement.style.left = '-99999px';\n        }\n        measureElement.style.font = fontSpec;\n        document.body.appendChild(measureElement);\n        height = measureElement.offsetHeight;\n        document.body.removeChild(measureElement);\n      }\n      textHeights[fontSpec] = height;\n    }\n    return height;\n  };\n})();\n\n/**\n * @param {string} font Font.\n * @param {string} text Text.\n * @return {TextMetrics} Text metrics.\n */\nfunction measureText(font, text) {\n  if (!measureContext) {\n    measureContext = createCanvasContext2D(1, 1);\n  }\n  if (font != measureFont) {\n    measureContext.font = font;\n    measureFont = measureContext.font;\n  }\n  return measureContext.measureText(text);\n}\n\n/**\n * @param {string} font Font.\n * @param {string} text Text.\n * @return {number} Width.\n */\nexport function measureTextWidth(font, text) {\n  return measureText(font, text).width;\n}\n\n/**\n * Measure text width using a cache.\n * @param {string} font The font.\n * @param {string} text The text to measure.\n * @param {Object<string, number>} cache A lookup of cached widths by text.\n * @return {number} The text width.\n */\nexport function measureAndCacheTextWidth(font, text, cache) {\n  if (text in cache) {\n    return cache[text];\n  }\n  const width = text\n    .split('\\n')\n    .reduce((prev, curr) => Math.max(prev, measureTextWidth(font, curr)), 0);\n  cache[text] = width;\n  return width;\n}\n\n/**\n * @param {TextState} baseStyle Base style.\n * @param {Array<string>} chunks Text chunks to measure.\n * @return {{width: number, height: number, widths: Array<number>, heights: Array<number>, lineWidths: Array<number>}}} Text metrics.\n */\nexport function getTextDimensions(baseStyle, chunks) {\n  const widths = [];\n  const heights = [];\n  const lineWidths = [];\n  let width = 0;\n  let lineWidth = 0;\n  let height = 0;\n  let lineHeight = 0;\n  for (let i = 0, ii = chunks.length; i <= ii; i += 2) {\n    const text = chunks[i];\n    if (text === '\\n' || i === ii) {\n      width = Math.max(width, lineWidth);\n      lineWidths.push(lineWidth);\n      lineWidth = 0;\n      height += lineHeight;\n      lineHeight = 0;\n      continue;\n    }\n    const font = chunks[i + 1] || baseStyle.font;\n    const currentWidth = measureTextWidth(font, text);\n    widths.push(currentWidth);\n    lineWidth += currentWidth;\n    const currentHeight = measureTextHeight(font);\n    heights.push(currentHeight);\n    lineHeight = Math.max(lineHeight, currentHeight);\n  }\n  return {width, height, widths, heights, lineWidths};\n}\n\n/**\n * @param {CanvasRenderingContext2D} context Context.\n * @param {number} rotation Rotation.\n * @param {number} offsetX X offset.\n * @param {number} offsetY Y offset.\n */\nexport function rotateAtOffset(context, rotation, offsetX, offsetY) {\n  if (rotation !== 0) {\n    context.translate(offsetX, offsetY);\n    context.rotate(rotation);\n    context.translate(-offsetX, -offsetY);\n  }\n}\n\n/**\n * @param {CanvasRenderingContext2D|import(\"../render/canvas/ZIndexContext.js\").ZIndexContextProxy} context Context.\n * @param {import(\"../transform.js\").Transform|null} transform Transform.\n * @param {number} opacity Opacity.\n * @param {Label|HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} labelOrImage Label.\n * @param {number} originX Origin X.\n * @param {number} originY Origin Y.\n * @param {number} w Width.\n * @param {number} h Height.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {import(\"../size.js\").Size} scale Scale.\n */\nexport function drawImageOrLabel(\n  context,\n  transform,\n  opacity,\n  labelOrImage,\n  originX,\n  originY,\n  w,\n  h,\n  x,\n  y,\n  scale,\n) {\n  context.save();\n\n  if (opacity !== 1) {\n    if (context.globalAlpha === undefined) {\n      context.globalAlpha = (context) => (context.globalAlpha *= opacity);\n    } else {\n      context.globalAlpha *= opacity;\n    }\n  }\n  if (transform) {\n    context.transform.apply(context, transform);\n  }\n\n  if (/** @type {*} */ (labelOrImage).contextInstructions) {\n    // label\n    context.translate(x, y);\n    context.scale(scale[0], scale[1]);\n    executeLabelInstructions(/** @type {Label} */ (labelOrImage), context);\n  } else if (scale[0] < 0 || scale[1] < 0) {\n    // flipped image\n    context.translate(x, y);\n    context.scale(scale[0], scale[1]);\n    context.drawImage(\n      /** @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} */ (\n        labelOrImage\n      ),\n      originX,\n      originY,\n      w,\n      h,\n      0,\n      0,\n      w,\n      h,\n    );\n  } else {\n    // if image not flipped translate and scale can be avoided\n    context.drawImage(\n      /** @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} */ (\n        labelOrImage\n      ),\n      originX,\n      originY,\n      w,\n      h,\n      x,\n      y,\n      w * scale[0],\n      h * scale[1],\n    );\n  }\n\n  context.restore();\n}\n\n/**\n * @param {Label} label Label.\n * @param {CanvasRenderingContext2D} context Context.\n */\nfunction executeLabelInstructions(label, context) {\n  const contextInstructions = label.contextInstructions;\n  for (let i = 0, ii = contextInstructions.length; i < ii; i += 2) {\n    if (Array.isArray(contextInstructions[i + 1])) {\n      context[contextInstructions[i]].apply(\n        context,\n        contextInstructions[i + 1],\n      );\n    } else {\n      context[contextInstructions[i]] = contextInstructions[i + 1];\n    }\n  }\n}\n"],"names":["a","Array","i","RegExp","f","isNaN","Number","d","Set","Object","setTimeout","self","document","s","clearTimeout","t","Math"],"mappings":"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"}