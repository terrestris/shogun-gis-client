{"version":3,"file":"8561.cfc7dcee67b830d4.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/ol/array.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/util.js"],"sourcesContent":["/**\n * @module ol/array\n */\n\n/**\n * Performs a binary search on the provided sorted list and returns the index of the item if found. If it can't be found it'll return -1.\n * https://github.com/darkskyapp/binary-search\n *\n * @param {Array<*>} haystack Items to search through.\n * @param {*} needle The item to look for.\n * @param {Function} [comparator] Comparator function.\n * @return {number} The index of the item if found, -1 if not.\n */\nexport function binarySearch(haystack, needle, comparator) {\n  let mid, cmp;\n  comparator = comparator || ascending;\n  let low = 0;\n  let high = haystack.length;\n  let found = false;\n\n  while (low < high) {\n    /* Note that \"(low + high) >>> 1\" may overflow, and results in a typecast\n     * to double (which gives the wrong results). */\n    mid = low + ((high - low) >> 1);\n    cmp = +comparator(haystack[mid], needle);\n\n    if (cmp < 0.0) {\n      /* Too low. */\n      low = mid + 1;\n    } else {\n      /* Key found or too high */\n      high = mid;\n      found = !cmp;\n    }\n  }\n\n  /* Key not found. */\n  return found ? low : ~low;\n}\n\n/**\n * Compare function sorting arrays in ascending order.  Safe to use for numeric values.\n * @param {*} a The first object to be compared.\n * @param {*} b The second object to be compared.\n * @return {number} A negative number, zero, or a positive number as the first\n *     argument is less than, equal to, or greater than the second.\n */\nexport function ascending(a, b) {\n  return a > b ? 1 : a < b ? -1 : 0;\n}\n\n/**\n * Compare function sorting arrays in descending order.  Safe to use for numeric values.\n * @param {*} a The first object to be compared.\n * @param {*} b The second object to be compared.\n * @return {number} A negative number, zero, or a positive number as the first\n *     argument is greater than, equal to, or less than the second.\n */\nexport function descending(a, b) {\n  return a < b ? 1 : a > b ? -1 : 0;\n}\n\n/**\n * {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution} can use a function\n * of this type to determine which nearest resolution to use.\n *\n * This function takes a `{number}` representing a value between two array entries,\n * a `{number}` representing the value of the nearest higher entry and\n * a `{number}` representing the value of the nearest lower entry\n * as arguments and returns a `{number}`. If a negative number or zero is returned\n * the lower value will be used, if a positive number is returned the higher value\n * will be used.\n * @typedef {function(number, number, number): number} NearestDirectionFunction\n * @api\n */\n\n/**\n * @param {Array<number>} arr Array in descending order.\n * @param {number} target Target.\n * @param {number|NearestDirectionFunction} direction\n *    0 means return the nearest,\n *    > 0 means return the largest nearest,\n *    < 0 means return the smallest nearest.\n * @return {number} Index.\n */\nexport function linearFindNearest(arr, target, direction) {\n  if (arr[0] <= target) {\n    return 0;\n  }\n\n  const n = arr.length;\n  if (target <= arr[n - 1]) {\n    return n - 1;\n  }\n\n  if (typeof direction === 'function') {\n    for (let i = 1; i < n; ++i) {\n      const candidate = arr[i];\n      if (candidate === target) {\n        return i;\n      }\n      if (candidate < target) {\n        if (direction(target, arr[i - 1], candidate) > 0) {\n          return i - 1;\n        }\n        return i;\n      }\n    }\n    return n - 1;\n  }\n\n  if (direction > 0) {\n    for (let i = 1; i < n; ++i) {\n      if (arr[i] < target) {\n        return i - 1;\n      }\n    }\n    return n - 1;\n  }\n\n  if (direction < 0) {\n    for (let i = 1; i < n; ++i) {\n      if (arr[i] <= target) {\n        return i;\n      }\n    }\n    return n - 1;\n  }\n\n  for (let i = 1; i < n; ++i) {\n    if (arr[i] == target) {\n      return i;\n    }\n    if (arr[i] < target) {\n      if (arr[i - 1] - target < target - arr[i]) {\n        return i - 1;\n      }\n      return i;\n    }\n  }\n  return n - 1;\n}\n\n/**\n * @param {Array<*>} arr Array.\n * @param {number} begin Begin index.\n * @param {number} end End index.\n */\nexport function reverseSubArray(arr, begin, end) {\n  while (begin < end) {\n    const tmp = arr[begin];\n    arr[begin] = arr[end];\n    arr[end] = tmp;\n    ++begin;\n    --end;\n  }\n}\n\n/**\n * @param {Array<VALUE>} arr The array to modify.\n * @param {!Array<VALUE>|VALUE} data The elements or arrays of elements to add to arr.\n * @template VALUE\n */\nexport function extend(arr, data) {\n  const extension = Array.isArray(data) ? data : [data];\n  const length = extension.length;\n  for (let i = 0; i < length; i++) {\n    arr[arr.length] = extension[i];\n  }\n}\n\n/**\n * @param {Array<VALUE>} arr The array to modify.\n * @param {VALUE} obj The element to remove.\n * @template VALUE\n * @return {boolean} If the element was removed.\n */\nexport function remove(arr, obj) {\n  const i = arr.indexOf(obj);\n  const found = i > -1;\n  if (found) {\n    arr.splice(i, 1);\n  }\n  return found;\n}\n\n/**\n * @param {Array<any>|Uint8ClampedArray} arr1 The first array to compare.\n * @param {Array<any>|Uint8ClampedArray} arr2 The second array to compare.\n * @return {boolean} Whether the two arrays are equal.\n */\nexport function equals(arr1, arr2) {\n  const len1 = arr1.length;\n  if (len1 !== arr2.length) {\n    return false;\n  }\n  for (let i = 0; i < len1; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Sort the passed array such that the relative order of equal elements is preserved.\n * See https://en.wikipedia.org/wiki/Sorting_algorithm#Stability for details.\n * @param {Array<*>} arr The array to sort (modifies original).\n * @param {!function(*, *): number} compareFnc Comparison function.\n * @api\n */\nexport function stableSort(arr, compareFnc) {\n  const length = arr.length;\n  const tmp = Array(arr.length);\n  let i;\n  for (i = 0; i < length; i++) {\n    tmp[i] = {index: i, value: arr[i]};\n  }\n  tmp.sort(function (a, b) {\n    return compareFnc(a.value, b.value) || a.index - b.index;\n  });\n  for (i = 0; i < arr.length; i++) {\n    arr[i] = tmp[i].value;\n  }\n}\n\n/**\n * @param {Array<*>} arr The array to test.\n * @param {Function} [func] Comparison function.\n * @param {boolean} [strict] Strictly sorted (default false).\n * @return {boolean} Return index.\n */\nexport function isSorted(arr, func, strict) {\n  const compare = func || ascending;\n  return arr.every(function (currentVal, index) {\n    if (index === 0) {\n      return true;\n    }\n    const res = compare(arr[index - 1], currentVal);\n    return !(res > 0 || (strict && res === 0));\n  });\n}\n","/**\n * @module ol/util\n */\n\n/**\n * @return {never} Any return.\n */\nexport function abstract() {\n  throw new Error('Unimplemented abstract method.');\n}\n\n/**\n * Counter for getUid.\n * @type {number}\n * @private\n */\nlet uidCounter_ = 0;\n\n/**\n * Gets a unique ID for an object. This mutates the object so that further calls\n * with the same object as a parameter returns the same value. Unique IDs are generated\n * as a strictly increasing sequence. Adapted from goog.getUid.\n *\n * @param {Object} obj The object to get the unique ID for.\n * @return {string} The unique ID for the object.\n * @api\n */\nexport function getUid(obj) {\n  return obj.ol_uid || (obj.ol_uid = String(++uidCounter_));\n}\n\n/**\n * OpenLayers version.\n * @type {string}\n */\nexport const VERSION = '10.4.0';\n"],"names":["n","Array","Error","u","String"],"mappings":"uJAaO,SAAS,EAAa,CAAQ,CAAEA,CAAM,CAAE,CAAU,MACnD,EAAK,EACT,EAAa,GAAc,EAC3B,IAAI,EAAM,EACN,EAAO,EAAS,MAAM,CACtB,EAAQ,GAEZ,KAAO,EAAM,GAMP,AAFJ,GAAM,CAAC,EAAW,CAAQ,CAD1B,EAAM,EAAO,CAAC,EAAO,GAAQ,GACE,CAAEA,EAAM,EAE7B,EAER,EAAM,EAAM,GAGZ,EAAO,EACP,EAAQ,CAAC,GAKb,OAAO,EAAQ,EAAM,CAAC,CACxB,CASO,SAAS,EAAU,CAAC,CAAE,CAAC,EAC5B,OAAO,EAAI,EAAI,EAAI,EAAI,EAAI,GAAK,CAClC,CASO,SAAS,EAAW,CAAC,CAAE,CAAC,EAC7B,OAAO,EAAI,EAAI,EAAI,EAAI,EAAI,GAAK,CAClC,CAyBO,SAAS,EAAkB,CAAG,CAAE,CAAM,CAAE,CAAS,EACtD,GAAI,CAAG,CAAC,EAAE,EAAI,EACZ,OAAO,EAGT,IAAM,EAAI,EAAI,MAAM,CACpB,GAAI,GAAU,CAAG,CAAC,EAAI,EAAE,CACtB,OAAO,EAAI,EAGb,GAAI,AAAqB,YAArB,OAAO,EAA0B,CACnC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,EAAE,EAAG,CAC1B,IAAM,EAAY,CAAG,CAAC,EAAE,CACxB,GAAI,IAAc,EAChB,OAAO,EAET,GAAI,EAAY,EAAQ,CACtB,GAAI,EAAU,EAAQ,CAAG,CAAC,EAAI,EAAE,CAAE,GAAa,EAC7C,OAAO,EAAI,EAEb,OAAO,CACT,CACF,CACA,OAAO,EAAI,CACb,CAEA,GAAI,EAAY,EAAG,CACjB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,EAAE,EACvB,GAAI,CAAG,CAAC,EAAE,CAAG,EACX,OAAO,EAAI,EAGf,OAAO,EAAI,CACb,CAEA,GAAI,EAAY,EAAG,CACjB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,EAAE,EACvB,GAAI,CAAG,CAAC,EAAE,EAAI,EACZ,OAAO,EAGX,OAAO,EAAI,CACb,CAEA,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,EAAE,EAAG,CAC1B,GAAI,CAAG,CAAC,EAAE,EAAI,EACZ,OAAO,EAET,GAAI,CAAG,CAAC,EAAE,CAAG,EAAQ,CACnB,GAAI,CAAG,CAAC,EAAI,EAAE,CAAG,EAAS,EAAS,CAAG,CAAC,EAAE,CACvC,OAAO,EAAI,EAEb,OAAO,CACT,CACF,CACA,OAAO,EAAI,CACb,CAOO,SAAS,EAAgB,CAAG,CAAE,CAAK,CAAE,CAAG,EAC7C,KAAO,EAAQ,GAAK,CAClB,IAAM,EAAM,CAAG,CAAC,EAAM,AACtB,EAAG,CAAC,EAAM,CAAG,CAAG,CAAC,EAAI,CACrB,CAAG,CAAC,EAAI,CAAG,EACX,EAAE,EACF,EAAE,CACJ,CACF,CAOO,SAAS,EAAO,CAAG,CAAE,CAAI,EAC9B,IAAM,EAAYC,MAAM,OAAO,CAAC,GAAQ,EAAO,CAAC,EAAK,CAC/C,EAAS,EAAU,MAAM,CAC/B,IAAK,IAAI,EAAI,EAAG,EAAI,EAAQ,IAC1B,CAAG,CAAC,EAAI,MAAM,CAAC,CAAG,CAAS,CAAC,EAAE,AAElC,CAsBO,SAAS,EAAO,CAAI,CAAE,CAAI,EAC/B,IAAM,EAAO,EAAK,MAAM,CACxB,GAAI,IAAS,EAAK,MAAM,CACtB,MAAO,GAET,IAAK,IAAI,EAAI,EAAG,EAAI,EAAM,IACxB,GAAI,CAAI,CAAC,EAAE,GAAK,CAAI,CAAC,EAAE,CACrB,MAAO,GAGX,MAAO,EACT,CA8BO,SAAS,EAAS,CAAG,CAAE,CAAI,CAAE,CAAM,EACxC,IAAM,EAAU,GAAQ,EACxB,OAAO,EAAI,KAAK,CAAC,SAAU,CAAU,CAAE,CAAK,EAC1C,GAAI,AAAU,IAAV,EACF,MAAO,GAET,IAAM,EAAM,EAAQ,CAAG,CAAC,EAAQ,EAAE,CAAE,GACpC,MAAO,CAAE,GAAM,GAAM,GAAU,AAAQ,IAAR,CAAS,CAC1C,EACF,C,gOC1OO,SAAS,IACd,MAAM,AAAIC,MAAM,iCAClB,C,uGAOA,IAAIC,EAAc,EAWX,SAAS,EAAO,CAAG,EACxB,OAAO,EAAI,MAAM,EAAK,GAAI,MAAM,CAAGC,OAAO,EAAED,EAAW,CACzD,CAMO,IAAM,EAAU,Q"}