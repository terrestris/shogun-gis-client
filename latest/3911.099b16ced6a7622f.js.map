{"version":3,"file":"3911.099b16ced6a7622f.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/ol/math.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/sphere.js"],"sourcesContent":["/**\n * @module ol/math\n */\n\n/**\n * Takes a number and clamps it to within the provided bounds.\n * @param {number} value The input number.\n * @param {number} min The minimum value to return.\n * @param {number} max The maximum value to return.\n * @return {number} The input number if it is within bounds, or the nearest\n *     number within the bounds.\n */\nexport function clamp(value, min, max) {\n  return Math.min(Math.max(value, min), max);\n}\n\n/**\n * Returns the square of the closest distance between the point (x, y) and the\n * line segment (x1, y1) to (x2, y2).\n * @param {number} x X.\n * @param {number} y Y.\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */\nexport function squaredSegmentDistance(x, y, x1, y1, x2, y2) {\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  if (dx !== 0 || dy !== 0) {\n    const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n    if (t > 1) {\n      x1 = x2;\n      y1 = y2;\n    } else if (t > 0) {\n      x1 += dx * t;\n      y1 += dy * t;\n    }\n  }\n  return squaredDistance(x, y, x1, y1);\n}\n\n/**\n * Returns the square of the distance between the points (x1, y1) and (x2, y2).\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */\nexport function squaredDistance(x1, y1, x2, y2) {\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  return dx * dx + dy * dy;\n}\n\n/**\n * Solves system of linear equations using Gaussian elimination method.\n *\n * @param {Array<Array<number>>} mat Augmented matrix (n x n + 1 column)\n *                                     in row-major order.\n * @return {Array<number>|null} The resulting vector.\n */\nexport function solveLinearSystem(mat) {\n  const n = mat.length;\n\n  for (let i = 0; i < n; i++) {\n    // Find max in the i-th column (ignoring i - 1 first rows)\n    let maxRow = i;\n    let maxEl = Math.abs(mat[i][i]);\n    for (let r = i + 1; r < n; r++) {\n      const absValue = Math.abs(mat[r][i]);\n      if (absValue > maxEl) {\n        maxEl = absValue;\n        maxRow = r;\n      }\n    }\n\n    if (maxEl === 0) {\n      return null; // matrix is singular\n    }\n\n    // Swap max row with i-th (current) row\n    const tmp = mat[maxRow];\n    mat[maxRow] = mat[i];\n    mat[i] = tmp;\n\n    // Subtract the i-th row to make all the remaining rows 0 in the i-th column\n    for (let j = i + 1; j < n; j++) {\n      const coef = -mat[j][i] / mat[i][i];\n      for (let k = i; k < n + 1; k++) {\n        if (i == k) {\n          mat[j][k] = 0;\n        } else {\n          mat[j][k] += coef * mat[i][k];\n        }\n      }\n    }\n  }\n\n  // Solve Ax=b for upper triangular matrix A (mat)\n  const x = new Array(n);\n  for (let l = n - 1; l >= 0; l--) {\n    x[l] = mat[l][n] / mat[l][l];\n    for (let m = l - 1; m >= 0; m--) {\n      mat[m][n] -= mat[m][l] * x[l];\n    }\n  }\n  return x;\n}\n\n/**\n * Converts radians to to degrees.\n *\n * @param {number} angleInRadians Angle in radians.\n * @return {number} Angle in degrees.\n */\nexport function toDegrees(angleInRadians) {\n  return (angleInRadians * 180) / Math.PI;\n}\n\n/**\n * Converts degrees to radians.\n *\n * @param {number} angleInDegrees Angle in degrees.\n * @return {number} Angle in radians.\n */\nexport function toRadians(angleInDegrees) {\n  return (angleInDegrees * Math.PI) / 180;\n}\n\n/**\n * Returns the modulo of a / b, depending on the sign of b.\n *\n * @param {number} a Dividend.\n * @param {number} b Divisor.\n * @return {number} Modulo.\n */\nexport function modulo(a, b) {\n  const r = a % b;\n  return r * b < 0 ? r + b : r;\n}\n\n/**\n * Calculates the linearly interpolated value of x between a and b.\n *\n * @param {number} a Number\n * @param {number} b Number\n * @param {number} x Value to be interpolated.\n * @return {number} Interpolated value.\n */\nexport function lerp(a, b, x) {\n  return a + x * (b - a);\n}\n\n/**\n * Returns a number with a limited number of decimal digits.\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The input number with a limited number of decimal digits.\n */\nexport function toFixed(n, decimals) {\n  const factor = Math.pow(10, decimals);\n  return Math.round(n * factor) / factor;\n}\n\n/**\n * Rounds a number to the nearest integer value considering only the given number\n * of decimal digits (with rounding on the final digit).\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The nearest integer.\n */\nexport function round(n, decimals) {\n  return Math.round(toFixed(n, decimals));\n}\n\n/**\n * Rounds a number to the next smaller integer considering only the given number\n * of decimal digits (with rounding on the final digit).\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The next smaller integer.\n */\nexport function floor(n, decimals) {\n  return Math.floor(toFixed(n, decimals));\n}\n\n/**\n * Rounds a number to the next bigger integer considering only the given number\n * of decimal digits (with rounding on the final digit).\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The next bigger integer.\n */\nexport function ceil(n, decimals) {\n  return Math.ceil(toFixed(n, decimals));\n}\n\n/**\n * Wraps a number between some minimum and maximum values.\n * @param {number} n The number to wrap.\n * @param {number} min The minimum of the range (inclusive).\n * @param {number} max The maximum of the range (exclusive).\n * @return {number} The wrapped number.\n */\nexport function wrap(n, min, max) {\n  if (n >= min && n < max) {\n    return n;\n  }\n  const range = max - min;\n  return ((((n - min) % range) + range) % range) + min;\n}\n","/**\n * @module ol/sphere\n */\nimport {toDegrees, toRadians} from './math.js';\n\n/**\n * Object literal with options for the {@link getLength} or {@link getArea}\n * functions.\n * @typedef {Object} SphereMetricOptions\n * @property {import(\"./proj.js\").ProjectionLike} [projection='EPSG:3857']\n * Projection of the  geometry.  By default, the geometry is assumed to be in\n * Web Mercator.\n * @property {number} [radius=6371008.8] Sphere radius.  By default, the\n * [mean Earth radius](https://en.wikipedia.org/wiki/Earth_radius#Mean_radius)\n * for the WGS84 ellipsoid is used.\n */\n\n/**\n * The mean Earth radius (1/3 * (2a + b)) for the WGS84 ellipsoid.\n * https://en.wikipedia.org/wiki/Earth_radius#Mean_radius\n * @type {number}\n */\nexport const DEFAULT_RADIUS = 6371008.8;\n\n/**\n * Get the great circle distance (in meters) between two geographic coordinates.\n * @param {Array} c1 Starting coordinate.\n * @param {Array} c2 Ending coordinate.\n * @param {number} [radius] The sphere radius to use.  Defaults to the Earth's\n *     mean radius using the WGS84 ellipsoid.\n * @return {number} The great circle distance between the points (in meters).\n * @api\n */\nexport function getDistance(c1, c2, radius) {\n  radius = radius || DEFAULT_RADIUS;\n  const lat1 = toRadians(c1[1]);\n  const lat2 = toRadians(c2[1]);\n  const deltaLatBy2 = (lat2 - lat1) / 2;\n  const deltaLonBy2 = toRadians(c2[0] - c1[0]) / 2;\n  const a =\n    Math.sin(deltaLatBy2) * Math.sin(deltaLatBy2) +\n    Math.sin(deltaLonBy2) *\n      Math.sin(deltaLonBy2) *\n      Math.cos(lat1) *\n      Math.cos(lat2);\n  return 2 * radius * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n}\n\n/**\n * Get the cumulative great circle length of linestring coordinates (geographic).\n * @param {Array} coordinates Linestring coordinates.\n * @param {number} radius The sphere radius to use.\n * @return {number} The length (in meters).\n */\nfunction getLengthInternal(coordinates, radius) {\n  let length = 0;\n  for (let i = 0, ii = coordinates.length; i < ii - 1; ++i) {\n    length += getDistance(coordinates[i], coordinates[i + 1], radius);\n  }\n  return length;\n}\n\n/**\n * Get the spherical length of a geometry.  This length is the sum of the\n * great circle distances between coordinates.  For polygons, the length is\n * the sum of all rings.  For points, the length is zero.  For multi-part\n * geometries, the length is the sum of the length of each part.\n * @param {import(\"./geom/Geometry.js\").default} geometry A geometry.\n * @param {SphereMetricOptions} [options] Options for the\n * length calculation.  By default, geometries are assumed to be in 'EPSG:3857'.\n * You can change this by providing a `projection` option.\n * @return {number} The spherical length (in meters).\n * @api\n */\nexport function getLength(geometry, options) {\n  options = options || {};\n  const radius = options.radius || DEFAULT_RADIUS;\n  const projection = options.projection || 'EPSG:3857';\n  const type = geometry.getType();\n  if (type !== 'GeometryCollection') {\n    geometry = geometry.clone().transform(projection, 'EPSG:4326');\n  }\n  let length = 0;\n  let coordinates, coords, i, ii, j, jj;\n  switch (type) {\n    case 'Point':\n    case 'MultiPoint': {\n      break;\n    }\n    case 'LineString':\n    case 'LinearRing': {\n      coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (\n        geometry\n      ).getCoordinates();\n      length = getLengthInternal(coordinates, radius);\n      break;\n    }\n    case 'MultiLineString':\n    case 'Polygon': {\n      coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (\n        geometry\n      ).getCoordinates();\n      for (i = 0, ii = coordinates.length; i < ii; ++i) {\n        length += getLengthInternal(coordinates[i], radius);\n      }\n      break;\n    }\n    case 'MultiPolygon': {\n      coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (\n        geometry\n      ).getCoordinates();\n      for (i = 0, ii = coordinates.length; i < ii; ++i) {\n        coords = coordinates[i];\n        for (j = 0, jj = coords.length; j < jj; ++j) {\n          length += getLengthInternal(coords[j], radius);\n        }\n      }\n      break;\n    }\n    case 'GeometryCollection': {\n      const geometries =\n        /** @type {import(\"./geom/GeometryCollection.js\").default} */ (\n          geometry\n        ).getGeometries();\n      for (i = 0, ii = geometries.length; i < ii; ++i) {\n        length += getLength(geometries[i], options);\n      }\n      break;\n    }\n    default: {\n      throw new Error('Unsupported geometry type: ' + type);\n    }\n  }\n  return length;\n}\n\n/**\n * Returns the spherical area for a list of coordinates.\n *\n * [Reference](https://trs.jpl.nasa.gov/handle/2014/40409)\n * Robert. G. Chamberlain and William H. Duquette, \"Some Algorithms for\n * Polygons on a Sphere\", JPL Publication 07-03, Jet Propulsion\n * Laboratory, Pasadena, CA, June 2007\n *\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates List of coordinates of a linear\n * ring. If the ring is oriented clockwise, the area will be positive,\n * otherwise it will be negative.\n * @param {number} radius The sphere radius.\n * @return {number} Area (in square meters).\n */\nfunction getAreaInternal(coordinates, radius) {\n  let area = 0;\n  const len = coordinates.length;\n  let x1 = coordinates[len - 1][0];\n  let y1 = coordinates[len - 1][1];\n  for (let i = 0; i < len; i++) {\n    const x2 = coordinates[i][0];\n    const y2 = coordinates[i][1];\n    area +=\n      toRadians(x2 - x1) *\n      (2 + Math.sin(toRadians(y1)) + Math.sin(toRadians(y2)));\n    x1 = x2;\n    y1 = y2;\n  }\n  return (area * radius * radius) / 2.0;\n}\n\n/**\n * Get the spherical area of a geometry.  This is the area (in meters) assuming\n * that polygon edges are segments of great circles on a sphere.\n * @param {import(\"./geom/Geometry.js\").default} geometry A geometry.\n * @param {SphereMetricOptions} [options] Options for the area\n *     calculation.  By default, geometries are assumed to be in 'EPSG:3857'.\n *     You can change this by providing a `projection` option.\n * @return {number} The spherical area (in square meters).\n * @api\n */\nexport function getArea(geometry, options) {\n  options = options || {};\n  const radius = options.radius || DEFAULT_RADIUS;\n  const projection = options.projection || 'EPSG:3857';\n  const type = geometry.getType();\n  if (type !== 'GeometryCollection') {\n    geometry = geometry.clone().transform(projection, 'EPSG:4326');\n  }\n  let area = 0;\n  let coordinates, coords, i, ii, j, jj;\n  switch (type) {\n    case 'Point':\n    case 'MultiPoint':\n    case 'LineString':\n    case 'MultiLineString':\n    case 'LinearRing': {\n      break;\n    }\n    case 'Polygon': {\n      coordinates = /** @type {import(\"./geom/Polygon.js\").default} */ (\n        geometry\n      ).getCoordinates();\n      area = Math.abs(getAreaInternal(coordinates[0], radius));\n      for (i = 1, ii = coordinates.length; i < ii; ++i) {\n        area -= Math.abs(getAreaInternal(coordinates[i], radius));\n      }\n      break;\n    }\n    case 'MultiPolygon': {\n      coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (\n        geometry\n      ).getCoordinates();\n      for (i = 0, ii = coordinates.length; i < ii; ++i) {\n        coords = coordinates[i];\n        area += Math.abs(getAreaInternal(coords[0], radius));\n        for (j = 1, jj = coords.length; j < jj; ++j) {\n          area -= Math.abs(getAreaInternal(coords[j], radius));\n        }\n      }\n      break;\n    }\n    case 'GeometryCollection': {\n      const geometries =\n        /** @type {import(\"./geom/GeometryCollection.js\").default} */ (\n          geometry\n        ).getGeometries();\n      for (i = 0, ii = geometries.length; i < ii; ++i) {\n        area += getArea(geometries[i], options);\n      }\n      break;\n    }\n    default: {\n      throw new Error('Unsupported geometry type: ' + type);\n    }\n  }\n  return area;\n}\n\n/**\n * Returns the coordinate at the given distance and bearing from `c1`.\n *\n * @param {import(\"./coordinate.js\").Coordinate} c1 The origin point (`[lon, lat]` in degrees).\n * @param {number} distance The great-circle distance between the origin\n *     point and the target point.\n * @param {number} bearing The bearing (in radians).\n * @param {number} [radius] The sphere radius to use.  Defaults to the Earth's\n *     mean radius using the WGS84 ellipsoid.\n * @return {import(\"./coordinate.js\").Coordinate} The target point.\n */\nexport function offset(c1, distance, bearing, radius) {\n  radius = radius || DEFAULT_RADIUS;\n  const lat1 = toRadians(c1[1]);\n  const lon1 = toRadians(c1[0]);\n  const dByR = distance / radius;\n  const lat = Math.asin(\n    Math.sin(lat1) * Math.cos(dByR) +\n      Math.cos(lat1) * Math.sin(dByR) * Math.cos(bearing),\n  );\n  const lon =\n    lon1 +\n    Math.atan2(\n      Math.sin(bearing) * Math.sin(dByR) * Math.cos(lat1),\n      Math.cos(dByR) - Math.sin(lat1) * Math.sin(lat),\n    );\n  return [toDegrees(lon), toDegrees(lat)];\n}\n"],"names":["clamp","value","min","max","Math","squaredSegmentDistance","x","y","x1","y1","x2","y2","dx","dy","t","squaredDistance","solveLinearSystem","mat","n","i","maxRow","maxEl","r","absValue","tmp","j","coef","k","Array","l","m","toDegrees","angleInRadians","toRadians","angleInDegrees","modulo","a","b","lerp","toFixed","decimals","factor","round","floor","ceil","wrap","range","getArea","geometry","options","coordinates","coords","ii","jj","radius","DEFAULT_RADIUS","projection","type","area","getAreaInternal","geometries","Error","getLength","length","getLengthInternal","getDistance","c1","c2","lat1","lat2","deltaLatBy2","deltaLonBy2","len","offset","distance","bearing","lon1","dByR","lat","lon"],"mappings":"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"}