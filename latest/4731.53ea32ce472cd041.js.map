{"version":3,"file":"4731.53ea32ce472cd041.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/ol/source/TileJSON.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/net.js"],"sourcesContent":["/**\n * @module ol/source/TileJSON\n */\n// FIXME check order of async callbacks\n\n/**\n * See https://mapbox.com/developers/api/.\n */\n\nimport {applyTransform, intersects} from '../extent.js';\nimport {jsonp as requestJSONP} from '../net.js';\nimport {get as getProjection, getTransformFromProjections} from '../proj.js';\nimport {createXYZ, extentFromProjection} from '../tilegrid.js';\nimport {createFromTemplates} from '../tileurlfunction.js';\nimport TileImage from './TileImage.js';\n\n/**\n * @typedef {Object} Config\n * @property {string} [name] The name.\n * @property {string} [description] The description.\n * @property {string} [version] The version.\n * @property {string} [attribution] The attribution.\n * @property {string} [template] The template.\n * @property {string} [legend] The legend.\n * @property {string} [scheme] The scheme.\n * @property {Array<string>} tiles The tile URL templates.\n * @property {Array<string>} [grids] Optional grids.\n * @property {number} [minzoom] Minimum zoom level.\n * @property {number} [maxzoom] Maximum zoom level.\n * @property {Array<number>} [bounds] Optional bounds.\n * @property {Array<number>} [center] Optional center.\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {boolean} [jsonp=false] Use JSONP with callback to load the TileJSON.\n * Useful when the server does not support CORS..\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {Config} [tileJSON] TileJSON configuration for this source.\n * If not provided, `url` must be configured.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number|import(\"../size.js\").Size} [tileSize=[256, 256]] The tile size used by the tile service.\n * Note: `tileSize` and other non-standard TileJSON properties are currently ignored.\n * @property {string} [url] URL to the TileJSON file. If not provided, `tileJSON` must be configured.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data in TileJSON format.\n * @api\n */\nclass TileJSON extends TileImage {\n  /**\n   * @param {Options} options TileJSON options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      projection: getProjection('EPSG:3857'),\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      state: 'loading',\n      tileLoadFunction: options.tileLoadFunction,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @type {Config}\n     * @private\n     */\n    this.tileJSON_ = null;\n\n    /**\n     * @type {number|import(\"../size.js\").Size}\n     * @private\n     */\n    this.tileSize_ = options.tileSize;\n\n    if (options.url) {\n      if (options.jsonp) {\n        requestJSONP(\n          options.url,\n          this.handleTileJSONResponse.bind(this),\n          this.handleTileJSONError.bind(this),\n        );\n      } else {\n        const client = new XMLHttpRequest();\n        client.addEventListener('load', this.onXHRLoad_.bind(this));\n        client.addEventListener('error', this.onXHRError_.bind(this));\n        client.open('GET', options.url);\n        client.send();\n      }\n    } else if (options.tileJSON) {\n      this.handleTileJSONResponse(options.tileJSON);\n    } else {\n      throw new Error('Either `url` or `tileJSON` options must be provided');\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event The load event.\n   */\n  onXHRLoad_(event) {\n    const client = /** @type {XMLHttpRequest} */ (event.target);\n    // status will be 0 for file:// urls\n    if (!client.status || (client.status >= 200 && client.status < 300)) {\n      let response;\n      try {\n        response = /** @type {Config} */ (JSON.parse(client.responseText));\n      } catch {\n        this.handleTileJSONError();\n        return;\n      }\n      this.handleTileJSONResponse(response);\n    } else {\n      this.handleTileJSONError();\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event The error event.\n   */\n  onXHRError_(event) {\n    this.handleTileJSONError();\n  }\n\n  /**\n   * @return {Config} The tilejson object.\n   * @api\n   */\n  getTileJSON() {\n    return this.tileJSON_;\n  }\n\n  /**\n   * @protected\n   * @param {Config} tileJSON Tile JSON.\n   */\n  handleTileJSONResponse(tileJSON) {\n    const epsg4326Projection = getProjection('EPSG:4326');\n\n    const sourceProjection = this.getProjection();\n    let extent;\n    if (tileJSON['bounds'] !== undefined) {\n      const transform = getTransformFromProjections(\n        epsg4326Projection,\n        sourceProjection,\n      );\n      extent = applyTransform(tileJSON['bounds'], transform);\n    }\n\n    const gridExtent = extentFromProjection(sourceProjection);\n    const minZoom = tileJSON['minzoom'] || 0;\n    const maxZoom = tileJSON['maxzoom'] || 22;\n    const tileGrid = createXYZ({\n      extent: gridExtent,\n      maxZoom: maxZoom,\n      minZoom: minZoom,\n      tileSize: this.tileSize_,\n    });\n    this.tileGrid = tileGrid;\n\n    this.tileUrlFunction = createFromTemplates(tileJSON['tiles'], tileGrid);\n\n    if (tileJSON['attribution'] && !this.getAttributions()) {\n      const attributionExtent = extent !== undefined ? extent : gridExtent;\n      this.setAttributions(function (frameState) {\n        if (intersects(attributionExtent, frameState.extent)) {\n          return [tileJSON['attribution']];\n        }\n        return null;\n      });\n    }\n    this.tileJSON_ = tileJSON;\n    this.setState('ready');\n  }\n\n  /**\n   * @protected\n   */\n  handleTileJSONError() {\n    this.setState('error');\n  }\n}\n\nexport default TileJSON;\n","/**\n * @module ol/net\n */\nimport {getUid} from './util.js';\n\n/**\n * Simple JSONP helper. Supports error callbacks and a custom callback param.\n * The error callback will be called when no JSONP is executed after 10 seconds.\n *\n * @param {string} url Request url. A 'callback' query parameter will be\n *     appended.\n * @param {Function} callback Callback on success.\n * @param {Function} [errback] Callback on error.\n * @param {string} [callbackParam] Custom query parameter for the JSONP\n *     callback. Default is 'callback'.\n */\nexport function jsonp(url, callback, errback, callbackParam) {\n  const script = document.createElement('script');\n  const key = 'olc_' + getUid(callback);\n  function cleanup() {\n    delete window[key];\n    script.parentNode.removeChild(script);\n  }\n  script.async = true;\n  script.src =\n    url +\n    (url.includes('?') ? '&' : '?') +\n    (callbackParam || 'callback') +\n    '=' +\n    key;\n  const timer = setTimeout(function () {\n    cleanup();\n    if (errback) {\n      errback();\n    }\n  }, 10000);\n  window[key] = function (data) {\n    clearTimeout(timer);\n    cleanup();\n    callback(data);\n  };\n  document.head.appendChild(script);\n}\n\nexport class ResponseError extends Error {\n  /**\n   * @param {XMLHttpRequest} response The XHR object.\n   */\n  constructor(response) {\n    const message = 'Unexpected response status: ' + response.status;\n    super(message);\n\n    /**\n     * @type {string}\n     */\n    this.name = 'ResponseError';\n\n    /**\n     * @type {XMLHttpRequest}\n     */\n    this.response = response;\n  }\n}\n\nexport class ClientError extends Error {\n  /**\n   * @param {XMLHttpRequest} client The XHR object.\n   */\n  constructor(client) {\n    super('Failed to issue request');\n\n    /**\n     * @type {string}\n     */\n    this.name = 'ClientError';\n\n    /**\n     * @type {XMLHttpRequest}\n     */\n    this.client = client;\n  }\n}\n\n/**\n * @param {string} url The URL.\n * @return {Promise<Object>} A promise that resolves to the JSON response.\n */\nexport function getJSON(url) {\n  return new Promise(function (resolve, reject) {\n    /**\n     * @param {ProgressEvent<XMLHttpRequest>} event The load event.\n     */\n    function onLoad(event) {\n      const client = event.target;\n      // status will be 0 for file:// urls\n      if (!client.status || (client.status >= 200 && client.status < 300)) {\n        let data;\n        try {\n          data = JSON.parse(client.responseText);\n        } catch (err) {\n          const message = 'Error parsing response text as JSON: ' + err.message;\n          reject(new Error(message));\n          return;\n        }\n        resolve(data);\n        return;\n      }\n\n      reject(new ResponseError(client));\n    }\n\n    /**\n     * @param {ProgressEvent<XMLHttpRequest>} event The error event.\n     */\n    function onError(event) {\n      reject(new ClientError(event.target));\n    }\n\n    const client = new XMLHttpRequest();\n    client.addEventListener('load', onLoad);\n    client.addEventListener('error', onError);\n    client.open('GET', url);\n    client.setRequestHeader('Accept', 'application/json');\n    client.send();\n  });\n}\n\n/**\n * @param {string} base The base URL.\n * @param {string} url The potentially relative URL.\n * @return {string} The full URL.\n */\nexport function resolveUrl(base, url) {\n  if (url.includes('://')) {\n    return url;\n  }\n  return new URL(url, base).href;\n}\n\nlet originalXHR;\nexport function overrideXHR(xhr) {\n  if (typeof XMLHttpRequest !== 'undefined') {\n    originalXHR = XMLHttpRequest;\n  }\n  global.XMLHttpRequest = xhr;\n}\n\nexport function restoreXHR() {\n  global.XMLHttpRequest = originalXHR;\n}\n"],"names":["document","window","setTimeout","clearTimeout","XMLHttpRequest","Error","e","JSON"],"mappings":"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"}