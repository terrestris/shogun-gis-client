{"version":3,"file":"6393.af2588f9daf0eeef.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/ol/Image.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/ImageState.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/color.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/layer/BaseTile.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/layer/Tile.js"],"sourcesContent":["/**\n * @module ol/Image\n */\nimport ImageState from './ImageState.js';\nimport EventType from './events/EventType.js';\nimport EventTarget from './events/Target.js';\nimport {listenOnce, unlistenByKey} from './events.js';\nimport {toPromise} from './functions.js';\nimport {CREATE_IMAGE_BITMAP, IMAGE_DECODE} from './has.js';\n\n/**\n * A function that takes an {@link module:ol/Image~ImageWrapper} for the image and a\n * `{string}` for the src as arguments. It is supposed to make it so the\n * underlying image {@link module:ol/Image~ImageWrapper#getImage} is assigned the\n * content specified by the src. If not specified, the default is\n *\n *     function(image, src) {\n *       image.getImage().src = src;\n *     }\n *\n * Providing a custom `imageLoadFunction` can be useful to load images with\n * post requests or - in general - through XHR requests, where the src of the\n * image element would be set to a data URI when the content is loaded.\n *\n * @typedef {function(import(\"./Image.js\").default, string): void} LoadFunction\n * @api\n */\n\n/**\n * @typedef {Object} ImageObject\n * @property {import(\"./extent.js\").Extent} [extent] Extent, if different from the requested one.\n * @property {import(\"./resolution.js\").ResolutionLike} [resolution] Resolution, if different from the requested one.\n * When x and y resolution are different, use the array type (`[xResolution, yResolution]`).\n * @property {number} [pixelRatio] Pixel ratio, if different from the requested one.\n * @property {import('./DataTile.js').ImageLike} image Image.\n */\n\n/**\n * Loader function used for image sources. Receives extent, resolution and pixel ratio as arguments.\n * For images that cover any extent and resolution (static images), the loader function should not accept\n * any arguments. The function returns an {@link import(\"./DataTile.js\").ImageLike image}, an\n * {@link import(\"./Image.js\").ImageObject image object}, or a promise for the same.\n * For loaders that generate images, the promise should not resolve until the image is loaded.\n * If the returned image does not match the extent, resolution or pixel ratio passed to the loader,\n * it has to return an {@link import(\"./Image.js\").ImageObject image object} with the `image` and the\n * correct `extent`, `resolution` and `pixelRatio`.\n *\n * @typedef {function(import(\"./extent.js\").Extent, number, number, (function(HTMLImageElement, string): void)=): import(\"./DataTile.js\").ImageLike|ImageObject|Promise<import(\"./DataTile.js\").ImageLike|ImageObject>} Loader\n * @api\n */\n\n/**\n * Loader function used for image sources. Receives extent, resolution and pixel ratio as arguments.\n * The function returns a promise for an  {@link import(\"./Image.js\").ImageObject image object}.\n *\n * @typedef {function(import(\"./extent.js\").Extent, number, number, (function(HTMLImageElement, string): void)=): Promise<import(\"./DataTile.js\").ImageLike|ImageObject>} ImageObjectPromiseLoader\n */\n\nclass ImageWrapper extends EventTarget {\n  /**\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {number|Array<number>|undefined} resolution Resolution. If provided as array, x and y\n   * resolution will be assumed.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"./ImageState.js\").default|Loader} stateOrLoader State.\n   */\n  constructor(extent, resolution, pixelRatio, stateOrLoader) {\n    super();\n\n    /**\n     * @protected\n     * @type {import(\"./extent.js\").Extent}\n     */\n    this.extent = extent;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ = pixelRatio;\n\n    /**\n     * @protected\n     * @type {number|Array<number>|undefined}\n     */\n    this.resolution = resolution;\n\n    /**\n     * @protected\n     * @type {import(\"./ImageState.js\").default}\n     */\n    this.state =\n      typeof stateOrLoader === 'function' ? ImageState.IDLE : stateOrLoader;\n\n    /**\n     * @private\n     * @type {import('./DataTile.js').ImageLike|null}\n     */\n    this.image_ = null;\n\n    /**\n     * @protected\n     * @type {Loader|null}\n     */\n    this.loader = typeof stateOrLoader === 'function' ? stateOrLoader : null;\n  }\n\n  /**\n   * @protected\n   */\n  changed() {\n    this.dispatchEvent(EventType.CHANGE);\n  }\n\n  /**\n   * @return {import(\"./extent.js\").Extent} Extent.\n   */\n  getExtent() {\n    return this.extent;\n  }\n\n  /**\n   * @return {import('./DataTile.js').ImageLike} Image.\n   */\n  getImage() {\n    return this.image_;\n  }\n\n  /**\n   * @return {number} PixelRatio.\n   */\n  getPixelRatio() {\n    return this.pixelRatio_;\n  }\n\n  /**\n   * @return {number|Array<number>} Resolution.\n   */\n  getResolution() {\n    return /** @type {number} */ (this.resolution);\n  }\n\n  /**\n   * @return {import(\"./ImageState.js\").default} State.\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Load not yet loaded URI.\n   */\n  load() {\n    if (this.state == ImageState.IDLE) {\n      if (this.loader) {\n        this.state = ImageState.LOADING;\n        this.changed();\n        const resolution = this.getResolution();\n        const requestResolution = Array.isArray(resolution)\n          ? resolution[0]\n          : resolution;\n        toPromise(() =>\n          this.loader(\n            this.getExtent(),\n            requestResolution,\n            this.getPixelRatio(),\n          ),\n        )\n          .then((image) => {\n            if ('image' in image) {\n              this.image_ = image.image;\n            }\n            if ('extent' in image) {\n              this.extent = image.extent;\n            }\n            if ('resolution' in image) {\n              this.resolution = image.resolution;\n            }\n            if ('pixelRatio' in image) {\n              this.pixelRatio_ = image.pixelRatio;\n            }\n            if (\n              image instanceof HTMLImageElement ||\n              (CREATE_IMAGE_BITMAP && image instanceof ImageBitmap) ||\n              image instanceof HTMLCanvasElement ||\n              image instanceof HTMLVideoElement\n            ) {\n              this.image_ = image;\n            }\n            this.state = ImageState.LOADED;\n          })\n          .catch((error) => {\n            this.state = ImageState.ERROR;\n            console.error(error); // eslint-disable-line no-console\n          })\n          .finally(() => this.changed());\n      }\n    }\n  }\n\n  /**\n   * @param {import('./DataTile.js').ImageLike} image The image.\n   */\n  setImage(image) {\n    this.image_ = image;\n  }\n\n  /**\n   * @param {number|Array<number>} resolution Resolution.\n   */\n  setResolution(resolution) {\n    this.resolution = resolution;\n  }\n}\n\n/**\n * @param {import('./DataTile.js').ImageLike} image Image element.\n * @param {function():any} loadHandler Load callback function.\n * @param {function():any} errorHandler Error callback function.\n * @return {function():void} Callback to stop listening.\n */\nexport function listenImage(image, loadHandler, errorHandler) {\n  const img = /** @type {HTMLImageElement} */ (image);\n  let listening = true;\n  let decoding = false;\n  let loaded = false;\n\n  const listenerKeys = [\n    listenOnce(img, EventType.LOAD, function () {\n      loaded = true;\n      if (!decoding) {\n        loadHandler();\n      }\n    }),\n  ];\n\n  if (img.src && IMAGE_DECODE) {\n    decoding = true;\n    img\n      .decode()\n      .then(function () {\n        if (listening) {\n          loadHandler();\n        }\n      })\n      .catch(function (error) {\n        if (listening) {\n          if (loaded) {\n            loadHandler();\n          } else {\n            errorHandler();\n          }\n        }\n      });\n  } else {\n    listenerKeys.push(listenOnce(img, EventType.ERROR, errorHandler));\n  }\n\n  return function unlisten() {\n    listening = false;\n    listenerKeys.forEach(unlistenByKey);\n  };\n}\n\n/**\n * Loads an image.\n * @param {HTMLImageElement} image Image, not yet loaded.\n * @param {string} [src] `src` attribute of the image. Optional, not required if already present.\n * @return {Promise<HTMLImageElement>} Promise resolving to an `HTMLImageElement`.\n * @api\n */\nexport function load(image, src) {\n  return new Promise((resolve, reject) => {\n    function handleLoad() {\n      unlisten();\n      resolve(image);\n    }\n    function handleError() {\n      unlisten();\n      reject(new Error('Image load error'));\n    }\n    function unlisten() {\n      image.removeEventListener('load', handleLoad);\n      image.removeEventListener('error', handleError);\n    }\n    image.addEventListener('load', handleLoad);\n    image.addEventListener('error', handleError);\n    if (src) {\n      image.src = src;\n    }\n  });\n}\n\n/**\n * @param {HTMLImageElement} image Image, not yet loaded.\n * @param {string} [src] `src` attribute of the image. Optional, not required if already present.\n * @return {Promise<HTMLImageElement>} Promise resolving to an `HTMLImageElement`.\n */\nexport function decodeFallback(image, src) {\n  if (src) {\n    image.src = src;\n  }\n  return image.src && IMAGE_DECODE\n    ? new Promise((resolve, reject) =>\n        image\n          .decode()\n          .then(() => resolve(image))\n          .catch((e) =>\n            image.complete && image.width ? resolve(image) : reject(e),\n          ),\n      )\n    : load(image);\n}\n\n/**\n * Loads an image and decodes it to an `ImageBitmap` if `createImageBitmap()` is supported. Returns\n * the loaded image otherwise.\n * @param {HTMLImageElement} image Image, not yet loaded.\n * @param {string} [src] `src` attribute of the image. Optional, not required if already present.\n * @return {Promise<ImageBitmap|HTMLImageElement>} Promise resolving to an `ImageBitmap` or an\n * `HTMLImageElement` if `createImageBitmap()` is not supported.\n * @api\n */\nexport function decode(image, src) {\n  if (src) {\n    image.src = src;\n  }\n  return image.src && IMAGE_DECODE && CREATE_IMAGE_BITMAP\n    ? image\n        .decode()\n        .then(() => createImageBitmap(image))\n        .catch((e) => {\n          if (image.complete && image.width) {\n            return image;\n          }\n          throw e;\n        })\n    : decodeFallback(image);\n}\n\nexport default ImageWrapper;\n","/**\n * @module ol/ImageState\n */\n\n/**\n * @enum {number}\n */\nexport default {\n  IDLE: 0,\n  LOADING: 1,\n  LOADED: 2,\n  ERROR: 3,\n  EMPTY: 4,\n};\n","/**\n * @module ol/color\n */\nimport {createCanvasContext2D} from './dom.js';\nimport {clamp, toFixed} from './math.js';\n\n/**\n * A color represented as a short array [red, green, blue, alpha].\n * red, green, and blue should be integers in the range 0..255 inclusive.\n * alpha should be a float in the range 0..1 inclusive. If no alpha value is\n * given then `1` will be used.\n * @typedef {Array<number>} Color\n * @api\n */\n\n/**\n * Color to indicate that no color should be rendered. This is meant to be used for per-reference\n * comparisons only.\n * @type {Color}\n */\nexport const NO_COLOR = [NaN, NaN, NaN, 0];\n\nlet colorParseContext;\n/**\n * @return {CanvasRenderingContext2D} The color parse context\n */\nfunction getColorParseContext() {\n  if (!colorParseContext) {\n    colorParseContext = createCanvasContext2D(1, 1, undefined, {\n      willReadFrequently: true,\n      desynchronized: true,\n    });\n  }\n  return colorParseContext;\n}\n\nconst rgbModernRegEx =\n  /^rgba?\\(\\s*(\\d+%?)\\s+(\\d+%?)\\s+(\\d+%?)(?:\\s*\\/\\s*(\\d+%|\\d*\\.\\d+|[01]))?\\s*\\)$/i;\nconst rgbLegacyAbsoluteRegEx =\n  /^rgba?\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)(?:\\s*,\\s*(\\d+%|\\d*\\.\\d+|[01]))?\\s*\\)$/i;\nconst rgbLegacyPercentageRegEx =\n  /^rgba?\\(\\s*(\\d+%)\\s*,\\s*(\\d+%)\\s*,\\s*(\\d+%)(?:\\s*,\\s*(\\d+%|\\d*\\.\\d+|[01]))?\\s*\\)$/i;\nconst hexRegEx = /^#([\\da-f]{3,4}|[\\da-f]{6}|[\\da-f]{8})$/i;\n\n/**\n * @param {string} s Color component as number or percentage.\n * @param {number} divider Divider for percentage.\n * @return {number} Color component.\n */\nfunction toColorComponent(s, divider) {\n  return s.endsWith('%')\n    ? Number(s.substring(0, s.length - 1)) / divider\n    : Number(s);\n}\n\n/**\n * @param {string} color Color string.\n */\nfunction throwInvalidColor(color) {\n  throw new Error('failed to parse \"' + color + '\" as color');\n}\n\n/**\n * @param {string} color Color string.\n * @return {Color} RGBa color array.\n */\nfunction parseRgba(color) {\n  // Fast lane for rgb(a) colors\n  if (color.toLowerCase().startsWith('rgb')) {\n    const rgb =\n      color.match(rgbLegacyAbsoluteRegEx) ||\n      color.match(rgbModernRegEx) ||\n      color.match(rgbLegacyPercentageRegEx);\n    if (rgb) {\n      const alpha = rgb[4];\n      const rgbDivider = 100 / 255;\n      return [\n        clamp((toColorComponent(rgb[1], rgbDivider) + 0.5) | 0, 0, 255),\n        clamp((toColorComponent(rgb[2], rgbDivider) + 0.5) | 0, 0, 255),\n        clamp((toColorComponent(rgb[3], rgbDivider) + 0.5) | 0, 0, 255),\n        alpha !== undefined ? clamp(toColorComponent(alpha, 100), 0, 1) : 1,\n      ];\n    }\n    throwInvalidColor(color);\n  }\n  // Fast lane for hex colors (also with alpha)\n  if (color.startsWith('#')) {\n    if (hexRegEx.test(color)) {\n      const hex = color.substring(1);\n      const step = hex.length <= 4 ? 1 : 2;\n      const colorFromHex = [0, 0, 0, 255];\n      for (let i = 0, ii = hex.length; i < ii; i += step) {\n        let colorComponent = parseInt(hex.substring(i, i + step), 16);\n        if (step === 1) {\n          colorComponent += colorComponent << 4;\n        }\n        colorFromHex[i / step] = colorComponent;\n      }\n      colorFromHex[3] = colorFromHex[3] / 255;\n      return colorFromHex;\n    }\n    throwInvalidColor(color);\n  }\n  // Use canvas color serialization to parse the color into hex or rgba\n  // See https://www.w3.org/TR/2021/SPSD-2dcontext-20210128/#serialization-of-a-color\n  const context = getColorParseContext();\n  context.fillStyle = '#abcdef';\n  let invalidCheckFillStyle = context.fillStyle;\n  context.fillStyle = color;\n  if (context.fillStyle === invalidCheckFillStyle) {\n    context.fillStyle = '#fedcba';\n    invalidCheckFillStyle = context.fillStyle;\n    context.fillStyle = color;\n    if (context.fillStyle === invalidCheckFillStyle) {\n      throwInvalidColor(color);\n    }\n  }\n  const colorString = context.fillStyle;\n  if (colorString.startsWith('#') || colorString.startsWith('rgba')) {\n    return parseRgba(colorString);\n  }\n  context.clearRect(0, 0, 1, 1);\n  context.fillRect(0, 0, 1, 1);\n  const colorFromImage = Array.from(context.getImageData(0, 0, 1, 1).data);\n  colorFromImage[3] = toFixed(colorFromImage[3] / 255, 3);\n  return colorFromImage;\n}\n\n/**\n * Return the color as an rgba string.\n * @param {Color|string} color Color.\n * @return {string} Rgba string.\n * @api\n */\nexport function asString(color) {\n  if (typeof color === 'string') {\n    return color;\n  }\n  return toString(color);\n}\n\n/**\n * @type {number}\n */\nconst MAX_CACHE_SIZE = 1024;\n\n/**\n * We maintain a small cache of parsed strings.  Whenever the cache grows too large,\n * we delete an arbitrary set of the entries.\n *\n * @type {Object<string, Color>}\n */\nconst cache = {};\n\n/**\n * @type {number}\n */\nlet cacheSize = 0;\n\n/**\n * @param {Color} color A color that may or may not have an alpha channel.\n * @return {Color} The input color with an alpha channel.  If the input color has\n * an alpha channel, the input color will be returned unchanged.  Otherwise, a new\n * array will be returned with the input color and an alpha channel of 1.\n */\nexport function withAlpha(color) {\n  if (color.length === 4) {\n    return color;\n  }\n  const output = color.slice();\n  output[3] = 1;\n  return output;\n}\n\n// The functions b1, b2, a1, a2, rgbaToLcha and lchaToRgba below are adapted from\n// https://stackoverflow.com/a/67219995/2389327\n\n/**\n * @param {number} v Input value.\n * @return {number} Output value.\n */\nfunction b1(v) {\n  return v > 0.0031308 ? Math.pow(v, 1 / 2.4) * 269.025 - 14.025 : v * 3294.6;\n}\n\n/**\n * @param {number} v Input value.\n * @return {number} Output value.\n */\nfunction b2(v) {\n  return v > 0.2068965 ? Math.pow(v, 3) : (v - 4 / 29) * (108 / 841);\n}\n\n/**\n * @param {number} v Input value.\n * @return {number} Output value.\n */\nfunction a1(v) {\n  return v > 10.314724 ? Math.pow((v + 14.025) / 269.025, 2.4) : v / 3294.6;\n}\n\n/**\n * @param {number} v Input value.\n * @return {number} Output value.\n */\nfunction a2(v) {\n  return v > 0.0088564 ? Math.pow(v, 1 / 3) : v / (108 / 841) + 4 / 29;\n}\n\n/**\n * @param {Color} color RGBA color.\n * @return {Color} LCHuv color with alpha.\n */\nexport function rgbaToLcha(color) {\n  const r = a1(color[0]);\n  const g = a1(color[1]);\n  const b = a1(color[2]);\n  const y = a2(r * 0.222488403 + g * 0.716873169 + b * 0.06060791);\n  const l = 500 * (a2(r * 0.452247074 + g * 0.399439023 + b * 0.148375274) - y);\n  const q = 200 * (y - a2(r * 0.016863605 + g * 0.117638439 + b * 0.865350722));\n  const h = Math.atan2(q, l) * (180 / Math.PI);\n  return [\n    116 * y - 16,\n    Math.sqrt(l * l + q * q),\n    h < 0 ? h + 360 : h,\n    color[3],\n  ];\n}\n\n/**\n * @param {Color} color LCHuv color with alpha.\n * @return {Color} RGBA color.\n */\nexport function lchaToRgba(color) {\n  const l = (color[0] + 16) / 116;\n  const c = color[1];\n  const h = (color[2] * Math.PI) / 180;\n  const y = b2(l);\n  const x = b2(l + (c / 500) * Math.cos(h));\n  const z = b2(l - (c / 200) * Math.sin(h));\n  const r = b1(x * 3.021973625 - y * 1.617392459 - z * 0.404875592);\n  const g = b1(x * -0.943766287 + y * 1.916279586 + z * 0.027607165);\n  const b = b1(x * 0.069407491 - y * 0.22898585 + z * 1.159737864);\n  return [\n    clamp((r + 0.5) | 0, 0, 255),\n    clamp((g + 0.5) | 0, 0, 255),\n    clamp((b + 0.5) | 0, 0, 255),\n    color[3],\n  ];\n}\n\n/**\n * @param {string} s String.\n * @return {Color} Color.\n */\nexport function fromString(s) {\n  if (s === 'none') {\n    return NO_COLOR;\n  }\n  if (cache.hasOwnProperty(s)) {\n    return cache[s];\n  }\n  if (cacheSize >= MAX_CACHE_SIZE) {\n    let i = 0;\n    for (const key in cache) {\n      if ((i++ & 3) === 0) {\n        delete cache[key];\n        --cacheSize;\n      }\n    }\n  }\n\n  const color = parseRgba(s);\n  if (color.length !== 4) {\n    throwInvalidColor(s);\n  }\n  for (const c of color) {\n    if (isNaN(c)) {\n      throwInvalidColor(s);\n    }\n  }\n  cache[s] = color;\n  ++cacheSize;\n  return color;\n}\n\n/**\n * Return the color as an array. This function maintains a cache of calculated\n * arrays which means the result should not be modified.\n * @param {Color|string} color Color.\n * @return {Color} Color.\n * @api\n */\nexport function asArray(color) {\n  if (Array.isArray(color)) {\n    return color;\n  }\n  return fromString(color);\n}\n\n/**\n * @param {Color} color Color.\n * @return {string} String.\n */\nexport function toString(color) {\n  let r = color[0];\n  if (r != (r | 0)) {\n    r = (r + 0.5) | 0;\n  }\n  let g = color[1];\n  if (g != (g | 0)) {\n    g = (g + 0.5) | 0;\n  }\n  let b = color[2];\n  if (b != (b | 0)) {\n    b = (b + 0.5) | 0;\n  }\n  const a = color[3] === undefined ? 1 : Math.round(color[3] * 1000) / 1000;\n  return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n}\n\n/**\n * @param {string} s String.\n * @return {boolean} Whether the string is actually a valid color\n */\nexport function isStringColor(s) {\n  try {\n    fromString(s);\n    return true;\n  } catch {\n    return false;\n  }\n}\n","/**\n * @module ol/layer/BaseTile\n */\nimport Layer from './Layer.js';\nimport TileProperty from './TileProperty.js';\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\n *     import(\"./Layer.js\").LayerEventType|'change:preload'|'change:useInterimTilesOnError', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../render/EventType\").LayerRenderEventTypes, import(\"../render/Event\").default, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|\n *   import(\"./Layer.js\").LayerEventType|'change:preload'|'change:useInterimTilesOnError'|import(\"../render/EventType\").LayerRenderEventTypes, Return>} BaseTileLayerOnSignature\n */\n\n/**\n * @template {import(\"../source/Tile.js\").default} TileSourceType\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`\n * means no preloading.\n * @property {TileSourceType} [source] Source for this layer.\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use {@link import(\"../Map.js\").default#addLayer map.addLayer()}.\n * @property {import(\"./Base.js\").BackgroundColor} [background] Background color for the layer. If not specified, no background\n * will be rendered.\n * @property {boolean} [useInterimTilesOnError=true] Deprecated.  Use interim tiles on error.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n * @property {number} [cacheSize=512] The internal tile cache size.  This needs to be large enough to render\n * two zoom levels worth of tiles.\n */\n\n/**\n * @classdesc\n * For layer sources that provide pre-rendered, tiled images in grids that are\n * organized by zoom levels for specific resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Tile.js\").default} TileSourceType\n * @template {import(\"../renderer/Layer.js\").default} RendererType\n * @extends {Layer<TileSourceType, RendererType>}\n * @api\n */\nclass BaseTileLayer extends Layer {\n  /**\n   * @param {Options<TileSourceType>} [options] Tile layer options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    const baseOptions = Object.assign({}, options);\n\n    const cacheSize = options.cacheSize;\n    delete options.cacheSize;\n\n    delete baseOptions.preload;\n    delete baseOptions.useInterimTilesOnError;\n    super(baseOptions);\n\n    /***\n     * @type {BaseTileLayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {BaseTileLayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {BaseTileLayerOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n    this.cacheSize_ = cacheSize;\n\n    this.setPreload(options.preload !== undefined ? options.preload : 0);\n    this.setUseInterimTilesOnError(\n      options.useInterimTilesOnError !== undefined\n        ? options.useInterimTilesOnError\n        : true,\n    );\n  }\n\n  /**\n   * @return {number|undefined} The suggested cache size\n   * @protected\n   */\n  getCacheSize() {\n    return this.cacheSize_;\n  }\n\n  /**\n   * Return the level as number to which we will preload tiles up to.\n   * @return {number} The level to preload tiles up to.\n   * @observable\n   * @api\n   */\n  getPreload() {\n    return /** @type {number} */ (this.get(TileProperty.PRELOAD));\n  }\n\n  /**\n   * Set the level as number to which we will preload tiles up to.\n   * @param {number} preload The level to preload tiles up to.\n   * @observable\n   * @api\n   */\n  setPreload(preload) {\n    this.set(TileProperty.PRELOAD, preload);\n  }\n\n  /**\n   * Deprecated.  Whether we use interim tiles on error.\n   * @return {boolean} Use interim tiles on error.\n   * @observable\n   * @api\n   */\n  getUseInterimTilesOnError() {\n    return /** @type {boolean} */ (\n      this.get(TileProperty.USE_INTERIM_TILES_ON_ERROR)\n    );\n  }\n\n  /**\n   * Deprecated.  Set whether we use interim tiles on error.\n   * @param {boolean} useInterimTilesOnError Use interim tiles on error.\n   * @observable\n   * @api\n   */\n  setUseInterimTilesOnError(useInterimTilesOnError) {\n    this.set(TileProperty.USE_INTERIM_TILES_ON_ERROR, useInterimTilesOnError);\n  }\n\n  /**\n   * Get data for a pixel location.  The return type depends on the source data.  For image tiles,\n   * a four element RGBA array will be returned.  For data tiles, the array length will match the\n   * number of bands in the dataset.  For requests outside the layer extent, `null` will be returned.\n   * Data for a image tiles can only be retrieved if the source's `crossOrigin` property is set.\n   *\n   * ```js\n   * // display layer data on every pointer move\n   * map.on('pointermove', (event) => {\n   *   console.log(layer.getData(event.pixel));\n   * });\n   * ```\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\n   * @api\n   * @override\n   */\n  getData(pixel) {\n    return super.getData(pixel);\n  }\n}\n\nexport default BaseTileLayer;\n","/**\n * @module ol/layer/Tile\n */\nimport CanvasTileLayerRenderer from '../renderer/canvas/TileLayer.js';\nimport BaseTileLayer from './BaseTile.js';\n\n/**\n * @classdesc\n * For layer sources that provide pre-rendered, tiled images in grids that are\n * organized by zoom levels for specific resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Tile.js\").default} [TileSourceType=import(\"../source/Tile.js\").default]\n * @extends BaseTileLayer<TileSourceType, CanvasTileLayerRenderer>\n * @api\n */\nclass TileLayer extends BaseTileLayer {\n  /**\n   * @param {import(\"./BaseTile.js\").Options<TileSourceType>} [options] Tile layer options.\n   */\n  constructor(options) {\n    super(options);\n  }\n\n  /**\n   * @override\n   */\n  createRenderer() {\n    return new CanvasTileLayerRenderer(this, {\n      cacheSize: this.getCacheSize(),\n    });\n  }\n}\n\nexport default TileLayer;\n"],"names":["Array","HTMLImageElement","ImageBitmap","HTMLCanvasElement","HTMLVideoElement","console","l","Promise","Error","createImageBitmap","e","NaN","Number","Math","i","parseInt","isNaN","Object"],"mappings":"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"}