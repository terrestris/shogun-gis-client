{"version":3,"file":"5798.d263b9b2dc8fbeb7.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/ol/render/Event.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/render/canvas/ZIndexContext.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/renderer/Layer.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/renderer/canvas/Layer.js"],"sourcesContent":["/**\n * @module ol/render/Event\n */\n\nimport Event from '../events/Event.js';\n\nclass RenderEvent extends Event {\n  /**\n   * @param {import(\"./EventType.js\").default} type Type.\n   * @param {import(\"../transform.js\").Transform} [inversePixelTransform] Transform for\n   *     CSS pixels to rendered pixels.\n   * @param {import(\"../Map.js\").FrameState} [frameState] Frame state.\n   * @param {?(CanvasRenderingContext2D|WebGLRenderingContext)} [context] Context.\n   */\n  constructor(type, inversePixelTransform, frameState, context) {\n    super(type);\n\n    /**\n     * Transform from CSS pixels (relative to the top-left corner of the map viewport)\n     * to rendered pixels on this event's `context`. Only available when a Canvas renderer is used, null otherwise.\n     * @type {import(\"../transform.js\").Transform|undefined}\n     * @api\n     */\n    this.inversePixelTransform = inversePixelTransform;\n\n    /**\n     * An object representing the current render frame state.\n     * @type {import(\"../Map.js\").FrameState|undefined}\n     * @api\n     */\n    this.frameState = frameState;\n\n    /**\n     * Canvas context. Not available when the event is dispatched by the map. For Canvas 2D layers,\n     * the context will be the 2D rendering context.  For WebGL layers, the context will be the WebGL\n     * context.\n     * @type {CanvasRenderingContext2D|WebGLRenderingContext|undefined}\n     * @api\n     */\n    this.context = context;\n  }\n}\n\nexport default RenderEvent;\n","/**\n * @module ol/render/canvas/ZIndexContext\n */\n\nimport {getSharedCanvasContext2D} from '../../dom.js';\n\n/** @typedef {CanvasRenderingContext2D & {globalAlpha: any}} ZIndexContextProxy */\n\n/**\n * @extends {CanvasRenderingContext2D}\n */\nclass ZIndexContext {\n  constructor() {\n    /**\n     * @private\n     * @type {Array<Array<*>>}\n     */\n    this.instructions_ = [];\n    /**\n     * @type {number}\n     */\n    this.zIndex = 0;\n    /**\n     * @private\n     * @type {number}\n     */\n    this.offset_ = 0;\n\n    /**\n     * @private\n     * @type {ZIndexContextProxy}\n     */\n    this.context_ = /** @type {ZIndexContextProxy} */ (\n      new Proxy(getSharedCanvasContext2D(), {\n        get: (target, property) => {\n          if (\n            typeof (/** @type {*} */ (getSharedCanvasContext2D())[property]) !==\n            'function'\n          ) {\n            // we only accept calling functions on the proxy, not accessing properties\n            return undefined;\n          }\n          if (!this.instructions_[this.zIndex + this.offset_]) {\n            this.instructions_[this.zIndex + this.offset_] = [];\n          }\n          this.instructions_[this.zIndex + this.offset_].push(property);\n          return this.pushMethodArgs_;\n        },\n        set: (target, property, value) => {\n          if (!this.instructions_[this.zIndex + this.offset_]) {\n            this.instructions_[this.zIndex + this.offset_] = [];\n          }\n          this.instructions_[this.zIndex + this.offset_].push(property, value);\n          return true;\n        },\n      })\n    );\n  }\n\n  /**\n   * @private\n   * @param {...*} args Args.\n   * @return {ZIndexContext} This.\n   */\n  pushMethodArgs_ = (...args) => {\n    this.instructions_[this.zIndex + this.offset_].push(args);\n    return this;\n  };\n\n  /**\n   * Push a function that renders to the context directly.\n   * @param {function(CanvasRenderingContext2D): void} render Function.\n   */\n  pushFunction(render) {\n    this.instructions_[this.zIndex + this.offset_].push(render);\n  }\n\n  /**\n   * Get a proxy for CanvasRenderingContext2D which does not support getting state\n   * (e.g. `context.globalAlpha`, which will return `undefined`). To set state, if it relies on a\n   * previous state (e.g. `context.globalAlpha = context.globalAlpha / 2`), set a function,\n   * e.g. `context.globalAlpha = (context) => context.globalAlpha / 2`.\n   * @return {ZIndexContextProxy} Context.\n   */\n  getContext() {\n    return this.context_;\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   */\n  draw(context) {\n    this.instructions_.forEach((instructionsAtIndex) => {\n      for (let i = 0, ii = instructionsAtIndex.length; i < ii; ++i) {\n        const property = instructionsAtIndex[i];\n        if (typeof property === 'function') {\n          property(context);\n          continue;\n        }\n        const instructionAtIndex = instructionsAtIndex[++i];\n        if (typeof (/** @type {*} */ (context)[property]) === 'function') {\n          /** @type {*} */ (context)[property](...instructionAtIndex);\n        } else {\n          if (typeof instructionAtIndex === 'function') {\n            /** @type {*} */ (context)[property] = instructionAtIndex(context);\n            continue;\n          }\n          /** @type {*} */ (context)[property] = instructionAtIndex;\n        }\n      }\n    });\n  }\n\n  clear() {\n    this.instructions_.length = 0;\n    this.zIndex = 0;\n    this.offset_ = 0;\n  }\n\n  /**\n   * Offsets the zIndex by the highest current zIndex. Useful for rendering multiple worlds or tiles, to\n   * avoid conflicting context.clip() or context.save()/restore() calls.\n   */\n  offset() {\n    this.offset_ = this.instructions_.length;\n    this.zIndex = 0;\n  }\n}\n\nexport default ZIndexContext;\n","/**\n * @module ol/renderer/Layer\n */\nimport ImageState from '../ImageState.js';\nimport Observable from '../Observable.js';\nimport EventType from '../events/EventType.js';\nimport {abstract} from '../util.js';\n\nconst maxStaleKeys = 5;\n\n/**\n * @template {import(\"../layer/Layer.js\").default} LayerType\n */\nclass LayerRenderer extends Observable {\n  /**\n   * @param {LayerType} layer Layer.\n   */\n  constructor(layer) {\n    super();\n\n    /**\n     * The renderer is initialized and ready to render.\n     * @type {boolean}\n     */\n    this.ready = true;\n\n    /** @private */\n    this.boundHandleImageChange_ = this.handleImageChange_.bind(this);\n\n    /**\n     * @private\n     * @type {LayerType}\n     */\n    this.layer_ = layer;\n\n    /**\n     * @type {Array<string>}\n     * @private\n     */\n    this.staleKeys_ = new Array();\n\n    /**\n     * @type {number}\n     * @protected\n     */\n    this.maxStaleKeys = maxStaleKeys;\n  }\n\n  /**\n   * @return {Array<string>} Get the list of stale keys.\n   */\n  getStaleKeys() {\n    return this.staleKeys_;\n  }\n\n  /**\n   * @param {string} key The new stale key.\n   */\n  prependStaleKey(key) {\n    this.staleKeys_.unshift(key);\n    if (this.staleKeys_.length > this.maxStaleKeys) {\n      this.staleKeys_.length = this.maxStaleKeys;\n    }\n  }\n\n  /**\n   * Asynchronous layer level hit detection.\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../Feature\").FeatureLike>>} Promise that resolves with\n   * an array of features.\n   */\n  getFeatures(pixel) {\n    return abstract();\n  }\n\n  /**\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\n   */\n  getData(pixel) {\n    return null;\n  }\n\n  /**\n   * Determine whether render should be called.\n   * @abstract\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n  prepareFrame(frameState) {\n    return abstract();\n  }\n\n  /**\n   * Render the layer.\n   * @abstract\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement|null} target Target that may be used to render content to.\n   * @return {HTMLElement|null} The rendered element.\n   */\n  renderFrame(frameState, target) {\n    return abstract();\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {import(\"./vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {Array<import(\"./Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  forEachFeatureAtCoordinate(\n    coordinate,\n    frameState,\n    hitTolerance,\n    callback,\n    matches,\n  ) {\n    return undefined;\n  }\n\n  /**\n   * @return {LayerType} Layer.\n   */\n  getLayer() {\n    return this.layer_;\n  }\n\n  /**\n   * Perform action necessary to get the layer rendered after new fonts have loaded\n   * @abstract\n   */\n  handleFontsChanged() {}\n\n  /**\n   * Handle changes in image state.\n   * @param {import(\"../events/Event.js\").default} event Image change event.\n   * @private\n   */\n  handleImageChange_(event) {\n    const image = /** @type {import(\"../Image.js\").default} */ (event.target);\n    if (\n      image.getState() === ImageState.LOADED ||\n      image.getState() === ImageState.ERROR\n    ) {\n      this.renderIfReadyAndVisible();\n    }\n  }\n\n  /**\n   * Load the image if not already loaded, and register the image change\n   * listener if needed.\n   * @param {import(\"../Image.js\").default} image Image.\n   * @return {boolean} `true` if the image is already loaded, `false` otherwise.\n   * @protected\n   */\n  loadImage(image) {\n    let imageState = image.getState();\n    if (imageState != ImageState.LOADED && imageState != ImageState.ERROR) {\n      image.addEventListener(EventType.CHANGE, this.boundHandleImageChange_);\n    }\n    if (imageState == ImageState.IDLE) {\n      image.load();\n      imageState = image.getState();\n    }\n    return imageState == ImageState.LOADED;\n  }\n\n  /**\n   * @protected\n   */\n  renderIfReadyAndVisible() {\n    const layer = this.getLayer();\n    if (layer && layer.getVisible() && layer.getSourceState() === 'ready') {\n      layer.changed();\n    }\n  }\n\n  /**\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   */\n  renderDeferred(frameState) {}\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    delete this.layer_;\n    super.disposeInternal();\n  }\n}\n\nexport default LayerRenderer;\n","/**\n * @module ol/renderer/canvas/Layer\n */\nimport {equals} from '../../array.js';\nimport {asArray} from '../../color.js';\nimport {createCanvasContext2D} from '../../dom.js';\nimport {\n  getBottomLeft,\n  getBottomRight,\n  getHeight,\n  getTopLeft,\n  getTopRight,\n  getWidth,\n} from '../../extent.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport ZIndexContext from '../../render/canvas/ZIndexContext.js';\nimport {\n  apply as applyTransform,\n  compose as composeTransform,\n  create as createTransform,\n  makeInverse,\n  toString as toTransformString,\n} from '../../transform.js';\nimport LayerRenderer from '../Layer.js';\n\n/**\n * @type {Array<HTMLCanvasElement>}\n */\nexport const canvasPool = [];\n\n/**\n * @type {CanvasRenderingContext2D}\n */\nlet pixelContext = null;\n\nfunction createPixelContext() {\n  pixelContext = createCanvasContext2D(1, 1, undefined, {\n    willReadFrequently: true,\n  });\n}\n\n/**\n * @abstract\n * @template {import(\"../../layer/Layer.js\").default} LayerType\n * @extends {LayerRenderer<LayerType>}\n */\nclass CanvasLayerRenderer extends LayerRenderer {\n  /**\n   * @param {LayerType} layer Layer.\n   */\n  constructor(layer) {\n    super(layer);\n\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n    this.container = null;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.renderedResolution;\n\n    /**\n     * A temporary transform.  The values in this transform should only be used in a\n     * function that sets the values.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.tempTransform = createTransform();\n\n    /**\n     * The transform for rendered pixels to viewport CSS pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.pixelTransform = createTransform();\n\n    /**\n     * The transform for viewport CSS pixels to rendered pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.inversePixelTransform = createTransform();\n\n    /**\n     * @type {CanvasRenderingContext2D}\n     */\n    this.context = null;\n\n    /**\n     * @private\n     * @type {ZIndexContext}\n     */\n    this.deferredContext_ = null;\n\n    /**\n     * @type {boolean}\n     */\n    this.containerReused = false;\n\n    /**\n     * @protected\n     * @type {import(\"../../Map.js\").FrameState|null}\n     */\n    this.frameState = null;\n  }\n\n  /**\n   * @param {import('../../DataTile.js').ImageLike} image Image.\n   * @param {number} col The column index.\n   * @param {number} row The row index.\n   * @return {Uint8ClampedArray|null} The image data.\n   */\n  getImageData(image, col, row) {\n    if (!pixelContext) {\n      createPixelContext();\n    }\n    pixelContext.clearRect(0, 0, 1, 1);\n\n    let data;\n    try {\n      pixelContext.drawImage(image, col, row, 1, 1, 0, 0, 1, 1);\n      data = pixelContext.getImageData(0, 0, 1, 1).data;\n    } catch {\n      pixelContext = null;\n      return null;\n    }\n    return data;\n  }\n\n  /**\n   * @param {import('../../Map.js').FrameState} frameState Frame state.\n   * @return {string} Background color.\n   */\n  getBackground(frameState) {\n    const layer = this.getLayer();\n    let background = layer.getBackground();\n    if (typeof background === 'function') {\n      background = background(frameState.viewState.resolution);\n    }\n    return background || undefined;\n  }\n\n  /**\n   * Get a rendering container from an existing target, if compatible.\n   * @param {HTMLElement} target Potential render target.\n   * @param {string} transform CSS Transform.\n   * @param {string} [backgroundColor] Background color.\n   */\n  useContainer(target, transform, backgroundColor) {\n    const layerClassName = this.getLayer().getClassName();\n    let container, context;\n    if (\n      target &&\n      target.className === layerClassName &&\n      (!backgroundColor ||\n        (target &&\n          target.style.backgroundColor &&\n          equals(\n            asArray(target.style.backgroundColor),\n            asArray(backgroundColor),\n          )))\n    ) {\n      const canvas = target.firstElementChild;\n      if (canvas instanceof HTMLCanvasElement) {\n        context = canvas.getContext('2d');\n      }\n    }\n    if (context && context.canvas.style.transform === transform) {\n      // Container of the previous layer renderer can be used.\n      this.container = target;\n      this.context = context;\n      this.containerReused = true;\n    } else if (this.containerReused) {\n      // Previously reused container cannot be used any more.\n      this.container = null;\n      this.context = null;\n      this.containerReused = false;\n    } else if (this.container) {\n      this.container.style.backgroundColor = null;\n    }\n    if (!this.container) {\n      container = document.createElement('div');\n      container.className = layerClassName;\n      let style = container.style;\n      style.position = 'absolute';\n      style.width = '100%';\n      style.height = '100%';\n      context = createCanvasContext2D();\n      const canvas = context.canvas;\n      container.appendChild(canvas);\n      style = canvas.style;\n      style.position = 'absolute';\n      style.left = '0';\n      style.transformOrigin = 'top left';\n      this.container = container;\n      this.context = context;\n    }\n    if (\n      !this.containerReused &&\n      backgroundColor &&\n      !this.container.style.backgroundColor\n    ) {\n      this.container.style.backgroundColor = backgroundColor;\n    }\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../extent.js\").Extent} extent Clip extent.\n   * @protected\n   */\n  clipUnrotated(context, frameState, extent) {\n    const topLeft = getTopLeft(extent);\n    const topRight = getTopRight(extent);\n    const bottomRight = getBottomRight(extent);\n    const bottomLeft = getBottomLeft(extent);\n\n    applyTransform(frameState.coordinateToPixelTransform, topLeft);\n    applyTransform(frameState.coordinateToPixelTransform, topRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomLeft);\n\n    const inverted = this.inversePixelTransform;\n    applyTransform(inverted, topLeft);\n    applyTransform(inverted, topRight);\n    applyTransform(inverted, bottomRight);\n    applyTransform(inverted, bottomLeft);\n\n    context.save();\n    context.beginPath();\n    context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));\n    context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));\n    context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));\n    context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));\n    context.clip();\n  }\n\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target that may be used to render content to.\n   * @protected\n   */\n  prepareContainer(frameState, target) {\n    const extent = frameState.extent;\n    const resolution = frameState.viewState.resolution;\n    const rotation = frameState.viewState.rotation;\n    const pixelRatio = frameState.pixelRatio;\n    const width = Math.round((getWidth(extent) / resolution) * pixelRatio);\n    const height = Math.round((getHeight(extent) / resolution) * pixelRatio);\n    // set forward and inverse pixel transforms\n    composeTransform(\n      this.pixelTransform,\n      frameState.size[0] / 2,\n      frameState.size[1] / 2,\n      1 / pixelRatio,\n      1 / pixelRatio,\n      rotation,\n      -width / 2,\n      -height / 2,\n    );\n    makeInverse(this.inversePixelTransform, this.pixelTransform);\n\n    const canvasTransform = toTransformString(this.pixelTransform);\n    this.useContainer(target, canvasTransform, this.getBackground(frameState));\n\n    if (!this.containerReused) {\n      const canvas = this.context.canvas;\n      if (canvas.width != width || canvas.height != height) {\n        canvas.width = width;\n        canvas.height = height;\n      } else {\n        this.context.clearRect(0, 0, width, height);\n      }\n      if (canvasTransform !== canvas.style.transform) {\n        canvas.style.transform = canvasTransform;\n      }\n    }\n  }\n\n  /**\n   * @param {import(\"../../render/EventType.js\").default} type Event type.\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @private\n   */\n  dispatchRenderEvent_(type, context, frameState) {\n    const layer = this.getLayer();\n    if (layer.hasListener(type)) {\n      const event = new RenderEvent(\n        type,\n        this.inversePixelTransform,\n        frameState,\n        context,\n      );\n      layer.dispatchEvent(event);\n    }\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  preRender(context, frameState) {\n    this.frameState = frameState;\n    if (frameState.declutter) {\n      return;\n    }\n    this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  postRender(context, frameState) {\n    if (frameState.declutter) {\n      return;\n    }\n    this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);\n  }\n\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   */\n  renderDeferredInternal(frameState) {}\n\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {import('../../render/canvas/ZIndexContext.js').ZIndexContextProxy} Context.\n   */\n  getRenderContext(frameState) {\n    if (frameState.declutter && !this.deferredContext_) {\n      this.deferredContext_ = new ZIndexContext();\n    }\n    return frameState.declutter\n      ? this.deferredContext_.getContext()\n      : this.context;\n  }\n\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @override\n   */\n  renderDeferred(frameState) {\n    if (!frameState.declutter) {\n      return;\n    }\n    this.dispatchRenderEvent_(\n      RenderEventType.PRERENDER,\n      this.context,\n      frameState,\n    );\n    if (frameState.declutter && this.deferredContext_) {\n      this.deferredContext_.draw(this.context);\n      this.deferredContext_.clear();\n    }\n    this.renderDeferredInternal(frameState);\n    this.dispatchRenderEvent_(\n      RenderEventType.POSTRENDER,\n      this.context,\n      frameState,\n    );\n  }\n\n  /**\n   * Creates a transform for rendering to an element that will be rotated after rendering.\n   * @param {import(\"../../coordinate.js\").Coordinate} center Center.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {number} width Width of the rendered element (in pixels).\n   * @param {number} height Height of the rendered element (in pixels).\n   * @param {number} offsetX Offset on the x-axis in view coordinates.\n   * @protected\n   * @return {!import(\"../../transform.js\").Transform} Transform.\n   */\n  getRenderTransform(\n    center,\n    resolution,\n    rotation,\n    pixelRatio,\n    width,\n    height,\n    offsetX,\n  ) {\n    const dx1 = width / 2;\n    const dy1 = height / 2;\n    const sx = pixelRatio / resolution;\n    const sy = -sx;\n    const dx2 = -center[0] + offsetX;\n    const dy2 = -center[1];\n    return composeTransform(\n      this.tempTransform,\n      dx1,\n      dy1,\n      sx,\n      sy,\n      -rotation,\n      dx2,\n      dy2,\n    );\n  }\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    delete this.frameState;\n    super.disposeInternal();\n  }\n}\n\nexport default CanvasLayerRenderer;\n"],"names":["t","e","Proxy","HTMLCanvasElement","document","Math","r","h"],"mappings":"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"}