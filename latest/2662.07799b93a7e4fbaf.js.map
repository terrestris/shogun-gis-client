{"version":3,"file":"2662.07799b93a7e4fbaf.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-util/dist/constants.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-util/dist/Hooks/useMeasure/useMeasure.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-geo/dist/Button/MeasureButton/MeasureButton.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-geo/dist/Button/ToggleButton/ToggleButton.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-geo/dist/constants.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-util/dist/Hooks/useOlInteraction/useOlInteraction.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-util/dist/Hooks/useOlListener/useOlListener.js"],"sourcesContent":["const CSS_PREFIX = 'react-util-';\nexport { CSS_PREFIX };\n//# sourceMappingURL=constants.js.map","import { useCallback, useEffect, useRef, useState } from 'react';\nimport OlCollection from 'ol/Collection';\nimport OlGeomCircle from 'ol/geom/Circle';\nimport OlGeomLineString from 'ol/geom/LineString';\nimport OlGeomMultiLineString from 'ol/geom/MultiLineString';\nimport OlGeomMultiPolygon from 'ol/geom/MultiPolygon';\nimport OlGeomPolygon from 'ol/geom/Polygon';\nimport OlInteractionDraw from 'ol/interaction/Draw';\nimport OlLayerVector from 'ol/layer/Vector';\nimport OlOverlay from 'ol/Overlay';\nimport OlSourceVector from 'ol/source/Vector';\nimport OlStyleCircle from 'ol/style/Circle';\nimport OlStyleFill from 'ol/style/Fill';\nimport OlStyleStroke from 'ol/style/Stroke';\nimport OlStyleStyle from 'ol/style/Style';\nimport MeasureUtil from '@terrestris/ol-util/dist/MeasureUtil/MeasureUtil';\nimport { CSS_PREFIX } from '../../constants';\nimport useMap from '../useMap/useMap';\nimport { useOlInteraction } from '../useOlInteraction/useOlInteraction';\nimport useOlLayer from '../useOlLayer/useOlLayer';\nimport useOlListener from '../useOlListener/useOlListener';\nfunction simplifyFeatureGeom(feature) {\n    let geom = feature.getGeometry();\n    if (geom instanceof OlGeomMultiPolygon) {\n        geom = geom.getPolygons()[0];\n    }\n    if (geom instanceof OlGeomMultiLineString) {\n        geom = geom.getLineStrings()[0];\n    }\n    return geom;\n}\nexport const useMeasure = ({ measureType, measureLayerName = 'react-util-measure', fillColor = 'rgba(255, 0, 0, 0.5)', strokeColor = 'rgba(255, 0, 0, 0.8)', showMeasureInfoOnClickedPoints = false, showSegmentLengths = false, showHelpTooltip = true, decimalPlacesInTooltips = 2, multipleDrawing = false, continuePolygonMsg = 'Click to draw area', continueLineMsg = 'Click to draw line', continueAngleMsg = 'Click to draw angle', clickToDrawText = 'Click to measure', measureTooltipCssClasses = {\n    tooltip: `${CSS_PREFIX}measure-tooltip`,\n    tooltipDynamic: `${CSS_PREFIX}measure-tooltip-dynamic`,\n    tooltipStatic: `${CSS_PREFIX}measure-tooltip-static`\n}, active = false, geodesic = true, measureRadius = false }) => {\n    const [feature, setFeature] = useState();\n    const measureTooltip = useRef();\n    const helpTooltip = useRef();\n    const stepMeasureTooltips = useRef([]);\n    const segmentMeasureTooltips = useRef([]);\n    const segmentDrawingMeasureTooltip = useRef();\n    const map = useMap();\n    const measureLayer = useOlLayer(() => new OlLayerVector({\n        properties: {\n            name: measureLayerName\n        },\n        source: new OlSourceVector({\n            features: new OlCollection()\n        }),\n        style: new OlStyleStyle({\n            fill: new OlStyleFill({\n                color: fillColor\n            }),\n            stroke: new OlStyleStroke({\n                color: strokeColor,\n                width: 2\n            }),\n            image: new OlStyleCircle({\n                radius: 7,\n                fill: new OlStyleFill({\n                    color: fillColor\n                })\n            })\n        })\n    }), [\n        measureLayerName,\n        fillColor,\n        strokeColor,\n        fillColor\n    ], active);\n    const drawInteraction = useOlInteraction(() => {\n        const getDrawType = (input) => {\n            switch (input) {\n                case 'line':\n                case 'angle':\n                    return 'MultiLineString';\n                case 'polygon':\n                    return 'MultiPolygon';\n                case 'circle':\n                    return 'Circle';\n                default:\n                    return 'MultiLineString';\n            }\n        };\n        return (new OlInteractionDraw({\n            source: measureLayer?.getSource() || undefined,\n            type: getDrawType(measureType),\n            maxPoints: measureType === 'angle' ? 2 : undefined,\n            style: new OlStyleStyle({\n                fill: new OlStyleFill({\n                    color: fillColor\n                }),\n                stroke: new OlStyleStroke({\n                    color: strokeColor,\n                    lineDash: [10, 10],\n                    width: 2\n                }),\n                image: new OlStyleCircle({\n                    radius: 5,\n                    stroke: new OlStyleStroke({\n                        color: strokeColor\n                    }),\n                    fill: new OlStyleFill({\n                        color: fillColor\n                    })\n                })\n            }),\n            freehandCondition: () => false\n        }));\n    }, [measureType, measureLayer, fillColor, strokeColor, fillColor], active);\n    const removeMeasureTooltip = useCallback(() => {\n        if (map && measureTooltip.current) {\n            map.removeOverlay(measureTooltip.current);\n            measureTooltip.current = undefined;\n        }\n    }, [map]);\n    const removeStepMeasureTooltips = useCallback(() => {\n        if (map && stepMeasureTooltips.current.length > 0) {\n            for (const overlay of stepMeasureTooltips.current) {\n                map.removeOverlay(overlay);\n            }\n            stepMeasureTooltips.current = [];\n        }\n    }, [map]);\n    const removeLastStepMeasureTooltip = useCallback(() => {\n        if (map && stepMeasureTooltips.current.length > 0) {\n            const tooltip = stepMeasureTooltips.current.pop();\n            map.removeOverlay(tooltip);\n        }\n    }, [map]);\n    const removeSegmentMeasureTooltips = useCallback(() => {\n        if (map && segmentMeasureTooltips.current.length > 0) {\n            for (const overlay of segmentMeasureTooltips.current) {\n                map.removeOverlay(overlay);\n            }\n            segmentMeasureTooltips.current = [];\n        }\n    }, [map]);\n    const removeSegmentDrawingMeasureTooltip = useCallback(() => {\n        if (map && segmentDrawingMeasureTooltip.current !== undefined) {\n            map.removeOverlay(segmentDrawingMeasureTooltip.current);\n            segmentDrawingMeasureTooltip.current = undefined;\n        }\n    }, [map]);\n    const removeHelpTooltip = useCallback(() => {\n        if (map && helpTooltip.current) {\n            map.removeOverlay(helpTooltip.current);\n            helpTooltip.current = undefined;\n        }\n    }, [map]);\n    const cleanup = useCallback(() => {\n        removeMeasureTooltip();\n        removeStepMeasureTooltips();\n        removeSegmentMeasureTooltips();\n        removeSegmentDrawingMeasureTooltip();\n        removeHelpTooltip();\n        measureLayer?.getSource()?.clear();\n    }, [measureLayer, removeMeasureTooltip, removeStepMeasureTooltips, removeSegmentMeasureTooltips,\n        removeHelpTooltip, removeSegmentDrawingMeasureTooltip\n    ]);\n    useEffect(() => {\n        if (active) {\n            return () => {\n                cleanup();\n            };\n        }\n        return undefined;\n    }, [active, cleanup]);\n    const createHelpTooltip = useCallback(() => {\n        if (!map || helpTooltip.current) {\n            return;\n        }\n        helpTooltip.current = new OlOverlay({\n            element: document.createElement('div'),\n            offset: [15, 0],\n            positioning: 'center-left',\n            className: measureTooltipCssClasses?.tooltip ?? ''\n        });\n        map.addOverlay(helpTooltip.current);\n    }, [map, measureTooltipCssClasses?.tooltip]);\n    const createTooltip = useCallback(() => {\n        return new OlOverlay({\n            element: document.createElement('div'),\n            offset: [0, -15],\n            positioning: 'bottom-center',\n            className: measureTooltipCssClasses\n                ? `${measureTooltipCssClasses.tooltip} ${measureTooltipCssClasses.tooltipDynamic}`\n                : ''\n        });\n    }, [measureTooltipCssClasses]);\n    const updateMeasureTooltip = useCallback(() => {\n        if (!feature || !map) {\n            return;\n        }\n        let value;\n        const geom = simplifyFeatureGeom(feature);\n        let measureTooltipCoord = undefined;\n        if (geom instanceof OlGeomCircle) {\n            if (!measureRadius) {\n                value = MeasureUtil.formatArea(geom, map, decimalPlacesInTooltips, geodesic);\n            }\n            else {\n                const area = MeasureUtil.getAreaOfCircle(geom, map);\n                const decimalHelper = Math.pow(10, decimalPlacesInTooltips);\n                const radius = Math.round(geom.getRadius() * decimalHelper) / decimalHelper;\n                value = `${radius.toString()} m`;\n                if (area > (Math.PI * 1000000)) {\n                    value = (Math.round(geom.getRadius() / 1000 * decimalHelper) /\n                        decimalHelper) + ' km';\n                }\n            }\n            measureTooltipCoord = geom.getCenter();\n        }\n        else if (geom instanceof OlGeomPolygon) {\n            if (geom.getCoordinates()[0].length > 3) {\n                value = MeasureUtil.formatArea(geom, map, decimalPlacesInTooltips, geodesic);\n                // attach area at interior point\n                measureTooltipCoord = geom.getInteriorPoint().getCoordinates();\n            }\n        }\n        else if (geom instanceof OlGeomLineString) {\n            measureTooltipCoord = geom.getLastCoordinate();\n            if (measureType === 'line') {\n                value = MeasureUtil.formatLength(geom, map, decimalPlacesInTooltips, geodesic);\n            }\n            else if (measureType === 'angle') {\n                value = MeasureUtil.formatAngle(geom, 0);\n            }\n        }\n        if (value === undefined || parseInt(value, 10) === 0) {\n            removeMeasureTooltip();\n            return;\n        }\n        if (measureTooltip.current === undefined) {\n            measureTooltip.current = createTooltip();\n            map.addOverlay(measureTooltip.current);\n        }\n        const tooltip = measureTooltip.current;\n        const el = tooltip.getElement();\n        if (value && el) {\n            el.innerHTML = value;\n        }\n        tooltip.setPosition(measureTooltipCoord);\n    }, [decimalPlacesInTooltips, feature, geodesic, map, measureType, measureRadius, createTooltip, removeMeasureTooltip]);\n    const onDrawStart = useCallback((evt) => {\n        if (!map) {\n            return;\n        }\n        if (!multipleDrawing) {\n            cleanup();\n        }\n        setFeature(evt.feature);\n    }, [cleanup, map, multipleDrawing]);\n    const addMeasureStopTooltip = useCallback((coordinate) => {\n        if (!feature || !map) {\n            return;\n        }\n        const geom = simplifyFeatureGeom(feature);\n        const value = measureType === 'line' ?\n            MeasureUtil.formatLength(geom, map, decimalPlacesInTooltips, geodesic) :\n            MeasureUtil.formatArea(geom, map, decimalPlacesInTooltips, geodesic);\n        if (parseInt(value, 10) > 0) {\n            const tooltip = createTooltip();\n            const div = tooltip.getElement();\n            div.innerHTML = value;\n            map.addOverlay(tooltip);\n            tooltip.setPosition(coordinate);\n            stepMeasureTooltips.current.push(tooltip);\n        }\n    }, [decimalPlacesInTooltips, feature, geodesic, map, createTooltip, measureType]);\n    const addSegmentTooltip = useCallback((showLastSegment = false) => {\n        if (!feature || !map) {\n            return;\n        }\n        const geom = simplifyFeatureGeom(feature);\n        let coordinates = [];\n        if (showLastSegment) {\n            if (!(geom instanceof OlGeomPolygon)) {\n                return;\n            }\n            coordinates = geom.getCoordinates()[0].slice(-2);\n        }\n        else {\n            if (geom instanceof OlGeomPolygon) {\n                // the last coordinate is the starting coordinate for a polygon\n                coordinates = geom.getCoordinates()[0].slice(0, -1);\n            }\n            if (geom instanceof OlGeomLineString) {\n                coordinates = geom.getCoordinates();\n            }\n            if (coordinates.length < 3) {\n                return;\n            }\n            // the last coordinate is one where the pointer is, so we take the ones before\n            coordinates = coordinates.slice(-3, -1);\n        }\n        const segment = new OlGeomLineString(coordinates);\n        const value = MeasureUtil.formatLength(segment, map, decimalPlacesInTooltips, geodesic);\n        if (parseInt(value, 10) > 0) {\n            const tooltip = createTooltip();\n            const div = tooltip.getElement();\n            div.innerHTML = value;\n            map.addOverlay(tooltip);\n            const coordinate = segment.getCoordinateAt(0.5);\n            tooltip.setPosition(coordinate);\n            segmentMeasureTooltips.current.push(tooltip);\n        }\n    }, [decimalPlacesInTooltips, feature, geodesic, map, createTooltip]);\n    const updateSegmentDrawingTooltip = useCallback(() => {\n        if (!feature || !map) {\n            return;\n        }\n        const geom = simplifyFeatureGeom(feature);\n        let coordinates = [];\n        if (geom instanceof OlGeomPolygon) {\n            // the last coordinate is the starting coordinate for a polygon\n            coordinates = geom.getCoordinates()[0].slice(0, -1);\n        }\n        if (geom instanceof OlGeomLineString) {\n            coordinates = geom.getCoordinates();\n        }\n        if (coordinates.length < 2) {\n            return;\n        }\n        coordinates = coordinates.slice(-2);\n        const segment = new OlGeomLineString(coordinates);\n        const value = MeasureUtil.formatLength(segment, map, decimalPlacesInTooltips, geodesic);\n        if (parseInt(value, 10) > 0) {\n            if (segmentDrawingMeasureTooltip.current === undefined) {\n                segmentDrawingMeasureTooltip.current = createTooltip();\n                map.addOverlay(segmentDrawingMeasureTooltip.current);\n            }\n            const tooltip = segmentDrawingMeasureTooltip.current;\n            const div = tooltip.getElement();\n            div.innerHTML = value;\n            const coordinate = segment.getCoordinateAt(0.5);\n            tooltip.setPosition(coordinate);\n        }\n    }, [decimalPlacesInTooltips, feature, geodesic, map, createTooltip]);\n    const onDrawEnd = useCallback((evt) => {\n        if (!map) {\n            return;\n        }\n        if (showMeasureInfoOnClickedPoints && measureType === 'line') {\n            removeLastStepMeasureTooltip();\n        }\n        if (multipleDrawing && (measureType === 'line' || measureType === 'polygon')) {\n            addMeasureStopTooltip(evt.feature.getGeometry()\n                .getLastCoordinate());\n            removeMeasureTooltip();\n        }\n        if (!multipleDrawing) {\n            updateMeasureTooltip();\n            const el = measureTooltip.current?.getElement();\n            if (el && measureTooltipCssClasses) {\n                el.className = `${measureTooltipCssClasses.tooltip} ${measureTooltipCssClasses.tooltipStatic}`;\n            }\n            measureTooltip.current?.setOffset([0, -7]);\n        }\n        // unset sketch\n        setFeature(undefined);\n        if (showSegmentLengths) {\n            removeSegmentDrawingMeasureTooltip();\n            if (segmentMeasureTooltips.current.length > 1) {\n                // because of the double click at the end one segment is doubled.\n                const [tooltip] = segmentMeasureTooltips.current.splice(-2, 1);\n                map.removeOverlay(tooltip);\n            }\n            if (measureType === 'polygon') {\n                addSegmentTooltip(true);\n            }\n        }\n    }, [addMeasureStopTooltip, measureTooltipCssClasses, map,\n        measureType, multipleDrawing, removeMeasureTooltip, showMeasureInfoOnClickedPoints, updateMeasureTooltip,\n        showSegmentLengths, addSegmentTooltip, removeLastStepMeasureTooltip, removeSegmentDrawingMeasureTooltip\n    ]);\n    const updateHelpTooltip = useCallback((coordinate) => {\n        if (!helpTooltip.current) {\n            return;\n        }\n        const helpTooltipElement = helpTooltip.current?.getElement();\n        if (!helpTooltipElement) {\n            return;\n        }\n        let msg = clickToDrawText;\n        if (measureType === 'polygon') {\n            msg = continuePolygonMsg;\n        }\n        else if (measureType === 'line') {\n            msg = continueLineMsg;\n        }\n        else if (measureType === 'angle') {\n            msg = continueAngleMsg;\n        }\n        helpTooltipElement.innerHTML = msg ?? '';\n        helpTooltip.current.setPosition(coordinate);\n    }, [clickToDrawText, continueAngleMsg, continueLineMsg, continuePolygonMsg, helpTooltip, measureType]);\n    const onMapPointerMove = useCallback((evt) => {\n        if (!evt.dragging && active) {\n            updateHelpTooltip(evt.coordinate);\n            if (showSegmentLengths) {\n                updateSegmentDrawingTooltip();\n            }\n        }\n    }, [updateHelpTooltip, active, showSegmentLengths, updateSegmentDrawingTooltip]);\n    const onMapClick = useCallback((evt) => {\n        if (active && showMeasureInfoOnClickedPoints && measureType === 'line') {\n            addMeasureStopTooltip(evt.coordinate);\n        }\n        if (active && showSegmentLengths && (measureType === 'line' || measureType === 'polygon')) {\n            addSegmentTooltip();\n        }\n    }, [addMeasureStopTooltip, addSegmentTooltip, measureType, showMeasureInfoOnClickedPoints, showSegmentLengths,\n        active\n    ]);\n    useOlListener(drawInteraction, i => i.on('drawstart', (evt) => {\n        onDrawStart?.(evt);\n    }), [drawInteraction, onDrawStart]);\n    useOlListener(drawInteraction, i => i.on('drawend', (evt) => {\n        onDrawEnd?.(evt);\n    }), [drawInteraction, onDrawEnd]);\n    useOlListener(map, i => i.on('pointermove', (evt) => {\n        onMapPointerMove?.(evt);\n    }), [map, onMapPointerMove]);\n    useOlListener(map, i => i.on('click', (evt) => {\n        onMapClick?.(evt);\n    }), [map, onMapClick]);\n    useEffect(() => {\n        if (showHelpTooltip) {\n            createHelpTooltip();\n        }\n    }, [createHelpTooltip, showHelpTooltip]);\n    useOlListener(feature, i => i.getGeometry()?.on('change', () => {\n        updateMeasureTooltip?.();\n    }), [feature, updateMeasureTooltip]);\n    return null;\n};\nexport default useMeasure;\n//# sourceMappingURL=useMeasure.js.map","import './MeasureButton.less';\nimport React from 'react';\nimport useMeasure from '@terrestris/react-util/dist/Hooks/useMeasure/useMeasure';\nimport { CSS_PREFIX } from '../../constants';\nimport ToggleButton from '../ToggleButton/ToggleButton';\nconst defaultClassName = `${CSS_PREFIX}measurebutton`;\nexport const MeasureButton = ({ measureType = 'line', measureLayerName = 'react-geo_measure', fillColor = 'rgba(255, 0, 0, 0.5)', strokeColor = 'rgba(255, 0, 0, 0.8)', showMeasureInfoOnClickedPoints = false, showSegmentLengths = false, showHelpTooltip = true, decimalPlacesInTooltips = 2, multipleDrawing = false, continuePolygonMsg = 'Click to draw area', continueLineMsg = 'Click to draw line', continueAngleMsg = 'Click to draw angle', clickToDrawText = 'Click to measure', measureTooltipCssClasses = {\n    tooltip: `${CSS_PREFIX}measure-tooltip`,\n    tooltipDynamic: `${CSS_PREFIX}measure-tooltip-dynamic`,\n    tooltipStatic: `${CSS_PREFIX}measure-tooltip-static`\n}, pressed = false, geodesic = true, measureRadius = false, className, ...passThroughProps }) => {\n    useMeasure({\n        active: pressed,\n        measureType,\n        measureLayerName,\n        fillColor,\n        strokeColor,\n        showMeasureInfoOnClickedPoints,\n        showSegmentLengths,\n        showHelpTooltip,\n        decimalPlacesInTooltips,\n        multipleDrawing,\n        continuePolygonMsg,\n        continueLineMsg,\n        continueAngleMsg,\n        clickToDrawText,\n        measureTooltipCssClasses,\n        geodesic,\n        measureRadius\n    });\n    const finalClassName = className\n        ? `${className} ${defaultClassName}`\n        : defaultClassName;\n    return (React.createElement(ToggleButton, { pressed: pressed, className: finalClassName, ...passThroughProps }));\n};\nexport default MeasureButton;\n//# sourceMappingURL=MeasureButton.js.map","import './ToggleButton.less';\nimport React from 'react';\nimport { Button, Tooltip } from 'antd';\nimport { CSS_PREFIX } from '../../constants';\nexport const ToggleButton = ({ type = 'primary', pressed = false, tooltipProps = {\n    mouseEnterDelay: 1.5\n}, className, tooltip, tooltipPlacement, pressedIcon, icon, children, value, onClick, onChange = () => undefined, ...passThroughProps }) => {\n    const handleChange = (evt) => {\n        if (onClick) {\n            onClick(evt);\n            if (evt.defaultPrevented) {\n                return;\n            }\n        }\n        onChange(evt, value);\n    };\n    const internalClassName = `${CSS_PREFIX}togglebutton`;\n    const finalClassName = className\n        ? `${className} ${internalClassName}`\n        : internalClassName;\n    let pressedClass = '';\n    if (pressed) {\n        pressedClass = ' btn-pressed';\n    }\n    return (React.createElement(Tooltip, { title: tooltip, placement: tooltipPlacement, ...tooltipProps },\n        React.createElement(Button, { type: type, onClick: handleChange, onChange: onChange, className: `${finalClassName}${pressedClass}`, \"aria-pressed\": pressed, icon: pressed ?\n                pressedIcon :\n                icon, ...passThroughProps }, children)));\n};\nexport default ToggleButton;\n//# sourceMappingURL=ToggleButton.js.map","const CSS_PREFIX = 'react-geo-';\nexport { CSS_PREFIX };\n//# sourceMappingURL=constants.js.map","import { useEffect, useState } from 'react';\nimport { isNil } from 'lodash';\nimport useMap from '../useMap/useMap';\n/**\n * This hook adds an interaction to the map and removes/updates it if the dependency array changes.\n * It accepts an optional active parameter that toggles the active state of the interaction. If it is undefined the\n * active state will not get changed.\n * @param constructor returns an interaction to be added to the map, will be called again, if the interaction needs\n * to be updated\n * @param dependencies\n * @param active\n */\nexport const useOlInteraction = (constructor, dependencies, active) => {\n    const map = useMap();\n    const [interaction, setInteraction] = useState();\n    useEffect(() => {\n        if (!map) {\n            return undefined;\n        }\n        const newInteraction = constructor();\n        if (!newInteraction) {\n            return undefined;\n        }\n        setInteraction(newInteraction);\n        map.addInteraction(newInteraction);\n        return () => {\n            map.removeInteraction(newInteraction);\n            setInteraction(undefined);\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [...dependencies, map]);\n    useEffect(() => {\n        if (!interaction || isNil(active)) {\n            return;\n        }\n        interaction.setActive(active);\n    }, [interaction, active]);\n    return interaction;\n};\nexport default useOlInteraction;\n//# sourceMappingURL=useOlInteraction.js.map","import { useEffect } from 'react';\nimport { unByKey } from 'ol/Observable';\n/**\n * This hook unregisters listeners if the dependency array changes\n */\nexport const useOlListener = (observable, observe, dependencies, active) => {\n    useEffect(() => {\n        if (!observable || active === false) {\n            return undefined;\n        }\n        const observables = Array.isArray(observable) ? observable : [observable];\n        const keys = observables\n            .flatMap(o => {\n            const k = observe(o);\n            return Array.isArray(k) ? k : [k];\n        })\n            .filter(k => k !== undefined);\n        return () => {\n            for (const key of keys) {\n                unByKey(key);\n            }\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [observable, active, observe, ...dependencies]);\n};\nexport default useOlListener;\n//# sourceMappingURL=useOlListener.js.map"],"names":["O","document","Math","parseInt","e","i","a","Array"],"mappings":"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"}