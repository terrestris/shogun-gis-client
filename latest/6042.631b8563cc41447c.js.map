{"version":3,"file":"6042.631b8563cc41447c.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/ol/geom/LinearRing.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/geom/Point.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/geom/Polygon.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/geom/flat/area.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/geom/flat/interiorpoint.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/geom/flat/orient.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/geom/flat/reverse.js"],"sourcesContent":["/**\n * @module ol/geom/LinearRing\n */\nimport {closestSquaredDistanceXY} from '../extent.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {linearRing as linearRingArea} from './flat/area.js';\nimport {assignClosestPoint, maxSquaredDelta} from './flat/closest.js';\nimport {deflateCoordinates} from './flat/deflate.js';\nimport {inflateCoordinates} from './flat/inflate.js';\nimport {douglasPeucker} from './flat/simplify.js';\n\n/**\n * @classdesc\n * Linear ring geometry. Only used as part of polygon; cannot be rendered\n * on its own.\n *\n * @api\n */\nclass LinearRing extends SimpleGeometry {\n  /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `layout` are also accepted.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  constructor(coordinates, layout) {\n    super();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    if (layout !== undefined && !Array.isArray(coordinates[0])) {\n      this.setFlatCoordinates(\n        layout,\n        /** @type {Array<number>} */ (coordinates),\n      );\n    } else {\n      this.setCoordinates(\n        /** @type {Array<import(\"../coordinate.js\").Coordinate>} */ (\n          coordinates\n        ),\n        layout,\n      );\n    }\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!LinearRing} Clone.\n   * @api\n   * @override\n   */\n  clone() {\n    return new LinearRing(this.flatCoordinates.slice(), this.layout);\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   * @override\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(\n        maxSquaredDelta(\n          this.flatCoordinates,\n          0,\n          this.flatCoordinates.length,\n          this.stride,\n          0,\n        ),\n      );\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestPoint(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      this.maxDelta_,\n      true,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance,\n    );\n  }\n\n  /**\n   * Return the area of the linear ring on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */\n  getArea() {\n    return linearRingArea(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n    );\n  }\n\n  /**\n   * Return the coordinates of the linear ring.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @api\n   * @override\n   */\n  getCoordinates() {\n    return inflateCoordinates(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n    );\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {LinearRing} Simplified LinearRing.\n   * @protected\n   * @override\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    /** @type {Array<number>} */\n    const simplifiedFlatCoordinates = [];\n    simplifiedFlatCoordinates.length = douglasPeucker(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      squaredTolerance,\n      simplifiedFlatCoordinates,\n      0,\n    );\n    return new LinearRing(simplifiedFlatCoordinates, 'XY');\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   * @override\n   */\n  getType() {\n    return 'LinearRing';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   * @override\n   */\n  intersectsExtent(extent) {\n    return false;\n  }\n\n  /**\n   * Set the coordinates of the linear ring.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   * @override\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 1);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinates(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride,\n    );\n    this.changed();\n  }\n}\n\nexport default LinearRing;\n","/**\n * @module ol/geom/Point\n */\nimport {containsXY, createOrUpdateFromCoordinate} from '../extent.js';\nimport {squaredDistance as squaredDx} from '../math.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {deflateCoordinate} from './flat/deflate.js';\n\n/**\n * @classdesc\n * Point geometry.\n *\n * @api\n */\nclass Point extends SimpleGeometry {\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  constructor(coordinates, layout) {\n    super();\n    this.setCoordinates(coordinates, layout);\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Point} Clone.\n   * @api\n   * @override\n   */\n  clone() {\n    const point = new Point(this.flatCoordinates.slice(), this.layout);\n    point.applyProperties(this);\n    return point;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   * @override\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    const flatCoordinates = this.flatCoordinates;\n    const squaredDistance = squaredDx(\n      x,\n      y,\n      flatCoordinates[0],\n      flatCoordinates[1],\n    );\n    if (squaredDistance < minSquaredDistance) {\n      const stride = this.stride;\n      for (let i = 0; i < stride; ++i) {\n        closestPoint[i] = flatCoordinates[i];\n      }\n      closestPoint.length = stride;\n      return squaredDistance;\n    }\n    return minSquaredDistance;\n  }\n\n  /**\n   * Return the coordinate of the point.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinates.\n   * @api\n   * @override\n   */\n  getCoordinates() {\n    return this.flatCoordinates.slice();\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   * @override\n   */\n  computeExtent(extent) {\n    return createOrUpdateFromCoordinate(this.flatCoordinates, extent);\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   * @override\n   */\n  getType() {\n    return 'Point';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   * @override\n   */\n  intersectsExtent(extent) {\n    return containsXY(extent, this.flatCoordinates[0], this.flatCoordinates[1]);\n  }\n\n  /**\n   * @param {!Array<*>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   * @override\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 0);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinate(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride,\n    );\n    this.changed();\n  }\n}\n\nexport default Point;\n","/**\n * @module ol/geom/Polygon\n */\nimport {extend} from '../array.js';\nimport {closestSquaredDistanceXY, getCenter, isEmpty} from '../extent.js';\nimport {modulo} from '../math.js';\nimport {offset as sphereOffset} from '../sphere.js';\nimport LinearRing from './LinearRing.js';\nimport Point from './Point.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {linearRings as linearRingsArea} from './flat/area.js';\nimport {arrayMaxSquaredDelta, assignClosestArrayPoint} from './flat/closest.js';\nimport {linearRingsContainsXY} from './flat/contains.js';\nimport {deflateCoordinatesArray} from './flat/deflate.js';\nimport {inflateCoordinatesArray} from './flat/inflate.js';\nimport {getInteriorPointOfArray} from './flat/interiorpoint.js';\nimport {intersectsLinearRingArray} from './flat/intersectsextent.js';\nimport {linearRingsAreOriented, orientLinearRings} from './flat/orient.js';\nimport {quantizeArray} from './flat/simplify.js';\n\n/**\n * @classdesc\n * Polygon geometry.\n *\n * @api\n */\nclass Polygon extends SimpleGeometry {\n  /**\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>|!Array<number>} coordinates\n   *     Array of linear rings that define the polygon. The first linear ring of the\n   *     array defines the outer-boundary or surface of the polygon. Each subsequent\n   *     linear ring defines a hole in the surface of the polygon. A linear ring is\n   *     an array of vertices' coordinates where the first coordinate and the last are\n   *     equivalent. (For internal use, flat coordinates in combination with\n   *     `layout` and `ends` are also accepted.)\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @param {Array<number>} [ends] Ends (for internal use with flat coordinates).\n   */\n  constructor(coordinates, layout, ends) {\n    super();\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.ends_ = [];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.flatInteriorPointRevision_ = -1;\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate|null}\n     */\n    this.flatInteriorPoint_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.orientedRevision_ = -1;\n\n    /**\n     * @private\n     * @type {Array<number>|null}\n     */\n    this.orientedFlatCoordinates_ = null;\n\n    if (layout !== undefined && ends) {\n      this.setFlatCoordinates(\n        layout,\n        /** @type {Array<number>} */ (coordinates),\n      );\n      this.ends_ = ends;\n    } else {\n      this.setCoordinates(\n        /** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */ (\n          coordinates\n        ),\n        layout,\n      );\n    }\n  }\n\n  /**\n   * Append the passed linear ring to this polygon.\n   * @param {LinearRing} linearRing Linear ring.\n   * @api\n   */\n  appendLinearRing(linearRing) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = linearRing.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, linearRing.getFlatCoordinates());\n    }\n    this.ends_.push(this.flatCoordinates.length);\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Polygon} Clone.\n   * @api\n   * @override\n   */\n  clone() {\n    const polygon = new Polygon(\n      this.flatCoordinates.slice(),\n      this.layout,\n      this.ends_.slice(),\n    );\n    polygon.applyProperties(this);\n    return polygon;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   * @override\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(\n        arrayMaxSquaredDelta(\n          this.flatCoordinates,\n          0,\n          this.ends_,\n          this.stride,\n          0,\n        ),\n      );\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestArrayPoint(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      this.maxDelta_,\n      true,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance,\n    );\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   * @override\n   */\n  containsXY(x, y) {\n    return linearRingsContainsXY(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.ends_,\n      this.stride,\n      x,\n      y,\n    );\n  }\n\n  /**\n   * Return the area of the polygon on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */\n  getArea() {\n    return linearRingsArea(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.ends_,\n      this.stride,\n    );\n  }\n\n  /**\n   * Get the coordinate array for this geometry.  This array has the structure\n   * of a GeoJSON coordinate array for polygons.\n   *\n   * @param {boolean} [right] Orient coordinates according to the right-hand\n   *     rule (counter-clockwise for exterior and clockwise for interior rings).\n   *     If `false`, coordinates will be oriented according to the left-hand rule\n   *     (clockwise for exterior and counter-clockwise for interior rings).\n   *     By default, coordinate orientation will depend on how the geometry was\n   *     constructed.\n   * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\n   * @api\n   * @override\n   */\n  getCoordinates(right) {\n    let flatCoordinates;\n    if (right !== undefined) {\n      flatCoordinates = this.getOrientedFlatCoordinates().slice();\n      orientLinearRings(flatCoordinates, 0, this.ends_, this.stride, right);\n    } else {\n      flatCoordinates = this.flatCoordinates;\n    }\n\n    return inflateCoordinatesArray(flatCoordinates, 0, this.ends_, this.stride);\n  }\n\n  /**\n   * @return {Array<number>} Ends.\n   */\n  getEnds() {\n    return this.ends_;\n  }\n\n  /**\n   * @return {Array<number>} Interior point.\n   */\n  getFlatInteriorPoint() {\n    if (this.flatInteriorPointRevision_ != this.getRevision()) {\n      const flatCenter = getCenter(this.getExtent());\n      this.flatInteriorPoint_ = getInteriorPointOfArray(\n        this.getOrientedFlatCoordinates(),\n        0,\n        this.ends_,\n        this.stride,\n        flatCenter,\n        0,\n      );\n      this.flatInteriorPointRevision_ = this.getRevision();\n    }\n    return /** @type {import(\"../coordinate.js\").Coordinate} */ (\n      this.flatInteriorPoint_\n    );\n  }\n\n  /**\n   * Return an interior point of the polygon.\n   * @return {Point} Interior point as XYM coordinate, where M is the\n   * length of the horizontal intersection that the point belongs to.\n   * @api\n   */\n  getInteriorPoint() {\n    return new Point(this.getFlatInteriorPoint(), 'XYM');\n  }\n\n  /**\n   * Return the number of rings of the polygon,  this includes the exterior\n   * ring and any interior rings.\n   *\n   * @return {number} Number of rings.\n   * @api\n   */\n  getLinearRingCount() {\n    return this.ends_.length;\n  }\n\n  /**\n   * Return the Nth linear ring of the polygon geometry. Return `null` if the\n   * given index is out of range.\n   * The exterior linear ring is available at index `0` and the interior rings\n   * at index `1` and beyond.\n   *\n   * @param {number} index Index.\n   * @return {LinearRing|null} Linear ring.\n   * @api\n   */\n  getLinearRing(index) {\n    if (index < 0 || this.ends_.length <= index) {\n      return null;\n    }\n    return new LinearRing(\n      this.flatCoordinates.slice(\n        index === 0 ? 0 : this.ends_[index - 1],\n        this.ends_[index],\n      ),\n      this.layout,\n    );\n  }\n\n  /**\n   * Return the linear rings of the polygon.\n   * @return {Array<LinearRing>} Linear rings.\n   * @api\n   */\n  getLinearRings() {\n    const layout = this.layout;\n    const flatCoordinates = this.flatCoordinates;\n    const ends = this.ends_;\n    const linearRings = [];\n    let offset = 0;\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      const end = ends[i];\n      const linearRing = new LinearRing(\n        flatCoordinates.slice(offset, end),\n        layout,\n      );\n      linearRings.push(linearRing);\n      offset = end;\n    }\n    return linearRings;\n  }\n\n  /**\n   * @return {Array<number>} Oriented flat coordinates.\n   */\n  getOrientedFlatCoordinates() {\n    if (this.orientedRevision_ != this.getRevision()) {\n      const flatCoordinates = this.flatCoordinates;\n      if (linearRingsAreOriented(flatCoordinates, 0, this.ends_, this.stride)) {\n        this.orientedFlatCoordinates_ = flatCoordinates;\n      } else {\n        this.orientedFlatCoordinates_ = flatCoordinates.slice();\n        this.orientedFlatCoordinates_.length = orientLinearRings(\n          this.orientedFlatCoordinates_,\n          0,\n          this.ends_,\n          this.stride,\n        );\n      }\n      this.orientedRevision_ = this.getRevision();\n    }\n    return /** @type {Array<number>} */ (this.orientedFlatCoordinates_);\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {Polygon} Simplified Polygon.\n   * @protected\n   * @override\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    /** @type {Array<number>} */\n    const simplifiedFlatCoordinates = [];\n    /** @type {Array<number>} */\n    const simplifiedEnds = [];\n    simplifiedFlatCoordinates.length = quantizeArray(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      Math.sqrt(squaredTolerance),\n      simplifiedFlatCoordinates,\n      0,\n      simplifiedEnds,\n    );\n    return new Polygon(simplifiedFlatCoordinates, 'XY', simplifiedEnds);\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   * @override\n   */\n  getType() {\n    return 'Polygon';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   * @override\n   */\n  intersectsExtent(extent) {\n    return intersectsLinearRingArray(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.ends_,\n      this.stride,\n      extent,\n    );\n  }\n\n  /**\n   * Set the coordinates of the polygon.\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   * @override\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 2);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    const ends = deflateCoordinatesArray(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride,\n      this.ends_,\n    );\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n    this.changed();\n  }\n}\n\nexport default Polygon;\n\n/**\n * Create an approximation of a circle on the surface of a sphere.\n * @param {import(\"../coordinate.js\").Coordinate} center Center (`[lon, lat]` in degrees).\n * @param {number} radius The great-circle distance from the center to\n *     the polygon vertices in meters.\n * @param {number} [n] Optional number of vertices for the resulting\n *     polygon. Default is `32`.\n * @param {number} [sphereRadius] Optional radius for the sphere (defaults to\n *     the Earth's mean radius using the WGS84 ellipsoid).\n * @return {Polygon} The \"circular\" polygon.\n * @api\n */\nexport function circular(center, radius, n, sphereRadius) {\n  n = n ? n : 32;\n  /** @type {Array<number>} */\n  const flatCoordinates = [];\n  for (let i = 0; i < n; ++i) {\n    extend(\n      flatCoordinates,\n      sphereOffset(center, radius, (2 * Math.PI * i) / n, sphereRadius),\n    );\n  }\n  flatCoordinates.push(flatCoordinates[0], flatCoordinates[1]);\n  return new Polygon(flatCoordinates, 'XY', [flatCoordinates.length]);\n}\n\n/**\n * Create a polygon from an extent. The layout used is `XY`.\n * @param {import(\"../extent.js\").Extent} extent The extent.\n * @return {Polygon} The polygon.\n * @api\n */\nexport function fromExtent(extent) {\n  if (isEmpty(extent)) {\n    throw new Error('Cannot create polygon from empty extent');\n  }\n  const minX = extent[0];\n  const minY = extent[1];\n  const maxX = extent[2];\n  const maxY = extent[3];\n  const flatCoordinates = [\n    minX,\n    minY,\n    minX,\n    maxY,\n    maxX,\n    maxY,\n    maxX,\n    minY,\n    minX,\n    minY,\n  ];\n  return new Polygon(flatCoordinates, 'XY', [flatCoordinates.length]);\n}\n\n/**\n * Create a regular polygon from a circle.\n * @param {import(\"./Circle.js\").default} circle Circle geometry.\n * @param {number} [sides] Number of sides of the polygon. Default is 32.\n * @param {number} [angle] Start angle for the first vertex of the polygon in\n *     counter-clockwise radians. 0 means East. Default is 0.\n * @return {Polygon} Polygon geometry.\n * @api\n */\nexport function fromCircle(circle, sides, angle) {\n  sides = sides ? sides : 32;\n  const stride = circle.getStride();\n  const layout = circle.getLayout();\n  const center = circle.getCenter();\n  const arrayLength = stride * (sides + 1);\n  const flatCoordinates = new Array(arrayLength);\n  for (let i = 0; i < arrayLength; i += stride) {\n    flatCoordinates[i] = 0;\n    flatCoordinates[i + 1] = 0;\n    for (let j = 2; j < stride; j++) {\n      flatCoordinates[i + j] = center[j];\n    }\n  }\n  const ends = [flatCoordinates.length];\n  const polygon = new Polygon(flatCoordinates, layout, ends);\n  makeRegular(polygon, center, circle.getRadius(), angle);\n  return polygon;\n}\n\n/**\n * Modify the coordinates of a polygon to make it a regular polygon.\n * @param {Polygon} polygon Polygon geometry.\n * @param {import(\"../coordinate.js\").Coordinate} center Center of the regular polygon.\n * @param {number} radius Radius of the regular polygon.\n * @param {number} [angle] Start angle for the first vertex of the polygon in\n *     counter-clockwise radians. 0 means East. Default is 0.\n */\nexport function makeRegular(polygon, center, radius, angle) {\n  const flatCoordinates = polygon.getFlatCoordinates();\n  const stride = polygon.getStride();\n  const sides = flatCoordinates.length / stride - 1;\n  const startAngle = angle ? angle : 0;\n  for (let i = 0; i <= sides; ++i) {\n    const offset = i * stride;\n    const angle = startAngle + (modulo(i, sides) * 2 * Math.PI) / sides;\n    flatCoordinates[offset] = center[0] + radius * Math.cos(angle);\n    flatCoordinates[offset + 1] = center[1] + radius * Math.sin(angle);\n  }\n  polygon.changed();\n}\n","/**\n * @module ol/geom/flat/area\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {number} Area.\n */\nexport function linearRing(flatCoordinates, offset, end, stride) {\n  let twiceArea = 0;\n  const x0 = flatCoordinates[end - stride];\n  const y0 = flatCoordinates[end - stride + 1];\n  let dx1 = 0;\n  let dy1 = 0;\n  for (; offset < end; offset += stride) {\n    const dx2 = flatCoordinates[offset] - x0;\n    const dy2 = flatCoordinates[offset + 1] - y0;\n    twiceArea += dy1 * dx2 - dx1 * dy2;\n    dx1 = dx2;\n    dy1 = dy2;\n  }\n  return twiceArea / 2;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @return {number} Area.\n */\nexport function linearRings(flatCoordinates, offset, ends, stride) {\n  let area = 0;\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    area += linearRing(flatCoordinates, offset, end, stride);\n    offset = end;\n  }\n  return area;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @return {number} Area.\n */\nexport function linearRingss(flatCoordinates, offset, endss, stride) {\n  let area = 0;\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    area += linearRings(flatCoordinates, offset, ends, stride);\n    offset = ends[ends.length - 1];\n  }\n  return area;\n}\n","/**\n * @module ol/geom/flat/interiorpoint\n */\nimport {ascending} from '../../array.js';\nimport {linearRingsContainsXY} from './contains.js';\n\n/**\n * Calculates a point that is likely to lie in the interior of the linear rings.\n * Inspired by JTS's com.vividsolutions.jts.geom.Geometry#getInteriorPoint.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {Array<number>} flatCenters Flat centers.\n * @param {number} flatCentersOffset Flat center offset.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Destination point as XYM coordinate, where M is the\n * length of the horizontal intersection that the point belongs to.\n */\nexport function getInteriorPointOfArray(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  flatCenters,\n  flatCentersOffset,\n  dest,\n) {\n  let i, ii, x, x1, x2, y1, y2;\n  const y = flatCenters[flatCentersOffset + 1];\n  /** @type {Array<number>} */\n  const intersections = [];\n  // Calculate intersections with the horizontal line\n  for (let r = 0, rr = ends.length; r < rr; ++r) {\n    const end = ends[r];\n    x1 = flatCoordinates[end - stride];\n    y1 = flatCoordinates[end - stride + 1];\n    for (i = offset; i < end; i += stride) {\n      x2 = flatCoordinates[i];\n      y2 = flatCoordinates[i + 1];\n      if ((y <= y1 && y2 <= y) || (y1 <= y && y <= y2)) {\n        x = ((y - y1) / (y2 - y1)) * (x2 - x1) + x1;\n        intersections.push(x);\n      }\n      x1 = x2;\n      y1 = y2;\n    }\n  }\n  // Find the longest segment of the horizontal line that has its center point\n  // inside the linear ring.\n  let pointX = NaN;\n  let maxSegmentLength = -Infinity;\n  intersections.sort(ascending);\n  x1 = intersections[0];\n  for (i = 1, ii = intersections.length; i < ii; ++i) {\n    x2 = intersections[i];\n    const segmentLength = Math.abs(x2 - x1);\n    if (segmentLength > maxSegmentLength) {\n      x = (x1 + x2) / 2;\n      if (linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) {\n        pointX = x;\n        maxSegmentLength = segmentLength;\n      }\n    }\n    x1 = x2;\n  }\n  if (isNaN(pointX)) {\n    // There is no horizontal line that has its center point inside the linear\n    // ring.  Use the center of the the linear ring's extent.\n    pointX = flatCenters[flatCentersOffset];\n  }\n  if (dest) {\n    dest.push(pointX, y, maxSegmentLength);\n    return dest;\n  }\n  return [pointX, y, maxSegmentLength];\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {Array<number>} flatCenters Flat centers.\n * @return {Array<number>} Interior points as XYM coordinates, where M is the\n * length of the horizontal intersection that the point belongs to.\n */\nexport function getInteriorPointsOfMultiArray(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  flatCenters,\n) {\n  /** @type {Array<number>} */\n  let interiorPoints = [];\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    interiorPoints = getInteriorPointOfArray(\n      flatCoordinates,\n      offset,\n      ends,\n      stride,\n      flatCenters,\n      2 * i,\n      interiorPoints,\n    );\n    offset = ends[ends.length - 1];\n  }\n  return interiorPoints;\n}\n","/**\n * @module ol/geom/flat/orient\n */\nimport {coordinates as reverseCoordinates} from './reverse.js';\n\n/**\n * Is the linear ring oriented clockwise in a coordinate system with a bottom-left\n * coordinate origin? For a coordinate system with a top-left coordinate origin,\n * the ring's orientation is clockwise when this function returns false.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {boolean|undefined} Is clockwise.\n */\nexport function linearRingIsClockwise(flatCoordinates, offset, end, stride) {\n  // https://stackoverflow.com/q/1165647/clockwise-method#1165943\n  // https://github.com/OSGeo/gdal/blob/master/gdal/ogr/ogrlinearring.cpp\n  let edge = 0;\n  let x1 = flatCoordinates[end - stride];\n  let y1 = flatCoordinates[end - stride + 1];\n  for (; offset < end; offset += stride) {\n    const x2 = flatCoordinates[offset];\n    const y2 = flatCoordinates[offset + 1];\n    edge += (x2 - x1) * (y2 + y1);\n    x1 = x2;\n    y1 = y2;\n  }\n  return edge === 0 ? undefined : edge > 0;\n}\n\n/**\n * Determines if linear rings are oriented.  By default, left-hand orientation\n * is tested (first ring must be clockwise, remaining rings counter-clockwise).\n * To test for right-hand orientation, use the `right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean} [right] Test for right-hand orientation\n *     (counter-clockwise exterior ring and clockwise interior rings).\n * @return {boolean} Rings are correctly oriented.\n */\nexport function linearRingsAreOriented(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  right,\n) {\n  right = right !== undefined ? right : false;\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    const isClockwise = linearRingIsClockwise(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n    );\n    if (i === 0) {\n      if ((right && isClockwise) || (!right && !isClockwise)) {\n        return false;\n      }\n    } else {\n      if ((right && !isClockwise) || (!right && isClockwise)) {\n        return false;\n      }\n    }\n    offset = end;\n  }\n  return true;\n}\n\n/**\n * Determines if linear rings are oriented.  By default, left-hand orientation\n * is tested (first ring must be clockwise, remaining rings counter-clockwise).\n * To test for right-hand orientation, use the `right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Array of array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean} [right] Test for right-hand orientation\n *     (counter-clockwise exterior ring and clockwise interior rings).\n * @return {boolean} Rings are correctly oriented.\n */\nexport function linearRingssAreOriented(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  right,\n) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    if (!linearRingsAreOriented(flatCoordinates, offset, ends, stride, right)) {\n      return false;\n    }\n    if (ends.length) {\n      offset = ends[ends.length - 1];\n    }\n  }\n  return true;\n}\n\n/**\n * Orient coordinates in a flat array of linear rings.  By default, rings\n * are oriented following the left-hand rule (clockwise for exterior and\n * counter-clockwise for interior rings).  To orient according to the\n * right-hand rule, use the `right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {boolean} [right] Follow the right-hand rule for orientation.\n * @return {number} End.\n */\nexport function orientLinearRings(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  right,\n) {\n  right = right !== undefined ? right : false;\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    const isClockwise = linearRingIsClockwise(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n    );\n    const reverse =\n      i === 0\n        ? (right && isClockwise) || (!right && !isClockwise)\n        : (right && !isClockwise) || (!right && isClockwise);\n    if (reverse) {\n      reverseCoordinates(flatCoordinates, offset, end, stride);\n    }\n    offset = end;\n  }\n  return offset;\n}\n\n/**\n * Orient coordinates in a flat array of linear rings.  By default, rings\n * are oriented following the left-hand rule (clockwise for exterior and\n * counter-clockwise for interior rings).  To orient according to the\n * right-hand rule, use the `right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Array of array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean} [right] Follow the right-hand rule for orientation.\n * @return {number} End.\n */\nexport function orientLinearRingsArray(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  right,\n) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    offset = orientLinearRings(\n      flatCoordinates,\n      offset,\n      endss[i],\n      stride,\n      right,\n    );\n  }\n  return offset;\n}\n\n/**\n * Return a two-dimensional endss\n * @param {Array<number>} flatCoordinates Flat coordinates\n * @param {Array<number>} ends Linear ring end indexes\n * @return {Array<Array<number>>} Two dimensional endss array that can\n * be used to construct a MultiPolygon\n */\nexport function inflateEnds(flatCoordinates, ends) {\n  const endss = [];\n  let offset = 0;\n  let prevEndIndex = 0;\n  let startOrientation;\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    // classifies an array of rings into polygons with outer rings and holes\n    const orientation = linearRingIsClockwise(flatCoordinates, offset, end, 2);\n    if (startOrientation === undefined) {\n      startOrientation = orientation;\n    }\n    if (orientation === startOrientation) {\n      endss.push(ends.slice(prevEndIndex, i + 1));\n    } else {\n      if (endss.length === 0) {\n        continue;\n      }\n      endss[endss.length - 1].push(ends[prevEndIndex]);\n    }\n    prevEndIndex = i + 1;\n    offset = end;\n  }\n  return endss;\n}\n","/**\n * @module ol/geom/flat/reverse\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n */\nexport function coordinates(flatCoordinates, offset, end, stride) {\n  while (offset < end - stride) {\n    for (let i = 0; i < stride; ++i) {\n      const tmp = flatCoordinates[offset + i];\n      flatCoordinates[offset + i] = flatCoordinates[end - stride + i];\n      flatCoordinates[end - stride + i] = tmp;\n    }\n    offset += stride;\n    end -= stride;\n  }\n}\n"],"names":["LinearRing","coordinates","layout","undefined","Array","x","y","closestPoint","minSquaredDistance","Math","squaredTolerance","simplifiedFlatCoordinates","extent","Point","point","flatCoordinates","squaredDistance","stride","i","Polygon","ends","linearRing","polygon","right","flatCenter","index","linearRings","offset","ii","end","simplifiedEnds","circular","center","radius","n","sphereRadius","fromExtent","Error","minX","minY","maxX","maxY","fromCircle","circle","sides","angle","arrayLength","j","makeRegular","startAngle","twiceArea","x0","y0","dx1","dy1","dx2","dy2","area","linearRingss","endss","getInteriorPointOfArray","flatCenters","flatCentersOffset","dest","x1","x2","y1","y2","intersections","r","rr","pointX","NaN","maxSegmentLength","Infinity","segmentLength","isNaN","getInteriorPointsOfMultiArray","interiorPoints","linearRingIsClockwise","edge","linearRingsAreOriented","isClockwise","linearRingssAreOriented","orientLinearRings","tmp","orientLinearRingsArray","inflateEnds","startOrientation","prevEndIndex","orientation"],"mappings":"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"}