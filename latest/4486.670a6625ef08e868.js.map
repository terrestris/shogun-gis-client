{"version":3,"file":"4486.670a6625ef08e868.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/ol/layer/Base.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/layer/Layer.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/layer/Property.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/render/EventType.js"],"sourcesContent":["/**\n * @module ol/layer/Base\n */\nimport BaseObject from '../Object.js';\nimport {assert} from '../asserts.js';\nimport {clamp} from '../math.js';\nimport {abstract} from '../util.js';\nimport LayerProperty from './Property.js';\n\n/**\n * A css color, or a function called with a view resolution returning a css color.\n *\n * @typedef {string|function(number):string} BackgroundColor\n * @api\n */\n\n/**\n * @typedef {import(\"../ObjectEventType\").Types|'change:extent'|'change:maxResolution'|'change:maxZoom'|\n *    'change:minResolution'|'change:minZoom'|'change:opacity'|'change:visible'|'change:zIndex'} BaseLayerObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<BaseLayerObjectEventTypes, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|BaseLayerObjectEventTypes, Return>} BaseLayerOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number | undefined} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {BackgroundColor} [background] Background color for the layer. If not specified, no background\n * will be rendered.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Note that with {@link module:ol/layer/Base~BaseLayer} and all its subclasses, any property set in\n * the options is set as a {@link module:ol/Object~BaseObject} property on the layer object, so\n * is observable, and has get/set accessors.\n *\n * @api\n */\nclass BaseLayer extends BaseObject {\n  /**\n   * @param {Options} options Layer options.\n   */\n  constructor(options) {\n    super();\n\n    /***\n     * @type {BaseLayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {BaseLayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {BaseLayerOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @type {BackgroundColor|false}\n     * @private\n     */\n    this.background_ = options.background;\n\n    /**\n     * @type {Object<string, *>}\n     */\n    const properties = Object.assign({}, options);\n    if (typeof options.properties === 'object') {\n      delete properties.properties;\n      Object.assign(properties, options.properties);\n    }\n\n    properties[LayerProperty.OPACITY] =\n      options.opacity !== undefined ? options.opacity : 1;\n    assert(\n      typeof properties[LayerProperty.OPACITY] === 'number',\n      'Layer opacity must be a number',\n    );\n\n    properties[LayerProperty.VISIBLE] =\n      options.visible !== undefined ? options.visible : true;\n    properties[LayerProperty.Z_INDEX] = options.zIndex;\n    properties[LayerProperty.MAX_RESOLUTION] =\n      options.maxResolution !== undefined ? options.maxResolution : Infinity;\n    properties[LayerProperty.MIN_RESOLUTION] =\n      options.minResolution !== undefined ? options.minResolution : 0;\n    properties[LayerProperty.MIN_ZOOM] =\n      options.minZoom !== undefined ? options.minZoom : -Infinity;\n    properties[LayerProperty.MAX_ZOOM] =\n      options.maxZoom !== undefined ? options.maxZoom : Infinity;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.className_ =\n      properties.className !== undefined ? properties.className : 'ol-layer';\n    delete properties.className;\n\n    this.setProperties(properties);\n\n    /**\n     * @type {import(\"./Layer.js\").State}\n     * @private\n     */\n    this.state_ = null;\n  }\n\n  /**\n   * Get the background for this layer.\n   * @return {BackgroundColor|false} Layer background.\n   */\n  getBackground() {\n    return this.background_;\n  }\n\n  /**\n   * @return {string} CSS class name.\n   */\n  getClassName() {\n    return this.className_;\n  }\n\n  /**\n   * This method is not meant to be called by layers or layer renderers because the state\n   * is incorrect if the layer is included in a layer group.\n   *\n   * @param {boolean} [managed] Layer is managed.\n   * @return {import(\"./Layer.js\").State} Layer state.\n   */\n  getLayerState(managed) {\n    /** @type {import(\"./Layer.js\").State} */\n    const state =\n      this.state_ ||\n      /** @type {?} */ ({\n        layer: this,\n        managed: managed === undefined ? true : managed,\n      });\n    const zIndex = this.getZIndex();\n    state.opacity = clamp(Math.round(this.getOpacity() * 100) / 100, 0, 1);\n    state.visible = this.getVisible();\n    state.extent = this.getExtent();\n    state.zIndex = zIndex === undefined && !state.managed ? Infinity : zIndex;\n    state.maxResolution = this.getMaxResolution();\n    state.minResolution = Math.max(this.getMinResolution(), 0);\n    state.minZoom = this.getMinZoom();\n    state.maxZoom = this.getMaxZoom();\n    this.state_ = state;\n\n    return state;\n  }\n\n  /**\n   * @abstract\n   * @param {Array<import(\"./Layer.js\").default>} [array] Array of layers (to be\n   *     modified in place).\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\n   */\n  getLayersArray(array) {\n    return abstract();\n  }\n\n  /**\n   * @abstract\n   * @param {Array<import(\"./Layer.js\").State>} [states] Optional list of layer\n   *     states (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\n   */\n  getLayerStatesArray(states) {\n    return abstract();\n  }\n\n  /**\n   * Return the {@link module:ol/extent~Extent extent} of the layer or `undefined` if it\n   * will be visible regardless of extent.\n   * @return {import(\"../extent.js\").Extent|undefined} The layer extent.\n   * @observable\n   * @api\n   */\n  getExtent() {\n    return /** @type {import(\"../extent.js\").Extent|undefined} */ (\n      this.get(LayerProperty.EXTENT)\n    );\n  }\n\n  /**\n   * Return the maximum resolution of the layer. Returns Infinity if\n   * the layer has no maximum resolution set.\n   * @return {number} The maximum resolution of the layer.\n   * @observable\n   * @api\n   */\n  getMaxResolution() {\n    return /** @type {number} */ (this.get(LayerProperty.MAX_RESOLUTION));\n  }\n\n  /**\n   * Return the minimum resolution of the layer. Returns 0 if\n   * the layer has no minimum resolution set.\n   * @return {number} The minimum resolution of the layer.\n   * @observable\n   * @api\n   */\n  getMinResolution() {\n    return /** @type {number} */ (this.get(LayerProperty.MIN_RESOLUTION));\n  }\n\n  /**\n   * Return the minimum zoom level of the layer. Returns -Infinity if\n   * the layer has no minimum zoom set.\n   * @return {number} The minimum zoom level of the layer.\n   * @observable\n   * @api\n   */\n  getMinZoom() {\n    return /** @type {number} */ (this.get(LayerProperty.MIN_ZOOM));\n  }\n\n  /**\n   * Return the maximum zoom level of the layer. Returns Infinity if\n   * the layer has no maximum zoom set.\n   * @return {number} The maximum zoom level of the layer.\n   * @observable\n   * @api\n   */\n  getMaxZoom() {\n    return /** @type {number} */ (this.get(LayerProperty.MAX_ZOOM));\n  }\n\n  /**\n   * Return the opacity of the layer (between 0 and 1).\n   * @return {number} The opacity of the layer.\n   * @observable\n   * @api\n   */\n  getOpacity() {\n    return /** @type {number} */ (this.get(LayerProperty.OPACITY));\n  }\n\n  /**\n   * @abstract\n   * @return {import(\"../source/Source.js\").State} Source state.\n   */\n  getSourceState() {\n    return abstract();\n  }\n\n  /**\n   * Return the value of this layer's `visible` property. To find out whether the layer\n   * is visible on a map, use `isVisible()` instead.\n   * @return {boolean} The value of the `visible` property of the layer.\n   * @observable\n   * @api\n   */\n  getVisible() {\n    return /** @type {boolean} */ (this.get(LayerProperty.VISIBLE));\n  }\n\n  /**\n   * Return the Z-index of the layer, which is used to order layers before\n   * rendering. Returns undefined if the layer is unmanaged.\n   * @return {number|undefined} The Z-index of the layer.\n   * @observable\n   * @api\n   */\n  getZIndex() {\n    return /** @type {number|undefined} */ (this.get(LayerProperty.Z_INDEX));\n  }\n\n  /**\n   * Sets the background color.\n   * @param {BackgroundColor} [background] Background color.\n   */\n  setBackground(background) {\n    this.background_ = background;\n    this.changed();\n  }\n\n  /**\n   * Set the extent at which the layer is visible.  If `undefined`, the layer\n   * will be visible at all extents.\n   * @param {import(\"../extent.js\").Extent|undefined} extent The extent of the layer.\n   * @observable\n   * @api\n   */\n  setExtent(extent) {\n    this.set(LayerProperty.EXTENT, extent);\n  }\n\n  /**\n   * Set the maximum resolution at which the layer is visible.\n   * @param {number} maxResolution The maximum resolution of the layer.\n   * @observable\n   * @api\n   */\n  setMaxResolution(maxResolution) {\n    this.set(LayerProperty.MAX_RESOLUTION, maxResolution);\n  }\n\n  /**\n   * Set the minimum resolution at which the layer is visible.\n   * @param {number} minResolution The minimum resolution of the layer.\n   * @observable\n   * @api\n   */\n  setMinResolution(minResolution) {\n    this.set(LayerProperty.MIN_RESOLUTION, minResolution);\n  }\n\n  /**\n   * Set the maximum zoom (exclusive) at which the layer is visible.\n   * Note that the zoom levels for layer visibility are based on the\n   * view zoom level, which may be different from a tile source zoom level.\n   * @param {number} maxZoom The maximum zoom of the layer.\n   * @observable\n   * @api\n   */\n  setMaxZoom(maxZoom) {\n    this.set(LayerProperty.MAX_ZOOM, maxZoom);\n  }\n\n  /**\n   * Set the minimum zoom (inclusive) at which the layer is visible.\n   * Note that the zoom levels for layer visibility are based on the\n   * view zoom level, which may be different from a tile source zoom level.\n   * @param {number} minZoom The minimum zoom of the layer.\n   * @observable\n   * @api\n   */\n  setMinZoom(minZoom) {\n    this.set(LayerProperty.MIN_ZOOM, minZoom);\n  }\n\n  /**\n   * Set the opacity of the layer, allowed values range from 0 to 1.\n   * @param {number} opacity The opacity of the layer.\n   * @observable\n   * @api\n   */\n  setOpacity(opacity) {\n    assert(typeof opacity === 'number', 'Layer opacity must be a number');\n    this.set(LayerProperty.OPACITY, opacity);\n  }\n\n  /**\n   * Set the visibility of the layer (`true` or `false`).\n   * @param {boolean} visible The visibility of the layer.\n   * @observable\n   * @api\n   */\n  setVisible(visible) {\n    this.set(LayerProperty.VISIBLE, visible);\n  }\n\n  /**\n   * Set Z-index of the layer, which is used to order layers before rendering.\n   * The default Z-index is 0.\n   * @param {number} zindex The z-index of the layer.\n   * @observable\n   * @api\n   */\n  setZIndex(zindex) {\n    this.set(LayerProperty.Z_INDEX, zindex);\n  }\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    if (this.state_) {\n      this.state_.layer = null;\n      this.state_ = null;\n    }\n    super.disposeInternal();\n  }\n}\n\nexport default BaseLayer;\n","/**\n * @module ol/layer/Layer\n */\nimport View from '../View.js';\nimport {assert} from '../asserts.js';\nimport EventType from '../events/EventType.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport {intersects} from '../extent.js';\nimport RenderEventType from '../render/EventType.js';\nimport BaseLayer from './Base.js';\nimport LayerProperty from './Property.js';\n\n/**\n * @typedef {function(import(\"../Map.js\").FrameState):HTMLElement} RenderFunction\n */\n\n/**\n * @typedef {'sourceready'|'change:source'} LayerEventType\n */\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\n *     LayerEventType, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../render/EventType\").LayerRenderEventTypes, import(\"../render/Event\").default, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|LayerEventType|\n *     import(\"../render/EventType\").LayerRenderEventTypes, Return>} LayerOnSignature\n */\n\n/**\n * @template {import(\"../source/Source.js\").default} [SourceType=import(\"../source/Source.js\").default]\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {SourceType} [source] Source for this layer.  If not provided to the constructor,\n * the source can be set by calling {@link module:ol/layer/Layer~Layer#setSource layer.setSource(source)} after\n * construction.\n * @property {import(\"../Map.js\").default|null} [map] Map.\n * @property {RenderFunction} [render] Render function. Takes the frame state as input and is expected to return an\n * HTML element. Will overwrite the default rendering for the layer.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @typedef {Object} State\n * @property {import(\"./Layer.js\").default} layer Layer.\n * @property {number} opacity Opacity, the value is rounded to two digits to appear after the decimal point.\n * @property {boolean} visible Visible.\n * @property {boolean} managed Managed.\n * @property {import(\"../extent.js\").Extent} [extent] Extent.\n * @property {number} zIndex ZIndex.\n * @property {number} maxResolution Maximum resolution.\n * @property {number} minResolution Minimum resolution.\n * @property {number} minZoom Minimum zoom.\n * @property {number} maxZoom Maximum zoom.\n */\n\n/**\n * @classdesc\n * Base class from which all layer types are derived. This should only be instantiated\n * in the case where a custom layer is added to the map with a custom `render` function.\n * Such a function can be specified in the `options` object, and is expected to return an HTML element.\n *\n * A visual representation of raster or vector map data.\n * Layers group together those properties that pertain to how the data is to be\n * displayed, irrespective of the source of that data.\n *\n * Layers are usually added to a map with [map.addLayer()]{@link import(\"../Map.js\").default#addLayer}.\n * Components like {@link module:ol/interaction/Draw~Draw} use unmanaged layers\n * internally. These unmanaged layers are associated with the map using\n * [layer.setMap()]{@link module:ol/layer/Layer~Layer#setMap} instead.\n *\n * A generic `change` event is fired when the state of the source changes.\n * A `sourceready` event is fired when the layer's source is ready.\n *\n * @fires import(\"../render/Event.js\").RenderEvent#prerender\n * @fires import(\"../render/Event.js\").RenderEvent#postrender\n * @fires import(\"../events/Event.js\").BaseEvent#sourceready\n *\n * @template {import(\"../source/Source.js\").default} [SourceType=import(\"../source/Source.js\").default]\n * @template {import(\"../renderer/Layer.js\").default} [RendererType=import(\"../renderer/Layer.js\").default]\n * @api\n */\nclass Layer extends BaseLayer {\n  /**\n   * @param {Options<SourceType>} options Layer options.\n   */\n  constructor(options) {\n    const baseOptions = Object.assign({}, options);\n    delete baseOptions.source;\n\n    super(baseOptions);\n\n    /***\n     * @type {LayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {LayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {LayerOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.mapPrecomposeKey_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.mapRenderKey_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.sourceChangeKey_ = null;\n\n    /**\n     * @private\n     * @type {RendererType}\n     */\n    this.renderer_ = null;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.sourceReady_ = false;\n\n    /**\n     * @protected\n     * @type {boolean}\n     */\n    this.rendered = false;\n\n    // Overwrite default render method with a custom one\n    if (options.render) {\n      this.render = options.render;\n    }\n\n    if (options.map) {\n      this.setMap(options.map);\n    }\n\n    this.addChangeListener(\n      LayerProperty.SOURCE,\n      this.handleSourcePropertyChange_,\n    );\n\n    const source = options.source\n      ? /** @type {SourceType} */ (options.source)\n      : null;\n    this.setSource(source);\n  }\n\n  /**\n   * @param {Array<import(\"./Layer.js\").default>} [array] Array of layers (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\n   * @override\n   */\n  getLayersArray(array) {\n    array = array ? array : [];\n    array.push(this);\n    return array;\n  }\n\n  /**\n   * @param {Array<import(\"./Layer.js\").State>} [states] Optional list of layer states (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\n   * @override\n   */\n  getLayerStatesArray(states) {\n    states = states ? states : [];\n    states.push(this.getLayerState());\n    return states;\n  }\n\n  /**\n   * Get the layer source.\n   * @return {SourceType|null} The layer source (or `null` if not yet set).\n   * @observable\n   * @api\n   */\n  getSource() {\n    return /** @type {SourceType} */ (this.get(LayerProperty.SOURCE)) || null;\n  }\n\n  /**\n   * @return {SourceType|null} The source being rendered.\n   */\n  getRenderSource() {\n    return this.getSource();\n  }\n\n  /**\n   * @return {import(\"../source/Source.js\").State} Source state.\n   * @override\n   */\n  getSourceState() {\n    const source = this.getSource();\n    return !source ? 'undefined' : source.getState();\n  }\n\n  /**\n   * @private\n   */\n  handleSourceChange_() {\n    this.changed();\n    if (this.sourceReady_ || this.getSource().getState() !== 'ready') {\n      return;\n    }\n    this.sourceReady_ = true;\n    this.dispatchEvent('sourceready');\n  }\n\n  /**\n   * @private\n   */\n  handleSourcePropertyChange_() {\n    if (this.sourceChangeKey_) {\n      unlistenByKey(this.sourceChangeKey_);\n      this.sourceChangeKey_ = null;\n    }\n    this.sourceReady_ = false;\n    const source = this.getSource();\n    if (source) {\n      this.sourceChangeKey_ = listen(\n        source,\n        EventType.CHANGE,\n        this.handleSourceChange_,\n        this,\n      );\n      if (source.getState() === 'ready') {\n        this.sourceReady_ = true;\n        setTimeout(() => {\n          this.dispatchEvent('sourceready');\n        }, 0);\n      }\n    }\n    this.changed();\n  }\n\n  /**\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../Feature\").FeatureLike>>} Promise that resolves with\n   * an array of features.\n   */\n  getFeatures(pixel) {\n    if (!this.renderer_) {\n      return Promise.resolve([]);\n    }\n    return this.renderer_.getFeatures(pixel);\n  }\n\n  /**\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\n   */\n  getData(pixel) {\n    if (!this.renderer_ || !this.rendered) {\n      return null;\n    }\n    return this.renderer_.getData(pixel);\n  }\n\n  /**\n   * The layer is visible on the map view, i.e. within its min/max resolution or zoom and\n   * extent, not set to `visible: false`, and not inside a layer group that is set\n   * to `visible: false`.\n   * @param {View|import(\"../View.js\").ViewStateLayerStateExtent} [view] View or {@link import(\"../Map.js\").FrameState}.\n   * Only required when the layer is not added to a map.\n   * @return {boolean} The layer is visible in the map view.\n   * @api\n   */\n  isVisible(view) {\n    let frameState;\n    const map = this.getMapInternal();\n    if (!view && map) {\n      view = map.getView();\n    }\n    if (view instanceof View) {\n      frameState = {\n        viewState: view.getState(),\n        extent: view.calculateExtent(),\n      };\n    } else {\n      frameState = view;\n    }\n    if (!frameState.layerStatesArray && map) {\n      frameState.layerStatesArray = map.getLayerGroup().getLayerStatesArray();\n    }\n    let layerState;\n    if (frameState.layerStatesArray) {\n      layerState = frameState.layerStatesArray.find(\n        (layerState) => layerState.layer === this,\n      );\n      if (!layerState) {\n        return false;\n      }\n    } else {\n      layerState = this.getLayerState();\n    }\n\n    const layerExtent = this.getExtent();\n\n    return (\n      inView(layerState, frameState.viewState) &&\n      (!layerExtent || intersects(layerExtent, frameState.extent))\n    );\n  }\n\n  /**\n   * Get the attributions of the source of this layer for the given view.\n   * @param {View|import(\"../View.js\").ViewStateLayerStateExtent} [view] View or {@link import(\"../Map.js\").FrameState}.\n   * Only required when the layer is not added to a map.\n   * @return {Array<string>} Attributions for this layer at the given view.\n   * @api\n   */\n  getAttributions(view) {\n    if (!this.isVisible(view)) {\n      return [];\n    }\n    const getAttributions = this.getSource()?.getAttributions();\n    if (!getAttributions) {\n      return [];\n    }\n    const frameState =\n      view instanceof View ? view.getViewStateAndExtent() : view;\n    let attributions = getAttributions(frameState);\n    if (!Array.isArray(attributions)) {\n      attributions = [attributions];\n    }\n    return attributions;\n  }\n\n  /**\n   * In charge to manage the rendering of the layer. One layer type is\n   * bounded with one layer renderer.\n   * @param {?import(\"../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target which the renderer may (but need not) use\n   * for rendering its content.\n   * @return {HTMLElement|null} The rendered element.\n   */\n  render(frameState, target) {\n    const layerRenderer = this.getRenderer();\n\n    if (layerRenderer.prepareFrame(frameState)) {\n      this.rendered = true;\n      return layerRenderer.renderFrame(frameState, target);\n    }\n    return null;\n  }\n\n  /**\n   * Called when a layer is not visible during a map render.\n   */\n  unrender() {\n    this.rendered = false;\n  }\n\n  /** @return {string} Declutter */\n  getDeclutter() {\n    return undefined;\n  }\n\n  /**\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../layer/Layer.js\").State} layerState Layer state.\n   */\n  renderDeclutter(frameState, layerState) {}\n\n  /**\n   * When the renderer follows a layout -> render approach, do the final rendering here.\n   * @param {import('../Map.js').FrameState} frameState Frame state\n   */\n  renderDeferred(frameState) {\n    const layerRenderer = this.getRenderer();\n    if (!layerRenderer) {\n      return;\n    }\n    layerRenderer.renderDeferred(frameState);\n  }\n\n  /**\n   * For use inside the library only.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   */\n  setMapInternal(map) {\n    if (!map) {\n      this.unrender();\n    }\n    this.set(LayerProperty.MAP, map);\n  }\n\n  /**\n   * For use inside the library only.\n   * @return {import(\"../Map.js\").default|null} Map.\n   */\n  getMapInternal() {\n    return this.get(LayerProperty.MAP);\n  }\n\n  /**\n   * Sets the layer to be rendered on top of other layers on a map. The map will\n   * not manage this layer in its layers collection. This\n   * is useful for temporary layers. To remove an unmanaged layer from the map,\n   * use `#setMap(null)`.\n   *\n   * To add the layer to a map and have it managed by the map, use\n   * {@link module:ol/Map~Map#addLayer} instead.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   * @api\n   */\n  setMap(map) {\n    if (this.mapPrecomposeKey_) {\n      unlistenByKey(this.mapPrecomposeKey_);\n      this.mapPrecomposeKey_ = null;\n    }\n    if (!map) {\n      this.changed();\n    }\n    if (this.mapRenderKey_) {\n      unlistenByKey(this.mapRenderKey_);\n      this.mapRenderKey_ = null;\n    }\n    if (map) {\n      this.mapPrecomposeKey_ = listen(\n        map,\n        RenderEventType.PRECOMPOSE,\n        this.handlePrecompose_,\n        this,\n      );\n      this.mapRenderKey_ = listen(this, EventType.CHANGE, map.render, map);\n      this.changed();\n    }\n  }\n\n  /**\n   * @param {import(\"../events/Event.js\").default} renderEvent Render event\n   * @private\n   */\n  handlePrecompose_(renderEvent) {\n    const layerStatesArray =\n      /** @type {import(\"../render/Event.js\").default} */ (renderEvent)\n        .frameState.layerStatesArray;\n    const layerState = this.getLayerState(false);\n    assert(\n      !layerStatesArray.some(\n        (arrayLayerState) => arrayLayerState.layer === layerState.layer,\n      ),\n      'A layer can only be added to the map once. Use either `layer.setMap()` or `map.addLayer()`, not both.',\n    );\n    layerStatesArray.push(layerState);\n  }\n\n  /**\n   * Set the layer source.\n   * @param {SourceType|null} source The layer source.\n   * @observable\n   * @api\n   */\n  setSource(source) {\n    this.set(LayerProperty.SOURCE, source);\n  }\n\n  /**\n   * Get the renderer for this layer.\n   * @return {RendererType|null} The layer renderer.\n   */\n  getRenderer() {\n    if (!this.renderer_) {\n      this.renderer_ = this.createRenderer();\n    }\n    return this.renderer_;\n  }\n\n  /**\n   * @return {boolean} The layer has a renderer.\n   */\n  hasRenderer() {\n    return !!this.renderer_;\n  }\n\n  /**\n   * Create a renderer for this layer.\n   * @return {RendererType} A layer renderer.\n   * @protected\n   */\n  createRenderer() {\n    return null;\n  }\n\n  /**\n   * This will clear the renderer so that a new one can be created next time it is needed\n   */\n  clearRenderer() {\n    if (this.renderer_) {\n      this.renderer_.dispose();\n      delete this.renderer_;\n    }\n  }\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    this.clearRenderer();\n    this.setSource(null);\n    super.disposeInternal();\n  }\n}\n\n/**\n * Return `true` if the layer is visible and if the provided view state\n * has resolution and zoom levels that are in range of the layer's min/max.\n * @param {State} layerState Layer state.\n * @param {import(\"../View.js\").State} viewState View state.\n * @return {boolean} The layer is visible at the given view state.\n */\nexport function inView(layerState, viewState) {\n  if (!layerState.visible) {\n    return false;\n  }\n  const resolution = viewState.resolution;\n  if (\n    resolution < layerState.minResolution ||\n    resolution >= layerState.maxResolution\n  ) {\n    return false;\n  }\n  const zoom = viewState.zoom;\n  return zoom > layerState.minZoom && zoom <= layerState.maxZoom;\n}\n\nexport default Layer;\n","/**\n * @module ol/layer/Property\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  OPACITY: 'opacity',\n  VISIBLE: 'visible',\n  EXTENT: 'extent',\n  Z_INDEX: 'zIndex',\n  MAX_RESOLUTION: 'maxResolution',\n  MIN_RESOLUTION: 'minResolution',\n  MAX_ZOOM: 'maxZoom',\n  MIN_ZOOM: 'minZoom',\n  SOURCE: 'source',\n  MAP: 'map',\n};\n","/**\n * @module ol/render/EventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  /**\n   * Triggered before a layer is rendered.\n   * @event module:ol/render/Event~RenderEvent#prerender\n   * @api\n   */\n  PRERENDER: 'prerender',\n\n  /**\n   * Triggered after a layer is rendered.\n   * @event module:ol/render/Event~RenderEvent#postrender\n   * @api\n   */\n  POSTRENDER: 'postrender',\n\n  /**\n   * Triggered before layers are composed.  When dispatched by the map, the event object will not have\n   * a `context` set.  When dispatched by a layer, the event object will have a `context` set.  Only\n   * WebGL layers currently dispatch this event.\n   * @event module:ol/render/Event~RenderEvent#precompose\n   * @api\n   */\n  PRECOMPOSE: 'precompose',\n\n  /**\n   * Triggered after layers are composed.  When dispatched by the map, the event object will not have\n   * a `context` set.  When dispatched by a layer, the event object will have a `context` set.  Only\n   * WebGL layers currently dispatch this event.\n   * @event module:ol/render/Event~RenderEvent#postcompose\n   * @api\n   */\n  POSTCOMPOSE: 'postcompose',\n\n  /**\n   * Triggered when rendering is complete, i.e. all sources and tiles have\n   * finished loading for the current viewport, and all tiles are faded in.\n   * The event object will not have a `context` set.\n   * @event module:ol/render/Event~RenderEvent#rendercomplete\n   * @api\n   */\n  RENDERCOMPLETE: 'rendercomplete',\n};\n\n/**\n * @typedef {'postrender'|'precompose'|'postcompose'|'rendercomplete'} MapRenderEventTypes\n */\n\n/**\n * @typedef {'postrender'|'prerender'} LayerRenderEventTypes\n */\n"],"names":["Object","Math","a","e","setTimeout","Promise","Array","t","r"],"mappings":"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"}