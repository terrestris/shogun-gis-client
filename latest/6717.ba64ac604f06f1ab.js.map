{"version":3,"file":"6717.ba64ac604f06f1ab.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/ol/resolution.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/reproj/Image.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/source/Image.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/source/common.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/source/wms.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/util.js"],"sourcesContent":["/**\n * @module ol/resolution\n */\n\n/**\n * @typedef {number|Array<number>} ResolutionLike\n */\n\n/**\n * @param {ResolutionLike} resolution Resolution.\n * @return {number} Resolution.\n */\nexport function fromResolutionLike(resolution) {\n  if (Array.isArray(resolution)) {\n    return Math.min(...resolution);\n  }\n  return resolution;\n}\n","/**\n * @module ol/reproj/Image\n */\n\nimport ImageWrapper from '../Image.js';\nimport ImageState from '../ImageState.js';\nimport EventType from '../events/EventType.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport {\n  getCenter,\n  getHeight,\n  getIntersection,\n  getWidth,\n  isEmpty,\n} from '../extent.js';\nimport {\n  calculateSourceResolution,\n  render as renderReprojected,\n} from '../reproj.js';\nimport {fromResolutionLike} from '../resolution.js';\nimport Triangulation from './Triangulation.js';\nimport {ERROR_THRESHOLD} from './common.js';\n\n/**\n * @typedef {function(import(\"../extent.js\").Extent, number, number) : import(\"../Image.js\").default} FunctionType\n */\n\n/**\n * @classdesc\n * Class encapsulating single reprojected image.\n * See {@link module:ol/source/Image~ImageSource}.\n */\nclass ReprojImage extends ImageWrapper {\n  /**\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection (of the data).\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\n   * @param {import(\"../extent.js\").Extent} targetExtent Target extent.\n   * @param {number} targetResolution Target resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {FunctionType} getImageFunction\n   *     Function returning source images (extent, resolution, pixelRatio).\n   * @param {boolean} interpolate Use linear interpolation when resampling.\n   */\n  constructor(\n    sourceProj,\n    targetProj,\n    targetExtent,\n    targetResolution,\n    pixelRatio,\n    getImageFunction,\n    interpolate,\n  ) {\n    let maxSourceExtent = sourceProj.getExtent();\n    if (maxSourceExtent && sourceProj.canWrapX()) {\n      maxSourceExtent = maxSourceExtent.slice();\n      maxSourceExtent[0] = -Infinity;\n      maxSourceExtent[2] = Infinity;\n    }\n    let maxTargetExtent = targetProj.getExtent();\n    if (maxTargetExtent && targetProj.canWrapX()) {\n      maxTargetExtent = maxTargetExtent.slice();\n      maxTargetExtent[0] = -Infinity;\n      maxTargetExtent[2] = Infinity;\n    }\n\n    const limitedTargetExtent = maxTargetExtent\n      ? getIntersection(targetExtent, maxTargetExtent)\n      : targetExtent;\n\n    const targetCenter = getCenter(limitedTargetExtent);\n    const sourceResolution = calculateSourceResolution(\n      sourceProj,\n      targetProj,\n      targetCenter,\n      targetResolution,\n    );\n\n    const errorThresholdInPixels = ERROR_THRESHOLD;\n\n    const triangulation = new Triangulation(\n      sourceProj,\n      targetProj,\n      limitedTargetExtent,\n      maxSourceExtent,\n      sourceResolution * errorThresholdInPixels,\n      targetResolution,\n    );\n\n    const sourceExtent = triangulation.calculateSourceExtent();\n    const sourceImage = isEmpty(sourceExtent)\n      ? null\n      : getImageFunction(sourceExtent, sourceResolution, pixelRatio);\n    const state = sourceImage ? ImageState.IDLE : ImageState.EMPTY;\n    const sourcePixelRatio = sourceImage ? sourceImage.getPixelRatio() : 1;\n\n    super(targetExtent, targetResolution, sourcePixelRatio, state);\n\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.targetProj_ = targetProj;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.maxSourceExtent_ = maxSourceExtent;\n\n    /**\n     * @private\n     * @type {!import(\"./Triangulation.js\").default}\n     */\n    this.triangulation_ = triangulation;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.targetResolution_ = targetResolution;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.targetExtent_ = targetExtent;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n    this.sourceImage_ = sourceImage;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.sourcePixelRatio_ = sourcePixelRatio;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.interpolate_ = interpolate;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.sourceListenerKey_ = null;\n  }\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    if (this.state == ImageState.LOADING) {\n      this.unlistenSource_();\n    }\n    super.disposeInternal();\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Image.\n   * @override\n   */\n  getImage() {\n    return this.canvas_;\n  }\n\n  /**\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  getProjection() {\n    return this.targetProj_;\n  }\n\n  /**\n   * @private\n   */\n  reproject_() {\n    const sourceState = this.sourceImage_.getState();\n    if (sourceState == ImageState.LOADED) {\n      const width = getWidth(this.targetExtent_) / this.targetResolution_;\n      const height = getHeight(this.targetExtent_) / this.targetResolution_;\n      this.canvas_ = renderReprojected(\n        width,\n        height,\n        this.sourcePixelRatio_,\n        fromResolutionLike(this.sourceImage_.getResolution()),\n        this.maxSourceExtent_,\n        this.targetResolution_,\n        this.targetExtent_,\n        this.triangulation_,\n        [\n          {\n            extent: this.sourceImage_.getExtent(),\n            image: this.sourceImage_.getImage(),\n          },\n        ],\n        0,\n        undefined,\n        this.interpolate_,\n        true,\n      );\n    }\n    this.state = sourceState;\n    this.changed();\n  }\n\n  /**\n   * Load not yet loaded URI.\n   * @override\n   */\n  load() {\n    if (this.state == ImageState.IDLE) {\n      this.state = ImageState.LOADING;\n      this.changed();\n\n      const sourceState = this.sourceImage_.getState();\n      if (sourceState == ImageState.LOADED || sourceState == ImageState.ERROR) {\n        this.reproject_();\n      } else {\n        this.sourceListenerKey_ = listen(\n          this.sourceImage_,\n          EventType.CHANGE,\n          (e) => {\n            const sourceState = this.sourceImage_.getState();\n            if (\n              sourceState == ImageState.LOADED ||\n              sourceState == ImageState.ERROR\n            ) {\n              this.unlistenSource_();\n              this.reproject_();\n            }\n          },\n        );\n        this.sourceImage_.load();\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  unlistenSource_() {\n    unlistenByKey(\n      /** @type {!import(\"../events.js\").EventsKey} */ (\n        this.sourceListenerKey_\n      ),\n    );\n    this.sourceListenerKey_ = null;\n  }\n}\n\nexport default ReprojImage;\n","/**\n * @module ol/source/Image\n */\nimport ImageWrapper from '../Image.js';\nimport ImageState from '../ImageState.js';\nimport {linearFindNearest} from '../array.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport {\n  containsExtent,\n  equals,\n  getCenter,\n  getForViewAndSize,\n  getHeight,\n  getWidth,\n} from '../extent.js';\nimport {ceil} from '../math.js';\nimport {equivalent} from '../proj.js';\nimport ReprojImage from '../reproj/Image.js';\nimport {fromResolutionLike} from '../resolution.js';\nimport Source from './Source.js';\nimport {DECIMALS} from './common.js';\n\n/**\n * @enum {string}\n */\nexport const ImageSourceEventType = {\n  /**\n   * Triggered when an image starts loading.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloadstart\n   * @api\n   */\n  IMAGELOADSTART: 'imageloadstart',\n\n  /**\n   * Triggered when an image finishes loading.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloadend\n   * @api\n   */\n  IMAGELOADEND: 'imageloadend',\n\n  /**\n   * Triggered if image loading results in an error.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloaderror\n   * @api\n   */\n  IMAGELOADERROR: 'imageloaderror',\n};\n\n/**\n * @typedef {'imageloadend'|'imageloaderror'|'imageloadstart'} ImageSourceEventTypes\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Image~ImageSource} instances are instances of this\n * type.\n */\nexport class ImageSourceEvent extends Event {\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Image.js\").default} image The image.\n   */\n  constructor(type, image) {\n    super(type);\n\n    /**\n     * The image related to the event.\n     * @type {import(\"../Image.js\").default}\n     * @api\n     */\n    this.image = image;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<ImageSourceEventTypes, ImageSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types\n *     |ImageSourceEventTypes, Return>} ImageSourceOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../Image.js\").Loader} [loader] Loader. Can either be a custom loader, or one of the\n * loaders created with a `createLoader()` function ({@link module:ol/source/wms.createLoader wms},\n * {@link module:ol/source/arcgisRest.createLoader arcgisRest}, {@link module:ol/source/mapguide.createLoader mapguide},\n * {@link module:ol/source/static.createLoader static}).\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {Array<number>} [resolutions] Resolutions.\n * @property {import(\"./Source.js\").State} [state] State.\n */\n\n/**\n * @classdesc\n * Base class for sources providing a single image.\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nclass ImageSource extends Source {\n  /**\n   * @param {Options} options Single image source options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      projection: options.projection,\n      state: options.state,\n      interpolate:\n        options.interpolate !== undefined ? options.interpolate : true,\n    });\n\n    /***\n     * @type {ImageSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {ImageSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {ImageSourceOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @protected\n     * @type {import(\"../Image.js\").Loader}\n     */\n    this.loader = options.loader || null;\n\n    /**\n     * @private\n     * @type {Array<number>|null}\n     */\n    this.resolutions_ =\n      options.resolutions !== undefined ? options.resolutions : null;\n\n    /**\n     * @private\n     * @type {import(\"../reproj/Image.js\").default}\n     */\n    this.reprojectedImage_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.reprojectedRevision_ = 0;\n\n    /**\n     * @protected\n     * @type {import(\"../Image.js\").default}\n     */\n    this.image = null;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.wantedExtent_;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.wantedResolution_;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.static_ = options.loader ? options.loader.length === 0 : false;\n\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.wantedProjection_ = null;\n  }\n\n  /**\n   * @return {Array<number>|null} Resolutions.\n   * @override\n   */\n  getResolutions() {\n    return this.resolutions_;\n  }\n\n  /**\n   * @param {Array<number>|null} resolutions Resolutions.\n   */\n  setResolutions(resolutions) {\n    this.resolutions_ = resolutions;\n  }\n\n  /**\n   * @protected\n   * @param {number} resolution Resolution.\n   * @return {number} Resolution.\n   */\n  findNearestResolution(resolution) {\n    const resolutions = this.getResolutions();\n    if (resolutions) {\n      const idx = linearFindNearest(resolutions, resolution, 0);\n      resolution = resolutions[idx];\n    }\n    return resolution;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n  getImage(extent, resolution, pixelRatio, projection) {\n    const sourceProjection = this.getProjection();\n    if (\n      !sourceProjection ||\n      !projection ||\n      equivalent(sourceProjection, projection)\n    ) {\n      if (sourceProjection) {\n        projection = sourceProjection;\n      }\n\n      return this.getImageInternal(extent, resolution, pixelRatio, projection);\n    }\n    if (this.reprojectedImage_) {\n      if (\n        this.reprojectedRevision_ == this.getRevision() &&\n        equivalent(this.reprojectedImage_.getProjection(), projection) &&\n        this.reprojectedImage_.getResolution() == resolution &&\n        equals(this.reprojectedImage_.getExtent(), extent)\n      ) {\n        return this.reprojectedImage_;\n      }\n      this.reprojectedImage_.dispose();\n      this.reprojectedImage_ = null;\n    }\n\n    this.reprojectedImage_ = new ReprojImage(\n      sourceProjection,\n      projection,\n      extent,\n      resolution,\n      pixelRatio,\n      (extent, resolution, pixelRatio) =>\n        this.getImageInternal(extent, resolution, pixelRatio, sourceProjection),\n      this.getInterpolate(),\n    );\n    this.reprojectedRevision_ = this.getRevision();\n\n    return this.reprojectedImage_;\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   * @protected\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    if (this.loader) {\n      const requestExtent = getRequestExtent(extent, resolution, pixelRatio, 1);\n      const requestResolution = this.findNearestResolution(resolution);\n      if (\n        this.image &&\n        (this.static_ ||\n          (this.wantedProjection_ === projection &&\n            ((this.wantedExtent_ &&\n              containsExtent(this.wantedExtent_, requestExtent)) ||\n              containsExtent(this.image.getExtent(), requestExtent)) &&\n            ((this.wantedResolution_ &&\n              fromResolutionLike(this.wantedResolution_) ===\n                requestResolution) ||\n              fromResolutionLike(this.image.getResolution()) ===\n                requestResolution)))\n      ) {\n        return this.image;\n      }\n      this.wantedProjection_ = projection;\n      this.wantedExtent_ = requestExtent;\n      this.wantedResolution_ = requestResolution;\n      this.image = new ImageWrapper(\n        requestExtent,\n        requestResolution,\n        pixelRatio,\n        this.loader,\n      );\n      this.image.addEventListener(\n        EventType.CHANGE,\n        this.handleImageChange.bind(this),\n      );\n    }\n    return this.image;\n  }\n\n  /**\n   * Handle image change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */\n  handleImageChange(event) {\n    const image = /** @type {import(\"../Image.js\").default} */ (event.target);\n    let type;\n    switch (image.getState()) {\n      case ImageState.LOADING:\n        this.loading = true;\n        type = ImageSourceEventType.IMAGELOADSTART;\n        break;\n      case ImageState.LOADED:\n        this.loading = false;\n        type = ImageSourceEventType.IMAGELOADEND;\n        break;\n      case ImageState.ERROR:\n        this.loading = false;\n        type = ImageSourceEventType.IMAGELOADERROR;\n        break;\n      default:\n        return;\n    }\n    if (this.hasListener(type)) {\n      this.dispatchEvent(new ImageSourceEvent(type, image));\n    }\n  }\n}\n\n/**\n * Default image load function for image sources that use import(\"../Image.js\").Image image\n * instances.\n * @param {import(\"../Image.js\").default} image Image.\n * @param {string} src Source.\n */\nexport function defaultImageLoadFunction(image, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */ (image.getImage()).src = src;\n}\n\n/**\n * Adjusts the extent so it aligns with pixel boundaries.\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {number} resolution Reolution.\n * @param {number} pixelRatio Pixel ratio.\n * @param {number} ratio Ratio between request size and view size.\n * @return {import(\"../extent.js\").Extent} Request extent.\n */\nexport function getRequestExtent(extent, resolution, pixelRatio, ratio) {\n  const imageResolution = resolution / pixelRatio;\n  const center = getCenter(extent);\n  const viewWidth = ceil(getWidth(extent) / imageResolution, DECIMALS);\n  const viewHeight = ceil(getHeight(extent) / imageResolution, DECIMALS);\n  const marginWidth = ceil(((ratio - 1) * viewWidth) / 2, DECIMALS);\n  const requestWidth = viewWidth + 2 * marginWidth;\n  const marginHeight = ceil(((ratio - 1) * viewHeight) / 2, DECIMALS);\n  const requestHeight = viewHeight + 2 * marginHeight;\n  return getForViewAndSize(center, imageResolution, 0, [\n    requestWidth,\n    requestHeight,\n  ]);\n}\n\nexport default ImageSource;\n","/**\n * @module ol/source/common\n */\n\n/**\n * Default WMS version.\n * @type {string}\n */\nexport const DEFAULT_WMS_VERSION = '1.3.0';\n\n/**\n * Number of decimal digits to consider in integer values when rounding.\n * @type {number}\n */\nexport const DECIMALS = 4;\n","/**\n * @module ol/source/wms\n */\n\nimport {decode} from '../Image.js';\nimport {getForViewAndSize, getHeight, getWidth} from '../extent.js';\nimport {floor, round} from '../math.js';\nimport {get as getProjection} from '../proj.js';\nimport {compareVersions} from '../string.js';\nimport {appendParams} from '../uri.js';\nimport {getRequestExtent} from './Image.js';\nimport {DECIMALS} from './common.js';\n\n/**\n * Default WMS version.\n * @type {string}\n */\nexport const DEFAULT_VERSION = '1.3.0';\n\n/**\n * @const\n * @type {import(\"../size.js\").Size}\n */\nconst GETFEATUREINFO_IMAGE_SIZE = [101, 101];\n\n/**\n * @api\n * @typedef {'carmentaserver' | 'geoserver' | 'mapserver' | 'qgis'} ServerType\n * Set the server type to use implementation-specific parameters beyond the WMS specification.\n *  - `'carmentaserver'`: HiDPI support for [Carmenta Server](https://www.carmenta.com/en/products/carmenta-server)\n *  - `'geoserver'`: HiDPI support for [GeoServer](https://geoserver.org/)\n *  - `'mapserver'`: HiDPI support for [MapServer](https://mapserver.org/)\n *  - `'qgis'`: HiDPI support for [QGIS](https://qgis.org/)\n */\n\n/**\n * @param {string} baseUrl Base URL.\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {import(\"../size.js\").Size} size Size.\n * @param {import(\"../proj/Projection.js\").default} projection Projection.\n * @param {Object} params WMS params. Will be modified in place.\n * @return {string} Request URL.\n */\nexport function getRequestUrl(baseUrl, extent, size, projection, params) {\n  params['WIDTH'] = size[0];\n  params['HEIGHT'] = size[1];\n\n  const axisOrientation = projection.getAxisOrientation();\n  const v13 = compareVersions(params['VERSION'], '1.3') >= 0;\n  params[v13 ? 'CRS' : 'SRS'] = projection.getCode();\n  const bbox =\n    v13 && axisOrientation.startsWith('ne')\n      ? [extent[1], extent[0], extent[3], extent[2]]\n      : extent;\n  params['BBOX'] = bbox.join(',');\n\n  return appendParams(baseUrl, params);\n}\n\n/**\n * @param {import(\"../extent\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @param {number} pixelRatio pixel ratio.\n * @param {import(\"../proj.js\").Projection} projection Projection.\n * @param {string} url WMS service url.\n * @param {Object} params WMS params.\n * @param {import(\"./wms.js\").ServerType} serverType The type of the remote WMS server.\n * @return {string} Image src.\n */\nexport function getImageSrc(\n  extent,\n  resolution,\n  pixelRatio,\n  projection,\n  url,\n  params,\n  serverType,\n) {\n  params = Object.assign({REQUEST: 'GetMap'}, params);\n\n  const imageResolution = resolution / pixelRatio;\n\n  const imageSize = [\n    round(getWidth(extent) / imageResolution, DECIMALS),\n    round(getHeight(extent) / imageResolution, DECIMALS),\n  ];\n\n  if (pixelRatio != 1) {\n    switch (serverType) {\n      case 'geoserver':\n        const dpi = (90 * pixelRatio + 0.5) | 0;\n        if ('FORMAT_OPTIONS' in params) {\n          params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\n        } else {\n          params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\n        }\n        break;\n      case 'mapserver':\n        params['MAP_RESOLUTION'] = 90 * pixelRatio;\n        break;\n      case 'carmentaserver':\n      case 'qgis':\n        params['DPI'] = 90 * pixelRatio;\n        break;\n      default:\n        throw new Error('Unknown `serverType` configured');\n    }\n  }\n\n  const src = getRequestUrl(url, extent, imageSize, projection, params);\n  return src;\n}\n\n/**\n * @param {Object} params WMS params.\n * @param {string} request WMS `REQUEST`.\n * @return {Object} WMS params with required properties set.\n */\nexport function getRequestParams(params, request) {\n  return Object.assign(\n    {\n      'REQUEST': request,\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_VERSION,\n      'FORMAT': 'image/png',\n      'STYLES': '',\n      'TRANSPARENT': 'TRUE',\n    },\n    params,\n  );\n}\n\n/**\n * @typedef {Object} LoaderOptions\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {Object<string,*>} [params] WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT` and `BBOX` will be set\n * dynamically. `CRS` (`SRS` for WMS version < 1.3.0) will is derived from the `proection` config.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is 'EPSG:3857'.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {import(\"./wms.js\").ServerType} [serverType] The type of\n * the remote WMS server: `mapserver`, `geoserver`, `carmentaserver`, or `qgis`.\n * Only needed if `hidpi` is `true`.\n * @property {string} url WMS service URL.\n * @property {function(HTMLImageElement, string): Promise<import('../DataTile.js').ImageLike>} [load] Function\n * to perform loading of the image. Receives the created `HTMLImageElement` and the desired `src` as argument and\n * returns a promise resolving to the loaded or decoded image. Default is {@link module:ol/Image.decode}.\n */\n\n/**\n * Creates a loader for WMS images.\n * @param {LoaderOptions} options Loader options.\n * @return {import(\"../Image.js\").ImageObjectPromiseLoader} Loader.\n * @api\n */\nexport function createLoader(options) {\n  const hidpi = options.hidpi === undefined ? true : options.hidpi;\n  const projection = getProjection(options.projection || 'EPSG:3857');\n  const ratio = options.ratio || 1.5;\n  const load = options.load || decode;\n  const crossOrigin = options.crossOrigin ?? null;\n\n  return (extent, resolution, pixelRatio) => {\n    extent = getRequestExtent(extent, resolution, pixelRatio, ratio);\n    if (pixelRatio != 1 && (!hidpi || options.serverType === undefined)) {\n      pixelRatio = 1;\n    }\n    const src = getImageSrc(\n      extent,\n      resolution,\n      pixelRatio,\n      projection,\n      options.url,\n      getRequestParams(options.params, 'GetMap'),\n      options.serverType,\n    );\n    const image = new Image();\n    image.crossOrigin = crossOrigin;\n    return load(image, src).then((image) => ({image, extent, pixelRatio}));\n  };\n}\n\n/**\n * Get the GetFeatureInfo URL for the passed coordinate and resolution. Returns `undefined` if the\n * GetFeatureInfo URL cannot be constructed.\n * @param {LoaderOptions} options Options passed the `createWMSLoader()` function. In addition to\n * the params required by the loader, `INFO_FORMAT` should be specified, it defaults to\n * `application/json`. If `QUERY_LAYERS` is not provided, then the layers specified in the `LAYERS`\n * parameter will be used.\n * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {number} resolution Resolution.\n * @return {string|undefined} GetFeatureInfo URL.\n * @api\n */\nexport function getFeatureInfoUrl(options, coordinate, resolution) {\n  if (options.url === undefined) {\n    return undefined;\n  }\n\n  const projectionObj = getProjection(options.projection || 'EPSG:3857');\n\n  const extent = getForViewAndSize(\n    coordinate,\n    resolution,\n    0,\n    GETFEATUREINFO_IMAGE_SIZE,\n  );\n\n  const baseParams = {\n    'QUERY_LAYERS': options.params['LAYERS'],\n    'INFO_FORMAT': 'application/json',\n  };\n  Object.assign(\n    baseParams,\n    getRequestParams(options.params, 'GetFeatureInfo'),\n    options.params,\n  );\n\n  const x = floor((coordinate[0] - extent[0]) / resolution, DECIMALS);\n  const y = floor((extent[3] - coordinate[1]) / resolution, DECIMALS);\n  const v13 = compareVersions(baseParams['VERSION'], '1.3') >= 0;\n  baseParams[v13 ? 'I' : 'X'] = x;\n  baseParams[v13 ? 'J' : 'Y'] = y;\n\n  return getRequestUrl(\n    options.url,\n    extent,\n    GETFEATUREINFO_IMAGE_SIZE,\n    projectionObj,\n    baseParams,\n  );\n}\n\n/**\n * Get the GetLegendGraphic URL, optionally optimized for the passed resolution and possibly\n * including any passed specific parameters. Returns `undefined` if the GetLegendGraphic URL\n * cannot be constructed.\n *\n * @param {LoaderOptions} options Options passed the `createWMSLoader()` function.\n * @param {number} [resolution] Resolution. If not provided, `SCALE` will not be calculated and\n * included in URL.\n * @return {string|undefined} GetLegendGraphic URL.\n * @api\n */\nexport function getLegendUrl(options, resolution) {\n  if (options.url === undefined) {\n    return undefined;\n  }\n\n  const baseParams = {\n    'SERVICE': 'WMS',\n    'VERSION': DEFAULT_VERSION,\n    'REQUEST': 'GetLegendGraphic',\n    'FORMAT': 'image/png',\n  };\n\n  if (resolution !== undefined) {\n    const mpu =\n      getProjection(options.projection || 'EPSG:3857').getMetersPerUnit() || 1;\n    const pixelSize = 0.00028;\n    baseParams['SCALE'] = (resolution * mpu) / pixelSize;\n  }\n\n  Object.assign(baseParams, options.params);\n\n  if (options.params !== undefined && baseParams['LAYER'] === undefined) {\n    const layers = baseParams['LAYERS'];\n    const isSingleLayer = !Array.isArray(layers) || layers.length !== 1;\n    if (!isSingleLayer) {\n      return undefined;\n    }\n    baseParams['LAYER'] = layers;\n  }\n\n  return appendParams(options.url, baseParams);\n}\n","/**\n * @module ol/util\n */\n\n/**\n * @return {never} Any return.\n */\nexport function abstract() {\n  throw new Error('Unimplemented abstract method.');\n}\n\n/**\n * Counter for getUid.\n * @type {number}\n * @private\n */\nlet uidCounter_ = 0;\n\n/**\n * Gets a unique ID for an object. This mutates the object so that further calls\n * with the same object as a parameter returns the same value. Unique IDs are generated\n * as a strictly increasing sequence. Adapted from goog.getUid.\n *\n * @param {Object} obj The object to get the unique ID for.\n * @return {string} The unique ID for the object.\n * @api\n */\nexport function getUid(obj) {\n  return obj.ol_uid || (obj.ol_uid = String(++uidCounter_));\n}\n\n/**\n * OpenLayers version.\n * @type {string}\n */\nexport const VERSION = '10.6.0';\n"],"names":["Array","Math","R","c","E","I","t","i","e","Object","Error","r","Image","String"],"mappings":"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"}