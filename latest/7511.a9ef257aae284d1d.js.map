{"version":3,"file":"7511.a9ef257aae284d1d.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/ol/VectorTile.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/util.js"],"sourcesContent":["/**\n * @module ol/VectorTile\n */\nimport Tile from './Tile.js';\nimport TileState from './TileState.js';\n\n/**\n * @template {import('./Feature.js').FeatureLike} FeatureType\n */\nclass VectorTile extends Tile {\n  /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"./TileState.js\").default} state State.\n   * @param {string} src Data source url.\n   * @param {import(\"./format/Feature.js\").default<FeatureType>} format Feature format.\n   * @param {import(\"./Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @param {import(\"./Tile.js\").Options} [options] Tile options.\n   */\n  constructor(tileCoord, state, src, format, tileLoadFunction, options) {\n    super(tileCoord, state, options);\n\n    /**\n     * Extent of this tile; set by the source.\n     * @type {import(\"./extent.js\").Extent}\n     */\n    this.extent = null;\n\n    /**\n     * @private\n     * @type {import(\"./format/Feature.js\").default<FeatureType>}\n     */\n    this.format_ = format;\n\n    /**\n     * @private\n     * @type {Array<FeatureType>}\n     */\n    this.features_ = null;\n\n    /**\n     * @private\n     * @type {import(\"./featureloader.js\").FeatureLoader}\n     */\n    this.loader_;\n\n    /**\n     * Feature projection of this tile; set by the source.\n     * @type {import(\"./proj/Projection.js\").default}\n     */\n    this.projection = null;\n\n    /**\n     * Resolution of this tile; set by the source.\n     * @type {number}\n     */\n    this.resolution;\n\n    /**\n     * @private\n     * @type {import(\"./Tile.js\").LoadFunction}\n     */\n    this.tileLoadFunction_ = tileLoadFunction;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.url_ = src;\n\n    this.key = src;\n  }\n\n  /**\n   * @return {string} Tile url.\n   */\n  getTileUrl() {\n    return this.url_;\n  }\n\n  /**\n   * Get the feature format assigned for reading this tile's features.\n   * @return {import(\"./format/Feature.js\").default<FeatureType>} Feature format.\n   * @api\n   */\n  getFormat() {\n    return this.format_;\n  }\n\n  /**\n   * Get the features for this tile. Geometries will be in the view projection.\n   * @return {Array<FeatureType>} Features.\n   * @api\n   */\n  getFeatures() {\n    return this.features_;\n  }\n\n  /**\n   * Load not yet loaded URI.\n   * @override\n   */\n  load() {\n    if (this.state == TileState.IDLE) {\n      this.setState(TileState.LOADING);\n      this.tileLoadFunction_(this, this.url_);\n      if (this.loader_) {\n        this.loader_(this.extent, this.resolution, this.projection);\n      }\n    }\n  }\n\n  /**\n   * Handler for successful tile load.\n   * @param {Array<FeatureType>} features The loaded features.\n   * @param {import(\"./proj/Projection.js\").default} dataProjection Data projection.\n   */\n  onLoad(features, dataProjection) {\n    this.setFeatures(features);\n  }\n\n  /**\n   * Handler for tile load errors.\n   */\n  onError() {\n    this.setState(TileState.ERROR);\n  }\n\n  /**\n   * Function for use in a {@link module:ol/source/VectorTile~VectorTile}'s `tileLoadFunction`.\n   * Sets the features for the tile.\n   * @param {Array<FeatureType>} features Features.\n   * @api\n   */\n  setFeatures(features) {\n    this.features_ = features;\n    this.setState(TileState.LOADED);\n  }\n\n  /**\n   * Set the feature loader for reading this tile's features.\n   * @param {import(\"./featureloader.js\").FeatureLoader<FeatureType>} loader Feature loader.\n   * @api\n   */\n  setLoader(loader) {\n    this.loader_ = loader;\n  }\n}\n\nexport default VectorTile;\n","/**\n * @module ol/util\n */\n\n/**\n * @return {never} Any return.\n */\nexport function abstract() {\n  throw new Error('Unimplemented abstract method.');\n}\n\n/**\n * Counter for getUid.\n * @type {number}\n * @private\n */\nlet uidCounter_ = 0;\n\n/**\n * Gets a unique ID for an object. This mutates the object so that further calls\n * with the same object as a parameter returns the same value. Unique IDs are generated\n * as a strictly increasing sequence. Adapted from goog.getUid.\n *\n * @param {Object} obj The object to get the unique ID for.\n * @return {string} The unique ID for the object.\n * @api\n */\nexport function getUid(obj) {\n  return obj.ol_uid || (obj.ol_uid = String(++uidCounter_));\n}\n\n/**\n * OpenLayers version.\n * @type {string}\n */\nexport const VERSION = '10.6.1';\n"],"names":["t","s","e","Error","String"],"mappings":"gLASA,OAAM,UAAmB,GAAI,CAS3B,YAAYA,CAAS,CAAE,CAAK,CAAEC,CAAG,CAAE,CAAM,CAAE,CAAgB,CAAE,CAAO,CAAE,CACpE,KAAK,CAACD,EAAW,EAAO,GAMxB,IAAI,CAAC,MAAM,CAAG,KAMd,IAAI,CAAC,OAAO,CAAG,EAMf,IAAI,CAAC,SAAS,CAAG,KAMjB,IAAI,CAAC,OAAO,CAMZ,IAAI,CAAC,UAAU,CAAG,KAMlB,IAAI,CAAC,UAAU,CAMf,IAAI,CAAC,iBAAiB,CAAG,EAMzB,IAAI,CAAC,IAAI,CAAGC,EAEZ,IAAI,CAAC,GAAG,CAAGA,CACb,CAKA,YAAa,CACX,OAAO,IAAI,CAAC,IAAI,AAClB,CAOA,WAAY,CACV,OAAO,IAAI,CAAC,OAAO,AACrB,CAOA,aAAc,CACZ,OAAO,IAAI,CAAC,SAAS,AACvB,CAMA,MAAO,CACD,IAAI,CAAC,KAAK,EAAI,cAAc,GAC9B,IAAI,CAAC,QAAQ,CAAC,iBAAiB,EAC/B,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAE,IAAI,CAAC,IAAI,EAClC,IAAI,CAAC,OAAO,EACd,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAE,IAAI,CAAC,UAAU,CAAE,IAAI,CAAC,UAAU,EAGhE,CAOA,OAAO,CAAQ,CAAE,CAAc,CAAE,CAC/B,IAAI,CAAC,WAAW,CAAC,EACnB,CAKA,SAAU,CACR,IAAI,CAAC,QAAQ,CAAC,eAAe,CAC/B,CAQA,YAAY,CAAQ,CAAE,CACpB,IAAI,CAAC,SAAS,CAAG,EACjB,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAChC,CAOA,UAAU,CAAM,CAAE,CAChB,IAAI,CAAC,OAAO,CAAG,CACjB,CACF,CAEAC,EAAA,EAAe,C,wBC7IR,SAAS,IACd,MAAM,AAAIC,MAAM,iCAClB,C,uGAOA,IAAI,EAAc,EAWX,SAAS,EAAO,CAAG,EACxB,OAAO,EAAI,MAAM,EAAK,GAAI,MAAM,CAAGC,OAAO,EAAE,EAAW,CACzD,CAMO,IAAM,EAAU,Q"}