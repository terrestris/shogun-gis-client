{"version":3,"file":"2370.1e734cc674b014dc.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-geo/dist/LayerTree/LayerTree.js","webpack://@terrestris/shogun-gis-client/./node_modules/@terrestris/react-geo/dist/constants.js"],"sourcesContent":["import './LayerTree.less';\nimport Logger from '@terrestris/base-util/dist/Logger';\nimport MapUtil from '@terrestris/ol-util/dist/MapUtil/MapUtil';\nimport useMap from '@terrestris/react-util/dist/Hooks/useMap/useMap';\nimport { Tree } from 'antd';\nimport _isFunction from 'lodash/isFunction';\nimport { getUid } from 'ol';\nimport OlLayerGroup from 'ol/layer/Group';\nimport { unByKey } from 'ol/Observable';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { CSS_PREFIX } from '../constants';\nconst defaultClassName = `${CSS_PREFIX}layertree`;\nconst LayerTree = ({ className, layerGroup, nodeTitleRenderer, filterFunction, onLayerVisibilityChanged, checkable = true, draggable = true, ...passThroughProps }) => {\n    const [checkedKeys, setCheckedKeys] = useState([]);\n    const [treeData, setTreeData] = useState([]);\n    const map = useMap();\n    const getVisibleLayerKeys = useCallback(() => {\n        if (!map) {\n            return [];\n        }\n        const lGroup = layerGroup ? MapUtil.getAllLayers(layerGroup) : MapUtil.getAllLayers(map);\n        let visibleLayers = lGroup\n            .filter(layer => !(layer instanceof OlLayerGroup) && layer.getVisible());\n        if (filterFunction) {\n            visibleLayers = visibleLayers.filter(filterFunction);\n        }\n        return visibleLayers.map(getUid);\n    }, [filterFunction, layerGroup, map]);\n    const getTreeNodeTitle = useCallback((layer) => {\n        if (_isFunction(nodeTitleRenderer)) {\n            return nodeTitleRenderer(layer);\n        }\n        else {\n            return layer.get('name');\n        }\n    }, [nodeTitleRenderer]);\n    const treeNodeFromLayer = useCallback((layer) => {\n        if (!map) {\n            return;\n        }\n        let childNodes = undefined;\n        if (filterFunction && [layer].filter(filterFunction).length === 0) {\n            return;\n        }\n        if (layer instanceof OlLayerGroup) {\n            let childLayers = layer.getLayers().getArray();\n            if (filterFunction) {\n                childLayers = childLayers.filter(filterFunction);\n            }\n            childNodes = childLayers\n                .map(childLayer => treeNodeFromLayer(childLayer))\n                .filter(childLayer => childLayer !== undefined)\n                .toReversed();\n        }\n        return {\n            key: getUid(layer),\n            title: React.createElement(\"div\", { draggable: true, onClick: e => e.stopPropagation() }, getTreeNodeTitle(layer)),\n            className: MapUtil.layerInResolutionRange(layer, map) ? '' : 'out-of-range',\n            // Required to identify a group layer/node.\n            children: childNodes\n        };\n    }, [map, getTreeNodeTitle, filterFunction]);\n    const treeNodesFromLayerGroup = useCallback(() => {\n        if (!map) {\n            return [];\n        }\n        const lGroup = layerGroup ? layerGroup : map.getLayerGroup();\n        return lGroup.getLayers().getArray()\n            .map(l => treeNodeFromLayer(l))\n            .filter(n => n !== undefined)\n            .toReversed();\n    }, [layerGroup, map, treeNodeFromLayer]);\n    const onChangeResolution = useCallback(() => {\n        setTreeData(treeNodesFromLayerGroup());\n    }, [treeNodesFromLayerGroup]);\n    const setLayerVisibility = useCallback((layer, visible) => {\n        if (layer instanceof OlLayerGroup) {\n            layer.getLayers().forEach(subLayer => {\n                setLayerVisibility(subLayer, visible);\n            });\n        }\n        else {\n            layer.setVisible(visible);\n        }\n    }, []);\n    const updateCheckedKeys = useCallback(() => {\n        setCheckedKeys(getVisibleLayerKeys());\n    }, [getVisibleLayerKeys]);\n    const updateTree = useCallback(() => {\n        setTreeData(treeNodesFromLayerGroup());\n        updateCheckedKeys();\n    }, [updateCheckedKeys, treeNodesFromLayerGroup]);\n    useEffect(() => {\n        updateTree();\n    }, [updateTree]);\n    const registerLayerListeners = useCallback((layer) => {\n        if (filterFunction && [layer].filter(filterFunction).length === 0) {\n            return [];\n        }\n        const keys = [];\n        keys.push(layer.on('propertychange', updateTree));\n        if (layer instanceof OlLayerGroup) {\n            const layerCollection = layer.getLayers();\n            keys.push(layerCollection.on('add', updateTree));\n            keys.push(layerCollection.on('remove', updateTree));\n            keys.push(layer.on('change:layers', updateTree));\n            for (const lay of layerCollection.getArray()) {\n                keys.push(...registerLayerListeners(lay));\n            }\n        }\n        else {\n            keys.push(layer.on('change:visible', updateCheckedKeys));\n        }\n        return keys;\n    }, [filterFunction, updateTree, updateCheckedKeys]);\n    const registerAllLayerListeners = useCallback(() => {\n        if (!map) {\n            return [];\n        }\n        const lGroup = layerGroup ? layerGroup : map.getLayerGroup();\n        return registerLayerListeners(lGroup);\n    }, [layerGroup, map, registerLayerListeners]);\n    // Reregister all layer listeners if the treeData changes, this is e.g. required if a layer becomes\n    // a child of a layer group that isn't part of the treeData yet.\n    useEffect(() => {\n        const keys = registerAllLayerListeners();\n        return () => {\n            unByKey(keys);\n        };\n    }, [treeData, registerAllLayerListeners]);\n    useEffect(() => {\n        if (!map) {\n            return;\n        }\n        const key = map.getView().on('change:resolution', onChangeResolution);\n        return () => {\n            unByKey(key);\n        };\n    }, [map, onChangeResolution]);\n    const onCheck = useCallback((_, info) => {\n        if (!map) {\n            return;\n        }\n        const key = info.node.key;\n        const checked = info.checked;\n        if (!key) {\n            return;\n        }\n        const layer = MapUtil.getLayerByOlUid(map, key);\n        if (!layer) {\n            Logger.error('Layer is not defined');\n            return;\n        }\n        setLayerVisibility(layer, checked);\n        if (_isFunction(onLayerVisibilityChanged)) {\n            onLayerVisibilityChanged(layer, checked);\n        }\n    }, [map, setLayerVisibility, onLayerVisibilityChanged]);\n    const onDrop = useCallback((info) => {\n        const dropKey = info.node.key;\n        const dragKey = info.dragNode.key;\n        const dropPos = info.node.pos.split('-');\n        const dropPosition = info.dropPosition;\n        // The drop position relative to the drop node, inside 0, top -1, bottom 1.\n        const dropPositionRelative = dropPosition - parseInt(dropPos[dropPos.length - 1], 10);\n        // Reorder layers\n        if (!map) {\n            return;\n        }\n        const dragLayer = MapUtil.getLayerByOlUid(map, dragKey);\n        if (!dragLayer) {\n            Logger.error('dragLayer is not defined');\n            return;\n        }\n        const dropLayer = MapUtil.getLayerByOlUid(map, dropKey);\n        if (!dropLayer) {\n            Logger.error('dropLayer is not defined');\n            return;\n        }\n        const dragInfo = MapUtil.getLayerPositionInfo(dragLayer, map);\n        if (!dragInfo || !dragInfo?.groupLayer) {\n            return;\n        }\n        const dropInfo = MapUtil.getLayerPositionInfo(dropLayer, map);\n        if (!dropInfo || !dropInfo?.groupLayer) {\n            return;\n        }\n        const dragCollection = dragInfo.groupLayer.getLayers();\n        const dropCollection = dropInfo.groupLayer.getLayers();\n        dragCollection.remove(dragLayer);\n        const dropLayerIndex = dropCollection.getArray().findIndex(l => l === dropLayer);\n        // Drop on the top of the drop node/layer.\n        if (dropPositionRelative === -1) {\n            if (dropPosition === dropCollection.getLength() - 1) {\n                dropCollection.push(dragLayer);\n            }\n            else {\n                dropCollection.insertAt(dropLayerIndex + 1, dragLayer);\n            }\n            // Drop on node (= to a layer group).\n        }\n        else if (dropPositionRelative === 0) {\n            if (dropLayer instanceof OlLayerGroup) {\n                dropLayer.getLayers().push(dragLayer);\n            }\n            // Drop on the bottom of the drop node/layer.\n        }\n        else if (dropPositionRelative === 1) {\n            dropCollection.insertAt(dropLayerIndex, dragLayer);\n        }\n    }, [map]);\n    const allowDrop = useCallback((options) => {\n        const dropNode = options.dropNode;\n        const dropPositionRelative = options.dropPosition;\n        // Don't allow dropping on a layer node.\n        return !(dropPositionRelative === 0 && !dropNode.children);\n    }, []);\n    const finalClassName = className\n        ? `${className} ${defaultClassName}`\n        : defaultClassName;\n    return (React.createElement(Tree, { className: finalClassName, checkedKeys: checkedKeys, onCheck: onCheck, onDrop: onDrop, allowDrop: allowDrop, selectable: false, checkable: checkable, draggable: draggable, treeData: treeData, ...passThroughProps }));\n};\nexport default LayerTree;\n//# sourceMappingURL=LayerTree.js.map","const CSS_PREFIX = 'react-geo-';\nexport { CSS_PREFIX };\n//# sourceMappingURL=constants.js.map"],"names":["defaultClassName","className","layerGroup","nodeTitleRenderer","filterFunction","onLayerVisibilityChanged","checkable","draggable","passThroughProps","checkedKeys","setCheckedKeys","treeData","setTreeData","map","getVisibleLayerKeys","visibleLayers","lGroup","layer","getTreeNodeTitle","treeNodeFromLayer","childNodes","childLayers","childLayer","undefined","e","treeNodesFromLayerGroup","l","n","onChangeResolution","setLayerVisibility","visible","subLayer","updateCheckedKeys","updateTree","registerLayerListeners","keys","layerCollection","lay","registerAllLayerListeners","key","onCheck","_","info","checked","onDrop","dropKey","dragKey","dropPos","dropPosition","dropPositionRelative","parseInt","dragLayer","dropLayer","dragInfo","dropInfo","dragCollection","dropCollection","dropLayerIndex","allowDrop","options","dropNode","finalClassName","CSS_PREFIX"],"mappings":"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"}