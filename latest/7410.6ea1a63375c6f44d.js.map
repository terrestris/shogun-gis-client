{"version":3,"file":"7410.6ea1a63375c6f44d.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/ol/style/Circle.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/style/Fill.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/style/Stroke.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/style/Style.js"],"sourcesContent":["/**\n * @module ol/style/Circle\n */\n\nimport RegularShape from './RegularShape.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {number} radius Circle radius.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {Array<number>} [displacement=[0,0]] displacement\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale. A two dimensional scale will produce an ellipse.\n * Unless two dimensional scaling is required a better result may be obtained with an appropriate setting for `radius`.\n * @property {number} [rotation=0] Rotation in radians\n * (positive rotation clockwise, meaningful only when used in conjunction with a two dimensional scale).\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view\n * (meaningful only when used in conjunction with a two dimensional scale).\n * @property {import('./Style.js').DeclutterMode} [declutterMode] Declutter mode\n */\n\n/**\n * @classdesc\n * Set circle style for vector features.\n * @api\n */\nclass CircleStyle extends RegularShape {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {radius: 5};\n\n    super({\n      points: Infinity,\n      fill: options.fill,\n      radius: options.radius,\n      stroke: options.stroke,\n      scale: options.scale !== undefined ? options.scale : 1,\n      rotation: options.rotation !== undefined ? options.rotation : 0,\n      rotateWithView:\n        options.rotateWithView !== undefined ? options.rotateWithView : false,\n      displacement:\n        options.displacement !== undefined ? options.displacement : [0, 0],\n      declutterMode: options.declutterMode,\n    });\n  }\n\n  /**\n   * Clones the style.\n   * @return {CircleStyle} The cloned style.\n   * @api\n   * @override\n   */\n  clone() {\n    const scale = this.getScale();\n    const style = new CircleStyle({\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      radius: this.getRadius(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      displacement: this.getDisplacement().slice(),\n      declutterMode: this.getDeclutterMode(),\n    });\n    style.setOpacity(this.getOpacity());\n    return style;\n  }\n\n  /**\n   * Set the circle radius.\n   *\n   * @param {number} radius Circle radius.\n   * @api\n   */\n  setRadius(radius) {\n    this.radius = radius;\n    this.render();\n  }\n}\n\nexport default CircleStyle;\n","/**\n * @module ol/style/Fill\n */\n\nimport ImageState from '../ImageState.js';\nimport {asArray} from '../color.js';\nimport {getUid} from '../util.js';\nimport {get as getIconImage} from './IconImage.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|import('../colorlike.js').PatternDescriptor|null} [color=null] A color,\n * gradient or pattern.\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats. For polygon fills (not for {@link import(\"./RegularShape.js\").default} fills),\n * a pattern can also be provided as {@link module:ol/colorlike~PatternDescriptor}.\n * Default null; if null, the Canvas/renderer default black will be used.\n */\n\n/**\n * @classdesc\n * Set fill style for vector features.\n * @api\n */\nclass Fill {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options || {};\n\n    /**\n     * @private\n     * @type {import(\"./IconImage.js\").default|null}\n     */\n    this.patternImage_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|import('../colorlike.js').PatternDescriptor|null}\n     */\n    this.color_ = null;\n    if (options.color !== undefined) {\n      this.setColor(options.color);\n    }\n  }\n\n  /**\n   * Clones the style. The color is not cloned if it is a {@link module:ol/colorlike~ColorLike}.\n   * @return {Fill} The cloned style.\n   * @api\n   */\n  clone() {\n    const color = this.getColor();\n    return new Fill({\n      color: Array.isArray(color) ? color.slice() : color || undefined,\n    });\n  }\n\n  /**\n   * Get the fill color.\n   * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|import('../colorlike.js').PatternDescriptor|null} Color.\n   * @api\n   */\n  getColor() {\n    return this.color_;\n  }\n\n  /**\n   * Set the color.\n   *\n   * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|import('../colorlike.js').PatternDescriptor|null} color Color.\n   * @api\n   */\n  setColor(color) {\n    if (color !== null && typeof color === 'object' && 'src' in color) {\n      const patternImage = getIconImage(\n        null,\n        color.src,\n        'anonymous',\n        undefined,\n        color.offset ? null : color.color ? color.color : null,\n        !(color.offset && color.size),\n      );\n      patternImage.ready().then(() => {\n        this.patternImage_ = null;\n      });\n      if (patternImage.getImageState() === ImageState.IDLE) {\n        patternImage.load();\n      }\n      if (patternImage.getImageState() === ImageState.LOADING) {\n        this.patternImage_ = patternImage;\n      }\n    }\n    this.color_ = color;\n  }\n\n  /**\n   * @return {string} Key of the fill for cache lookup.\n   */\n  getKey() {\n    const fill = this.getColor();\n    if (!fill) {\n      return '';\n    }\n    return fill instanceof CanvasPattern || fill instanceof CanvasGradient\n      ? getUid(fill)\n      : typeof fill === 'object' && 'src' in fill\n        ? fill.src + ':' + fill.offset\n        : asArray(fill).toString();\n  }\n\n  /**\n   * @return {boolean} The fill style is loading an image pattern.\n   */\n  loading() {\n    return !!this.patternImage_;\n  }\n\n  /**\n   * @return {Promise<void>} `false` or a promise that resolves when the style is ready to use.\n   */\n  ready() {\n    return this.patternImage_ ? this.patternImage_.ready() : Promise.resolve();\n  }\n}\n\nexport default Fill;\n","/**\n * @module ol/style/Stroke\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} [color] A color, gradient or pattern.\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.\n * Default null; if null, the Canvas/renderer default black will be used.\n * @property {CanvasLineCap} [lineCap='round'] Line cap style: `butt`, `round`, or `square`.\n * @property {CanvasLineJoin} [lineJoin='round'] Line join style: `bevel`, `round`, or `miter`.\n * @property {Array<number>} [lineDash] Line dash pattern. Default is `null` (no dash).\n * @property {number} [lineDashOffset=0] Line dash offset.\n * @property {number} [miterLimit=10] Miter limit.\n * @property {number} [width] Width.\n */\n\n/**\n * @classdesc\n * Set stroke style for vector features.\n * Note that the defaults given are the Canvas defaults, which will be used if\n * option is not defined. The `get` functions return whatever was entered in\n * the options; they will not return the default.\n * @api\n */\nclass Stroke {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options || {};\n\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike}\n     */\n    this.color_ = options.color !== undefined ? options.color : null;\n\n    /**\n     * @private\n     * @type {CanvasLineCap|undefined}\n     */\n    this.lineCap_ = options.lineCap;\n\n    /**\n     * @private\n     * @type {Array<number>|null}\n     */\n    this.lineDash_ = options.lineDash !== undefined ? options.lineDash : null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.lineDashOffset_ = options.lineDashOffset;\n\n    /**\n     * @private\n     * @type {CanvasLineJoin|undefined}\n     */\n    this.lineJoin_ = options.lineJoin;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.miterLimit_ = options.miterLimit;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.width_ = options.width;\n  }\n\n  /**\n   * Clones the style.\n   * @return {Stroke} The cloned style.\n   * @api\n   */\n  clone() {\n    const color = this.getColor();\n    return new Stroke({\n      color: Array.isArray(color) ? color.slice() : color || undefined,\n      lineCap: this.getLineCap(),\n      lineDash: this.getLineDash() ? this.getLineDash().slice() : undefined,\n      lineDashOffset: this.getLineDashOffset(),\n      lineJoin: this.getLineJoin(),\n      miterLimit: this.getMiterLimit(),\n      width: this.getWidth(),\n    });\n  }\n\n  /**\n   * Get the stroke color.\n   * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} Color.\n   * @api\n   */\n  getColor() {\n    return this.color_;\n  }\n\n  /**\n   * Get the line cap type for the stroke.\n   * @return {CanvasLineCap|undefined} Line cap.\n   * @api\n   */\n  getLineCap() {\n    return this.lineCap_;\n  }\n\n  /**\n   * Get the line dash style for the stroke.\n   * @return {Array<number>|null} Line dash.\n   * @api\n   */\n  getLineDash() {\n    return this.lineDash_;\n  }\n\n  /**\n   * Get the line dash offset for the stroke.\n   * @return {number|undefined} Line dash offset.\n   * @api\n   */\n  getLineDashOffset() {\n    return this.lineDashOffset_;\n  }\n\n  /**\n   * Get the line join type for the stroke.\n   * @return {CanvasLineJoin|undefined} Line join.\n   * @api\n   */\n  getLineJoin() {\n    return this.lineJoin_;\n  }\n\n  /**\n   * Get the miter limit for the stroke.\n   * @return {number|undefined} Miter limit.\n   * @api\n   */\n  getMiterLimit() {\n    return this.miterLimit_;\n  }\n\n  /**\n   * Get the stroke width.\n   * @return {number|undefined} Width.\n   * @api\n   */\n  getWidth() {\n    return this.width_;\n  }\n\n  /**\n   * Set the color.\n   *\n   * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} color Color.\n   * @api\n   */\n  setColor(color) {\n    this.color_ = color;\n  }\n\n  /**\n   * Set the line cap.\n   *\n   * @param {CanvasLineCap|undefined} lineCap Line cap.\n   * @api\n   */\n  setLineCap(lineCap) {\n    this.lineCap_ = lineCap;\n  }\n\n  /**\n   * Set the line dash.\n   *\n   * @param {Array<number>|null} lineDash Line dash.\n   * @api\n   */\n  setLineDash(lineDash) {\n    this.lineDash_ = lineDash;\n  }\n\n  /**\n   * Set the line dash offset.\n   *\n   * @param {number|undefined} lineDashOffset Line dash offset.\n   * @api\n   */\n  setLineDashOffset(lineDashOffset) {\n    this.lineDashOffset_ = lineDashOffset;\n  }\n\n  /**\n   * Set the line join.\n   *\n   * @param {CanvasLineJoin|undefined} lineJoin Line join.\n   * @api\n   */\n  setLineJoin(lineJoin) {\n    this.lineJoin_ = lineJoin;\n  }\n\n  /**\n   * Set the miter limit.\n   *\n   * @param {number|undefined} miterLimit Miter limit.\n   * @api\n   */\n  setMiterLimit(miterLimit) {\n    this.miterLimit_ = miterLimit;\n  }\n\n  /**\n   * Set the width.\n   *\n   * @param {number|undefined} width Width.\n   * @api\n   */\n  setWidth(width) {\n    this.width_ = width;\n  }\n}\n\nexport default Stroke;\n","/**\n * @module ol/style/Style\n */\n\nimport {assert} from '../asserts.js';\nimport CircleStyle from './Circle.js';\nimport Fill from './Fill.js';\nimport Stroke from './Stroke.js';\n\n/**\n * Defines how symbols and text are decluttered on layers ith `declutter` set to `true`\n * **declutter**: Overlapping symbols and text are decluttered.\n * **obstacle**: Symbols and text are rendered, but serve as obstacle for subsequent attempts\n *   to place a symbol or text at the same location.\n * **none**: No decluttering is done.\n *\n * @typedef {\"declutter\"|\"obstacle\"|\"none\"} DeclutterMode\n */\n\n/**\n * A function that takes a {@link module:ol/Feature~Feature} and a `{number}`\n * representing the view's resolution. The function should return a\n * {@link module:ol/style/Style~Style} or an array of them. This way e.g. a\n * vector layer can be styled. If the function returns `undefined`, the\n * feature will not be rendered.\n *\n * @typedef {function(import(\"../Feature.js\").FeatureLike, number):(Style|Array<Style>|void)} StyleFunction\n */\n\n/**\n * A {@link Style}, an array of {@link Style}, or a {@link StyleFunction}.\n * @typedef {Style|Array<Style>|StyleFunction} StyleLike\n */\n\n/**\n * A function that takes a {@link module:ol/Feature~Feature} as argument and returns an\n * {@link module:ol/geom/Geometry~Geometry} that will be rendered and styled for the feature.\n *\n * @typedef {function(import(\"../Feature.js\").FeatureLike):\n *     (import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined)} GeometryFunction\n */\n\n/**\n * Custom renderer function. Takes two arguments:\n *\n * 1. The pixel coordinates of the geometry in GeoJSON notation.\n * 2. The {@link module:ol/render~State} of the layer renderer.\n *\n * @typedef {function((import(\"../coordinate.js\").Coordinate|Array<import(\"../coordinate.js\").Coordinate>|Array<Array<import(\"../coordinate.js\").Coordinate>>|Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>),import(\"../render.js\").State): void} RenderFunction\n */\n\n/**\n * @typedef {Object} Options\n * @property {string|import(\"../geom/Geometry.js\").default|GeometryFunction} [geometry] Feature property or geometry\n * or function returning a geometry to render for this style.\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {import(\"./Image.js\").default} [image] Image style.\n * @property {RenderFunction} [renderer] Custom renderer. When configured, `fill`, `stroke` and `image` will be\n * ignored, and the provided function will be called with each render frame for each geometry.\n * @property {RenderFunction} [hitDetectionRenderer] Custom renderer for hit detection. If provided will be used\n * in hit detection rendering.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {import(\"./Text.js\").default} [text] Text style.\n * @property {number} [zIndex] Z index.\n */\n\n/**\n * @classdesc\n * Container for vector feature rendering styles. Any changes made to the style\n * or its children through `set*()` methods will not take effect until the\n * feature or layer that uses the style is re-rendered.\n *\n * ## Feature styles\n *\n * If no style is defined, the following default style is used:\n * ```js\n *  import {Circle, Fill, Stroke, Style} from 'ol/style.js';\n *\n *  const fill = new Fill({\n *    color: 'rgba(255,255,255,0.4)',\n *  });\n *  const stroke = new Stroke({\n *    color: '#3399CC',\n *    width: 1.25,\n *  });\n *  const styles = [\n *    new Style({\n *      image: new Circle({\n *        fill: fill,\n *        stroke: stroke,\n *        radius: 5,\n *      }),\n *      fill: fill,\n *      stroke: stroke,\n *    }),\n *  ];\n * ```\n *\n * A separate editing style has the following defaults:\n * ```js\n *  import {Circle, Fill, Stroke, Style} from 'ol/style.js';\n *\n *  const styles = {};\n *  const white = [255, 255, 255, 1];\n *  const blue = [0, 153, 255, 1];\n *  const width = 3;\n *  styles['Polygon'] = [\n *    new Style({\n *      fill: new Fill({\n *        color: [255, 255, 255, 0.5],\n *      }),\n *    }),\n *  ];\n *  styles['MultiPolygon'] =\n *      styles['Polygon'];\n *  styles['LineString'] = [\n *    new Style({\n *      stroke: new Stroke({\n *        color: white,\n *        width: width + 2,\n *      }),\n *    }),\n *    new Style({\n *      stroke: new Stroke({\n *        color: blue,\n *        width: width,\n *      }),\n *    }),\n *  ];\n *  styles['MultiLineString'] = styles['LineString'];\n *\n *  styles['Circle'] = styles['Polygon'].concat(\n *    styles['LineString']\n *  );\n *\n *  styles['Point'] = [\n *    new Style({\n *      image: new Circle({\n *        radius: width * 2,\n *        fill: new Fill({\n *          color: blue,\n *        }),\n *        stroke: new Stroke({\n *          color: white,\n *          width: width / 2,\n *        }),\n *      }),\n *      zIndex: Infinity,\n *    }),\n *  ];\n *  styles['MultiPoint'] =\n *      styles['Point'];\n *  styles['GeometryCollection'] =\n *      styles['Polygon'].concat(\n *          styles['LineString'],\n *          styles['Point']\n *      );\n * ```\n *\n * @api\n */\nclass Style {\n  /**\n   * @param {Options} [options] Style options.\n   */\n  constructor(options) {\n    options = options || {};\n\n    /**\n     * @private\n     * @type {string|import(\"../geom/Geometry.js\").default|GeometryFunction|null}\n     */\n    this.geometry_ = null;\n\n    /**\n     * @private\n     * @type {!GeometryFunction}\n     */\n    this.geometryFunction_ = defaultGeometryFunction;\n\n    if (options.geometry !== undefined) {\n      this.setGeometry(options.geometry);\n    }\n\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default|null}\n     */\n    this.fill_ = options.fill !== undefined ? options.fill : null;\n\n    /**\n     * @private\n     * @type {import(\"./Image.js\").default|null}\n     */\n    this.image_ = options.image !== undefined ? options.image : null;\n\n    /**\n     * @private\n     * @type {RenderFunction|null}\n     */\n    this.renderer_ = options.renderer !== undefined ? options.renderer : null;\n\n    /**\n     * @private\n     * @type {RenderFunction|null}\n     */\n    this.hitDetectionRenderer_ =\n      options.hitDetectionRenderer !== undefined\n        ? options.hitDetectionRenderer\n        : null;\n\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default|null}\n     */\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n\n    /**\n     * @private\n     * @type {import(\"./Text.js\").default|null}\n     */\n    this.text_ = options.text !== undefined ? options.text : null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.zIndex_ = options.zIndex;\n  }\n\n  /**\n   * Clones the style.\n   * @return {Style} The cloned style.\n   * @api\n   */\n  clone() {\n    let geometry = this.getGeometry();\n    if (geometry && typeof geometry === 'object') {\n      geometry = /** @type {import(\"../geom/Geometry.js\").default} */ (\n        geometry\n      ).clone();\n    }\n    return new Style({\n      geometry: geometry ?? undefined,\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      image: this.getImage() ? this.getImage().clone() : undefined,\n      renderer: this.getRenderer() ?? undefined,\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      text: this.getText() ? this.getText().clone() : undefined,\n      zIndex: this.getZIndex(),\n    });\n  }\n\n  /**\n   * Get the custom renderer function that was configured with\n   * {@link #setRenderer} or the `renderer` constructor option.\n   * @return {RenderFunction|null} Custom renderer function.\n   * @api\n   */\n  getRenderer() {\n    return this.renderer_;\n  }\n\n  /**\n   * Sets a custom renderer function for this style. When set, `fill`, `stroke`\n   * and `image` options of the style will be ignored.\n   * @param {RenderFunction|null} renderer Custom renderer function.\n   * @api\n   */\n  setRenderer(renderer) {\n    this.renderer_ = renderer;\n  }\n\n  /**\n   * Sets a custom renderer function for this style used\n   * in hit detection.\n   * @param {RenderFunction|null} renderer Custom renderer function.\n   * @api\n   */\n  setHitDetectionRenderer(renderer) {\n    this.hitDetectionRenderer_ = renderer;\n  }\n\n  /**\n   * Get the custom renderer function that was configured with\n   * {@link #setHitDetectionRenderer} or the `hitDetectionRenderer` constructor option.\n   * @return {RenderFunction|null} Custom renderer function.\n   * @api\n   */\n  getHitDetectionRenderer() {\n    return this.hitDetectionRenderer_;\n  }\n\n  /**\n   * Get the geometry to be rendered.\n   * @return {string|import(\"../geom/Geometry.js\").default|GeometryFunction|null}\n   * Feature property or geometry or function that returns the geometry that will\n   * be rendered with this style.\n   * @api\n   */\n  getGeometry() {\n    return this.geometry_;\n  }\n\n  /**\n   * Get the function used to generate a geometry for rendering.\n   * @return {!GeometryFunction} Function that is called with a feature\n   * and returns the geometry to render instead of the feature's geometry.\n   * @api\n   */\n  getGeometryFunction() {\n    return this.geometryFunction_;\n  }\n\n  /**\n   * Get the fill style.\n   * @return {import(\"./Fill.js\").default|null} Fill style.\n   * @api\n   */\n  getFill() {\n    return this.fill_;\n  }\n\n  /**\n   * Set the fill style.\n   * @param {import(\"./Fill.js\").default|null} fill Fill style.\n   * @api\n   */\n  setFill(fill) {\n    this.fill_ = fill;\n  }\n\n  /**\n   * Get the image style.\n   * @return {import(\"./Image.js\").default|null} Image style.\n   * @api\n   */\n  getImage() {\n    return this.image_;\n  }\n\n  /**\n   * Set the image style.\n   * @param {import(\"./Image.js\").default} image Image style.\n   * @api\n   */\n  setImage(image) {\n    this.image_ = image;\n  }\n\n  /**\n   * Get the stroke style.\n   * @return {import(\"./Stroke.js\").default|null} Stroke style.\n   * @api\n   */\n  getStroke() {\n    return this.stroke_;\n  }\n\n  /**\n   * Set the stroke style.\n   * @param {import(\"./Stroke.js\").default|null} stroke Stroke style.\n   * @api\n   */\n  setStroke(stroke) {\n    this.stroke_ = stroke;\n  }\n\n  /**\n   * Get the text style.\n   * @return {import(\"./Text.js\").default|null} Text style.\n   * @api\n   */\n  getText() {\n    return this.text_;\n  }\n\n  /**\n   * Set the text style.\n   * @param {import(\"./Text.js\").default} text Text style.\n   * @api\n   */\n  setText(text) {\n    this.text_ = text;\n  }\n\n  /**\n   * Get the z-index for the style.\n   * @return {number|undefined} ZIndex.\n   * @api\n   */\n  getZIndex() {\n    return this.zIndex_;\n  }\n\n  /**\n   * Set a geometry that is rendered instead of the feature's geometry.\n   *\n   * @param {string|import(\"../geom/Geometry.js\").default|GeometryFunction} geometry\n   *     Feature property or geometry or function returning a geometry to render\n   *     for this style.\n   * @api\n   */\n  setGeometry(geometry) {\n    if (typeof geometry === 'function') {\n      this.geometryFunction_ = geometry;\n    } else if (typeof geometry === 'string') {\n      this.geometryFunction_ = function (feature) {\n        return /** @type {import(\"../geom/Geometry.js\").default} */ (\n          feature.get(geometry)\n        );\n      };\n    } else if (!geometry) {\n      this.geometryFunction_ = defaultGeometryFunction;\n    } else if (geometry !== undefined) {\n      this.geometryFunction_ = function () {\n        return /** @type {import(\"../geom/Geometry.js\").default} */ (geometry);\n      };\n    }\n    this.geometry_ = geometry;\n  }\n\n  /**\n   * Set the z-index.\n   *\n   * @param {number|undefined} zIndex ZIndex.\n   * @api\n   */\n  setZIndex(zIndex) {\n    this.zIndex_ = zIndex;\n  }\n}\n\n/**\n * Convert the provided object into a style function.  Functions passed through\n * unchanged.  Arrays of Style or single style objects wrapped in a\n * new style function.\n * @param {StyleFunction|Array<Style>|Style} obj\n *     A style function, a single style, or an array of styles.\n * @return {StyleFunction} A style function.\n */\nexport function toFunction(obj) {\n  let styleFunction;\n\n  if (typeof obj === 'function') {\n    styleFunction = obj;\n  } else {\n    /**\n     * @type {Array<Style>}\n     */\n    let styles;\n    if (Array.isArray(obj)) {\n      styles = obj;\n    } else {\n      assert(\n        typeof (/** @type {?} */ (obj).getZIndex) === 'function',\n        'Expected an `Style` or an array of `Style`',\n      );\n      const style = /** @type {Style} */ (obj);\n      styles = [style];\n    }\n    styleFunction = function () {\n      return styles;\n    };\n  }\n  return styleFunction;\n}\n\n/**\n * @type {Array<Style>|null}\n */\nlet defaultStyles = null;\n\n/**\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {number} resolution Resolution.\n * @return {Array<Style>} Style.\n */\nexport function createDefaultStyle(feature, resolution) {\n  // We don't use an immediately-invoked function\n  // and a closure so we don't get an error at script evaluation time in\n  // browsers that do not support Canvas. (import(\"./Circle.js\").CircleStyle does\n  // canvas.getContext('2d') at construction time, which will cause an.error\n  // in such browsers.)\n  if (!defaultStyles) {\n    const fill = new Fill({\n      color: 'rgba(255,255,255,0.4)',\n    });\n    const stroke = new Stroke({\n      color: '#3399CC',\n      width: 1.25,\n    });\n    defaultStyles = [\n      new Style({\n        image: new CircleStyle({\n          fill: fill,\n          stroke: stroke,\n          radius: 5,\n        }),\n        fill: fill,\n        stroke: stroke,\n      }),\n    ];\n  }\n  return defaultStyles;\n}\n\n/**\n * Default styles for editing features.\n * @return {Object<import(\"../geom/Geometry.js\").Type, Array<Style>>} Styles\n */\nexport function createEditingStyle() {\n  /** @type {Object<import(\"../geom/Geometry.js\").Type, Array<Style>>} */\n  const styles = {};\n  const white = [255, 255, 255, 1];\n  const blue = [0, 153, 255, 1];\n  const width = 3;\n  styles['Polygon'] = [\n    new Style({\n      fill: new Fill({\n        color: [255, 255, 255, 0.5],\n      }),\n    }),\n  ];\n  styles['MultiPolygon'] = styles['Polygon'];\n\n  styles['LineString'] = [\n    new Style({\n      stroke: new Stroke({\n        color: white,\n        width: width + 2,\n      }),\n    }),\n    new Style({\n      stroke: new Stroke({\n        color: blue,\n        width: width,\n      }),\n    }),\n  ];\n  styles['MultiLineString'] = styles['LineString'];\n\n  styles['Circle'] = styles['Polygon'].concat(styles['LineString']);\n\n  styles['Point'] = [\n    new Style({\n      image: new CircleStyle({\n        radius: width * 2,\n        fill: new Fill({\n          color: blue,\n        }),\n        stroke: new Stroke({\n          color: white,\n          width: width / 2,\n        }),\n      }),\n      zIndex: Infinity,\n    }),\n  ];\n  styles['MultiPoint'] = styles['Point'];\n\n  styles['GeometryCollection'] = styles['Polygon'].concat(\n    styles['LineString'],\n    styles['Point'],\n  );\n\n  return styles;\n}\n\n/**\n * Function that is called with a feature and returns its default geometry.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature to get the geometry for.\n * @return {import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined} Geometry to render.\n */\nfunction defaultGeometryFunction(feature) {\n  return feature.getGeometry();\n}\n\nexport default Style;\n"],"names":["Array","e","CanvasPattern","CanvasGradient","Promise","d","t","c"],"mappings":"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"}