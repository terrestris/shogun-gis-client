{"version":3,"file":"7581.a1d293de1c7adcf4.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/ol/renderer/canvas/ImageLayer.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/layer/BaseImage.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/layer/Image.js"],"sourcesContent":["/**\n * @module ol/renderer/canvas/ImageLayer\n */\nimport ImageState from '../../ImageState.js';\nimport ViewHint from '../../ViewHint.js';\nimport {\n  containsCoordinate,\n  containsExtent,\n  getHeight,\n  getIntersection,\n  getWidth,\n  intersects as intersectsExtent,\n  isEmpty,\n} from '../../extent.js';\nimport {fromUserExtent} from '../../proj.js';\nimport {\n  apply as applyTransform,\n  compose as composeTransform,\n} from '../../transform.js';\nimport CanvasLayerRenderer from './Layer.js';\n\n/**\n * @classdesc\n * Canvas renderer for image layers.\n * @api\n */\nclass CanvasImageLayerRenderer extends CanvasLayerRenderer {\n  /**\n   * @param {import(\"../../layer/Image.js\").default} imageLayer Image layer.\n   */\n  constructor(imageLayer) {\n    super(imageLayer);\n\n    /**\n     * @protected\n     * @type {?import(\"../../Image.js\").default}\n     */\n    this.image = null;\n  }\n\n  /**\n   * @return {import('../../DataTile.js').ImageLike} Image.\n   */\n  getImage() {\n    return !this.image ? null : this.image.getImage();\n  }\n\n  /**\n   * Determine whether render should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   * @override\n   */\n  prepareFrame(frameState) {\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    const pixelRatio = frameState.pixelRatio;\n    const viewState = frameState.viewState;\n    const viewResolution = viewState.resolution;\n\n    const imageSource = this.getLayer().getSource();\n\n    const hints = frameState.viewHints;\n\n    let renderedExtent = frameState.extent;\n    if (layerState.extent !== undefined) {\n      renderedExtent = getIntersection(\n        renderedExtent,\n        fromUserExtent(layerState.extent, viewState.projection),\n      );\n    }\n\n    if (\n      !hints[ViewHint.ANIMATING] &&\n      !hints[ViewHint.INTERACTING] &&\n      !isEmpty(renderedExtent)\n    ) {\n      if (imageSource) {\n        const projection = viewState.projection;\n        const image = imageSource.getImage(\n          renderedExtent,\n          viewResolution,\n          pixelRatio,\n          projection,\n        );\n        if (image) {\n          if (this.loadImage(image)) {\n            this.image = image;\n          } else if (image.getState() === ImageState.EMPTY) {\n            this.image = null;\n          }\n        }\n      } else {\n        this.image = null;\n      }\n    }\n\n    return !!this.image;\n  }\n\n  /**\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray} Data at the pixel location.\n   * @override\n   */\n  getData(pixel) {\n    const frameState = this.frameState;\n    if (!frameState) {\n      return null;\n    }\n\n    const layer = this.getLayer();\n    const coordinate = applyTransform(\n      frameState.pixelToCoordinateTransform,\n      pixel.slice(),\n    );\n\n    const layerExtent = layer.getExtent();\n    if (layerExtent) {\n      if (!containsCoordinate(layerExtent, coordinate)) {\n        return null;\n      }\n    }\n\n    const imageExtent = this.image.getExtent();\n    const img = this.image.getImage();\n\n    const imageMapWidth = getWidth(imageExtent);\n    const col = Math.floor(\n      img.width * ((coordinate[0] - imageExtent[0]) / imageMapWidth),\n    );\n    if (col < 0 || col >= img.width) {\n      return null;\n    }\n\n    const imageMapHeight = getHeight(imageExtent);\n    const row = Math.floor(\n      img.height * ((imageExtent[3] - coordinate[1]) / imageMapHeight),\n    );\n    if (row < 0 || row >= img.height) {\n      return null;\n    }\n\n    return this.getImageData(img, col, row);\n  }\n\n  /**\n   * Render the layer.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target that may be used to render content to.\n   * @return {HTMLElement} The rendered element.\n   * @override\n   */\n  renderFrame(frameState, target) {\n    const image = this.image;\n    const imageExtent = image.getExtent();\n    const imageResolution = image.getResolution();\n    const [imageResolutionX, imageResolutionY] = Array.isArray(imageResolution)\n      ? imageResolution\n      : [imageResolution, imageResolution];\n    const imagePixelRatio = image.getPixelRatio();\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    const pixelRatio = frameState.pixelRatio;\n    const viewState = frameState.viewState;\n    const viewCenter = viewState.center;\n    const viewResolution = viewState.resolution;\n    const scaleX =\n      (pixelRatio * imageResolutionX) / (viewResolution * imagePixelRatio);\n    const scaleY =\n      (pixelRatio * imageResolutionY) / (viewResolution * imagePixelRatio);\n\n    this.prepareContainer(frameState, target);\n\n    // desired dimensions of the canvas in pixels\n    const width = this.context.canvas.width;\n    const height = this.context.canvas.height;\n\n    const context = this.getRenderContext(frameState);\n\n    // clipped rendering if layer extent is set\n    let clipped = false;\n    let render = true;\n    if (layerState.extent) {\n      const layerExtent = fromUserExtent(\n        layerState.extent,\n        viewState.projection,\n      );\n      render = intersectsExtent(layerExtent, frameState.extent);\n      clipped = render && !containsExtent(layerExtent, frameState.extent);\n      if (clipped) {\n        this.clipUnrotated(context, frameState, layerExtent);\n      }\n    }\n\n    const img = image.getImage();\n\n    const transform = composeTransform(\n      this.tempTransform,\n      width / 2,\n      height / 2,\n      scaleX,\n      scaleY,\n      0,\n      (imagePixelRatio * (imageExtent[0] - viewCenter[0])) / imageResolutionX,\n      (imagePixelRatio * (viewCenter[1] - imageExtent[3])) / imageResolutionY,\n    );\n\n    this.renderedResolution = (imageResolutionY * pixelRatio) / imagePixelRatio;\n\n    const dw = img.width * transform[0];\n    const dh = img.height * transform[3];\n\n    if (!this.getLayer().getSource().getInterpolate()) {\n      context.imageSmoothingEnabled = false;\n    }\n\n    this.preRender(context, frameState);\n    if (render && dw >= 0.5 && dh >= 0.5) {\n      const dx = transform[4];\n      const dy = transform[5];\n      const opacity = layerState.opacity;\n      if (opacity !== 1) {\n        context.save();\n        context.globalAlpha = opacity;\n      }\n      context.drawImage(img, 0, 0, +img.width, +img.height, dx, dy, dw, dh);\n      if (opacity !== 1) {\n        context.restore();\n      }\n    }\n    this.postRender(this.context, frameState);\n\n    if (clipped) {\n      context.restore();\n    }\n    context.imageSmoothingEnabled = true;\n\n    return this.container;\n  }\n}\n\nexport default CanvasImageLayerRenderer;\n","/**\n * @module ol/layer/BaseImage\n */\nimport Layer from './Layer.js';\n\n/**\n * @template {import(\"../source/Image.js\").default} ImageSourceType\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use {@link import(\"../Map.js\").default#addLayer map.addLayer()}.\n * @property {ImageSourceType} [source] Source for this layer.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @classdesc\n * Server-rendered images that are available for arbitrary extents and\n * resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Image.js\").default} ImageSourceType\n * @template {import(\"../renderer/Layer.js\").default} RendererType\n * @extends {Layer<ImageSourceType, RendererType>}\n * @api\n */\nclass BaseImageLayer extends Layer {\n  /**\n   * @param {Options<ImageSourceType>} [options] Layer options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    super(options);\n  }\n}\n\nexport default BaseImageLayer;\n","/**\n * @module ol/layer/Image\n */\nimport CanvasImageLayerRenderer from '../renderer/canvas/ImageLayer.js';\nimport BaseImageLayer from './BaseImage.js';\n\n/**\n * @classdesc\n * Server-rendered images that are available for arbitrary extents and\n * resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Image.js\").default} ImageSourceType\n * @extends {BaseImageLayer<ImageSourceType, CanvasImageLayerRenderer>}\n * @api\n */\nclass ImageLayer extends BaseImageLayer {\n  /**\n   * @param {import(\"./BaseImage.js\").Options<ImageSourceType>} [options] Layer options.\n   */\n  constructor(options) {\n    super(options);\n  }\n\n  /**\n   * @override\n   */\n  createRenderer() {\n    return new CanvasImageLayerRenderer(this);\n  }\n\n  /**\n   * Get data for a pixel location.  A four element RGBA array will be returned.  For requests outside the\n   * layer extent, `null` will be returned.  Data for an image can only be retrieved if the\n   * source's `crossOrigin` property is set.\n   *\n   * ```js\n   * // display layer data on every pointer move\n   * map.on('pointermove', (event) => {\n   *   console.log(layer.getData(event.pixel));\n   * });\n   * ```\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\n   * @api\n   * @override\n   */\n  getData(pixel) {\n    return super.getData(pixel);\n  }\n}\n\nexport default ImageLayer;\n"],"names":["CanvasImageLayerRenderer","imageLayer","frameState","layerState","pixelRatio","viewState","viewResolution","imageSource","hints","renderedExtent","undefined","ViewHint","projection","image","ImageState","pixel","layer","coordinate","layerExtent","imageExtent","img","imageMapWidth","col","Math","imageMapHeight","row","target","imageResolution","imageResolutionX","imageResolutionY","Array","imagePixelRatio","viewCenter","width","height","context","clipped","render","transform","dw","dh","dx","dy","opacity","BaseImageLayer","options","BaseImage"],"mappings":"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"}