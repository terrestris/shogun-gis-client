{"version":3,"file":"2057.fbffd17c874904af.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/ol/MapBrowserEventType.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/events/condition.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/interaction/Interaction.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/interaction/Modify.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/interaction/Pointer.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/interaction/Property.js"],"sourcesContent":["/**\n * @module ol/MapBrowserEventType\n */\nimport EventType from './events/EventType.js';\n\n/**\n * Constants for event names.\n * @enum {string}\n */\nexport default {\n  /**\n   * A true single click with no dragging and no double click. Note that this\n   * event is delayed by 250 ms to ensure that it is not a double click.\n   * @event module:ol/MapBrowserEvent~MapBrowserEvent#singleclick\n   * @api\n   */\n  SINGLECLICK: 'singleclick',\n\n  /**\n   * A click with no dragging. A double click will fire two of this.\n   * @event module:ol/MapBrowserEvent~MapBrowserEvent#click\n   * @api\n   */\n  CLICK: EventType.CLICK,\n\n  /**\n   * A true double click, with no dragging.\n   * @event module:ol/MapBrowserEvent~MapBrowserEvent#dblclick\n   * @api\n   */\n  DBLCLICK: EventType.DBLCLICK,\n\n  /**\n   * Triggered when a pointer is dragged.\n   * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointerdrag\n   * @api\n   */\n  POINTERDRAG: 'pointerdrag',\n\n  /**\n   * Triggered when a pointer is moved. Note that on touch devices this is\n   * triggered when the map is panned, so is not the same as mousemove.\n   * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointermove\n   * @api\n   */\n  POINTERMOVE: 'pointermove',\n\n  POINTERDOWN: 'pointerdown',\n  POINTERUP: 'pointerup',\n  POINTEROVER: 'pointerover',\n  POINTEROUT: 'pointerout',\n  POINTERENTER: 'pointerenter',\n  POINTERLEAVE: 'pointerleave',\n  POINTERCANCEL: 'pointercancel',\n};\n\n/***\n * @typedef {'singleclick'|'click'|'dblclick'|'pointerdrag'|'pointermove'} Types\n */\n","/**\n * @module ol/events/condition\n */\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport {FALSE, TRUE} from '../functions.js';\nimport {MAC, WEBKIT} from '../has.js';\n\n/**\n * A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * `{boolean}`. If the condition is met, true should be returned.\n *\n * @typedef {function(this: ?, import(\"../MapBrowserEvent.js\").default): boolean} Condition\n */\n\n/**\n * Creates a condition function that passes when all provided conditions pass.\n * @param {...Condition} var_args Conditions to check.\n * @return {Condition} Condition function.\n */\nexport function all(var_args) {\n  const conditions = arguments;\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @return {boolean} All conditions passed.\n   */\n  return function (event) {\n    let pass = true;\n    for (let i = 0, ii = conditions.length; i < ii; ++i) {\n      pass = pass && conditions[i](event);\n      if (!pass) {\n        break;\n      }\n    }\n    return pass;\n  };\n}\n\n/**\n * Return `true` if only the alt-key is pressed, `false` otherwise (e.g. when\n * additionally the shift-key is pressed).\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the alt key is pressed.\n * @api\n */\nexport const altKeyOnly = function (mapBrowserEvent) {\n  const originalEvent = mapBrowserEvent.originalEvent;\n  return (\n    originalEvent.altKey &&\n    !(originalEvent.metaKey || originalEvent.ctrlKey) &&\n    !originalEvent.shiftKey\n  );\n};\n\n/**\n * Return `true` if only the alt-key and shift-key is pressed, `false` otherwise\n * (e.g. when additionally the platform-modifier-key is pressed).\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the alt and shift keys are pressed.\n * @api\n */\nexport const altShiftKeysOnly = function (mapBrowserEvent) {\n  const originalEvent = mapBrowserEvent.originalEvent;\n  return (\n    originalEvent.altKey &&\n    !(originalEvent.metaKey || originalEvent.ctrlKey) &&\n    originalEvent.shiftKey\n  );\n};\n\n/**\n * Return `true` if the map has the focus. This condition requires a map target\n * element with a `tabindex` attribute, e.g. `<div id=\"map\" tabindex=\"1\">`.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} event Map browser event.\n * @return {boolean} The map has the focus.\n * @api\n */\nexport const focus = function (event) {\n  const targetElement = event.map.getTargetElement();\n  const rootNode = targetElement.getRootNode();\n  const activeElement = event.map.getOwnerDocument().activeElement;\n\n  return rootNode instanceof ShadowRoot\n    ? rootNode.host.contains(activeElement)\n    : targetElement.contains(activeElement);\n};\n\n/**\n * Return `true` if the map has the focus or no 'tabindex' attribute set.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} event Map browser event.\n * @return {boolean} The map container has the focus or no 'tabindex' attribute.\n */\nexport const focusWithTabindex = function (event) {\n  const targetElement = event.map.getTargetElement();\n  const rootNode = targetElement.getRootNode();\n  const tabIndexCandidate =\n    rootNode instanceof ShadowRoot ? rootNode.host : targetElement;\n\n  return tabIndexCandidate.hasAttribute('tabindex') ? focus(event) : true;\n};\n\n/**\n * Return always true.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True.\n * @api\n */\nexport const always = TRUE;\n\n/**\n * Return `true` if the event is a `click` event, `false` otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event is a map `click` event.\n * @api\n */\nexport const click = function (mapBrowserEvent) {\n  return mapBrowserEvent.type == MapBrowserEventType.CLICK;\n};\n\n/**\n * Return `true` if the event has an \"action\"-producing mouse button.\n *\n * By definition, this includes left-click on windows/linux, and left-click\n * without the ctrl key on Macs.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} The result.\n */\nexport const mouseActionButton = function (mapBrowserEvent) {\n  const originalEvent = mapBrowserEvent.originalEvent;\n  return (\n    'pointerId' in originalEvent &&\n    originalEvent.button == 0 &&\n    !(WEBKIT && MAC && originalEvent.ctrlKey)\n  );\n};\n\n/**\n * Return always false.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} False.\n * @api\n */\nexport const never = FALSE;\n\n/**\n * Return `true` if the browser event is a `pointermove` event, `false`\n * otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the browser event is a `pointermove` event.\n * @api\n */\nexport const pointerMove = function (mapBrowserEvent) {\n  return mapBrowserEvent.type == 'pointermove';\n};\n\n/**\n * Return `true` if the event is a map `singleclick` event, `false` otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event is a map `singleclick` event.\n * @api\n */\nexport const singleClick = function (mapBrowserEvent) {\n  return mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK;\n};\n\n/**\n * Return `true` if the event is a map `dblclick` event, `false` otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event is a map `dblclick` event.\n * @api\n */\nexport const doubleClick = function (mapBrowserEvent) {\n  return mapBrowserEvent.type == MapBrowserEventType.DBLCLICK;\n};\n\n/**\n * Return `true` if no modifier key (alt-, shift- or platform-modifier-key) is\n * pressed.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True only if there no modifier keys are pressed.\n * @api\n */\nexport const noModifierKeys = function (mapBrowserEvent) {\n  const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (\n    mapBrowserEvent.originalEvent\n  );\n  return (\n    !originalEvent.altKey &&\n    !(originalEvent.metaKey || originalEvent.ctrlKey) &&\n    !originalEvent.shiftKey\n  );\n};\n\n/**\n * Return `true` if only the platform-modifier-key (the meta-key on Mac,\n * ctrl-key otherwise) is pressed, `false` otherwise (e.g. when additionally\n * the shift-key is pressed).\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the platform modifier key is pressed.\n * @api\n */\nexport const platformModifierKeyOnly = function (mapBrowserEvent) {\n  const originalEvent = mapBrowserEvent.originalEvent;\n  return (\n    !originalEvent.altKey &&\n    (MAC ? originalEvent.metaKey : originalEvent.ctrlKey) &&\n    !originalEvent.shiftKey\n  );\n};\n\n/**\n * Return `true` if the platform-modifier-key (the meta-key on Mac,\n * ctrl-key otherwise) is pressed.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the platform modifier key is pressed.\n * @api\n */\nexport const platformModifierKey = function (mapBrowserEvent) {\n  const originalEvent = mapBrowserEvent.originalEvent;\n  return MAC ? originalEvent.metaKey : originalEvent.ctrlKey;\n};\n\n/**\n * Return `true` if only the shift-key is pressed, `false` otherwise (e.g. when\n * additionally the alt-key is pressed).\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the shift key is pressed.\n * @api\n */\nexport const shiftKeyOnly = function (mapBrowserEvent) {\n  const originalEvent = mapBrowserEvent.originalEvent;\n  return (\n    !originalEvent.altKey &&\n    !(originalEvent.metaKey || originalEvent.ctrlKey) &&\n    originalEvent.shiftKey\n  );\n};\n\n/**\n * Return `true` if the target element is not editable, i.e. not an `input`,\n * `select`, or `textarea` element and no `contenteditable` attribute is\n * set or inherited, `false` otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True only if the target element is not editable.\n * @api\n */\nexport const targetNotEditable = function (mapBrowserEvent) {\n  const originalEvent = mapBrowserEvent.originalEvent;\n  const tagName = /** @type {Element} */ (originalEvent.target).tagName;\n  return (\n    tagName !== 'INPUT' &&\n    tagName !== 'SELECT' &&\n    tagName !== 'TEXTAREA' &&\n    // `isContentEditable` is only available on `HTMLElement`, but it may also be a\n    // different type like `SVGElement`.\n    // @ts-ignore\n    !originalEvent.target.isContentEditable\n  );\n};\n\n/**\n * Return `true` if the event originates from a mouse device.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a mouse device.\n * @api\n */\nexport const mouseOnly = function (mapBrowserEvent) {\n  const pointerEvent = mapBrowserEvent.originalEvent;\n  // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\n  return 'pointerId' in pointerEvent && pointerEvent.pointerType == 'mouse';\n};\n\n/**\n * Return `true` if the event originates from a touchable device.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a touchable device.\n * @api\n */\nexport const touchOnly = function (mapBrowserEvent) {\n  const pointerEvt = mapBrowserEvent.originalEvent;\n  // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\n  return 'pointerId' in pointerEvt && pointerEvt.pointerType === 'touch';\n};\n\n/**\n * Return `true` if the event originates from a digital pen.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a digital pen.\n * @api\n */\nexport const penOnly = function (mapBrowserEvent) {\n  const pointerEvt = mapBrowserEvent.originalEvent;\n  // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\n  return 'pointerId' in pointerEvt && pointerEvt.pointerType === 'pen';\n};\n\n/**\n * Return `true` if the event originates from a primary pointer in\n * contact with the surface or if the left mouse button is pressed.\n * See https://www.w3.org/TR/pointerevents/#button-states.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a primary pointer.\n * @api\n */\nexport const primaryAction = function (mapBrowserEvent) {\n  const pointerEvent = mapBrowserEvent.originalEvent;\n  return (\n    'pointerId' in pointerEvent &&\n    pointerEvent.isPrimary &&\n    pointerEvent.button === 0\n  );\n};\n","/**\n * @module ol/interaction/Interaction\n */\nimport BaseObject from '../Object.js';\nimport {easeOut, linear} from '../easing.js';\nimport InteractionProperty from './Property.js';\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active', Return>} InteractionOnSignature\n */\n\n/**\n * Object literal with config options for interactions.\n * @typedef {Object} InteractionOptions\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleEvent]\n * Method called by the map to notify the interaction that a browser event was\n * dispatched to the map. If the function returns a falsy value, propagation of\n * the event to other interactions in the map's interactions chain will be\n * prevented (this includes functions with no explicit return). The interactions\n * are traversed in reverse order of the interactions collection of the map.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * User actions that change the state of the map. Some are similar to controls,\n * but are not associated with a DOM element.\n * For example, {@link module:ol/interaction/KeyboardZoom~KeyboardZoom} is\n * functionally the same as {@link module:ol/control/Zoom~Zoom}, but triggered\n * by a keyboard event not a button element event.\n * Although interactions do not have a DOM element, some of them do render\n * vectors and so are visible on the screen.\n * @api\n */\nclass Interaction extends BaseObject {\n  /**\n   * @param {InteractionOptions} [options] Options.\n   */\n  constructor(options) {\n    super();\n\n    /***\n     * @type {InteractionOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {InteractionOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {InteractionOnSignature<void>}\n     */\n    this.un;\n\n    if (options && options.handleEvent) {\n      this.handleEvent = options.handleEvent;\n    }\n\n    /**\n     * @private\n     * @type {import(\"../Map.js\").default|null}\n     */\n    this.map_ = null;\n\n    this.setActive(true);\n  }\n\n  /**\n   * Return whether the interaction is currently active.\n   * @return {boolean} `true` if the interaction is active, `false` otherwise.\n   * @observable\n   * @api\n   */\n  getActive() {\n    return /** @type {boolean} */ (this.get(InteractionProperty.ACTIVE));\n  }\n\n  /**\n   * Get the map associated with this interaction.\n   * @return {import(\"../Map.js\").default|null} Map.\n   * @api\n   */\n  getMap() {\n    return this.map_;\n  }\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event}.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @api\n   */\n  handleEvent(mapBrowserEvent) {\n    return true;\n  }\n\n  /**\n   * Activate or deactivate the interaction.\n   * @param {boolean} active Active.\n   * @observable\n   * @api\n   */\n  setActive(active) {\n    this.set(InteractionProperty.ACTIVE, active);\n  }\n\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   */\n  setMap(map) {\n    this.map_ = map;\n  }\n}\n\n/**\n * @param {import(\"../View.js\").default} view View.\n * @param {import(\"../coordinate.js\").Coordinate} delta Delta.\n * @param {number} [duration] Duration.\n */\nexport function pan(view, delta, duration) {\n  const currentCenter = view.getCenterInternal();\n  if (currentCenter) {\n    const center = [currentCenter[0] + delta[0], currentCenter[1] + delta[1]];\n    view.animateInternal({\n      duration: duration !== undefined ? duration : 250,\n      easing: linear,\n      center: view.getConstrainedCenter(center),\n    });\n  }\n}\n\n/**\n * @param {import(\"../View.js\").default} view View.\n * @param {number} delta Delta from previous zoom level.\n * @param {import(\"../coordinate.js\").Coordinate} [anchor] Anchor coordinate in the user projection.\n * @param {number} [duration] Duration.\n */\nexport function zoomByDelta(view, delta, anchor, duration) {\n  const currentZoom = view.getZoom();\n\n  if (currentZoom === undefined) {\n    return;\n  }\n\n  const newZoom = view.getConstrainedZoom(currentZoom + delta);\n  const newResolution = view.getResolutionForZoom(newZoom);\n\n  if (view.getAnimating()) {\n    view.cancelAnimations();\n  }\n  view.animate({\n    resolution: newResolution,\n    anchor: anchor,\n    duration: duration !== undefined ? duration : 250,\n    easing: easeOut,\n  });\n}\n\nexport default Interaction;\n","/**\n * @module ol/interaction/Modify\n */\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport Feature from '../Feature.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport {equals} from '../array.js';\nimport {\n  closestOnSegment,\n  distance as coordinateDistance,\n  equals as coordinatesEqual,\n  squaredDistance as squaredCoordinateDistance,\n  squaredDistanceToSegment,\n} from '../coordinate.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport {\n  altKeyOnly,\n  always,\n  primaryAction,\n  singleClick,\n} from '../events/condition.js';\nimport {\n  boundingExtent,\n  buffer as bufferExtent,\n  createOrUpdateFromCoordinate as createExtent,\n} from '../extent.js';\nimport Point from '../geom/Point.js';\nimport {fromCircle} from '../geom/Polygon.js';\nimport VectorLayer from '../layer/Vector.js';\nimport {\n  fromUserCoordinate,\n  fromUserExtent,\n  getUserProjection,\n  toUserCoordinate,\n  toUserExtent,\n} from '../proj.js';\nimport VectorSource from '../source/Vector.js';\nimport VectorEventType from '../source/VectorEventType.js';\nimport RBush from '../structs/RBush.js';\nimport {createEditingStyle} from '../style/Style.js';\nimport {getUid} from '../util.js';\nimport PointerInteraction from './Pointer.js';\n\n/**\n * The segment index assigned to a circle's center when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\nconst CIRCLE_CENTER_INDEX = 0;\n\n/**\n * The segment index assigned to a circle's circumference when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\nconst CIRCLE_CIRCUMFERENCE_INDEX = 1;\n\nconst tempExtent = [0, 0, 0, 0];\nconst tempSegment = [];\n\n/**\n * @enum {string}\n */\nconst ModifyEventType = {\n  /**\n   * Triggered upon feature modification start\n   * @event ModifyEvent#modifystart\n   * @api\n   */\n  MODIFYSTART: 'modifystart',\n  /**\n   * Triggered upon feature modification end\n   * @event ModifyEvent#modifyend\n   * @api\n   */\n  MODIFYEND: 'modifyend',\n};\n\n/**\n * @typedef {Object} SegmentData\n * @property {Array<number>} [depth] Depth.\n * @property {Feature} feature Feature.\n * @property {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n * @property {number} [index] Index.\n * @property {Array<Array<number>>} segment Segment.\n * @property {Array<SegmentData>} [featureSegments] FeatureSegments.\n */\n\n/**\n * @typedef {[SegmentData, number]} DragSegment\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event will be considered to add or move a\n * vertex to the sketch. Default is\n * {@link module:ol/events/condition.primaryAction}.\n * @property {import(\"../events/condition.js\").Condition} [deleteCondition] A function\n * that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. By default,\n * {@link module:ol/events/condition.singleClick} with\n * {@link module:ol/events/condition.altKeyOnly} results in a vertex deletion.\n * @property {import(\"../events/condition.js\").Condition} [insertVertexCondition] A\n * function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether a new vertex should be added to the sketch\n * features. Default is {@link module:ol/events/condition.always}.\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the\n * pointer close enough to a segment or vertex for editing.\n * @property {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike} [style]\n * Style used for the modification point or vertex. For linestrings and polygons, this will\n * be the affected vertex, for circles a point along the circle, and for points the actual\n * point. If not configured, the default edit style is used (see {@link module:ol/style/Style~Style}).\n * When using a style function, the point feature passed to the function will have an `existing` property -\n * indicating whether there is an existing vertex underneath or not, a `features`\n * property - an array whose entries are the features that are being modified, and a `geometries`\n * property - an array whose entries are the geometries that are being modified. Both arrays are\n * in the same order. The `geometries` are only useful when modifying geometry collections, where\n * the geometry will be the particular geometry from the collection that is being modified.\n * @property {VectorSource} [source] The vector source with\n * features to modify.  If a vector source is not provided, a feature collection\n * must be provided with the `features` option.\n * @property {boolean|import(\"../layer/BaseVector\").default} [hitDetection] When configured, point\n * features will be considered for modification based on their visual appearance, instead of being within\n * the `pixelTolerance` from the pointer location. When a {@link module:ol/layer/BaseVector~BaseVectorLayer} is\n * provided, only the rendered representation of the features on that layer will be considered.\n * @property {Collection<Feature>} [features]\n * The features the interaction works on.  If a feature collection is not\n * provided, a vector source must be provided with the `source` option.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n * @property {boolean} [snapToPointer=!hitDetection] The vertex, point or segment being modified snaps to the\n * pointer coordinate when clicked within the `pixelTolerance`.\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Modify~Modify} instances are\n * instances of this type.\n */\nexport class ModifyEvent extends Event {\n  /**\n   * @param {ModifyEventType} type Type.\n   * @param {Collection<Feature>} features\n   * The features modified.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent\n   * Associated {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n   */\n  constructor(type, features, mapBrowserEvent) {\n    super(type);\n\n    /**\n     * The features being modified.\n     * @type {Collection<Feature>}\n     * @api\n     */\n    this.features = features;\n\n    /**\n     * Associated {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n     * @type {import(\"../MapBrowserEvent.js\").default}\n     * @api\n     */\n    this.mapBrowserEvent = mapBrowserEvent;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<'modifyend'|'modifystart', ModifyEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active'|'modifyend'|'modifystart', Return>} ModifyOnSignature\n */\n\n/**\n * @classdesc\n * Interaction for modifying feature geometries.  To modify features that have\n * been added to an existing source, construct the modify interaction with the\n * `source` option.  If you want to modify features in a collection (for example,\n * the collection used by a select interaction), construct the interaction with\n * the `features` option.  The interaction must be constructed with either a\n * `source` or `features` option.\n *\n * Cartesian distance from the pointer is used to determine the features that\n * will be modified. This means that geometries will only be considered for\n * modification when they are within the configured `pixelTolerance`. For point\n * geometries, the `hitDetection` option can be used to match their visual\n * appearance.\n *\n * By default, the interaction will allow deletion of vertices when the `alt`\n * key is pressed.  To configure the interaction with a different condition\n * for deletion, use the `deleteCondition` option.\n * @fires ModifyEvent\n * @api\n */\nclass Modify extends PointerInteraction {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    super(/** @type {import(\"./Pointer.js\").Options} */ (options));\n\n    /***\n     * @type {ModifyOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {ModifyOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {ModifyOnSignature<void>}\n     */\n    this.un;\n\n    /** @private */\n    this.boundHandleFeatureChange_ = this.handleFeatureChange_.bind(this);\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : primaryAction;\n\n    /**\n     * @private\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Browser event.\n     * @return {boolean} Combined condition result.\n     */\n    this.defaultDeleteCondition_ = function (mapBrowserEvent) {\n      return altKeyOnly(mapBrowserEvent) && singleClick(mapBrowserEvent);\n    };\n\n    /**\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n    this.deleteCondition_ = options.deleteCondition\n      ? options.deleteCondition\n      : this.defaultDeleteCondition_;\n\n    /**\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n    this.insertVertexCondition_ = options.insertVertexCondition\n      ? options.insertVertexCondition\n      : always;\n\n    /**\n     * Editing vertex.\n     * @type {Feature<Point>}\n     * @private\n     */\n    this.vertexFeature_ = null;\n\n    /**\n     * Segments intersecting {@link this.vertexFeature_} by segment uid.\n     * @type {Object<string, boolean>}\n     * @private\n     */\n    this.vertexSegments_ = null;\n\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     * @private\n     */\n    this.lastPixel_ = [0, 0];\n\n    /**\n     * Tracks if the next `singleclick` event should be ignored to prevent\n     * accidental deletion right after vertex creation.\n     * @type {boolean}\n     * @private\n     */\n    this.ignoreNextSingleClick_ = false;\n\n    /**\n     * @type {Collection<Feature>}\n     * @private\n     */\n    this.featuresBeingModified_ = null;\n\n    /**\n     * Segment RTree for each layer\n     * @type {RBush<SegmentData>}\n     * @private\n     */\n    this.rBush_ = new RBush();\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.pixelTolerance_ =\n      options.pixelTolerance !== undefined ? options.pixelTolerance : 10;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.snappedToVertex_ = false;\n\n    /**\n     * Indicate whether the interaction is currently changing a feature's\n     * coordinates.\n     * @type {boolean}\n     * @private\n     */\n    this.changingFeature_ = false;\n\n    /**\n     * @type {Array<DragSegment>}\n     * @private\n     */\n    this.dragSegments_ = [];\n\n    /**\n     * Draw overlay where sketch features are drawn.\n     * @type {VectorLayer}\n     * @private\n     */\n    this.overlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!options.wrapX,\n      }),\n      style: options.style ? options.style : getDefaultStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true,\n    });\n\n    /**\n     * @const\n     * @private\n     * @type {!Object<string, function(Feature, import(\"../geom/Geometry.js\").default): void>}\n     */\n    this.SEGMENT_WRITERS_ = {\n      'Point': this.writePointGeometry_.bind(this),\n      'LineString': this.writeLineStringGeometry_.bind(this),\n      'LinearRing': this.writeLineStringGeometry_.bind(this),\n      'Polygon': this.writePolygonGeometry_.bind(this),\n      'MultiPoint': this.writeMultiPointGeometry_.bind(this),\n      'MultiLineString': this.writeMultiLineStringGeometry_.bind(this),\n      'MultiPolygon': this.writeMultiPolygonGeometry_.bind(this),\n      'Circle': this.writeCircleGeometry_.bind(this),\n      'GeometryCollection': this.writeGeometryCollectionGeometry_.bind(this),\n    };\n\n    /**\n     * @type {VectorSource}\n     * @private\n     */\n    this.source_ = null;\n\n    /**\n     * @type {boolean|import(\"../layer/BaseVector\").default}\n     * @private\n     */\n    this.hitDetection_ = null;\n\n    /** @type {Collection<Feature>} */\n    let features;\n    if (options.features) {\n      features = options.features;\n    } else if (options.source) {\n      this.source_ = options.source;\n      features = new Collection(this.source_.getFeatures());\n      this.source_.addEventListener(\n        VectorEventType.ADDFEATURE,\n        this.handleSourceAdd_.bind(this),\n      );\n      this.source_.addEventListener(\n        VectorEventType.REMOVEFEATURE,\n        this.handleSourceRemove_.bind(this),\n      );\n    }\n    if (!features) {\n      throw new Error(\n        'The modify interaction requires features, a source or a layer',\n      );\n    }\n    if (options.hitDetection) {\n      this.hitDetection_ = options.hitDetection;\n    }\n\n    /**\n     * @type {Collection<Feature>}\n     * @private\n     */\n    this.features_ = features;\n\n    this.features_.forEach(this.addFeature_.bind(this));\n    this.features_.addEventListener(\n      CollectionEventType.ADD,\n      this.handleFeatureAdd_.bind(this),\n    );\n    this.features_.addEventListener(\n      CollectionEventType.REMOVE,\n      this.handleFeatureRemove_.bind(this),\n    );\n\n    /**\n     * @type {import(\"../MapBrowserEvent.js\").default}\n     * @private\n     */\n    this.lastPointerEvent_ = null;\n\n    /**\n     * Delta (x, y in map units) between matched rtree vertex and pointer vertex.\n     * @type {Array<number>}\n     * @private\n     */\n    this.delta_ = [0, 0];\n\n    /**\n     * @private\n     */\n    this.snapToPointer_ =\n      options.snapToPointer === undefined\n        ? !this.hitDetection_\n        : options.snapToPointer;\n  }\n\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n  addFeature_(feature) {\n    const geometry = feature.getGeometry();\n    if (geometry) {\n      const writer = this.SEGMENT_WRITERS_[geometry.getType()];\n      if (writer) {\n        writer(feature, geometry);\n      }\n    }\n    const map = this.getMap();\n    if (map && map.isRendered() && this.getActive()) {\n      this.handlePointerAtPixel_(map.getCoordinateFromPixel(this.lastPixel_));\n    }\n    feature.addEventListener(EventType.CHANGE, this.boundHandleFeatureChange_);\n  }\n\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Map browser event.\n   * @param {Array<SegmentData>} segments The segments subject to modification.\n   * @private\n   */\n  willModifyFeatures_(evt, segments) {\n    if (!this.featuresBeingModified_) {\n      this.featuresBeingModified_ = new Collection();\n      const features = this.featuresBeingModified_.getArray();\n      for (let i = 0, ii = segments.length; i < ii; ++i) {\n        const feature = segments[i].feature;\n        if (feature && !features.includes(feature)) {\n          this.featuresBeingModified_.push(feature);\n        }\n      }\n      if (this.featuresBeingModified_.getLength() === 0) {\n        this.featuresBeingModified_ = null;\n      } else {\n        this.dispatchEvent(\n          new ModifyEvent(\n            ModifyEventType.MODIFYSTART,\n            this.featuresBeingModified_,\n            evt,\n          ),\n        );\n      }\n    }\n  }\n\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n  removeFeature_(feature) {\n    this.removeFeatureSegmentData_(feature);\n    // Remove the vertex feature if the collection of candidate features is empty.\n    if (this.vertexFeature_ && this.features_.getLength() === 0) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n    feature.removeEventListener(\n      EventType.CHANGE,\n      this.boundHandleFeatureChange_,\n    );\n  }\n\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n  removeFeatureSegmentData_(feature) {\n    const rBush = this.rBush_;\n    /** @type {Array<SegmentData>} */\n    const nodesToRemove = [];\n    rBush.forEach(\n      /**\n       * @param {SegmentData} node RTree node.\n       */\n      function (node) {\n        if (feature === node.feature) {\n          nodesToRemove.push(node);\n        }\n      },\n    );\n    for (let i = nodesToRemove.length - 1; i >= 0; --i) {\n      const nodeToRemove = nodesToRemove[i];\n      for (let j = this.dragSegments_.length - 1; j >= 0; --j) {\n        if (this.dragSegments_[j][0] === nodeToRemove) {\n          this.dragSegments_.splice(j, 1);\n        }\n      }\n      rBush.remove(nodeToRemove);\n    }\n  }\n\n  /**\n   * Activate or deactivate the interaction.\n   * @param {boolean} active Active.\n   * @observable\n   * @api\n   * @override\n   */\n  setActive(active) {\n    if (this.vertexFeature_ && !active) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n    super.setActive(active);\n  }\n\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default} map Map.\n   * @override\n   */\n  setMap(map) {\n    this.overlay_.setMap(map);\n    super.setMap(map);\n  }\n\n  /**\n   * Get the overlay layer that this interaction renders the modification point or vertex to.\n   * @return {VectorLayer} Overlay layer.\n   * @api\n   */\n  getOverlay() {\n    return this.overlay_;\n  }\n\n  /**\n   * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  handleSourceAdd_(event) {\n    if (event.feature) {\n      this.features_.push(event.feature);\n    }\n  }\n\n  /**\n   * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  handleSourceRemove_(event) {\n    if (event.feature) {\n      this.features_.remove(event.feature);\n    }\n  }\n\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent<Feature>} evt Event.\n   * @private\n   */\n  handleFeatureAdd_(evt) {\n    this.addFeature_(evt.element);\n  }\n\n  /**\n   * @param {import(\"../events/Event.js\").default} evt Event.\n   * @private\n   */\n  handleFeatureChange_(evt) {\n    if (!this.changingFeature_) {\n      const feature = /** @type {Feature} */ (evt.target);\n      this.removeFeature_(feature);\n      this.addFeature_(feature);\n    }\n  }\n\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent<Feature>} evt Event.\n   * @private\n   */\n  handleFeatureRemove_(evt) {\n    this.removeFeature_(evt.element);\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {Point} geometry Geometry.\n   * @private\n   */\n  writePointGeometry_(feature, geometry) {\n    const coordinates = geometry.getCoordinates();\n\n    /** @type {SegmentData} */\n    const segmentData = {\n      feature: feature,\n      geometry: geometry,\n      segment: [coordinates, coordinates],\n    };\n\n    this.rBush_.insert(geometry.getExtent(), segmentData);\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry Geometry.\n   * @private\n   */\n  writeMultiPointGeometry_(feature, geometry) {\n    const points = geometry.getCoordinates();\n    for (let i = 0, ii = points.length; i < ii; ++i) {\n      const coordinates = points[i];\n\n      /** @type {SegmentData} */\n      const segmentData = {\n        feature: feature,\n        geometry: geometry,\n        depth: [i],\n        index: i,\n        segment: [coordinates, coordinates],\n      };\n\n      this.rBush_.insert(geometry.getExtent(), segmentData);\n    }\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/LineString.js\").default} geometry Geometry.\n   * @private\n   */\n  writeLineStringGeometry_(feature, geometry) {\n    const coordinates = geometry.getCoordinates();\n    for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n      const segment = coordinates.slice(i, i + 2);\n\n      /** @type {SegmentData} */\n      const segmentData = {\n        feature: feature,\n        geometry: geometry,\n        index: i,\n        segment: segment,\n      };\n\n      this.rBush_.insert(boundingExtent(segment), segmentData);\n    }\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiLineString.js\").default} geometry Geometry.\n   * @private\n   */\n  writeMultiLineStringGeometry_(feature, geometry) {\n    const lines = geometry.getCoordinates();\n    for (let j = 0, jj = lines.length; j < jj; ++j) {\n      const coordinates = lines[j];\n      for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        const segment = coordinates.slice(i, i + 2);\n\n        /** @type {SegmentData} */\n        const segmentData = {\n          feature: feature,\n          geometry: geometry,\n          depth: [j],\n          index: i,\n          segment: segment,\n        };\n\n        this.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/Polygon.js\").default} geometry Geometry.\n   * @private\n   */\n  writePolygonGeometry_(feature, geometry) {\n    const rings = geometry.getCoordinates();\n    for (let j = 0, jj = rings.length; j < jj; ++j) {\n      const coordinates = rings[j];\n      for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        const segment = coordinates.slice(i, i + 2);\n\n        /** @type {SegmentData} */\n        const segmentData = {\n          feature: feature,\n          geometry: geometry,\n          depth: [j],\n          index: i,\n          segment: segment,\n        };\n\n        this.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n   * @private\n   */\n  writeMultiPolygonGeometry_(feature, geometry) {\n    const polygons = geometry.getCoordinates();\n    for (let k = 0, kk = polygons.length; k < kk; ++k) {\n      const rings = polygons[k];\n      for (let j = 0, jj = rings.length; j < jj; ++j) {\n        const coordinates = rings[j];\n        for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n          const segment = coordinates.slice(i, i + 2);\n\n          /** @type {SegmentData} */\n          const segmentData = {\n            feature: feature,\n            geometry: geometry,\n            depth: [j, k],\n            index: i,\n            segment: segment,\n          };\n\n          this.rBush_.insert(boundingExtent(segment), segmentData);\n        }\n      }\n    }\n  }\n\n  /**\n   * We convert a circle into two segments.  The segment at index\n   * {@link CIRCLE_CENTER_INDEX} is the\n   * circle's center (a point).  The segment at index\n   * {@link CIRCLE_CIRCUMFERENCE_INDEX} is\n   * the circumference, and is not a line segment.\n   *\n   * @param {Feature} feature Feature.\n   * @param {import(\"../geom/Circle.js\").default} geometry Geometry.\n   * @private\n   */\n  writeCircleGeometry_(feature, geometry) {\n    const coordinates = geometry.getCenter();\n\n    /** @type {SegmentData} */\n    const centerSegmentData = {\n      feature: feature,\n      geometry: geometry,\n      index: CIRCLE_CENTER_INDEX,\n      segment: [coordinates, coordinates],\n    };\n\n    /** @type {SegmentData} */\n    const circumferenceSegmentData = {\n      feature: feature,\n      geometry: geometry,\n      index: CIRCLE_CIRCUMFERENCE_INDEX,\n      segment: [coordinates, coordinates],\n    };\n\n    const featureSegments = [centerSegmentData, circumferenceSegmentData];\n    centerSegmentData.featureSegments = featureSegments;\n    circumferenceSegmentData.featureSegments = featureSegments;\n    this.rBush_.insert(createExtent(coordinates), centerSegmentData);\n    let circleGeometry = /** @type {import(\"../geom/Geometry.js\").default} */ (\n      geometry\n    );\n    const userProjection = getUserProjection();\n    if (userProjection && this.getMap()) {\n      const projection = this.getMap().getView().getProjection();\n      circleGeometry = circleGeometry\n        .clone()\n        .transform(userProjection, projection);\n      circleGeometry = fromCircle(\n        /** @type {import(\"../geom/Circle.js\").default} */ (circleGeometry),\n      ).transform(projection, userProjection);\n    }\n    this.rBush_.insert(circleGeometry.getExtent(), circumferenceSegmentData);\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\n   * @private\n   */\n  writeGeometryCollectionGeometry_(feature, geometry) {\n    const geometries = geometry.getGeometriesArray();\n    for (let i = 0; i < geometries.length; ++i) {\n      const geometry = geometries[i];\n      const writer = this.SEGMENT_WRITERS_[geometry.getType()];\n      writer(feature, geometry);\n    }\n  }\n\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\n   * @param {Array<Feature>} features The features being modified.\n   * @param {Array<import(\"../geom/SimpleGeometry.js\").default>} geometries The geometries being modified.\n   * @param {boolean} existing The vertex represents an existing vertex.\n   * @return {Feature} Vertex feature.\n   * @private\n   */\n  createOrUpdateVertexFeature_(coordinates, features, geometries, existing) {\n    let vertexFeature = this.vertexFeature_;\n    if (!vertexFeature) {\n      vertexFeature = new Feature(new Point(coordinates));\n      this.vertexFeature_ = vertexFeature;\n      this.overlay_.getSource().addFeature(vertexFeature);\n    } else {\n      const geometry = vertexFeature.getGeometry();\n      geometry.setCoordinates(coordinates);\n    }\n    vertexFeature.set('features', features);\n    vertexFeature.set('geometries', geometries);\n    vertexFeature.set('existing', existing);\n    return vertexFeature;\n  }\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may modify the geometry.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @override\n   */\n  handleEvent(mapBrowserEvent) {\n    if (!mapBrowserEvent.originalEvent) {\n      return true;\n    }\n    this.lastPointerEvent_ = mapBrowserEvent;\n\n    let handled;\n    if (\n      !mapBrowserEvent.map.getView().getInteracting() &&\n      mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE &&\n      !this.handlingDownUpSequence\n    ) {\n      this.handlePointerMove_(mapBrowserEvent);\n    }\n    if (this.vertexFeature_ && this.deleteCondition_(mapBrowserEvent)) {\n      if (\n        mapBrowserEvent.type != MapBrowserEventType.SINGLECLICK ||\n        !this.ignoreNextSingleClick_\n      ) {\n        handled = this.removePoint();\n      } else {\n        handled = true;\n      }\n    }\n\n    if (mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK) {\n      this.ignoreNextSingleClick_ = false;\n    }\n\n    return super.handleEvent(mapBrowserEvent) && !handled;\n  }\n\n  findInsertVerticesAndUpdateDragSegments_(pixelCoordinate) {\n    this.handlePointerAtPixel_(pixelCoordinate);\n    this.dragSegments_.length = 0;\n    this.featuresBeingModified_ = null;\n    const vertexFeature = this.vertexFeature_;\n    if (!vertexFeature) {\n      return;\n    }\n\n    const projection = this.getMap().getView().getProjection();\n    const insertVertices = [];\n    const vertex = vertexFeature.getGeometry().getCoordinates();\n    const vertexExtent = boundingExtent([vertex]);\n    const segmentDataMatches = this.rBush_.getInExtent(vertexExtent);\n    const componentSegments = {};\n    segmentDataMatches.sort(compareIndexes);\n    for (let i = 0, ii = segmentDataMatches.length; i < ii; ++i) {\n      const segmentDataMatch = segmentDataMatches[i];\n      const segment = segmentDataMatch.segment;\n      let uid = getUid(segmentDataMatch.geometry);\n      const depth = segmentDataMatch.depth;\n      if (depth) {\n        uid += '-' + depth.join('-'); // separate feature components\n      }\n      if (!componentSegments[uid]) {\n        componentSegments[uid] = new Array(2);\n      }\n\n      if (\n        segmentDataMatch.geometry.getType() === 'Circle' &&\n        segmentDataMatch.index === CIRCLE_CIRCUMFERENCE_INDEX\n      ) {\n        const closestVertex = closestOnSegmentData(\n          pixelCoordinate,\n          segmentDataMatch,\n          projection,\n        );\n        if (\n          coordinatesEqual(closestVertex, vertex) &&\n          !componentSegments[uid][0]\n        ) {\n          this.dragSegments_.push([segmentDataMatch, 0]);\n          componentSegments[uid][0] = segmentDataMatch;\n        }\n        continue;\n      }\n\n      if (coordinatesEqual(segment[0], vertex) && !componentSegments[uid][0]) {\n        this.dragSegments_.push([segmentDataMatch, 0]);\n        componentSegments[uid][0] = segmentDataMatch;\n        continue;\n      }\n\n      if (coordinatesEqual(segment[1], vertex) && !componentSegments[uid][1]) {\n        if (\n          componentSegments[uid][0] &&\n          componentSegments[uid][0].index === 0\n        ) {\n          let coordinates = segmentDataMatch.geometry.getCoordinates();\n          switch (segmentDataMatch.geometry.getType()) {\n            // prevent dragging closed linestrings by the connecting node\n            case 'LineString':\n            case 'MultiLineString':\n              continue;\n            // if dragging the first vertex of a polygon, ensure the other segment\n            // belongs to the closing vertex of the linear ring\n            case 'MultiPolygon':\n              coordinates = coordinates[depth[1]];\n            /* falls through */\n            case 'Polygon':\n              if (segmentDataMatch.index !== coordinates[depth[0]].length - 2) {\n                continue;\n              }\n              break;\n            default:\n            // pass\n          }\n        }\n\n        this.dragSegments_.push([segmentDataMatch, 1]);\n        componentSegments[uid][1] = segmentDataMatch;\n        continue;\n      }\n\n      if (\n        getUid(segment) in this.vertexSegments_ &&\n        !componentSegments[uid][0] &&\n        !componentSegments[uid][1]\n      ) {\n        insertVertices.push(segmentDataMatch);\n      }\n    }\n\n    return insertVertices;\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @override\n   */\n  handleDragEvent(evt) {\n    this.ignoreNextSingleClick_ = false;\n    this.willModifyFeatures_(\n      evt,\n      this.dragSegments_.map(([segment]) => segment),\n    );\n\n    const vertex = [\n      evt.coordinate[0] + this.delta_[0],\n      evt.coordinate[1] + this.delta_[1],\n    ];\n    const features = [];\n    const geometries = [];\n    for (let i = 0, ii = this.dragSegments_.length; i < ii; ++i) {\n      const dragSegment = this.dragSegments_[i];\n      const segmentData = dragSegment[0];\n      const feature = segmentData.feature;\n      if (!features.includes(feature)) {\n        features.push(feature);\n      }\n      const geometry = segmentData.geometry;\n      if (!geometries.includes(geometry)) {\n        geometries.push(geometry);\n      }\n      const depth = segmentData.depth;\n      let coordinates;\n      const segment = segmentData.segment;\n      const index = dragSegment[1];\n\n      while (vertex.length < geometry.getStride()) {\n        vertex.push(segment[index][vertex.length]);\n      }\n\n      switch (geometry.getType()) {\n        case 'Point':\n          coordinates = vertex;\n          segment[0] = vertex;\n          segment[1] = vertex;\n          break;\n        case 'MultiPoint':\n          coordinates = geometry.getCoordinates();\n          coordinates[segmentData.index] = vertex;\n          segment[0] = vertex;\n          segment[1] = vertex;\n          break;\n        case 'LineString':\n          coordinates = geometry.getCoordinates();\n          coordinates[segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case 'MultiLineString':\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case 'Polygon':\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case 'MultiPolygon':\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[1]][depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case 'Circle':\n          const circle = /** @type {import(\"../geom/Circle.js\").default} */ (\n            geometry\n          );\n          segment[0] = vertex;\n          segment[1] = vertex;\n          if (segmentData.index === CIRCLE_CENTER_INDEX) {\n            this.changingFeature_ = true;\n            circle.setCenter(vertex);\n            this.changingFeature_ = false;\n          } else {\n            // We're dragging the circle's circumference:\n            this.changingFeature_ = true;\n            const projection = evt.map.getView().getProjection();\n            let radius = coordinateDistance(\n              fromUserCoordinate(circle.getCenter(), projection),\n              fromUserCoordinate(vertex, projection),\n            );\n            const userProjection = getUserProjection();\n            if (userProjection) {\n              const circleGeometry = circle\n                .clone()\n                .transform(userProjection, projection);\n              circleGeometry.setRadius(radius);\n              radius = circleGeometry\n                .transform(projection, userProjection)\n                .getRadius();\n            }\n            circle.setRadius(radius);\n            this.changingFeature_ = false;\n          }\n          break;\n        default:\n        // pass\n      }\n\n      if (coordinates) {\n        this.setGeometryCoordinates_(geometry, coordinates);\n      }\n    }\n    this.createOrUpdateVertexFeature_(vertex, features, geometries, true);\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @return {boolean} If the event was consumed.\n   * @override\n   */\n  handleDownEvent(evt) {\n    if (!this.condition_(evt)) {\n      return false;\n    }\n    const pixelCoordinate = evt.coordinate;\n    const insertVertices =\n      this.findInsertVerticesAndUpdateDragSegments_(pixelCoordinate);\n\n    if (insertVertices?.length && this.insertVertexCondition_(evt)) {\n      this.willModifyFeatures_(evt, insertVertices);\n\n      if (this.vertexFeature_) {\n        const vertex = this.vertexFeature_.getGeometry().getCoordinates();\n        for (let j = insertVertices.length - 1; j >= 0; --j) {\n          this.insertVertex_(insertVertices[j], vertex);\n        }\n        this.ignoreNextSingleClick_ = true;\n      }\n    }\n\n    return !!this.vertexFeature_;\n  }\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @return {boolean} If the event was consumed.\n   * @override\n   */\n  handleUpEvent(evt) {\n    for (let i = this.dragSegments_.length - 1; i >= 0; --i) {\n      const segmentData = this.dragSegments_[i][0];\n      const geometry = segmentData.geometry;\n      if (geometry.getType() === 'Circle') {\n        const circle = /** @type {import(\"../geom/Circle.js\").default} */ (\n          geometry\n        );\n        // Update a circle object in the R* bush:\n        const coordinates = circle.getCenter();\n        const centerSegmentData = segmentData.featureSegments[0];\n        const circumferenceSegmentData = segmentData.featureSegments[1];\n        centerSegmentData.segment[0] = coordinates;\n        centerSegmentData.segment[1] = coordinates;\n        circumferenceSegmentData.segment[0] = coordinates;\n        circumferenceSegmentData.segment[1] = coordinates;\n        this.rBush_.update(createExtent(coordinates), centerSegmentData);\n        /** @type {import(\"../geom/Circle.js\").default | import(\"../geom/Polygon.js\").default} */\n        let circleGeometry = circle;\n        const userProjection = getUserProjection();\n        if (userProjection) {\n          const projection = evt.map.getView().getProjection();\n          circleGeometry = circleGeometry\n            .clone()\n            .transform(userProjection, projection);\n          circleGeometry = fromCircle(circleGeometry).transform(\n            projection,\n            userProjection,\n          );\n        }\n        this.rBush_.update(\n          circleGeometry.getExtent(),\n          circumferenceSegmentData,\n        );\n      } else {\n        this.rBush_.update(boundingExtent(segmentData.segment), segmentData);\n      }\n    }\n    if (this.featuresBeingModified_) {\n      this.dispatchEvent(\n        new ModifyEvent(\n          ModifyEventType.MODIFYEND,\n          this.featuresBeingModified_,\n          evt,\n        ),\n      );\n      this.featuresBeingModified_ = null;\n    }\n    return false;\n  }\n\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @private\n   */\n  handlePointerMove_(evt) {\n    this.lastPixel_ = evt.pixel;\n    this.handlePointerAtPixel_(evt.coordinate);\n  }\n\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} pixelCoordinate The pixel Coordinate.\n   * @private\n   */\n  handlePointerAtPixel_(pixelCoordinate) {\n    const map = this.getMap();\n    const pixel = map.getPixelFromCoordinate(pixelCoordinate);\n    const projection = map.getView().getProjection();\n    const sortByDistance = function (a, b) {\n      return (\n        projectedDistanceToSegmentDataSquared(pixelCoordinate, a, projection) -\n        projectedDistanceToSegmentDataSquared(pixelCoordinate, b, projection)\n      );\n    };\n\n    /** @type {Array<SegmentData>|undefined} */\n    let nodes;\n    /** @type {Point|undefined} */\n    let hitPointGeometry;\n    if (this.hitDetection_) {\n      const layerFilter =\n        typeof this.hitDetection_ === 'object'\n          ? (layer) => layer === this.hitDetection_\n          : undefined;\n      map.forEachFeatureAtPixel(\n        pixel,\n        (feature, layer, geometry) => {\n          if (geometry && geometry.getType() === 'Point') {\n            geometry = new Point(\n              toUserCoordinate(geometry.getCoordinates(), projection),\n            );\n          }\n          const geom = geometry || feature.getGeometry();\n\n          if (\n            geom &&\n            geom.getType() === 'Point' &&\n            feature instanceof Feature &&\n            this.features_.getArray().includes(feature)\n          ) {\n            hitPointGeometry = /** @type {Point} */ (geom);\n            const coordinate = /** @type {Point} */ (feature.getGeometry())\n              .getFlatCoordinates()\n              .slice(0, 2);\n            nodes = [\n              {\n                feature,\n                geometry: hitPointGeometry,\n                segment: [coordinate, coordinate],\n              },\n            ];\n          }\n          return true;\n        },\n        {layerFilter},\n      );\n    }\n    if (!nodes) {\n      const viewExtent = fromUserExtent(\n        createExtent(pixelCoordinate, tempExtent),\n        projection,\n      );\n      const buffer = map.getView().getResolution() * this.pixelTolerance_;\n      const box = toUserExtent(\n        bufferExtent(viewExtent, buffer, tempExtent),\n        projection,\n      );\n      nodes = this.rBush_.getInExtent(box);\n    }\n\n    if (nodes && nodes.length > 0) {\n      const node = nodes.sort(sortByDistance)[0];\n      const closestSegment = node.segment;\n      let vertex = closestOnSegmentData(pixelCoordinate, node, projection);\n      const vertexPixel = map.getPixelFromCoordinate(vertex);\n      let dist = coordinateDistance(pixel, vertexPixel);\n      if (hitPointGeometry || dist <= this.pixelTolerance_) {\n        /** @type {Object<string, boolean>} */\n        const vertexSegments = {};\n        vertexSegments[getUid(closestSegment)] = true;\n\n        if (!this.snapToPointer_) {\n          this.delta_[0] = vertex[0] - pixelCoordinate[0];\n          this.delta_[1] = vertex[1] - pixelCoordinate[1];\n        }\n        if (\n          node.geometry.getType() === 'Circle' &&\n          node.index === CIRCLE_CIRCUMFERENCE_INDEX\n        ) {\n          this.snappedToVertex_ = true;\n          this.createOrUpdateVertexFeature_(\n            vertex,\n            [node.feature],\n            [node.geometry],\n            this.snappedToVertex_,\n          );\n        } else {\n          const pixel1 = map.getPixelFromCoordinate(closestSegment[0]);\n          const pixel2 = map.getPixelFromCoordinate(closestSegment[1]);\n          const squaredDist1 = squaredCoordinateDistance(vertexPixel, pixel1);\n          const squaredDist2 = squaredCoordinateDistance(vertexPixel, pixel2);\n          dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n          this.snappedToVertex_ = dist <= this.pixelTolerance_;\n          // Stop and cleanup overlay vertex feature if a segment was hit and new vertex creation is not allowed by the insertVertexCondition\n          if (\n            !this.snappedToVertex_ &&\n            !this.insertVertexCondition_(this.lastPointerEvent_)\n          ) {\n            if (this.vertexFeature_) {\n              this.overlay_.getSource().removeFeature(this.vertexFeature_);\n              this.vertexFeature_ = null;\n            }\n            return;\n          }\n          if (this.snappedToVertex_) {\n            vertex =\n              squaredDist1 > squaredDist2\n                ? closestSegment[1]\n                : closestSegment[0];\n          }\n          this.createOrUpdateVertexFeature_(\n            vertex,\n            [node.feature],\n            [node.geometry],\n            this.snappedToVertex_,\n          );\n          const geometries = {};\n          geometries[getUid(node.geometry)] = true;\n          for (let i = 1, ii = nodes.length; i < ii; ++i) {\n            const segment = nodes[i].segment;\n            if (\n              (coordinatesEqual(closestSegment[0], segment[0]) &&\n                coordinatesEqual(closestSegment[1], segment[1])) ||\n              (coordinatesEqual(closestSegment[0], segment[1]) &&\n                coordinatesEqual(closestSegment[1], segment[0]))\n            ) {\n              const geometryUid = getUid(nodes[i].geometry);\n              if (!(geometryUid in geometries)) {\n                geometries[geometryUid] = true;\n                vertexSegments[getUid(segment)] = true;\n              }\n            } else {\n              break;\n            }\n          }\n        }\n\n        this.vertexSegments_ = vertexSegments;\n        return;\n      }\n    }\n    if (this.vertexFeature_) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n  }\n\n  /**\n   * @param {SegmentData} segmentData Segment data.\n   * @param {import(\"../coordinate.js\").Coordinate} vertex Vertex.\n   * @return {boolean} A vertex was inserted.\n   * @private\n   */\n  insertVertex_(segmentData, vertex) {\n    const segment = segmentData.segment;\n    const feature = segmentData.feature;\n    const geometry = segmentData.geometry;\n    const depth = segmentData.depth;\n    const index = segmentData.index;\n    let coordinates;\n\n    while (vertex.length < geometry.getStride()) {\n      vertex.push(0);\n    }\n\n    switch (geometry.getType()) {\n      case 'MultiLineString':\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]].splice(index + 1, 0, vertex);\n        break;\n      case 'Polygon':\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]].splice(index + 1, 0, vertex);\n        break;\n      case 'MultiPolygon':\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[1]][depth[0]].splice(index + 1, 0, vertex);\n        break;\n      case 'LineString':\n        coordinates = geometry.getCoordinates();\n        coordinates.splice(index + 1, 0, vertex);\n        break;\n      default:\n        return false;\n    }\n\n    this.setGeometryCoordinates_(geometry, coordinates);\n    const rTree = this.rBush_;\n    rTree.remove(segmentData);\n    this.updateSegmentIndices_(geometry, index, depth, 1);\n\n    /** @type {SegmentData} */\n    const newSegmentData = {\n      segment: [segment[0], vertex],\n      feature: feature,\n      geometry: geometry,\n      depth: depth,\n      index: index,\n    };\n\n    rTree.insert(boundingExtent(newSegmentData.segment), newSegmentData);\n    this.dragSegments_.push([newSegmentData, 1]);\n\n    /** @type {SegmentData} */\n    const newSegmentData2 = {\n      segment: [vertex, segment[1]],\n      feature: feature,\n      geometry: geometry,\n      depth: depth,\n      index: index + 1,\n    };\n\n    rTree.insert(boundingExtent(newSegmentData2.segment), newSegmentData2);\n    this.dragSegments_.push([newSegmentData2, 0]);\n    return true;\n  }\n\n  updatePointer_(coordinate) {\n    if (coordinate) {\n      this.findInsertVerticesAndUpdateDragSegments_(coordinate);\n    }\n    return this.vertexFeature_?.getGeometry().getCoordinates();\n  }\n\n  /**\n   * Get the current pointer position.\n   * @return {import(\"../coordinate.js\").Coordinate | null} The current pointer coordinate.\n   */\n  getPoint() {\n    const coordinate = this.vertexFeature_?.getGeometry().getCoordinates();\n    if (!coordinate) {\n      return null;\n    }\n    return toUserCoordinate(\n      coordinate,\n      this.getMap().getView().getProjection(),\n    );\n  }\n\n  /**\n   * Check if a point can be removed from the current linestring or polygon at the current\n   * pointer position.\n   * @return {boolean} A point can be deleted at the current pointer position.\n   * @api\n   */\n  canRemovePoint() {\n    if (!this.vertexFeature_) {\n      return false;\n    }\n    if (\n      this.vertexFeature_\n        .get('geometries')\n        .every(\n          (geometry) =>\n            geometry.getType() === 'Circle' ||\n            geometry.getType().endsWith('Point'),\n        )\n    ) {\n      return false;\n    }\n    const coordinate = this.vertexFeature_.getGeometry().getCoordinates();\n    const segments = this.rBush_.getInExtent(boundingExtent([coordinate]));\n    return segments.some(\n      ({segment}) =>\n        coordinatesEqual(segment[0], coordinate) ||\n        coordinatesEqual(segment[1], coordinate),\n    );\n  }\n\n  /**\n   * Removes the vertex currently being pointed from the current linestring or polygon.\n   * @param {import('../coordinate.js').Coordinate} [coordinate] If provided, the pointer\n   * will be set to the provided coordinate. If not, the current pointer coordinate will be used.\n   * @return {boolean} True when a vertex was removed.\n   * @api\n   */\n  removePoint(coordinate) {\n    if (coordinate) {\n      coordinate = fromUserCoordinate(\n        coordinate,\n        this.getMap().getView().getProjection(),\n      );\n      this.updatePointer_(coordinate);\n    }\n    if (\n      !this.lastPointerEvent_ ||\n      (this.lastPointerEvent_ &&\n        this.lastPointerEvent_.type != MapBrowserEventType.POINTERDRAG)\n    ) {\n      const evt = this.lastPointerEvent_;\n      this.willModifyFeatures_(\n        evt,\n        this.dragSegments_.map(([segment]) => segment),\n      );\n      const removed = this.removeVertex_();\n      if (this.featuresBeingModified_) {\n        this.dispatchEvent(\n          new ModifyEvent(\n            ModifyEventType.MODIFYEND,\n            this.featuresBeingModified_,\n            evt,\n          ),\n        );\n      }\n\n      this.featuresBeingModified_ = null;\n      return removed;\n    }\n    return false;\n  }\n\n  /**\n   * Removes a vertex from all matching features.\n   * @return {boolean} True when a vertex was removed.\n   * @private\n   */\n  removeVertex_() {\n    const dragSegments = this.dragSegments_;\n    const segmentsByFeature = {};\n    let deleted = false;\n    let component, coordinates, dragSegment, geometry, i, index, left;\n    let newIndex, right, segmentData, uid;\n    for (i = dragSegments.length - 1; i >= 0; --i) {\n      dragSegment = dragSegments[i];\n      segmentData = dragSegment[0];\n      uid = getUid(segmentData.feature);\n      if (segmentData.depth) {\n        // separate feature components\n        uid += '-' + segmentData.depth.join('-');\n      }\n      if (!(uid in segmentsByFeature)) {\n        segmentsByFeature[uid] = {};\n      }\n      if (dragSegment[1] === 0) {\n        segmentsByFeature[uid].right = segmentData;\n        segmentsByFeature[uid].index = segmentData.index;\n      } else if (dragSegment[1] == 1) {\n        segmentsByFeature[uid].left = segmentData;\n        segmentsByFeature[uid].index = segmentData.index + 1;\n      }\n    }\n    for (uid in segmentsByFeature) {\n      right = segmentsByFeature[uid].right;\n      left = segmentsByFeature[uid].left;\n      index = segmentsByFeature[uid].index;\n      newIndex = index - 1;\n      if (left !== undefined) {\n        segmentData = left;\n      } else {\n        segmentData = right;\n      }\n      if (newIndex < 0) {\n        newIndex = 0;\n      }\n      geometry = segmentData.geometry;\n      coordinates = geometry.getCoordinates();\n      component = coordinates;\n      deleted = false;\n      switch (geometry.getType()) {\n        case 'MultiLineString':\n          if (coordinates[segmentData.depth[0]].length > 2) {\n            coordinates[segmentData.depth[0]].splice(index, 1);\n            deleted = true;\n          }\n          break;\n        case 'LineString':\n          if (coordinates.length > 2) {\n            coordinates.splice(index, 1);\n            deleted = true;\n          }\n          break;\n        case 'MultiPolygon':\n          component = component[segmentData.depth[1]];\n        /* falls through */\n        case 'Polygon':\n          component = component[segmentData.depth[0]];\n          if (component.length > 4) {\n            if (index == component.length - 1) {\n              index = 0;\n            }\n            component.splice(index, 1);\n            deleted = true;\n            if (index === 0) {\n              // close the ring again\n              component.pop();\n              component.push(component[0]);\n              newIndex = component.length - 1;\n            }\n          }\n          break;\n        default:\n        // pass\n      }\n\n      if (deleted) {\n        this.setGeometryCoordinates_(geometry, coordinates);\n        const segments = [];\n        if (left !== undefined) {\n          this.rBush_.remove(left);\n          segments.push(left.segment[0]);\n        }\n        if (right !== undefined) {\n          this.rBush_.remove(right);\n          segments.push(right.segment[1]);\n        }\n        if (left !== undefined && right !== undefined) {\n          /** @type {SegmentData} */\n          const newSegmentData = {\n            depth: segmentData.depth,\n            feature: segmentData.feature,\n            geometry: segmentData.geometry,\n            index: newIndex,\n            segment: segments,\n          };\n\n          this.rBush_.insert(\n            boundingExtent(newSegmentData.segment),\n            newSegmentData,\n          );\n        }\n        this.updateSegmentIndices_(geometry, index, segmentData.depth, -1);\n        if (this.vertexFeature_) {\n          this.overlay_.getSource().removeFeature(this.vertexFeature_);\n          this.vertexFeature_ = null;\n        }\n        dragSegments.length = 0;\n      }\n    }\n    return deleted;\n  }\n\n  /**\n   * Check if a point can be inserted to the current linestring or polygon at the current\n   * pointer position.\n   * @return {boolean} A point can be inserted at the current pointer position.\n   * @api\n   */\n  canInsertPoint() {\n    if (!this.vertexFeature_) {\n      return false;\n    }\n    if (\n      this.vertexFeature_\n        .get('geometries')\n        .every(\n          (geometry) =>\n            geometry.getType() === 'Circle' ||\n            geometry.getType().endsWith('Point'),\n        )\n    ) {\n      return false;\n    }\n    const coordinate = this.vertexFeature_.getGeometry().getCoordinates();\n    const segments = this.rBush_.getInExtent(boundingExtent([coordinate]));\n    return segments.some(\n      ({segment}) =>\n        !(\n          coordinatesEqual(segment[0], coordinate) ||\n          coordinatesEqual(segment[1], coordinate)\n        ),\n    );\n  }\n\n  /**\n   * Inserts the vertex currently being pointed to the current linestring or polygon.\n   * @param {import('../coordinate.js').Coordinate} [coordinate] If provided, the pointer\n   * will be set to the provided coordinate. If not, the current pointer coordinate will be used.\n   * @return {boolean} A vertex was inserted.\n   * @api\n   */\n  insertPoint(coordinate) {\n    const pixelCoordinate = coordinate\n      ? fromUserCoordinate(coordinate, this.getMap().getView().getProjection())\n      : this.vertexFeature_?.getGeometry().getCoordinates();\n    if (!pixelCoordinate) {\n      return false;\n    }\n    const insertVertices =\n      this.findInsertVerticesAndUpdateDragSegments_(pixelCoordinate);\n    return insertVertices.reduce(\n      (prev, segmentData) =>\n        prev || this.insertVertex_(segmentData, pixelCoordinate),\n      false,\n    );\n  }\n\n  /**\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {Array} coordinates Coordinates.\n   * @private\n   */\n  setGeometryCoordinates_(geometry, coordinates) {\n    this.changingFeature_ = true;\n    geometry.setCoordinates(coordinates);\n    this.changingFeature_ = false;\n  }\n\n  /**\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {number} index Index.\n   * @param {Array<number>|undefined} depth Depth.\n   * @param {number} delta Delta (1 or -1).\n   * @private\n   */\n  updateSegmentIndices_(geometry, index, depth, delta) {\n    this.rBush_.forEachInExtent(\n      geometry.getExtent(),\n      function (segmentDataMatch) {\n        if (\n          segmentDataMatch.geometry === geometry &&\n          (depth === undefined ||\n            segmentDataMatch.depth === undefined ||\n            equals(segmentDataMatch.depth, depth)) &&\n          segmentDataMatch.index > index\n        ) {\n          segmentDataMatch.index += delta;\n        }\n      },\n    );\n  }\n}\n\n/**\n * @param {SegmentData} a The first segment data.\n * @param {SegmentData} b The second segment data.\n * @return {number} The difference in indexes.\n */\nfunction compareIndexes(a, b) {\n  return a.index - b.index;\n}\n\n/**\n * Returns the distance from a point to a line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The coordinates of the point from\n *        which to calculate the distance.\n * @param {SegmentData} segmentData The object describing the line\n *        segment we are calculating the distance to.\n * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n * @return {number} The square of the distance between a point and a line segment.\n */\nfunction projectedDistanceToSegmentDataSquared(\n  pointCoordinates,\n  segmentData,\n  projection,\n) {\n  const geometry = segmentData.geometry;\n\n  if (geometry.getType() === 'Circle') {\n    let circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */ (\n      geometry\n    );\n\n    if (segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n      const userProjection = getUserProjection();\n      if (userProjection) {\n        circleGeometry = circleGeometry\n          .clone()\n          .transform(userProjection, projection);\n      }\n      const distanceToCenterSquared = squaredCoordinateDistance(\n        circleGeometry.getCenter(),\n        fromUserCoordinate(pointCoordinates, projection),\n      );\n      const distanceToCircumference =\n        Math.sqrt(distanceToCenterSquared) - circleGeometry.getRadius();\n      return distanceToCircumference * distanceToCircumference;\n    }\n  }\n\n  const coordinate = fromUserCoordinate(pointCoordinates, projection);\n  tempSegment[0] = fromUserCoordinate(segmentData.segment[0], projection);\n  tempSegment[1] = fromUserCoordinate(segmentData.segment[1], projection);\n  return squaredDistanceToSegment(coordinate, tempSegment);\n}\n\n/**\n * Returns the point closest to a given line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The point to which a closest point\n *        should be found.\n * @param {SegmentData} segmentData The object describing the line\n *        segment which should contain the closest point.\n * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n * @return {import(\"../coordinate.js\").Coordinate} The point closest to the specified line segment.\n */\nfunction closestOnSegmentData(pointCoordinates, segmentData, projection) {\n  const geometry = segmentData.geometry;\n\n  if (\n    geometry.getType() === 'Circle' &&\n    segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX\n  ) {\n    let circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */ (\n      geometry\n    );\n    const userProjection = getUserProjection();\n    if (userProjection) {\n      circleGeometry = circleGeometry\n        .clone()\n        .transform(userProjection, projection);\n    }\n    return toUserCoordinate(\n      circleGeometry.getClosestPoint(\n        fromUserCoordinate(pointCoordinates, projection),\n      ),\n      projection,\n    );\n  }\n  const coordinate = fromUserCoordinate(pointCoordinates, projection);\n  tempSegment[0] = fromUserCoordinate(segmentData.segment[0], projection);\n  tempSegment[1] = fromUserCoordinate(segmentData.segment[1], projection);\n  return toUserCoordinate(\n    closestOnSegment(coordinate, tempSegment),\n    projection,\n  );\n}\n\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\nfunction getDefaultStyleFunction() {\n  const style = createEditingStyle();\n  return function (feature, resolution) {\n    return style['Point'];\n  };\n}\n\nexport default Modify;\n","/**\n * @module ol/interaction/Pointer\n */\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport Interaction from './Interaction.js';\n\n/**\n * @typedef {Object} Options\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleDownEvent]\n * Function handling \"down\" events. If the function returns `true` then a drag\n * sequence is started.\n * @property {function(import(\"../MapBrowserEvent.js\").default):void} [handleDragEvent]\n * Function handling \"drag\" events. This function is called on \"move\" events\n * during a drag sequence.\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleEvent]\n * Method called by the map to notify the interaction that a browser event was\n * dispatched to the map. The function may return `false` to prevent the\n * propagation of the event to other interactions in the map's interactions\n * chain.\n * @property {function(import(\"../MapBrowserEvent.js\").default):void} [handleMoveEvent]\n * Function handling \"move\" events. This function is called on \"move\" events.\n * This functions is also called during a drag sequence, so during a drag\n * sequence both the `handleDragEvent` function and this function are called.\n * If `handleDownEvent` is defined and it returns true this function will not\n * be called during a drag sequence.\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleUpEvent]\n *  Function handling \"up\" events. If the function returns `false` then the\n * current drag sequence is stopped.\n * @property {function(boolean):boolean} [stopDown]\n * Should the down event be propagated to other interactions, or should be\n * stopped?\n */\n\n/**\n * @classdesc\n * Base class that calls user-defined functions on `down`, `move` and `up`\n * events. This class also manages \"drag sequences\".\n *\n * When the `handleDownEvent` user function returns `true` a drag sequence is\n * started. During a drag sequence the `handleDragEvent` user function is\n * called on `move` events. The drag sequence ends when the `handleUpEvent`\n * user function is called and returns `false`.\n * @api\n */\nclass PointerInteraction extends Interaction {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super(\n      /** @type {import(\"./Interaction.js\").InteractionOptions} */ (options),\n    );\n\n    if (options.handleDownEvent) {\n      this.handleDownEvent = options.handleDownEvent;\n    }\n\n    if (options.handleDragEvent) {\n      this.handleDragEvent = options.handleDragEvent;\n    }\n\n    if (options.handleMoveEvent) {\n      this.handleMoveEvent = options.handleMoveEvent;\n    }\n\n    if (options.handleUpEvent) {\n      this.handleUpEvent = options.handleUpEvent;\n    }\n\n    if (options.stopDown) {\n      this.stopDown = options.stopDown;\n    }\n\n    /**\n     * @type {boolean}\n     * @protected\n     */\n    this.handlingDownUpSequence = false;\n\n    /**\n     * @type {Array<PointerEvent>}\n     * @protected\n     */\n    this.targetPointers = [];\n  }\n\n  /**\n   * Returns the current number of pointers involved in the interaction,\n   * e.g. `2` when two fingers are used.\n   * @return {number} The number of pointers.\n   * @api\n   */\n  getPointerCount() {\n    return this.targetPointers.length;\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   * @protected\n   */\n  handleDownEvent(mapBrowserEvent) {\n    return false;\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @protected\n   */\n  handleDragEvent(mapBrowserEvent) {}\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may call into\n   * other functions, if event sequences like e.g. 'drag' or 'down-up' etc. are\n   * detected.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @api\n   * @override\n   */\n  handleEvent(mapBrowserEvent) {\n    if (!mapBrowserEvent.originalEvent) {\n      return true;\n    }\n\n    let stopEvent = false;\n    this.updateTrackedPointers_(mapBrowserEvent);\n    if (this.handlingDownUpSequence) {\n      if (mapBrowserEvent.type == MapBrowserEventType.POINTERDRAG) {\n        this.handleDragEvent(mapBrowserEvent);\n        // prevent page scrolling during dragging\n        mapBrowserEvent.originalEvent.preventDefault();\n      } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {\n        const handledUp = this.handleUpEvent(mapBrowserEvent);\n        this.handlingDownUpSequence =\n          handledUp && this.targetPointers.length > 0;\n      }\n    } else {\n      if (mapBrowserEvent.type == MapBrowserEventType.POINTERDOWN) {\n        const handled = this.handleDownEvent(mapBrowserEvent);\n        this.handlingDownUpSequence = handled;\n        stopEvent = this.stopDown(handled);\n      } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE) {\n        this.handleMoveEvent(mapBrowserEvent);\n      }\n    }\n    return !stopEvent;\n  }\n\n  /**\n   * Handle pointer move events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @protected\n   */\n  handleMoveEvent(mapBrowserEvent) {}\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   * @protected\n   */\n  handleUpEvent(mapBrowserEvent) {\n    return false;\n  }\n\n  /**\n   * This function is used to determine if \"down\" events should be propagated\n   * to other interactions or should be stopped.\n   * @param {boolean} handled Was the event handled by the interaction?\n   * @return {boolean} Should the `down` event be stopped?\n   */\n  stopDown(handled) {\n    return handled;\n  }\n\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @private\n   */\n  updateTrackedPointers_(mapBrowserEvent) {\n    if (mapBrowserEvent.activePointers) {\n      this.targetPointers = mapBrowserEvent.activePointers;\n    }\n  }\n}\n\n/**\n * @param {Array<PointerEvent>} pointerEvents List of events.\n * @return {{clientX: number, clientY: number}} Centroid pixel.\n */\nexport function centroid(pointerEvents) {\n  const length = pointerEvents.length;\n  let clientX = 0;\n  let clientY = 0;\n  for (let i = 0; i < length; i++) {\n    clientX += pointerEvents[i].clientX;\n    clientY += pointerEvents[i].clientY;\n  }\n  return {clientX: clientX / length, clientY: clientY / length};\n}\n\nexport default PointerInteraction;\n","/**\n * @module ol/interaction/Property\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  ACTIVE: 'active',\n};\n"],"names":["arguments","e","i","a","t","ShadowRoot","M","Error","n","s","r","f","Math"],"mappings":"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"}