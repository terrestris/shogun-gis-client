{"version":3,"file":"5449.f96b0ce406b93c98.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/ol/Overlay.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/control/FullScreen.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/control/OverviewMap.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/control/ZoomSlider.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/control/ZoomToExtent.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/control/MousePosition.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/control/ScaleLine.js"],"sourcesContent":["/**\n * @module ol/Overlay\n */\nimport MapEventType from './MapEventType.js';\nimport BaseObject from './Object.js';\nimport {CLASS_SELECTABLE} from './css.js';\nimport {outerHeight, outerWidth, removeChildren} from './dom.js';\nimport {listen, unlistenByKey} from './events.js';\nimport {containsExtent} from './extent.js';\n\n/**\n * @typedef {'bottom-left' | 'bottom-center' | 'bottom-right' | 'center-left' | 'center-center' | 'center-right' | 'top-left' | 'top-center' | 'top-right'} Positioning\n * The overlay position: `'bottom-left'`, `'bottom-center'`,  `'bottom-right'`,\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\n * `'top-center'`, or `'top-right'`.\n */\n\n/**\n * @typedef {Object} Options\n * @property {number|string} [id] Set the overlay id. The overlay id can be used\n * with the {@link module:ol/Map~Map#getOverlayById} method.\n * @property {HTMLElement} [element] The overlay element.\n * @property {Array<number>} [offset=[0, 0]] Offsets in pixels used when positioning\n * the overlay. The first element in the\n * array is the horizontal offset. A positive value shifts the overlay right.\n * The second element in the array is the vertical offset. A positive value\n * shifts the overlay down.\n * @property {import(\"./coordinate.js\").Coordinate} [position] The overlay position\n * in map projection.\n * @property {Positioning} [positioning='top-left'] Defines how\n * the overlay is actually positioned with respect to its `position` property.\n * Possible values are `'bottom-left'`, `'bottom-center'`, `'bottom-right'`,\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\n * `'top-center'`, and `'top-right'`.\n * @property {boolean} [stopEvent=true] Whether event propagation to the map\n * viewport should be stopped. If `true` the overlay is placed in the same\n * container as that of the controls (CSS class name\n * `ol-overlaycontainer-stopevent`); if `false` it is placed in the container\n * with CSS class name specified by the `className` property.\n * @property {boolean} [insertFirst=true] Whether the overlay is inserted first\n * in the overlay container, or appended. If the overlay is placed in the same\n * container as that of the controls (see the `stopEvent` option) you will\n * probably set `insertFirst` to `true` so the overlay is displayed below the\n * controls.\n * @property {PanIntoViewOptions|boolean} [autoPan=false] Pan the map when calling\n * `setPosition`, so that the overlay is entirely visible in the current viewport.\n * @property {string} [className='ol-overlay-container ol-selectable'] CSS class\n * name.\n */\n\n/**\n * @typedef {Object} PanOptions\n * @property {number} [duration=1000] The duration of the animation in\n * milliseconds.\n * @property {function(number):number} [easing] The easing function to use. Can\n * be one from {@link module:ol/easing} or a custom function.\n * Default is {@link module:ol/easing.inAndOut}.\n */\n\n/**\n * @typedef {Object} PanIntoViewOptions\n * @property {PanOptions} [animation={}] The animation parameters for the pan\n * @property {number} [margin=20] The margin (in pixels) between the\n * overlay and the borders of the map when panning into view.\n */\n\n/**\n * @enum {string}\n * @protected\n */\nconst Property = {\n  ELEMENT: 'element',\n  MAP: 'map',\n  OFFSET: 'offset',\n  POSITION: 'position',\n  POSITIONING: 'positioning',\n};\n\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:element'|'change:map'|'change:offset'|'change:position'|\n *   'change:positioning'} OverlayObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<OverlayObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|OverlayObjectEventTypes, Return>} OverlayOnSignature\n */\n\n/**\n * @classdesc\n * An element to be displayed over the map and attached to a single map\n * location.  Like {@link module:ol/control/Control~Control}, Overlays are\n * visible widgets. Unlike Controls, they are not in a fixed position on the\n * screen, but are tied to a geographical coordinate, so panning the map will\n * move an Overlay but not a Control.\n *\n * Example:\n *\n *     import Overlay from 'ol/Overlay.js';\n *\n *     // ...\n *     const popup = new Overlay({\n *       element: document.getElementById('popup'),\n *     });\n *     popup.setPosition(coordinate);\n *     map.addOverlay(popup);\n *\n * @api\n */\nclass Overlay extends BaseObject {\n  /**\n   * @param {Options} options Overlay options.\n   */\n  constructor(options) {\n    super();\n\n    /***\n     * @type {OverlayOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {OverlayOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {OverlayOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @protected\n     * @type {Options}\n     */\n    this.options = options;\n\n    /**\n     * @protected\n     * @type {number|string|undefined}\n     */\n    this.id = options.id;\n\n    /**\n     * @protected\n     * @type {boolean}\n     */\n    this.insertFirst =\n      options.insertFirst !== undefined ? options.insertFirst : true;\n\n    /**\n     * @protected\n     * @type {boolean}\n     */\n    this.stopEvent = options.stopEvent !== undefined ? options.stopEvent : true;\n\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n    this.element = document.createElement('div');\n    this.element.className =\n      options.className !== undefined\n        ? options.className\n        : 'ol-overlay-container ' + CLASS_SELECTABLE;\n    this.element.style.position = 'absolute';\n    this.element.style.pointerEvents = 'auto';\n\n    /**\n     * @protected\n     * @type {PanIntoViewOptions|undefined}\n     */\n    this.autoPan = options.autoPan === true ? {} : options.autoPan || undefined;\n\n    /**\n     * @protected\n     * @type {{transform_: string,\n     *         visible: boolean}}\n     */\n    this.rendered = {\n      transform_: '',\n      visible: true,\n    };\n\n    /**\n     * @protected\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n    this.mapPostrenderListenerKey = null;\n\n    this.addChangeListener(Property.ELEMENT, this.handleElementChanged);\n    this.addChangeListener(Property.MAP, this.handleMapChanged);\n    this.addChangeListener(Property.OFFSET, this.handleOffsetChanged);\n    this.addChangeListener(Property.POSITION, this.handlePositionChanged);\n    this.addChangeListener(Property.POSITIONING, this.handlePositioningChanged);\n\n    if (options.element !== undefined) {\n      this.setElement(options.element);\n    }\n\n    this.setOffset(options.offset !== undefined ? options.offset : [0, 0]);\n\n    this.setPositioning(options.positioning || 'top-left');\n\n    if (options.position !== undefined) {\n      this.setPosition(options.position);\n    }\n  }\n\n  /**\n   * Get the DOM element of this overlay.\n   * @return {HTMLElement|undefined} The Element containing the overlay.\n   * @observable\n   * @api\n   */\n  getElement() {\n    return /** @type {HTMLElement|undefined} */ (this.get(Property.ELEMENT));\n  }\n\n  /**\n   * Get the overlay identifier which is set on constructor.\n   * @return {number|string|undefined} Id.\n   * @api\n   */\n  getId() {\n    return this.id;\n  }\n\n  /**\n   * Get the map associated with this overlay.\n   * @return {import(\"./Map.js\").default|null} The map that the\n   * overlay is part of.\n   * @observable\n   * @api\n   */\n  getMap() {\n    return /** @type {import(\"./Map.js\").default|null} */ (\n      this.get(Property.MAP) || null\n    );\n  }\n\n  /**\n   * Get the offset of this overlay.\n   * @return {Array<number>} The offset.\n   * @observable\n   * @api\n   */\n  getOffset() {\n    return /** @type {Array<number>} */ (this.get(Property.OFFSET));\n  }\n\n  /**\n   * Get the current position of this overlay.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The spatial point that the overlay is\n   *     anchored at.\n   * @observable\n   * @api\n   */\n  getPosition() {\n    return /** @type {import(\"./coordinate.js\").Coordinate|undefined} */ (\n      this.get(Property.POSITION)\n    );\n  }\n\n  /**\n   * Get the current positioning of this overlay.\n   * @return {Positioning} How the overlay is positioned\n   *     relative to its point on the map.\n   * @observable\n   * @api\n   */\n  getPositioning() {\n    return /** @type {Positioning} */ (this.get(Property.POSITIONING));\n  }\n\n  /**\n   * @protected\n   */\n  handleElementChanged() {\n    removeChildren(this.element);\n    const element = this.getElement();\n    if (element) {\n      this.element.appendChild(element);\n    }\n  }\n\n  /**\n   * @protected\n   */\n  handleMapChanged() {\n    if (this.mapPostrenderListenerKey) {\n      this.element?.remove();\n      unlistenByKey(this.mapPostrenderListenerKey);\n      this.mapPostrenderListenerKey = null;\n    }\n    const map = this.getMap();\n    if (map) {\n      this.mapPostrenderListenerKey = listen(\n        map,\n        MapEventType.POSTRENDER,\n        this.render,\n        this,\n      );\n      this.updatePixelPosition();\n      const container = this.stopEvent\n        ? map.getOverlayContainerStopEvent()\n        : map.getOverlayContainer();\n      if (this.insertFirst) {\n        container.insertBefore(this.element, container.childNodes[0] || null);\n      } else {\n        container.appendChild(this.element);\n      }\n      this.performAutoPan();\n    }\n  }\n\n  /**\n   * @protected\n   */\n  render() {\n    this.updatePixelPosition();\n  }\n\n  /**\n   * @protected\n   */\n  handleOffsetChanged() {\n    this.updatePixelPosition();\n  }\n\n  /**\n   * @protected\n   */\n  handlePositionChanged() {\n    this.updatePixelPosition();\n    this.performAutoPan();\n  }\n\n  /**\n   * @protected\n   */\n  handlePositioningChanged() {\n    this.updatePixelPosition();\n  }\n\n  /**\n   * Set the DOM element to be associated with this overlay.\n   * @param {HTMLElement|undefined} element The Element containing the overlay.\n   * @observable\n   * @api\n   */\n  setElement(element) {\n    this.set(Property.ELEMENT, element);\n  }\n\n  /**\n   * Set the map to be associated with this overlay.\n   * @param {import(\"./Map.js\").default|null} map The map that the\n   * overlay is part of. Pass `null` to just remove the overlay from the current map.\n   * @observable\n   * @api\n   */\n  setMap(map) {\n    this.set(Property.MAP, map);\n  }\n\n  /**\n   * Set the offset for this overlay.\n   * @param {Array<number>} offset Offset.\n   * @observable\n   * @api\n   */\n  setOffset(offset) {\n    this.set(Property.OFFSET, offset);\n  }\n\n  /**\n   * Set the position for this overlay. If the position is `undefined` the\n   * overlay is hidden.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} position The spatial point that the overlay\n   *     is anchored at.\n   * @observable\n   * @api\n   */\n  setPosition(position) {\n    this.set(Property.POSITION, position);\n  }\n\n  /**\n   * Pan the map so that the overlay is entirely visible in the current viewport\n   * (if necessary) using the configured autoPan parameters\n   * @protected\n   */\n  performAutoPan() {\n    if (this.autoPan) {\n      this.panIntoView(this.autoPan);\n    }\n  }\n\n  /**\n   * Pan the map so that the overlay is entirely visible in the current viewport\n   * (if necessary).\n   * @param {PanIntoViewOptions} [panIntoViewOptions] Options for the pan action\n   * @api\n   */\n  panIntoView(panIntoViewOptions) {\n    const map = this.getMap();\n\n    if (!map || !map.getTargetElement() || !this.get(Property.POSITION)) {\n      return;\n    }\n\n    const mapRect = this.getRect(map.getTargetElement(), map.getSize());\n    const element = this.getElement();\n    const overlayRect = this.getRect(element, [\n      outerWidth(element),\n      outerHeight(element),\n    ]);\n\n    panIntoViewOptions = panIntoViewOptions || {};\n\n    const myMargin =\n      panIntoViewOptions.margin === undefined ? 20 : panIntoViewOptions.margin;\n    if (!containsExtent(mapRect, overlayRect)) {\n      // the overlay is not completely inside the viewport, so pan the map\n      const offsetLeft = overlayRect[0] - mapRect[0];\n      const offsetRight = mapRect[2] - overlayRect[2];\n      const offsetTop = overlayRect[1] - mapRect[1];\n      const offsetBottom = mapRect[3] - overlayRect[3];\n\n      const delta = [0, 0];\n      if (offsetLeft < 0) {\n        // move map to the left\n        delta[0] = offsetLeft - myMargin;\n      } else if (offsetRight < 0) {\n        // move map to the right\n        delta[0] = Math.abs(offsetRight) + myMargin;\n      }\n      if (offsetTop < 0) {\n        // move map up\n        delta[1] = offsetTop - myMargin;\n      } else if (offsetBottom < 0) {\n        // move map down\n        delta[1] = Math.abs(offsetBottom) + myMargin;\n      }\n\n      if (delta[0] !== 0 || delta[1] !== 0) {\n        const center = /** @type {import(\"./coordinate.js\").Coordinate} */ (\n          map.getView().getCenterInternal()\n        );\n        const centerPx = map.getPixelFromCoordinateInternal(center);\n        if (!centerPx) {\n          return;\n        }\n        const newCenterPx = [centerPx[0] + delta[0], centerPx[1] + delta[1]];\n\n        const panOptions = panIntoViewOptions.animation || {};\n        map.getView().animateInternal({\n          center: map.getCoordinateFromPixelInternal(newCenterPx),\n          duration: panOptions.duration,\n          easing: panOptions.easing,\n        });\n      }\n    }\n  }\n\n  /**\n   * Get the extent of an element relative to the document\n   * @param {HTMLElement} element The element.\n   * @param {import(\"./size.js\").Size} size The size of the element.\n   * @return {import(\"./extent.js\").Extent} The extent.\n   * @protected\n   */\n  getRect(element, size) {\n    const box = element.getBoundingClientRect();\n    const offsetX = box.left + window.pageXOffset;\n    const offsetY = box.top + window.pageYOffset;\n    return [offsetX, offsetY, offsetX + size[0], offsetY + size[1]];\n  }\n\n  /**\n   * Set the positioning for this overlay.\n   * @param {Positioning} positioning how the overlay is\n   *     positioned relative to its point on the map.\n   * @observable\n   * @api\n   */\n  setPositioning(positioning) {\n    this.set(Property.POSITIONING, positioning);\n  }\n\n  /**\n   * Modify the visibility of the element.\n   * @param {boolean} visible Element visibility.\n   * @protected\n   */\n  setVisible(visible) {\n    if (this.rendered.visible !== visible) {\n      this.element.style.display = visible ? '' : 'none';\n      this.rendered.visible = visible;\n    }\n  }\n\n  /**\n   * Update pixel position.\n   * @protected\n   */\n  updatePixelPosition() {\n    const map = this.getMap();\n    const position = this.getPosition();\n    if (!map || !map.isRendered() || !position) {\n      this.setVisible(false);\n      return;\n    }\n\n    const pixel = map.getPixelFromCoordinate(position);\n    const mapSize = map.getSize();\n    this.updateRenderedPosition(pixel, mapSize);\n  }\n\n  /**\n   * @param {import(\"./pixel.js\").Pixel} pixel The pixel location.\n   * @param {import(\"./size.js\").Size|undefined} mapSize The map size.\n   * @protected\n   */\n  updateRenderedPosition(pixel, mapSize) {\n    const style = this.element.style;\n    const offset = this.getOffset();\n\n    const positioning = this.getPositioning();\n\n    this.setVisible(true);\n\n    const x = Math.round(pixel[0] + offset[0]) + 'px';\n    const y = Math.round(pixel[1] + offset[1]) + 'px';\n    let posX = '0%';\n    let posY = '0%';\n    if (\n      positioning == 'bottom-right' ||\n      positioning == 'center-right' ||\n      positioning == 'top-right'\n    ) {\n      posX = '-100%';\n    } else if (\n      positioning == 'bottom-center' ||\n      positioning == 'center-center' ||\n      positioning == 'top-center'\n    ) {\n      posX = '-50%';\n    }\n    if (\n      positioning == 'bottom-left' ||\n      positioning == 'bottom-center' ||\n      positioning == 'bottom-right'\n    ) {\n      posY = '-100%';\n    } else if (\n      positioning == 'center-left' ||\n      positioning == 'center-center' ||\n      positioning == 'center-right'\n    ) {\n      posY = '-50%';\n    }\n    const transform = `translate(${posX}, ${posY}) translate(${x}, ${y})`;\n    if (this.rendered.transform_ != transform) {\n      this.rendered.transform_ = transform;\n      style.transform = transform;\n    }\n  }\n\n  /**\n   * returns the options this Overlay has been created with\n   * @return {Options} overlay options\n   */\n  getOptions() {\n    return this.options;\n  }\n}\n\nexport default Overlay;\n","/**\n * @module ol/control/FullScreen\n */\nimport MapProperty from '../MapProperty.js';\nimport {CLASS_CONTROL, CLASS_UNSELECTABLE, CLASS_UNSUPPORTED} from '../css.js';\nimport {replaceNode} from '../dom.js';\nimport EventType from '../events/EventType.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport Control from './Control.js';\n\nconst events = ['fullscreenchange', 'webkitfullscreenchange'];\n\n/**\n * @enum {string}\n */\nconst FullScreenEventType = {\n  /**\n   * Triggered after the map entered fullscreen.\n   * @event FullScreenEventType#enterfullscreen\n   * @api\n   */\n  ENTERFULLSCREEN: 'enterfullscreen',\n\n  /**\n   * Triggered after the map leave fullscreen.\n   * @event FullScreenEventType#leavefullscreen\n   * @api\n   */\n  LEAVEFULLSCREEN: 'leavefullscreen',\n};\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes|\n *     'enterfullscreen'|'leavefullscreen', import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|\n *     'enterfullscreen'|'leavefullscreen'|import(\"../ObjectEventType\").Types, Return>} FullScreenOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-full-screen'] CSS class name.\n * @property {string|Text|HTMLElement} [label='\\u2922'] Text label to use for the button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string|Text|HTMLElement} [labelActive='\\u00d7'] Text label to use for the\n * button when full-screen is active.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [activeClassName=className + '-true'] CSS class name for the button\n * when full-screen is active.\n * @property {string} [inactiveClassName=className + '-false'] CSS class name for the button\n * when full-screen is inactive.\n * @property {string} [tipLabel='Toggle full-screen'] Text label to use for the button tip.\n * @property {boolean} [keys=false] Full keyboard access.\n * @property {HTMLElement|string} [target] Specify a target if you want the\n * control to be rendered outside of the map's viewport.\n * @property {HTMLElement|string} [source] The element to be displayed\n * fullscreen. When not provided, the element containing the map viewport will\n * be displayed fullscreen.\n */\n\n/**\n * @classdesc\n * Provides a button that when clicked fills up the full screen with the map.\n * The full screen source element is by default the element containing the map viewport unless\n * overridden by providing the `source` option. In which case, the dom\n * element introduced using this parameter will be displayed in full screen.\n *\n * When in full screen mode, a close button is shown to exit full screen mode.\n * The [Fullscreen API](https://www.w3.org/TR/fullscreen/) is used to\n * toggle the map in full screen mode.\n *\n * @fires FullScreenEventType#enterfullscreen\n * @fires FullScreenEventType#leavefullscreen\n * @api\n */\nclass FullScreen extends Control {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super({\n      element: document.createElement('div'),\n      target: options.target,\n    });\n\n    /***\n     * @type {FullScreenOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {FullScreenOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {FullScreenOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.keys_ = options.keys !== undefined ? options.keys : false;\n\n    /**\n     * @private\n     * @type {HTMLElement|string|undefined}\n     */\n    this.source_ = options.source;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.isInFullscreen_ = false;\n\n    /**\n     * @private\n     */\n    this.boundHandleMapTargetChange_ = this.handleMapTargetChange_.bind(this);\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.cssClassName_ =\n      options.className !== undefined ? options.className : 'ol-full-screen';\n\n    /**\n     * @private\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     */\n    this.documentListeners_ = [];\n\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    this.activeClassName_ =\n      options.activeClassName !== undefined\n        ? options.activeClassName.split(' ')\n        : [this.cssClassName_ + '-true'];\n\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    this.inactiveClassName_ =\n      options.inactiveClassName !== undefined\n        ? options.inactiveClassName.split(' ')\n        : [this.cssClassName_ + '-false'];\n\n    const label = options.label !== undefined ? options.label : '\\u2922';\n\n    /**\n     * @private\n     * @type {Text|HTMLElement}\n     */\n    this.labelNode_ =\n      typeof label === 'string' ? document.createTextNode(label) : label;\n\n    const labelActive =\n      options.labelActive !== undefined ? options.labelActive : '\\u00d7';\n\n    /**\n     * @private\n     * @type {Text|HTMLElement}\n     */\n    this.labelActiveNode_ =\n      typeof labelActive === 'string'\n        ? document.createTextNode(labelActive)\n        : labelActive;\n\n    const tipLabel = options.tipLabel ? options.tipLabel : 'Toggle full-screen';\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this.button_ = document.createElement('button');\n    this.button_.title = tipLabel;\n    this.button_.setAttribute('type', 'button');\n    this.button_.appendChild(this.labelNode_);\n    this.button_.addEventListener(\n      EventType.CLICK,\n      this.handleClick_.bind(this),\n      false,\n    );\n    this.setClassName_(this.button_, this.isInFullscreen_);\n\n    this.element.className = `${this.cssClassName_} ${CLASS_UNSELECTABLE} ${CLASS_CONTROL}`;\n    this.element.appendChild(this.button_);\n  }\n\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  handleClick_(event) {\n    event.preventDefault();\n    this.handleFullScreen_();\n  }\n\n  /**\n   * @private\n   */\n  handleFullScreen_() {\n    const map = this.getMap();\n    if (!map) {\n      return;\n    }\n    const doc = map.getOwnerDocument();\n    if (!isFullScreenSupported(doc)) {\n      return;\n    }\n    if (isFullScreen(doc)) {\n      exitFullScreen(doc);\n    } else {\n      let element;\n      if (this.source_) {\n        element =\n          typeof this.source_ === 'string'\n            ? doc.getElementById(this.source_)\n            : this.source_;\n      } else {\n        element = map.getTargetElement();\n      }\n      if (this.keys_) {\n        requestFullScreenWithKeys(element);\n      } else {\n        requestFullScreen(element);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  handleFullScreenChange_() {\n    const map = this.getMap();\n    if (!map) {\n      return;\n    }\n    const wasInFullscreen = this.isInFullscreen_;\n    this.isInFullscreen_ = isFullScreen(map.getOwnerDocument());\n    if (wasInFullscreen !== this.isInFullscreen_) {\n      this.setClassName_(this.button_, this.isInFullscreen_);\n      if (this.isInFullscreen_) {\n        replaceNode(this.labelActiveNode_, this.labelNode_);\n        this.dispatchEvent(FullScreenEventType.ENTERFULLSCREEN);\n      } else {\n        replaceNode(this.labelNode_, this.labelActiveNode_);\n        this.dispatchEvent(FullScreenEventType.LEAVEFULLSCREEN);\n      }\n      map.updateSize();\n    }\n  }\n\n  /**\n   * @param {HTMLElement} element Target element\n   * @param {boolean} fullscreen True if fullscreen class name should be active\n   * @private\n   */\n  setClassName_(element, fullscreen) {\n    if (fullscreen) {\n      element.classList.remove(...this.inactiveClassName_);\n      element.classList.add(...this.activeClassName_);\n    } else {\n      element.classList.remove(...this.activeClassName_);\n      element.classList.add(...this.inactiveClassName_);\n    }\n  }\n\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   * @api\n   * @override\n   */\n  setMap(map) {\n    const oldMap = this.getMap();\n    if (oldMap) {\n      oldMap.removeChangeListener(\n        MapProperty.TARGET,\n        this.boundHandleMapTargetChange_,\n      );\n    }\n\n    super.setMap(map);\n\n    this.handleMapTargetChange_();\n    if (map) {\n      map.addChangeListener(\n        MapProperty.TARGET,\n        this.boundHandleMapTargetChange_,\n      );\n    }\n  }\n\n  /**\n   * @private\n   */\n  handleMapTargetChange_() {\n    const listeners = this.documentListeners_;\n    for (let i = 0, ii = listeners.length; i < ii; ++i) {\n      unlistenByKey(listeners[i]);\n    }\n    listeners.length = 0;\n\n    const map = this.getMap();\n    if (map) {\n      const doc = map.getOwnerDocument();\n      if (isFullScreenSupported(doc)) {\n        this.element.classList.remove(CLASS_UNSUPPORTED);\n      } else {\n        this.element.classList.add(CLASS_UNSUPPORTED);\n      }\n\n      for (let i = 0, ii = events.length; i < ii; ++i) {\n        listeners.push(\n          listen(doc, events[i], this.handleFullScreenChange_, this),\n        );\n      }\n      this.handleFullScreenChange_();\n    }\n  }\n}\n\n/**\n * @param {Document} doc The root document to check.\n * @return {boolean} Fullscreen is supported by the current platform.\n */\nfunction isFullScreenSupported(doc) {\n  const body = doc.body;\n  return !!(\n    body['webkitRequestFullscreen'] ||\n    (body.requestFullscreen && doc.fullscreenEnabled)\n  );\n}\n\n/**\n * @param {Document} doc The root document to check.\n * @return {boolean} Element is currently in fullscreen.\n */\nfunction isFullScreen(doc) {\n  return !!(doc['webkitIsFullScreen'] || doc.fullscreenElement);\n}\n\n/**\n * Request to fullscreen an element.\n * @param {HTMLElement} element Element to request fullscreen\n */\nfunction requestFullScreen(element) {\n  if (element.requestFullscreen) {\n    element.requestFullscreen();\n  } else if (element['webkitRequestFullscreen']) {\n    element['webkitRequestFullscreen']();\n  }\n}\n\n/**\n * Request to fullscreen an element with keyboard input.\n * @param {HTMLElement} element Element to request fullscreen\n */\nfunction requestFullScreenWithKeys(element) {\n  if (element['webkitRequestFullscreen']) {\n    element['webkitRequestFullscreen']();\n  } else {\n    requestFullScreen(element);\n  }\n}\n\n/**\n * Exit fullscreen.\n * @param {Document} doc The document to exit fullscren from\n */\nfunction exitFullScreen(doc) {\n  if (doc.exitFullscreen) {\n    doc.exitFullscreen();\n  } else if (doc['webkitExitFullscreen']) {\n    doc['webkitExitFullscreen']();\n  }\n}\n\nexport default FullScreen;\n","/**\n * @module ol/control/OverviewMap\n */\nimport Collection from '../Collection.js';\nimport Map from '../Map.js';\nimport MapEventType from '../MapEventType.js';\nimport MapProperty from '../MapProperty.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport Overlay from '../Overlay.js';\nimport View from '../View.js';\nimport ViewProperty from '../ViewProperty.js';\nimport {CLASS_COLLAPSED, CLASS_CONTROL, CLASS_UNSELECTABLE} from '../css.js';\nimport {replaceNode} from '../dom.js';\nimport EventType from '../events/EventType.js';\nimport {listen, listenOnce} from '../events.js';\nimport {\n  containsExtent,\n  equals as equalsExtent,\n  getBottomRight,\n  getTopLeft,\n  scaleFromCenter,\n} from '../extent.js';\nimport {fromExtent as polygonFromExtent} from '../geom/Polygon.js';\nimport Control from './Control.js';\n\n/**\n * Maximum width and/or height extent ratio that determines when the overview\n * map should be zoomed out.\n * @type {number}\n */\nconst MAX_RATIO = 0.75;\n\n/**\n * Minimum width and/or height extent ratio that determines when the overview\n * map should be zoomed in.\n * @type {number}\n */\nconst MIN_RATIO = 0.1;\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-overviewmap'] CSS class name.\n * @property {boolean} [collapsed=true] Whether the control should start collapsed or not (expanded).\n * @property {string|HTMLElement} [collapseLabel='‹'] Text label to use for the\n * expanded overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {boolean} [collapsible=true] Whether the control can be collapsed or not.\n * @property {string|HTMLElement} [label='›'] Text label to use for the collapsed\n * overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {Array<import(\"../layer/Base.js\").default>|import(\"../Collection.js\").default<import(\"../layer/Base.js\").default>} [layers]\n * Layers for the overview map.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n * @property {boolean} [rotateWithView=false] Whether the control view should rotate with the main map view.\n * @property {HTMLElement|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {string} [tipLabel='Overview map'] Text label to use for the button tip.\n * @property {View} [view] Custom view for the overview map (should use same projection as main map). If not provided,\n * a default view with the same projection as the main map will be used.\n */\n\n/**\n * Create a new control with a map acting as an overview map for another\n * defined map.\n *\n * @api\n */\nclass OverviewMap extends Control {\n  /**\n   * @param {Options} [options] OverviewMap options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super({\n      element: document.createElement('div'),\n      render: options.render,\n      target: options.target,\n    });\n\n    /**\n     * @private\n     */\n    this.boundHandleRotationChanged_ = this.handleRotationChanged_.bind(this);\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.collapsed_ =\n      options.collapsed !== undefined ? options.collapsed : true;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.collapsible_ =\n      options.collapsible !== undefined ? options.collapsible : true;\n\n    if (!this.collapsible_) {\n      this.collapsed_ = false;\n    }\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.rotateWithView_ =\n      options.rotateWithView !== undefined ? options.rotateWithView : false;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent|undefined}\n     */\n    this.viewExtent_ = undefined;\n\n    const className =\n      options.className !== undefined ? options.className : 'ol-overviewmap';\n\n    const tipLabel =\n      options.tipLabel !== undefined ? options.tipLabel : 'Overview map';\n\n    const collapseLabel =\n      options.collapseLabel !== undefined ? options.collapseLabel : '\\u2039';\n\n    if (typeof collapseLabel === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.collapseLabel_ = document.createElement('span');\n      this.collapseLabel_.textContent = collapseLabel;\n    } else {\n      this.collapseLabel_ = collapseLabel;\n    }\n\n    const label = options.label !== undefined ? options.label : '\\u203A';\n\n    if (typeof label === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.label_ = document.createElement('span');\n      this.label_.textContent = label;\n    } else {\n      this.label_ = label;\n    }\n\n    const activeLabel =\n      this.collapsible_ && !this.collapsed_ ? this.collapseLabel_ : this.label_;\n    const button = document.createElement('button');\n    button.setAttribute('type', 'button');\n    button.title = tipLabel;\n    button.appendChild(activeLabel);\n\n    button.addEventListener(\n      EventType.CLICK,\n      this.handleClick_.bind(this),\n      false,\n    );\n\n    /**\n     * @type {HTMLElement}\n     * @private\n     */\n    this.ovmapDiv_ = document.createElement('div');\n    this.ovmapDiv_.className = 'ol-overviewmap-map';\n\n    /**\n     * Explicitly given view to be used instead of a view derived from the main map.\n     * @type {View}\n     * @private\n     */\n    this.view_ = options.view;\n\n    const ovmap = new Map({\n      view: options.view,\n      controls: new Collection(),\n      interactions: new Collection(),\n    });\n\n    /**\n     * @type {Map}\n     * @private\n     */\n    this.ovmap_ = ovmap;\n\n    if (options.layers) {\n      options.layers.forEach(function (layer) {\n        ovmap.addLayer(layer);\n      });\n    }\n\n    const box = document.createElement('div');\n    box.className = 'ol-overviewmap-box';\n    box.style.boxSizing = 'border-box';\n\n    /**\n     * @type {import(\"../Overlay.js\").default}\n     * @private\n     */\n    this.boxOverlay_ = new Overlay({\n      position: [0, 0],\n      positioning: 'center-center',\n      element: box,\n    });\n    this.ovmap_.addOverlay(this.boxOverlay_);\n\n    const cssClasses =\n      className +\n      ' ' +\n      CLASS_UNSELECTABLE +\n      ' ' +\n      CLASS_CONTROL +\n      (this.collapsed_ && this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') +\n      (this.collapsible_ ? '' : ' ol-uncollapsible');\n    const element = this.element;\n    element.className = cssClasses;\n    element.appendChild(this.ovmapDiv_);\n    element.appendChild(button);\n\n    /* Interactive map */\n\n    const overlay = this.boxOverlay_;\n    const overlayBox = this.boxOverlay_.getElement();\n\n    /* Functions definition */\n\n    const computeDesiredMousePosition = (mousePosition) => {\n      return {\n        clientX: mousePosition.clientX,\n        clientY: mousePosition.clientY,\n      };\n    };\n\n    const move = function (event) {\n      const position = /** @type {?} */ (computeDesiredMousePosition(event));\n      const coordinates = ovmap.getEventCoordinate(\n        /** @type {MouseEvent} */ (position),\n      );\n\n      overlay.setPosition(coordinates);\n    };\n\n    const endMoving = (event) => {\n      const coordinates = ovmap.getEventCoordinateInternal(event);\n\n      const map = this.getMap();\n\n      map.getView().setCenterInternal(coordinates);\n\n      const ownerDocument = map.getOwnerDocument();\n      ownerDocument.removeEventListener('pointermove', move);\n      ownerDocument.removeEventListener('pointerup', endMoving);\n    };\n\n    /* Binding */\n\n    this.ovmapDiv_.addEventListener('pointerdown', (event) => {\n      const ownerDocument = this.getMap().getOwnerDocument();\n      if (event.target === overlayBox) {\n        ownerDocument.addEventListener('pointermove', move);\n      }\n      ownerDocument.addEventListener('pointerup', endMoving);\n    });\n  }\n\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   * @api\n   * @override\n   */\n  setMap(map) {\n    const oldMap = this.getMap();\n    if (map === oldMap) {\n      return;\n    }\n    if (oldMap) {\n      const oldView = oldMap.getView();\n      if (oldView) {\n        this.unbindView_(oldView);\n      }\n      this.ovmap_.setTarget(null);\n    }\n    super.setMap(map);\n\n    if (map) {\n      this.ovmap_.setTarget(this.ovmapDiv_);\n      this.listenerKeys.push(\n        listen(\n          map,\n          ObjectEventType.PROPERTYCHANGE,\n          this.handleMapPropertyChange_,\n          this,\n        ),\n      );\n\n      const view = map.getView();\n      if (view) {\n        this.bindView_(view);\n      }\n\n      if (!this.ovmap_.isRendered()) {\n        this.updateBoxAfterOvmapIsRendered_();\n      }\n    }\n  }\n\n  /**\n   * Handle map property changes.  This only deals with changes to the map's view.\n   * @param {import(\"../Object.js\").ObjectEvent} event The propertychange event.\n   * @private\n   */\n  handleMapPropertyChange_(event) {\n    if (event.key === MapProperty.VIEW) {\n      const oldView = /** @type {import(\"../View.js\").default} */ (\n        event.oldValue\n      );\n      if (oldView) {\n        this.unbindView_(oldView);\n      }\n      const newView = this.getMap().getView();\n      this.bindView_(newView);\n    } else if (\n      !this.ovmap_.isRendered() &&\n      (event.key === MapProperty.TARGET || event.key === MapProperty.SIZE)\n    ) {\n      this.ovmap_.updateSize();\n    }\n  }\n\n  /**\n   * Register listeners for view property changes.\n   * @param {import(\"../View.js\").default} view The view.\n   * @private\n   */\n  bindView_(view) {\n    if (!this.view_) {\n      // Unless an explicit view definition was given, derive default from whatever main map uses.\n      const newView = new View({\n        projection: view.getProjection(),\n      });\n      this.ovmap_.setView(newView);\n    }\n\n    view.addChangeListener(\n      ViewProperty.ROTATION,\n      this.boundHandleRotationChanged_,\n    );\n    // Sync once with the new view\n    this.handleRotationChanged_();\n\n    if (view.isDef()) {\n      this.ovmap_.updateSize();\n      this.resetExtent_();\n    }\n  }\n\n  /**\n   * Unregister listeners for view property changes.\n   * @param {import(\"../View.js\").default} view The view.\n   * @private\n   */\n  unbindView_(view) {\n    view.removeChangeListener(\n      ViewProperty.ROTATION,\n      this.boundHandleRotationChanged_,\n    );\n  }\n\n  /**\n   * Handle rotation changes to the main map.\n   * @private\n   */\n  handleRotationChanged_() {\n    if (this.rotateWithView_) {\n      this.ovmap_.getView().setRotation(this.getMap().getView().getRotation());\n    }\n  }\n\n  /**\n   * Reset the overview map extent if the box size (width or\n   * height) is less than the size of the overview map size times minRatio\n   * or is greater than the size of the overview size times maxRatio.\n   *\n   * If the map extent was not reset, the box size can fits in the defined\n   * ratio sizes. This method then checks if is contained inside the overview\n   * map current extent. If not, recenter the overview map to the current\n   * main map center location.\n   * @private\n   */\n  validateExtent_() {\n    const map = this.getMap();\n    const ovmap = this.ovmap_;\n\n    if (!map.isRendered() || !ovmap.isRendered()) {\n      return;\n    }\n\n    const mapSize = /** @type {import(\"../size.js\").Size} */ (map.getSize());\n\n    const view = map.getView();\n    const extent = view.calculateExtentInternal(mapSize);\n\n    if (this.viewExtent_ && equalsExtent(extent, this.viewExtent_)) {\n      // repeats of the same extent may indicate constraint conflicts leading to an endless cycle\n      return;\n    }\n    this.viewExtent_ = extent;\n\n    const ovmapSize = /** @type {import(\"../size.js\").Size} */ (\n      ovmap.getSize()\n    );\n\n    const ovview = ovmap.getView();\n    const ovextent = ovview.calculateExtentInternal(ovmapSize);\n\n    const topLeftPixel = ovmap.getPixelFromCoordinateInternal(\n      getTopLeft(extent),\n    );\n    const bottomRightPixel = ovmap.getPixelFromCoordinateInternal(\n      getBottomRight(extent),\n    );\n\n    const boxWidth = Math.abs(topLeftPixel[0] - bottomRightPixel[0]);\n    const boxHeight = Math.abs(topLeftPixel[1] - bottomRightPixel[1]);\n\n    const ovmapWidth = ovmapSize[0];\n    const ovmapHeight = ovmapSize[1];\n\n    if (\n      boxWidth < ovmapWidth * MIN_RATIO ||\n      boxHeight < ovmapHeight * MIN_RATIO ||\n      boxWidth > ovmapWidth * MAX_RATIO ||\n      boxHeight > ovmapHeight * MAX_RATIO\n    ) {\n      this.resetExtent_();\n    } else if (!containsExtent(ovextent, extent)) {\n      this.recenter_();\n    }\n  }\n\n  /**\n   * Reset the overview map extent to half calculated min and max ratio times\n   * the extent of the main map.\n   * @private\n   */\n  resetExtent_() {\n    if (MAX_RATIO === 0 || MIN_RATIO === 0) {\n      return;\n    }\n\n    const map = this.getMap();\n    const ovmap = this.ovmap_;\n\n    const mapSize = /** @type {import(\"../size.js\").Size} */ (map.getSize());\n\n    const view = map.getView();\n    const extent = view.calculateExtentInternal(mapSize);\n\n    const ovview = ovmap.getView();\n\n    // get how many times the current map overview could hold different\n    // box sizes using the min and max ratio, pick the step in the middle used\n    // to calculate the extent from the main map to set it to the overview map,\n    const steps = Math.log(MAX_RATIO / MIN_RATIO) / Math.LN2;\n    const ratio = 1 / (Math.pow(2, steps / 2) * MIN_RATIO);\n    scaleFromCenter(extent, ratio);\n    ovview.fitInternal(polygonFromExtent(extent));\n  }\n\n  /**\n   * Set the center of the overview map to the map center without changing its\n   * resolution.\n   * @private\n   */\n  recenter_() {\n    const map = this.getMap();\n    const ovmap = this.ovmap_;\n\n    const view = map.getView();\n\n    const ovview = ovmap.getView();\n\n    ovview.setCenterInternal(view.getCenterInternal());\n  }\n\n  /**\n   * Update the box using the main map extent\n   * @private\n   */\n  updateBox_() {\n    const map = this.getMap();\n    const ovmap = this.ovmap_;\n\n    if (!map.isRendered() || !ovmap.isRendered()) {\n      return;\n    }\n\n    const mapSize = /** @type {import(\"../size.js\").Size} */ (map.getSize());\n\n    const view = map.getView();\n\n    const ovview = ovmap.getView();\n\n    const rotation = this.rotateWithView_ ? 0 : -view.getRotation();\n\n    const overlay = this.boxOverlay_;\n    const box = this.boxOverlay_.getElement();\n    const center = view.getCenter();\n    const resolution = view.getResolution();\n    const ovresolution = ovview.getResolution();\n    const width = (mapSize[0] * resolution) / ovresolution;\n    const height = (mapSize[1] * resolution) / ovresolution;\n\n    // set position using center coordinates\n    overlay.setPosition(center);\n\n    // set box size calculated from map extent size and overview map resolution\n    if (box) {\n      box.style.width = width + 'px';\n      box.style.height = height + 'px';\n      const transform = 'rotate(' + rotation + 'rad)';\n      box.style.transform = transform;\n    }\n  }\n\n  /**\n   * @private\n   */\n  updateBoxAfterOvmapIsRendered_() {\n    if (this.ovmapPostrenderKey_) {\n      return;\n    }\n    this.ovmapPostrenderKey_ = listenOnce(\n      this.ovmap_,\n      MapEventType.POSTRENDER,\n      (event) => {\n        delete this.ovmapPostrenderKey_;\n        this.updateBox_();\n      },\n    );\n  }\n\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  handleClick_(event) {\n    event.preventDefault();\n    this.handleToggle_();\n  }\n\n  /**\n   * @private\n   */\n  handleToggle_() {\n    this.element.classList.toggle(CLASS_COLLAPSED);\n    if (this.collapsed_) {\n      replaceNode(this.collapseLabel_, this.label_);\n    } else {\n      replaceNode(this.label_, this.collapseLabel_);\n    }\n    this.collapsed_ = !this.collapsed_;\n\n    // manage overview map if it had not been rendered before and control\n    // is expanded\n    const ovmap = this.ovmap_;\n    if (!this.collapsed_) {\n      if (ovmap.isRendered()) {\n        this.viewExtent_ = undefined;\n        ovmap.render();\n        return;\n      }\n      ovmap.updateSize();\n      this.resetExtent_();\n      this.updateBoxAfterOvmapIsRendered_();\n    }\n  }\n\n  /**\n   * Return `true` if the overview map is collapsible, `false` otherwise.\n   * @return {boolean} True if the widget is collapsible.\n   * @api\n   */\n  getCollapsible() {\n    return this.collapsible_;\n  }\n\n  /**\n   * Set whether the overview map should be collapsible.\n   * @param {boolean} collapsible True if the widget is collapsible.\n   * @api\n   */\n  setCollapsible(collapsible) {\n    if (this.collapsible_ === collapsible) {\n      return;\n    }\n    this.collapsible_ = collapsible;\n    this.element.classList.toggle('ol-uncollapsible');\n    if (!collapsible && this.collapsed_) {\n      this.handleToggle_();\n    }\n  }\n\n  /**\n   * Collapse or expand the overview map according to the passed parameter. Will\n   * not do anything if the overview map isn't collapsible or if the current\n   * collapsed state is already the one requested.\n   * @param {boolean} collapsed True if the widget is collapsed.\n   * @api\n   */\n  setCollapsed(collapsed) {\n    if (!this.collapsible_ || this.collapsed_ === collapsed) {\n      return;\n    }\n    this.handleToggle_();\n  }\n\n  /**\n   * Determine if the overview map is collapsed.\n   * @return {boolean} The overview map is collapsed.\n   * @api\n   */\n  getCollapsed() {\n    return this.collapsed_;\n  }\n\n  /**\n   * Return `true` if the overview map view can rotate, `false` otherwise.\n   * @return {boolean} True if the control view can rotate.\n   * @api\n   */\n  getRotateWithView() {\n    return this.rotateWithView_;\n  }\n\n  /**\n   * Set whether the overview map view should rotate with the main map view.\n   * @param {boolean} rotateWithView True if the control view should rotate.\n   * @api\n   */\n  setRotateWithView(rotateWithView) {\n    if (this.rotateWithView_ === rotateWithView) {\n      return;\n    }\n    this.rotateWithView_ = rotateWithView;\n    if (this.getMap().getView().getRotation() !== 0) {\n      if (this.rotateWithView_) {\n        this.handleRotationChanged_();\n      } else {\n        this.ovmap_.getView().setRotation(0);\n      }\n      this.viewExtent_ = undefined;\n      this.validateExtent_();\n      this.updateBox_();\n    }\n  }\n\n  /**\n   * Return the overview map.\n   * @return {import(\"../Map.js\").default} Overview map.\n   * @api\n   */\n  getOverviewMap() {\n    return this.ovmap_;\n  }\n\n  /**\n   * Update the overview map element.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n  render(mapEvent) {\n    this.validateExtent_();\n    this.updateBox_();\n  }\n}\n\nexport default OverviewMap;\n","/**\n * @module ol/control/ZoomSlider\n */\n\nimport {CLASS_CONTROL, CLASS_UNSELECTABLE} from '../css.js';\nimport {easeOut} from '../easing.js';\nimport {stopPropagation} from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport {clamp} from '../math.js';\nimport PointerEventType from '../pointer/EventType.js';\nimport Control from './Control.js';\n\n/**\n * The enum for available directions.\n *\n * @enum {number}\n */\nconst Direction = {\n  VERTICAL: 0,\n  HORIZONTAL: 1,\n};\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-zoomslider'] CSS class name.\n * @property {number} [duration=200] Animation duration in milliseconds.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n * @property {HTMLElement|string} [target] Specify a target if you want the control to be\n * rendered outside of the map's viewport.\n */\n\n/**\n * @classdesc\n * A slider type of control for zooming.\n *\n * Example:\n *\n *     map.addControl(new ZoomSlider());\n *\n * @api\n */\nclass ZoomSlider extends Control {\n  /**\n   * @param {Options} [options] Zoom slider options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super({\n      target: options.target,\n      element: document.createElement('div'),\n      render: options.render,\n    });\n\n    /**\n     * @type {!Array<import(\"../events.js\").EventsKey>}\n     * @private\n     */\n    this.dragListenerKeys_ = [];\n\n    /**\n     * Will hold the current resolution of the view.\n     *\n     * @type {number|undefined}\n     * @private\n     */\n    this.currentResolution_ = undefined;\n\n    /**\n     * The direction of the slider. Will be determined from actual display of the\n     * container and defaults to Direction.VERTICAL.\n     *\n     * @type {Direction}\n     * @private\n     */\n    this.direction_ = Direction.VERTICAL;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.dragging_;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.heightLimit_ = 0;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.widthLimit_ = 0;\n\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n    this.startX_;\n\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n    this.startY_;\n\n    /**\n     * The calculated thumb size (border box plus margins).  Set when initSlider_\n     * is called.\n     * @type {import(\"../size.js\").Size}\n     * @private\n     */\n    this.thumbSize_ = null;\n\n    /**\n     * Whether the slider is initialized.\n     * @type {boolean}\n     * @private\n     */\n    this.sliderInitialized_ = false;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 200;\n\n    const className =\n      options.className !== undefined ? options.className : 'ol-zoomslider';\n    const thumbElement = document.createElement('button');\n    thumbElement.setAttribute('type', 'button');\n    thumbElement.className = className + '-thumb ' + CLASS_UNSELECTABLE;\n    const containerElement = this.element;\n    containerElement.className =\n      className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;\n    containerElement.appendChild(thumbElement);\n\n    containerElement.addEventListener(\n      PointerEventType.POINTERDOWN,\n      this.handleDraggerStart_.bind(this),\n      false,\n    );\n    containerElement.addEventListener(\n      PointerEventType.POINTERMOVE,\n      this.handleDraggerDrag_.bind(this),\n      false,\n    );\n    containerElement.addEventListener(\n      PointerEventType.POINTERUP,\n      this.handleDraggerEnd_.bind(this),\n      false,\n    );\n\n    containerElement.addEventListener(\n      EventType.CLICK,\n      this.handleContainerClick_.bind(this),\n      false,\n    );\n    thumbElement.addEventListener(EventType.CLICK, stopPropagation, false);\n  }\n\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   * @api\n   * @override\n   */\n  setMap(map) {\n    super.setMap(map);\n    if (map) {\n      map.render();\n    }\n  }\n\n  /**\n   * Initializes the slider element. This will determine and set this controls\n   * direction_ and also constrain the dragging of the thumb to always be within\n   * the bounds of the container.\n   *\n   * @return {boolean} Initialization successful\n   * @private\n   */\n  initSlider_() {\n    const container = this.element;\n    let containerWidth = container.offsetWidth;\n    let containerHeight = container.offsetHeight;\n    if (containerWidth === 0 && containerHeight === 0) {\n      return (this.sliderInitialized_ = false);\n    }\n\n    const containerStyle = getComputedStyle(container);\n    containerWidth -=\n      parseFloat(containerStyle['paddingRight']) +\n      parseFloat(containerStyle['paddingLeft']);\n    containerHeight -=\n      parseFloat(containerStyle['paddingTop']) +\n      parseFloat(containerStyle['paddingBottom']);\n    const thumb = /** @type {HTMLElement} */ (container.firstElementChild);\n    const thumbStyle = getComputedStyle(thumb);\n    const thumbWidth =\n      thumb.offsetWidth +\n      parseFloat(thumbStyle['marginRight']) +\n      parseFloat(thumbStyle['marginLeft']);\n    const thumbHeight =\n      thumb.offsetHeight +\n      parseFloat(thumbStyle['marginTop']) +\n      parseFloat(thumbStyle['marginBottom']);\n    this.thumbSize_ = [thumbWidth, thumbHeight];\n\n    if (containerWidth > containerHeight) {\n      this.direction_ = Direction.HORIZONTAL;\n      this.widthLimit_ = containerWidth - thumbWidth;\n    } else {\n      this.direction_ = Direction.VERTICAL;\n      this.heightLimit_ = containerHeight - thumbHeight;\n    }\n    return (this.sliderInitialized_ = true);\n  }\n\n  /**\n   * @param {PointerEvent} event The browser event to handle.\n   * @private\n   */\n  handleContainerClick_(event) {\n    const view = this.getMap().getView();\n\n    const relativePosition = this.getRelativePosition_(\n      event.offsetX - this.thumbSize_[0] / 2,\n      event.offsetY - this.thumbSize_[1] / 2,\n    );\n\n    const resolution = this.getResolutionForPosition_(relativePosition);\n    const zoom = view.getConstrainedZoom(view.getZoomForResolution(resolution));\n\n    view.animateInternal({\n      zoom: zoom,\n      duration: this.duration_,\n      easing: easeOut,\n    });\n  }\n\n  /**\n   * Handle dragger start events.\n   * @param {PointerEvent} event The drag event.\n   * @private\n   */\n  handleDraggerStart_(event) {\n    if (!this.dragging_ && event.target === this.element.firstElementChild) {\n      const element = /** @type {HTMLElement} */ (\n        this.element.firstElementChild\n      );\n      this.getMap().getView().beginInteraction();\n      this.startX_ = event.clientX - parseFloat(element.style.left);\n      this.startY_ = event.clientY - parseFloat(element.style.top);\n      this.dragging_ = true;\n\n      if (this.dragListenerKeys_.length === 0) {\n        const drag = this.handleDraggerDrag_;\n        const end = this.handleDraggerEnd_;\n        const doc = this.getMap().getOwnerDocument();\n        this.dragListenerKeys_.push(\n          listen(doc, PointerEventType.POINTERMOVE, drag, this),\n          listen(doc, PointerEventType.POINTERUP, end, this),\n        );\n      }\n    }\n  }\n\n  /**\n   * Handle dragger drag events.\n   *\n   * @param {PointerEvent} event The drag event.\n   * @private\n   */\n  handleDraggerDrag_(event) {\n    if (this.dragging_) {\n      const deltaX = event.clientX - this.startX_;\n      const deltaY = event.clientY - this.startY_;\n      const relativePosition = this.getRelativePosition_(deltaX, deltaY);\n      this.currentResolution_ =\n        this.getResolutionForPosition_(relativePosition);\n      this.getMap().getView().setResolution(this.currentResolution_);\n    }\n  }\n\n  /**\n   * Handle dragger end events.\n   * @param {PointerEvent} event The drag event.\n   * @private\n   */\n  handleDraggerEnd_(event) {\n    if (this.dragging_) {\n      const view = this.getMap().getView();\n      view.endInteraction();\n\n      this.dragging_ = false;\n      this.startX_ = undefined;\n      this.startY_ = undefined;\n      this.dragListenerKeys_.forEach(unlistenByKey);\n      this.dragListenerKeys_.length = 0;\n    }\n  }\n\n  /**\n   * Positions the thumb inside its container according to the given resolution.\n   *\n   * @param {number} res The res.\n   * @private\n   */\n  setThumbPosition_(res) {\n    const position = this.getPositionForResolution_(res);\n    const thumb = /** @type {HTMLElement} */ (this.element.firstElementChild);\n\n    if (this.direction_ == Direction.HORIZONTAL) {\n      thumb.style.left = this.widthLimit_ * position + 'px';\n    } else {\n      thumb.style.top = this.heightLimit_ * position + 'px';\n    }\n  }\n\n  /**\n   * Calculates the relative position of the thumb given x and y offsets.  The\n   * relative position scales from 0 to 1.  The x and y offsets are assumed to be\n   * in pixel units within the dragger limits.\n   *\n   * @param {number} x Pixel position relative to the left of the slider.\n   * @param {number} y Pixel position relative to the top of the slider.\n   * @return {number} The relative position of the thumb.\n   * @private\n   */\n  getRelativePosition_(x, y) {\n    let amount;\n    if (this.direction_ === Direction.HORIZONTAL) {\n      amount = x / this.widthLimit_;\n    } else {\n      amount = y / this.heightLimit_;\n    }\n    return clamp(amount, 0, 1);\n  }\n\n  /**\n   * Calculates the corresponding resolution of the thumb given its relative\n   * position (where 0 is the minimum and 1 is the maximum).\n   *\n   * @param {number} position The relative position of the thumb.\n   * @return {number} The corresponding resolution.\n   * @private\n   */\n  getResolutionForPosition_(position) {\n    const fn = this.getMap().getView().getResolutionForValueFunction();\n    return fn(1 - position);\n  }\n\n  /**\n   * Determines the relative position of the slider for the given resolution.  A\n   * relative position of 0 corresponds to the minimum view resolution.  A\n   * relative position of 1 corresponds to the maximum view resolution.\n   *\n   * @param {number} res The resolution.\n   * @return {number} The relative position value (between 0 and 1).\n   * @private\n   */\n  getPositionForResolution_(res) {\n    const fn = this.getMap().getView().getValueForResolutionFunction();\n    return clamp(1 - fn(res), 0, 1);\n  }\n\n  /**\n   * Update the zoomslider element.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n  render(mapEvent) {\n    if (!mapEvent.frameState) {\n      return;\n    }\n    if (!this.sliderInitialized_ && !this.initSlider_()) {\n      return;\n    }\n    const res = mapEvent.frameState.viewState.resolution;\n    this.currentResolution_ = res;\n    this.setThumbPosition_(res);\n  }\n}\n\nexport default ZoomSlider;\n","/**\n * @module ol/control/ZoomToExtent\n */\nimport {CLASS_CONTROL, CLASS_UNSELECTABLE} from '../css.js';\nimport EventType from '../events/EventType.js';\nimport {fromExtent as polygonFromExtent} from '../geom/Polygon.js';\nimport {fromUserExtent} from '../proj.js';\nimport Control from './Control.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-zoom-extent'] Class name.\n * @property {HTMLElement|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {string|HTMLElement} [label='E'] Text label to use for the button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [tipLabel='Fit to extent'] Text label to use for the button tip.\n * @property {import(\"../extent.js\").Extent} [extent] The extent to zoom to. If undefined the validity\n * extent of the view projection is used.\n */\n\n/**\n * @classdesc\n * A button control which, when pressed, changes the map view to a specific\n * extent. To style this control use the css selector `.ol-zoom-extent`.\n *\n * @api\n */\nclass ZoomToExtent extends Control {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super({\n      element: document.createElement('div'),\n      target: options.target,\n    });\n\n    /**\n     * @type {?import(\"../extent.js\").Extent|null}\n     * @protected\n     */\n    this.extent = options.extent ? options.extent : null;\n\n    const className =\n      options.className !== undefined ? options.className : 'ol-zoom-extent';\n\n    const label = options.label !== undefined ? options.label : 'E';\n    const tipLabel =\n      options.tipLabel !== undefined ? options.tipLabel : 'Fit to extent';\n    const button = document.createElement('button');\n    button.setAttribute('type', 'button');\n    button.title = tipLabel;\n    button.appendChild(\n      typeof label === 'string' ? document.createTextNode(label) : label,\n    );\n\n    button.addEventListener(\n      EventType.CLICK,\n      this.handleClick_.bind(this),\n      false,\n    );\n\n    const cssClasses =\n      className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;\n    const element = this.element;\n    element.className = cssClasses;\n    element.appendChild(button);\n  }\n\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  handleClick_(event) {\n    event.preventDefault();\n    this.handleZoomToExtent();\n  }\n\n  /**\n   * @protected\n   */\n  handleZoomToExtent() {\n    const map = this.getMap();\n    const view = map.getView();\n    const extent = !this.extent\n      ? view.getProjection().getExtent()\n      : fromUserExtent(this.extent, view.getProjection());\n    view.fitInternal(polygonFromExtent(extent));\n  }\n}\n\nexport default ZoomToExtent;\n","/**\n * @module ol/control/MousePosition\n */\n\nimport {wrapX} from '../coordinate.js';\nimport {listen} from '../events.js';\nimport EventType from '../pointer/EventType.js';\nimport {\n  get as getProjection,\n  getTransformFromProjections,\n  getUserProjection,\n  identityTransform,\n} from '../proj.js';\nimport Control from './Control.js';\n\n/**\n * @type {string}\n */\nconst PROJECTION = 'projection';\n\n/**\n * @type {string}\n */\nconst COORDINATE_FORMAT = 'coordinateFormat';\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:coordinateFormat'|'change:projection', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:coordinateFormat'|'change:projection', Return>} MousePositionOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-mouse-position'] CSS class name.\n * @property {import(\"../coordinate.js\").CoordinateFormat} [coordinateFormat] Coordinate format.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the\n * control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n * @property {HTMLElement|string} [target] Specify a target if you want the\n * control to be rendered outside of the map's viewport.\n * @property {string} [placeholder] Markup to show when the mouse position is not\n * available (e.g. when the pointer leaves the map viewport).  By default, a non-breaking space is rendered\n * initially and the last position is retained when the mouse leaves the viewport.\n * When a string is provided (e.g. `'no position'` or `''` for an empty string) it is used as a\n * placeholder.\n * @property {boolean} [wrapX=true] Wrap the world horizontally on the projection's antimeridian, if it\n * is a global projection.\n */\n\n/**\n * @classdesc\n * A control to show the 2D coordinates of the mouse cursor. By default, these\n * are in the view projection, but can be in any supported projection.\n * By default the control is shown in the top right corner of the map, but this\n * can be changed by using the css selector `.ol-mouse-position`.\n *\n * On touch devices, which usually do not have a mouse cursor, the coordinates\n * of the currently touched position are shown.\n *\n * @api\n */\nclass MousePosition extends Control {\n  /**\n   * @param {Options} [options] Mouse position options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    const element = document.createElement('div');\n    element.className =\n      options.className !== undefined ? options.className : 'ol-mouse-position';\n\n    super({\n      element: element,\n      render: options.render,\n      target: options.target,\n    });\n\n    /***\n     * @type {MousePositionOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {MousePositionOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {MousePositionOnSignature<void>}\n     */\n    this.un;\n\n    this.addChangeListener(PROJECTION, this.handleProjectionChanged_);\n\n    if (options.coordinateFormat) {\n      this.setCoordinateFormat(options.coordinateFormat);\n    }\n    if (options.projection) {\n      this.setProjection(options.projection);\n    }\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderOnMouseOut_ = options.placeholder !== undefined;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.placeholder_ = this.renderOnMouseOut_ ? options.placeholder : '&#160;';\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.renderedHTML_ = element.innerHTML;\n\n    /**\n     * @private\n     * @type {?import(\"../proj/Projection.js\").default}\n     */\n    this.mapProjection_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../proj.js\").TransformFunction}\n     */\n    this.transform_ = null;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.wrapX_ = options.wrapX === false ? false : true;\n  }\n\n  /**\n   * @private\n   */\n  handleProjectionChanged_() {\n    this.transform_ = null;\n  }\n\n  /**\n   * Return the coordinate format type used to render the current position or\n   * undefined.\n   * @return {import(\"../coordinate.js\").CoordinateFormat|undefined} The format to render the current\n   *     position in.\n   * @observable\n   * @api\n   */\n  getCoordinateFormat() {\n    return /** @type {import(\"../coordinate.js\").CoordinateFormat|undefined} */ (\n      this.get(COORDINATE_FORMAT)\n    );\n  }\n\n  /**\n   * Return the projection that is used to report the mouse position.\n   * @return {import(\"../proj/Projection.js\").default|undefined} The projection to report mouse\n   *     position in.\n   * @observable\n   * @api\n   */\n  getProjection() {\n    return /** @type {import(\"../proj/Projection.js\").default|undefined} */ (\n      this.get(PROJECTION)\n    );\n  }\n\n  /**\n   * @param {MouseEvent} event Browser event.\n   * @protected\n   */\n  handleMouseMove(event) {\n    const map = this.getMap();\n    this.updateHTML_(map.getEventPixel(event));\n  }\n\n  /**\n   * @param {Event} event Browser event.\n   * @protected\n   */\n  handleMouseOut(event) {\n    this.updateHTML_(null);\n  }\n\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   * @api\n   * @override\n   */\n  setMap(map) {\n    super.setMap(map);\n    if (map) {\n      const viewport = map.getViewport();\n      this.listenerKeys.push(\n        listen(viewport, EventType.POINTERMOVE, this.handleMouseMove, this),\n      );\n      if (this.renderOnMouseOut_) {\n        this.listenerKeys.push(\n          listen(viewport, EventType.POINTEROUT, this.handleMouseOut, this),\n        );\n      }\n      this.updateHTML_(null);\n    }\n  }\n\n  /**\n   * Set the coordinate format type used to render the current position.\n   * @param {import(\"../coordinate.js\").CoordinateFormat} format The format to render the current\n   *     position in.\n   * @observable\n   * @api\n   */\n  setCoordinateFormat(format) {\n    this.set(COORDINATE_FORMAT, format);\n  }\n\n  /**\n   * Set the projection that is used to report the mouse position.\n   * @param {import(\"../proj.js\").ProjectionLike} projection The projection to report mouse\n   *     position in.\n   * @observable\n   * @api\n   */\n  setProjection(projection) {\n    this.set(PROJECTION, getProjection(projection));\n  }\n\n  /**\n   * @param {?import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @private\n   */\n  updateHTML_(pixel) {\n    let html = this.placeholder_;\n    if (pixel && this.mapProjection_) {\n      if (!this.transform_) {\n        const projection = this.getProjection();\n        if (projection) {\n          this.transform_ = getTransformFromProjections(\n            this.mapProjection_,\n            projection,\n          );\n        } else {\n          this.transform_ = identityTransform;\n        }\n      }\n      const map = this.getMap();\n      const coordinate = map.getCoordinateFromPixelInternal(pixel);\n      if (coordinate) {\n        const userProjection = getUserProjection();\n        if (userProjection) {\n          this.transform_ = getTransformFromProjections(\n            this.mapProjection_,\n            userProjection,\n          );\n        }\n        this.transform_(coordinate, coordinate);\n        if (this.wrapX_) {\n          const projection =\n            userProjection || this.getProjection() || this.mapProjection_;\n          wrapX(coordinate, projection);\n        }\n        const coordinateFormat = this.getCoordinateFormat();\n        if (coordinateFormat) {\n          html = coordinateFormat(coordinate);\n        } else {\n          html = coordinate.toString();\n        }\n      }\n    }\n    if (!this.renderedHTML_ || html !== this.renderedHTML_) {\n      this.element.innerHTML = html;\n      this.renderedHTML_ = html;\n    }\n  }\n\n  /**\n   * Update the projection. Rendering of the coordinates is done in\n   * `handleMouseMove` and `handleMouseUp`.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n  render(mapEvent) {\n    const frameState = mapEvent.frameState;\n    if (!frameState) {\n      this.mapProjection_ = null;\n    } else {\n      if (this.mapProjection_ != frameState.viewState.projection) {\n        this.mapProjection_ = frameState.viewState.projection;\n        this.transform_ = null;\n      }\n    }\n  }\n}\n\nexport default MousePosition;\n","/**\n * @module ol/control/ScaleLine\n */\nimport {CLASS_UNSELECTABLE} from '../css.js';\nimport {METERS_PER_UNIT, getPointResolution} from '../proj.js';\nimport Control from './Control.js';\n\n/**\n * @type {string}\n */\nconst UNITS_PROP = 'units';\n\n/**\n * @typedef {'degrees' | 'imperial' | 'nautical' | 'metric' | 'us'} Units\n * Units for the scale line.\n */\n\n/**\n * @const\n * @type {Array<number>}\n */\nconst LEADING_DIGITS = [1, 2, 5];\n\n/**\n * @const\n * @type {number}\n */\nconst DEFAULT_DPI = 25.4 / 0.28;\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:units', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types\n *     |'change:units', Return>} ScaleLineOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className] CSS class name. The default is `ol-scale-bar` when configured with\n * `bar: true`. Otherwise the default is `ol-scale-line`.\n * @property {number} [minWidth=64] Minimum width in pixels at the OGC default dpi. The width will be\n * adjusted to match the dpi used.\n * @property {number} [maxWidth] Maximum width in pixels at the OGC default dpi. The width will be\n * adjusted to match the dpi used.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n * @property {HTMLElement|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {Units} [units='metric'] Units.\n * @property {boolean} [bar=false] Render scalebars instead of a line.\n * @property {number} [steps=4] Number of steps the scalebar should use. Use even numbers\n * for best results. Only applies when `bar` is `true`.\n * @property {boolean} [text=false] Render the text scale above of the scalebar. Only applies\n * when `bar` is `true`.\n * @property {number|undefined} [dpi=undefined] dpi of output device such as printer. Only applies\n * when `bar` is `true`. If undefined the OGC default screen pixel size of 0.28mm will be assumed.\n */\n\n/**\n * @classdesc\n * A control displaying rough y-axis distances, calculated for the center of the\n * viewport. For conformal projections (e.g. EPSG:3857, the default view\n * projection in OpenLayers), the scale is valid for all directions.\n * No scale line will be shown when the y-axis distance of a pixel at the\n * viewport center cannot be calculated in the view projection.\n * By default the scale line will show in the bottom left portion of the map,\n * but this can be changed by using the css selector `.ol-scale-line`.\n * When specifying `bar` as `true`, a scalebar will be rendered instead\n * of a scaleline.\n * For cartesian measurements of the scaleline, you need to set the\n * `getPointResolution` method of your projection to simply return the input\n * value, e.g. `projection.setGetPointResolution(r => r);`\n *\n * @api\n */\nclass ScaleLine extends Control {\n  /**\n   * @param {Options} [options] Scale line options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    const element = document.createElement('div');\n    element.style.pointerEvents = 'none';\n\n    super({\n      element: element,\n      render: options.render,\n      target: options.target,\n    });\n\n    /***\n     * @type {ScaleLineOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {ScaleLineOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {ScaleLineOnSignature<void>}\n     */\n    this.un;\n\n    const className =\n      options.className !== undefined\n        ? options.className\n        : options.bar\n          ? 'ol-scale-bar'\n          : 'ol-scale-line';\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this.innerElement_ = document.createElement('div');\n    this.innerElement_.className = className + '-inner';\n\n    this.element.className = className + ' ' + CLASS_UNSELECTABLE;\n    this.element.appendChild(this.innerElement_);\n\n    /**\n     * @private\n     * @type {?import(\"../View.js\").State}\n     */\n    this.viewState_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minWidth_ = options.minWidth !== undefined ? options.minWidth : 64;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.maxWidth_ = options.maxWidth;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderedVisible_ = false;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.renderedWidth_ = undefined;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.renderedHTML_ = '';\n\n    this.addChangeListener(UNITS_PROP, this.handleUnitsChanged_);\n\n    this.setUnits(options.units || 'metric');\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.scaleBar_ = options.bar || false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.scaleBarSteps_ = options.steps || 4;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.scaleBarText_ = options.text || false;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.dpi_ = options.dpi || undefined;\n  }\n\n  /**\n   * Return the units to use in the scale line.\n   * @return {Units} The units\n   * to use in the scale line.\n   * @observable\n   * @api\n   */\n  getUnits() {\n    return this.get(UNITS_PROP);\n  }\n\n  /**\n   * @private\n   */\n  handleUnitsChanged_() {\n    this.updateElement_();\n  }\n\n  /**\n   * Set the units to use in the scale line.\n   * @param {Units} units The units to use in the scale line.\n   * @observable\n   * @api\n   */\n  setUnits(units) {\n    this.set(UNITS_PROP, units);\n  }\n\n  /**\n   * Specify the dpi of output device such as printer.\n   * @param {number|undefined} dpi The dpi of output device.\n   * @api\n   */\n  setDpi(dpi) {\n    this.dpi_ = dpi;\n  }\n\n  /**\n   * @private\n   */\n  updateElement_() {\n    const viewState = this.viewState_;\n\n    if (!viewState) {\n      if (this.renderedVisible_) {\n        this.element.style.display = 'none';\n        this.renderedVisible_ = false;\n      }\n      return;\n    }\n\n    const center = viewState.center;\n    const projection = viewState.projection;\n    const units = this.getUnits();\n    const pointResolutionUnits = units == 'degrees' ? 'degrees' : 'm';\n    let pointResolution = getPointResolution(\n      projection,\n      viewState.resolution,\n      center,\n      pointResolutionUnits,\n    );\n\n    const minWidth =\n      (this.minWidth_ * (this.dpi_ || DEFAULT_DPI)) / DEFAULT_DPI;\n\n    const maxWidth =\n      this.maxWidth_ !== undefined\n        ? (this.maxWidth_ * (this.dpi_ || DEFAULT_DPI)) / DEFAULT_DPI\n        : undefined;\n\n    let nominalCount = minWidth * pointResolution;\n    let suffix = '';\n    if (units == 'degrees') {\n      const metersPerDegree = METERS_PER_UNIT.degrees;\n      nominalCount *= metersPerDegree;\n      if (nominalCount < metersPerDegree / 60) {\n        suffix = '\\u2033'; // seconds\n        pointResolution *= 3600;\n      } else if (nominalCount < metersPerDegree) {\n        suffix = '\\u2032'; // minutes\n        pointResolution *= 60;\n      } else {\n        suffix = '\\u00b0'; // degrees\n      }\n    } else if (units == 'imperial') {\n      if (nominalCount < 0.9144) {\n        suffix = 'in';\n        pointResolution /= 0.0254;\n      } else if (nominalCount < 1609.344) {\n        suffix = 'ft';\n        pointResolution /= 0.3048;\n      } else {\n        suffix = 'mi';\n        pointResolution /= 1609.344;\n      }\n    } else if (units == 'nautical') {\n      pointResolution /= 1852;\n      suffix = 'NM';\n    } else if (units == 'metric') {\n      if (nominalCount < 1e-6) {\n        suffix = 'nm';\n        pointResolution *= 1e9;\n      } else if (nominalCount < 0.001) {\n        suffix = 'μm';\n        pointResolution *= 1000000;\n      } else if (nominalCount < 1) {\n        suffix = 'mm';\n        pointResolution *= 1000;\n      } else if (nominalCount < 1000) {\n        suffix = 'm';\n      } else {\n        suffix = 'km';\n        pointResolution /= 1000;\n      }\n    } else if (units == 'us') {\n      if (nominalCount < 0.9144) {\n        suffix = 'in';\n        pointResolution *= 39.37;\n      } else if (nominalCount < 1609.344) {\n        suffix = 'ft';\n        pointResolution /= 0.30480061;\n      } else {\n        suffix = 'mi';\n        pointResolution /= 1609.3472;\n      }\n    } else {\n      throw new Error('Invalid units');\n    }\n\n    let i = 3 * Math.floor(Math.log(minWidth * pointResolution) / Math.log(10));\n    let count, width, decimalCount;\n    let previousCount = 0;\n    let previousWidth, previousDecimalCount;\n    while (true) {\n      decimalCount = Math.floor(i / 3);\n      const decimal = Math.pow(10, decimalCount);\n      count = LEADING_DIGITS[((i % 3) + 3) % 3] * decimal;\n      width = Math.round(count / pointResolution);\n      if (isNaN(width)) {\n        this.element.style.display = 'none';\n        this.renderedVisible_ = false;\n        return;\n      }\n      if (maxWidth !== undefined && width >= maxWidth) {\n        count = previousCount;\n        width = previousWidth;\n        decimalCount = previousDecimalCount;\n        break;\n      } else if (width >= minWidth) {\n        break;\n      }\n      previousCount = count;\n      previousWidth = width;\n      previousDecimalCount = decimalCount;\n      ++i;\n    }\n    const html = this.scaleBar_\n      ? this.createScaleBar(width, count, suffix)\n      : count.toFixed(decimalCount < 0 ? -decimalCount : 0) + ' ' + suffix;\n\n    if (this.renderedHTML_ != html) {\n      this.innerElement_.innerHTML = html;\n      this.renderedHTML_ = html;\n    }\n\n    if (this.renderedWidth_ != width) {\n      this.innerElement_.style.width = width + 'px';\n      this.renderedWidth_ = width;\n    }\n\n    if (!this.renderedVisible_) {\n      this.element.style.display = '';\n      this.renderedVisible_ = true;\n    }\n  }\n\n  /**\n   * @private\n   * @param {number} width The current width of the scalebar.\n   * @param {number} scale The current scale.\n   * @param {string} suffix The suffix to append to the scale text.\n   * @return {string} The stringified HTML of the scalebar.\n   */\n  createScaleBar(width, scale, suffix) {\n    const resolutionScale = this.getScaleForResolution();\n    const mapScale =\n      resolutionScale < 1\n        ? Math.round(1 / resolutionScale).toLocaleString() + ' : 1'\n        : '1 : ' + Math.round(resolutionScale).toLocaleString();\n    const steps = this.scaleBarSteps_;\n    const stepWidth = width / steps;\n    const scaleSteps = [this.createMarker('absolute')];\n    for (let i = 0; i < steps; ++i) {\n      const cls =\n        i % 2 === 0 ? 'ol-scale-singlebar-odd' : 'ol-scale-singlebar-even';\n      scaleSteps.push(\n        '<div>' +\n          '<div ' +\n          `class=\"ol-scale-singlebar ${cls}\" ` +\n          `style=\"width: ${stepWidth}px;\"` +\n          '>' +\n          '</div>' +\n          this.createMarker('relative') +\n          // render text every second step, except when only 2 steps\n          (i % 2 === 0 || steps === 2\n            ? this.createStepText(i, width, false, scale, suffix)\n            : '') +\n          '</div>',\n      );\n    }\n    // render text at the end\n    scaleSteps.push(this.createStepText(steps, width, true, scale, suffix));\n\n    const scaleBarText = this.scaleBarText_\n      ? `<div class=\"ol-scale-text\" style=\"width: ${width}px;\">` +\n        mapScale +\n        '</div>'\n      : '';\n    return scaleBarText + scaleSteps.join('');\n  }\n\n  /**\n   * Creates a marker at given position\n   * @param {'absolute'|'relative'} position The position, absolute or relative\n   * @return {string} The stringified div containing the marker\n   */\n  createMarker(position) {\n    const top = position === 'absolute' ? 3 : -10;\n    return (\n      '<div ' +\n      'class=\"ol-scale-step-marker\" ' +\n      `style=\"position: ${position}; top: ${top}px;\"` +\n      '></div>'\n    );\n  }\n\n  /**\n   * Creates the label for a marker marker at given position\n   * @param {number} i The iterator\n   * @param {number} width The width the scalebar will currently use\n   * @param {boolean} isLast Flag indicating if we add the last step text\n   * @param {number} scale The current scale for the whole scalebar\n   * @param {string} suffix The suffix for the scale\n   * @return {string} The stringified div containing the step text\n   */\n  createStepText(i, width, isLast, scale, suffix) {\n    const length =\n      i === 0 ? 0 : Math.round((scale / this.scaleBarSteps_) * i * 100) / 100;\n    const lengthString = length + (i === 0 ? '' : ' ' + suffix);\n    const margin = i === 0 ? -3 : (width / this.scaleBarSteps_) * -1;\n    const minWidth = i === 0 ? 0 : (width / this.scaleBarSteps_) * 2;\n    return (\n      '<div ' +\n      'class=\"ol-scale-step-text\" ' +\n      'style=\"' +\n      `margin-left: ${margin}px;` +\n      `text-align: ${i === 0 ? 'left' : 'center'};` +\n      `min-width: ${minWidth}px;` +\n      `left: ${isLast ? width + 'px' : 'unset'};` +\n      '\">' +\n      lengthString +\n      '</div>'\n    );\n  }\n\n  /**\n   * Returns the appropriate scale for the given resolution and units.\n   * @return {number} The appropriate scale.\n   */\n  getScaleForResolution() {\n    const resolution = getPointResolution(\n      this.viewState_.projection,\n      this.viewState_.resolution,\n      this.viewState_.center,\n      'm',\n    );\n    const dpi = this.dpi_ || DEFAULT_DPI;\n    const inchesPerMeter = 1000 / 25.4;\n    return resolution * inchesPerMeter * dpi;\n  }\n\n  /**\n   * Update the scale line element.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n  render(mapEvent) {\n    const frameState = mapEvent.frameState;\n    if (!frameState) {\n      this.viewState_ = null;\n    } else {\n      this.viewState_ = frameState.viewState;\n    }\n    this.updateElement_();\n  }\n}\n\nexport default ScaleLine;\n"],"names":["Property","Overlay","options","undefined","document","element","map","container","offset","position","panIntoViewOptions","mapRect","overlayRect","myMargin","offsetLeft","offsetRight","offsetTop","offsetBottom","delta","Math","center","centerPx","newCenterPx","panOptions","size","box","offsetX","window","offsetY","positioning","visible","pixel","mapSize","style","x","y","posX","posY","transform","FullScreenEventType","Control","label","labelActive","tipLabel","EventType","event","doc","isFullScreenSupported","isFullScreen","exitFullScreen","requestFullScreen","wasInFullscreen","fullscreen","oldMap","MapProperty","listeners","i","ii","body","OverviewMap","className","collapseLabel","activeLabel","button","ovmap","Map","Collection","layer","cssClasses","overlay","overlayBox","computeDesiredMousePosition","mousePosition","move","coordinates","endMoving","ownerDocument","oldView","ObjectEventType","view","newView","View","ViewProperty","extent","ovmapSize","ovextent","ovview","topLeftPixel","bottomRightPixel","boxWidth","boxHeight","ovmapWidth","ovmapHeight","ratio","steps","MAX_RATIO","rotation","resolution","ovresolution","width","height","MapEventType","collapsible","collapsed","rotateWithView","mapEvent","Direction","ZoomSlider","thumbElement","containerElement","containerWidth","containerHeight","containerStyle","getComputedStyle","parseFloat","thumb","thumbStyle","thumbWidth","thumbHeight","relativePosition","zoom","drag","end","deltaX","deltaY","res","amount","fn","ZoomToExtent","PROJECTION","COORDINATE_FORMAT","MousePosition","viewport","format","projection","html","coordinate","userProjection","coordinateFormat","frameState","UNITS_PROP","LEADING_DIGITS","DEFAULT_DPI","ScaleLine","units","dpi","count","decimalCount","previousWidth","previousDecimalCount","viewState","pointResolution","minWidth","maxWidth","nominalCount","suffix","metersPerDegree","Error","previousCount","decimal","isNaN","scale","resolutionScale","mapScale","stepWidth","scaleSteps","cls","scaleBarText","isLast","length","margin"],"mappings":"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"}