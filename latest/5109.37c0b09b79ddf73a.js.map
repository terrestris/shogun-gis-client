{"version":3,"file":"5109.37c0b09b79ddf73a.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/ol/extent.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/extent/Relationship.js"],"sourcesContent":["/**\n * @module ol/extent\n */\nimport Relationship from './extent/Relationship.js';\n\n/**\n * An array of numbers representing an extent: `[minx, miny, maxx, maxy]`.\n * @typedef {Array<number>} Extent\n * @api\n */\n\n/**\n * Extent corner.\n * @typedef {'bottom-left' | 'bottom-right' | 'top-left' | 'top-right'} Corner\n */\n\n/**\n * Build an extent that includes all given coordinates.\n *\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @return {Extent} Bounding extent.\n * @api\n */\nexport function boundingExtent(coordinates) {\n  const extent = createEmpty();\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n    extendCoordinate(extent, coordinates[i]);\n  }\n  return extent;\n}\n\n/**\n * @param {Array<number>} xs Xs.\n * @param {Array<number>} ys Ys.\n * @param {Extent} [dest] Destination extent.\n * @private\n * @return {Extent} Extent.\n */\nfunction _boundingExtentXYs(xs, ys, dest) {\n  const minX = Math.min.apply(null, xs);\n  const minY = Math.min.apply(null, ys);\n  const maxX = Math.max.apply(null, xs);\n  const maxY = Math.max.apply(null, ys);\n  return createOrUpdate(minX, minY, maxX, maxY, dest);\n}\n\n/**\n * Return extent increased by the provided value.\n * @param {Extent} extent Extent.\n * @param {number} value The amount by which the extent should be buffered.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n * @api\n */\nexport function buffer(extent, value, dest) {\n  if (dest) {\n    dest[0] = extent[0] - value;\n    dest[1] = extent[1] - value;\n    dest[2] = extent[2] + value;\n    dest[3] = extent[3] + value;\n    return dest;\n  }\n  return [\n    extent[0] - value,\n    extent[1] - value,\n    extent[2] + value,\n    extent[3] + value,\n  ];\n}\n\n/**\n * Creates a clone of an extent.\n *\n * @param {Extent} extent Extent to clone.\n * @param {Extent} [dest] Extent.\n * @return {Extent} The clone.\n */\nexport function clone(extent, dest) {\n  if (dest) {\n    dest[0] = extent[0];\n    dest[1] = extent[1];\n    dest[2] = extent[2];\n    dest[3] = extent[3];\n    return dest;\n  }\n  return extent.slice();\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {number} Closest squared distance.\n */\nexport function closestSquaredDistanceXY(extent, x, y) {\n  let dx, dy;\n  if (x < extent[0]) {\n    dx = extent[0] - x;\n  } else if (extent[2] < x) {\n    dx = x - extent[2];\n  } else {\n    dx = 0;\n  }\n  if (y < extent[1]) {\n    dy = extent[1] - y;\n  } else if (extent[3] < y) {\n    dy = y - extent[3];\n  } else {\n    dy = 0;\n  }\n  return dx * dx + dy * dy;\n}\n\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @return {boolean} The coordinate is contained in the extent.\n * @api\n */\nexport function containsCoordinate(extent, coordinate) {\n  return containsXY(extent, coordinate[0], coordinate[1]);\n}\n\n/**\n * Check if one extent contains another.\n *\n * An extent is deemed contained if it lies completely within the other extent,\n * including if they share one or more edges.\n *\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {boolean} The second extent is contained by or on the edge of the\n *     first.\n * @api\n */\nexport function containsExtent(extent1, extent2) {\n  return (\n    extent1[0] <= extent2[0] &&\n    extent2[2] <= extent1[2] &&\n    extent1[1] <= extent2[1] &&\n    extent2[3] <= extent1[3]\n  );\n}\n\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {Extent} extent Extent.\n * @param {number} x X coordinate.\n * @param {number} y Y coordinate.\n * @return {boolean} The x, y values are contained in the extent.\n * @api\n */\nexport function containsXY(extent, x, y) {\n  return extent[0] <= x && x <= extent[2] && extent[1] <= y && y <= extent[3];\n}\n\n/**\n * Get the relationship between a coordinate and extent.\n * @param {Extent} extent The extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate The coordinate.\n * @return {import(\"./extent/Relationship.js\").default} The relationship (bitwise compare with\n *     import(\"./extent/Relationship.js\").Relationship).\n */\nexport function coordinateRelationship(extent, coordinate) {\n  const minX = extent[0];\n  const minY = extent[1];\n  const maxX = extent[2];\n  const maxY = extent[3];\n  const x = coordinate[0];\n  const y = coordinate[1];\n  let relationship = Relationship.UNKNOWN;\n  if (x < minX) {\n    relationship = relationship | Relationship.LEFT;\n  } else if (x > maxX) {\n    relationship = relationship | Relationship.RIGHT;\n  }\n  if (y < minY) {\n    relationship = relationship | Relationship.BELOW;\n  } else if (y > maxY) {\n    relationship = relationship | Relationship.ABOVE;\n  }\n  if (relationship === Relationship.UNKNOWN) {\n    relationship = Relationship.INTERSECTING;\n  }\n  return relationship;\n}\n\n/**\n * Create an empty extent.\n * @return {Extent} Empty extent.\n * @api\n */\nexport function createEmpty() {\n  return [Infinity, Infinity, -Infinity, -Infinity];\n}\n\n/**\n * Create a new extent or update the provided extent.\n * @param {number} minX Minimum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxX Maximum X.\n * @param {number} maxY Maximum Y.\n * @param {Extent} [dest] Destination extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdate(minX, minY, maxX, maxY, dest) {\n  if (dest) {\n    dest[0] = minX;\n    dest[1] = minY;\n    dest[2] = maxX;\n    dest[3] = maxY;\n    return dest;\n  }\n  return [minX, minY, maxX, maxY];\n}\n\n/**\n * Create a new empty extent or make the provided one empty.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateEmpty(dest) {\n  return createOrUpdate(Infinity, Infinity, -Infinity, -Infinity, dest);\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromCoordinate(coordinate, dest) {\n  const x = coordinate[0];\n  const y = coordinate[1];\n  return createOrUpdate(x, y, x, y, dest);\n}\n\n/**\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromCoordinates(coordinates, dest) {\n  const extent = createOrUpdateEmpty(dest);\n  return extendCoordinates(extent, coordinates);\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromFlatCoordinates(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  dest,\n) {\n  const extent = createOrUpdateEmpty(dest);\n  return extendFlatCoordinates(extent, flatCoordinates, offset, end, stride);\n}\n\n/**\n * @param {Array<Array<import(\"./coordinate.js\").Coordinate>>} rings Rings.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromRings(rings, dest) {\n  const extent = createOrUpdateEmpty(dest);\n  return extendRings(extent, rings);\n}\n\n/**\n * Determine if two extents are equivalent.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {boolean} The two extents are equivalent.\n * @api\n */\nexport function equals(extent1, extent2) {\n  return (\n    extent1[0] == extent2[0] &&\n    extent1[2] == extent2[2] &&\n    extent1[1] == extent2[1] &&\n    extent1[3] == extent2[3]\n  );\n}\n\n/**\n * Determine if two extents are approximately equivalent.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @param {number} tolerance Tolerance in extent coordinate units.\n * @return {boolean} The two extents differ by less than the tolerance.\n */\nexport function approximatelyEquals(extent1, extent2, tolerance) {\n  return (\n    Math.abs(extent1[0] - extent2[0]) < tolerance &&\n    Math.abs(extent1[2] - extent2[2]) < tolerance &&\n    Math.abs(extent1[1] - extent2[1]) < tolerance &&\n    Math.abs(extent1[3] - extent2[3]) < tolerance\n  );\n}\n\n/**\n * Modify an extent to include another extent.\n * @param {Extent} extent1 The extent to be modified.\n * @param {Extent} extent2 The extent that will be included in the first.\n * @return {Extent} A reference to the first (extended) extent.\n * @api\n */\nexport function extend(extent1, extent2) {\n  if (extent2[0] < extent1[0]) {\n    extent1[0] = extent2[0];\n  }\n  if (extent2[2] > extent1[2]) {\n    extent1[2] = extent2[2];\n  }\n  if (extent2[1] < extent1[1]) {\n    extent1[1] = extent2[1];\n  }\n  if (extent2[3] > extent1[3]) {\n    extent1[3] = extent2[3];\n  }\n  return extent1;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n */\nexport function extendCoordinate(extent, coordinate) {\n  if (coordinate[0] < extent[0]) {\n    extent[0] = coordinate[0];\n  }\n  if (coordinate[0] > extent[2]) {\n    extent[2] = coordinate[0];\n  }\n  if (coordinate[1] < extent[1]) {\n    extent[1] = coordinate[1];\n  }\n  if (coordinate[1] > extent[3]) {\n    extent[3] = coordinate[1];\n  }\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @return {Extent} Extent.\n */\nexport function extendCoordinates(extent, coordinates) {\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n    extendCoordinate(extent, coordinates[i]);\n  }\n  return extent;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {Extent} Extent.\n */\nexport function extendFlatCoordinates(\n  extent,\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n) {\n  for (; offset < end; offset += stride) {\n    extendXY(extent, flatCoordinates[offset], flatCoordinates[offset + 1]);\n  }\n  return extent;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {Array<Array<import(\"./coordinate.js\").Coordinate>>} rings Rings.\n * @return {Extent} Extent.\n */\nexport function extendRings(extent, rings) {\n  for (let i = 0, ii = rings.length; i < ii; ++i) {\n    extendCoordinates(extent, rings[i]);\n  }\n  return extent;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n */\nexport function extendXY(extent, x, y) {\n  extent[0] = Math.min(extent[0], x);\n  extent[1] = Math.min(extent[1], y);\n  extent[2] = Math.max(extent[2], x);\n  extent[3] = Math.max(extent[3], y);\n}\n\n/**\n * This function calls `callback` for each corner of the extent. If the\n * callback returns a truthy value the function returns that value\n * immediately. Otherwise the function returns `false`.\n * @param {Extent} extent Extent.\n * @param {function(import(\"./coordinate.js\").Coordinate): S} callback Callback.\n * @return {S|boolean} Value.\n * @template S\n */\nexport function forEachCorner(extent, callback) {\n  let val;\n  val = callback(getBottomLeft(extent));\n  if (val) {\n    return val;\n  }\n  val = callback(getBottomRight(extent));\n  if (val) {\n    return val;\n  }\n  val = callback(getTopRight(extent));\n  if (val) {\n    return val;\n  }\n  val = callback(getTopLeft(extent));\n  if (val) {\n    return val;\n  }\n  return false;\n}\n\n/**\n * Get the size of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Area.\n * @api\n */\nexport function getArea(extent) {\n  let area = 0;\n  if (!isEmpty(extent)) {\n    area = getWidth(extent) * getHeight(extent);\n  }\n  return area;\n}\n\n/**\n * Get the bottom left coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Bottom left coordinate.\n * @api\n */\nexport function getBottomLeft(extent) {\n  return [extent[0], extent[1]];\n}\n\n/**\n * Get the bottom right coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Bottom right coordinate.\n * @api\n */\nexport function getBottomRight(extent) {\n  return [extent[2], extent[1]];\n}\n\n/**\n * Get the center coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Center.\n * @api\n */\nexport function getCenter(extent) {\n  return [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];\n}\n\n/**\n * Get a corner coordinate of an extent.\n * @param {Extent} extent Extent.\n * @param {Corner} corner Corner.\n * @return {import(\"./coordinate.js\").Coordinate} Corner coordinate.\n */\nexport function getCorner(extent, corner) {\n  let coordinate;\n  if (corner === 'bottom-left') {\n    coordinate = getBottomLeft(extent);\n  } else if (corner === 'bottom-right') {\n    coordinate = getBottomRight(extent);\n  } else if (corner === 'top-left') {\n    coordinate = getTopLeft(extent);\n  } else if (corner === 'top-right') {\n    coordinate = getTopRight(extent);\n  } else {\n    throw new Error('Invalid corner');\n  }\n  return coordinate;\n}\n\n/**\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {number} Enlarged area.\n */\nexport function getEnlargedArea(extent1, extent2) {\n  const minX = Math.min(extent1[0], extent2[0]);\n  const minY = Math.min(extent1[1], extent2[1]);\n  const maxX = Math.max(extent1[2], extent2[2]);\n  const maxY = Math.max(extent1[3], extent2[3]);\n  return (maxX - minX) * (maxY - minY);\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} center Center.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @param {import(\"./size.js\").Size} size Size.\n * @param {Extent} [dest] Destination extent.\n * @return {Extent} Extent.\n */\nexport function getForViewAndSize(center, resolution, rotation, size, dest) {\n  const [x0, y0, x1, y1, x2, y2, x3, y3] = getRotatedViewport(\n    center,\n    resolution,\n    rotation,\n    size,\n  );\n  return createOrUpdate(\n    Math.min(x0, x1, x2, x3),\n    Math.min(y0, y1, y2, y3),\n    Math.max(x0, x1, x2, x3),\n    Math.max(y0, y1, y2, y3),\n    dest,\n  );\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} center Center.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @param {import(\"./size.js\").Size} size Size.\n * @return {Array<number>} Linear ring representing the viewport.\n */\nexport function getRotatedViewport(center, resolution, rotation, size) {\n  const dx = (resolution * size[0]) / 2;\n  const dy = (resolution * size[1]) / 2;\n  const cosRotation = Math.cos(rotation);\n  const sinRotation = Math.sin(rotation);\n  const xCos = dx * cosRotation;\n  const xSin = dx * sinRotation;\n  const yCos = dy * cosRotation;\n  const ySin = dy * sinRotation;\n  const x = center[0];\n  const y = center[1];\n  return [\n    x - xCos + ySin,\n    y - xSin - yCos,\n    x - xCos - ySin,\n    y - xSin + yCos,\n    x + xCos - ySin,\n    y + xSin + yCos,\n    x + xCos + ySin,\n    y + xSin - yCos,\n    x - xCos + ySin,\n    y - xSin - yCos,\n  ];\n}\n\n/**\n * Get the height of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Height.\n * @api\n */\nexport function getHeight(extent) {\n  return extent[3] - extent[1];\n}\n\n/**\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {number} Intersection area.\n */\nexport function getIntersectionArea(extent1, extent2) {\n  const intersection = getIntersection(extent1, extent2);\n  return getArea(intersection);\n}\n\n/**\n * Get the intersection of two extents.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @param {Extent} [dest] Optional extent to populate with intersection.\n * @return {Extent} Intersecting extent.\n * @api\n */\nexport function getIntersection(extent1, extent2, dest) {\n  const intersection = dest ? dest : createEmpty();\n  if (intersects(extent1, extent2)) {\n    if (extent1[0] > extent2[0]) {\n      intersection[0] = extent1[0];\n    } else {\n      intersection[0] = extent2[0];\n    }\n    if (extent1[1] > extent2[1]) {\n      intersection[1] = extent1[1];\n    } else {\n      intersection[1] = extent2[1];\n    }\n    if (extent1[2] < extent2[2]) {\n      intersection[2] = extent1[2];\n    } else {\n      intersection[2] = extent2[2];\n    }\n    if (extent1[3] < extent2[3]) {\n      intersection[3] = extent1[3];\n    } else {\n      intersection[3] = extent2[3];\n    }\n  } else {\n    createOrUpdateEmpty(intersection);\n  }\n  return intersection;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @return {number} Margin.\n */\nexport function getMargin(extent) {\n  return getWidth(extent) + getHeight(extent);\n}\n\n/**\n * Get the size (width, height) of an extent.\n * @param {Extent} extent The extent.\n * @return {import(\"./size.js\").Size} The extent size.\n * @api\n */\nexport function getSize(extent) {\n  return [extent[2] - extent[0], extent[3] - extent[1]];\n}\n\n/**\n * Get the top left coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Top left coordinate.\n * @api\n */\nexport function getTopLeft(extent) {\n  return [extent[0], extent[3]];\n}\n\n/**\n * Get the top right coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Top right coordinate.\n * @api\n */\nexport function getTopRight(extent) {\n  return [extent[2], extent[3]];\n}\n\n/**\n * Get the width of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Width.\n * @api\n */\nexport function getWidth(extent) {\n  return extent[2] - extent[0];\n}\n\n/**\n * Determine if one extent intersects another.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent.\n * @return {boolean} The two extents intersect.\n * @api\n */\nexport function intersects(extent1, extent2) {\n  return (\n    extent1[0] <= extent2[2] &&\n    extent1[2] >= extent2[0] &&\n    extent1[1] <= extent2[3] &&\n    extent1[3] >= extent2[1]\n  );\n}\n\n/**\n * Determine if an extent is empty.\n * @param {Extent} extent Extent.\n * @return {boolean} Is empty.\n * @api\n */\nexport function isEmpty(extent) {\n  return extent[2] < extent[0] || extent[3] < extent[1];\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function returnOrUpdate(extent, dest) {\n  if (dest) {\n    dest[0] = extent[0];\n    dest[1] = extent[1];\n    dest[2] = extent[2];\n    dest[3] = extent[3];\n    return dest;\n  }\n  return extent;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {number} value Value.\n */\nexport function scaleFromCenter(extent, value) {\n  const deltaX = ((extent[2] - extent[0]) / 2) * (value - 1);\n  const deltaY = ((extent[3] - extent[1]) / 2) * (value - 1);\n  extent[0] -= deltaX;\n  extent[2] += deltaX;\n  extent[1] -= deltaY;\n  extent[3] += deltaY;\n}\n\n/**\n * Determine if the segment between two coordinates intersects (crosses,\n * touches, or is contained by) the provided extent.\n * @param {Extent} extent The extent.\n * @param {import(\"./coordinate.js\").Coordinate} start Segment start coordinate.\n * @param {import(\"./coordinate.js\").Coordinate} end Segment end coordinate.\n * @return {boolean} The segment intersects the extent.\n */\nexport function intersectsSegment(extent, start, end) {\n  let intersects = false;\n  const startRel = coordinateRelationship(extent, start);\n  const endRel = coordinateRelationship(extent, end);\n  if (\n    startRel === Relationship.INTERSECTING ||\n    endRel === Relationship.INTERSECTING\n  ) {\n    intersects = true;\n  } else {\n    const minX = extent[0];\n    const minY = extent[1];\n    const maxX = extent[2];\n    const maxY = extent[3];\n    const startX = start[0];\n    const startY = start[1];\n    const endX = end[0];\n    const endY = end[1];\n    const slope = (endY - startY) / (endX - startX);\n    let x, y;\n    if (!!(endRel & Relationship.ABOVE) && !(startRel & Relationship.ABOVE)) {\n      // potentially intersects top\n      x = endX - (endY - maxY) / slope;\n      intersects = x >= minX && x <= maxX;\n    }\n    if (\n      !intersects &&\n      !!(endRel & Relationship.RIGHT) &&\n      !(startRel & Relationship.RIGHT)\n    ) {\n      // potentially intersects right\n      y = endY - (endX - maxX) * slope;\n      intersects = y >= minY && y <= maxY;\n    }\n    if (\n      !intersects &&\n      !!(endRel & Relationship.BELOW) &&\n      !(startRel & Relationship.BELOW)\n    ) {\n      // potentially intersects bottom\n      x = endX - (endY - minY) / slope;\n      intersects = x >= minX && x <= maxX;\n    }\n    if (\n      !intersects &&\n      !!(endRel & Relationship.LEFT) &&\n      !(startRel & Relationship.LEFT)\n    ) {\n      // potentially intersects left\n      y = endY - (endX - minX) * slope;\n      intersects = y >= minY && y <= maxY;\n    }\n  }\n  return intersects;\n}\n\n/**\n * Apply a transform function to the extent.\n * @param {Extent} extent Extent.\n * @param {import(\"./proj.js\").TransformFunction} transformFn Transform function.\n * Called with `[minX, minY, maxX, maxY]` extent coordinates.\n * @param {Extent} [dest] Destination extent.\n * @param {number} [stops] Number of stops per side used for the transform.\n * By default only the corners are used.\n * @return {Extent} Extent.\n * @api\n */\nexport function applyTransform(extent, transformFn, dest, stops) {\n  if (isEmpty(extent)) {\n    return createOrUpdateEmpty(dest);\n  }\n  let coordinates = [];\n  if (stops > 1) {\n    const width = extent[2] - extent[0];\n    const height = extent[3] - extent[1];\n    for (let i = 0; i < stops; ++i) {\n      coordinates.push(\n        extent[0] + (width * i) / stops,\n        extent[1],\n        extent[2],\n        extent[1] + (height * i) / stops,\n        extent[2] - (width * i) / stops,\n        extent[3],\n        extent[0],\n        extent[3] - (height * i) / stops,\n      );\n    }\n  } else {\n    coordinates = [\n      extent[0],\n      extent[1],\n      extent[2],\n      extent[1],\n      extent[2],\n      extent[3],\n      extent[0],\n      extent[3],\n    ];\n  }\n  transformFn(coordinates, coordinates, 2);\n  const xs = [];\n  const ys = [];\n  for (let i = 0, l = coordinates.length; i < l; i += 2) {\n    xs.push(coordinates[i]);\n    ys.push(coordinates[i + 1]);\n  }\n  return _boundingExtentXYs(xs, ys, dest);\n}\n\n/**\n * Modifies the provided extent in-place to be within the real world\n * extent.\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./proj/Projection.js\").default} projection Projection\n * @return {Extent} The extent within the real world extent.\n */\nexport function wrapX(extent, projection) {\n  const projectionExtent = projection.getExtent();\n  const center = getCenter(extent);\n  if (\n    projection.canWrapX() &&\n    (center[0] < projectionExtent[0] || center[0] >= projectionExtent[2])\n  ) {\n    const worldWidth = getWidth(projectionExtent);\n    const worldsAway = Math.floor(\n      (center[0] - projectionExtent[0]) / worldWidth,\n    );\n    const offset = worldsAway * worldWidth;\n    extent[0] -= offset;\n    extent[2] -= offset;\n  }\n  return extent;\n}\n\n/**\n * Fits the extent to the real world\n *\n * If the extent does not cross the anti meridian, this will return the extent in an array\n * If the extent crosses the anti meridian, the extent will be sliced, so each part fits within the\n * real world\n *\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./proj/Projection.js\").default} projection Projection\n * @param {boolean} [multiWorld] Return all worlds\n * @return {Array<Extent>} The extent within the real world extent.\n */\nexport function wrapAndSliceX(extent, projection, multiWorld) {\n  if (projection.canWrapX()) {\n    const projectionExtent = projection.getExtent();\n\n    if (!isFinite(extent[0]) || !isFinite(extent[2])) {\n      return [[projectionExtent[0], extent[1], projectionExtent[2], extent[3]]];\n    }\n\n    wrapX(extent, projection);\n    const worldWidth = getWidth(projectionExtent);\n\n    if (getWidth(extent) > worldWidth && !multiWorld) {\n      // the extent wraps around on itself\n      return [[projectionExtent[0], extent[1], projectionExtent[2], extent[3]]];\n    }\n    if (extent[0] < projectionExtent[0]) {\n      // the extent crosses the anti meridian, so it needs to be sliced\n      return [\n        [extent[0] + worldWidth, extent[1], projectionExtent[2], extent[3]],\n        [projectionExtent[0], extent[1], extent[2], extent[3]],\n      ];\n    }\n    if (extent[2] > projectionExtent[2]) {\n      // the extent crosses the anti meridian, so it needs to be sliced\n      return [\n        [extent[0], extent[1], projectionExtent[2], extent[3]],\n        [projectionExtent[0], extent[1], extent[2] - worldWidth, extent[3]],\n      ];\n    }\n  }\n\n  return [extent];\n}\n","/**\n * @module ol/extent/Relationship\n */\n\n/**\n * Relationship to an extent.\n * @enum {number}\n */\nexport default {\n  UNKNOWN: 0,\n  INTERSECTING: 1,\n  ABOVE: 2,\n  RIGHT: 4,\n  BELOW: 8,\n  LEFT: 16,\n};\n"],"names":["c","Math","e","Error","r","t","i","isFinite"],"mappings":"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"}