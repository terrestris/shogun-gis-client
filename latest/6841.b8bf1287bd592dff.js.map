{"version":3,"file":"6841.b8bf1287bd592dff.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/ol/coordinate.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/math.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/string.js"],"sourcesContent":["/**\n * @module ol/coordinate\n */\nimport {getWidth} from './extent.js';\nimport {modulo, toFixed} from './math.js';\nimport {padNumber} from './string.js';\n\n/**\n * An array of numbers representing an `xy`, `xyz` or `xyzm` coordinate.\n * Example: `[16, 48]`.\n * @typedef {Array<number>} Coordinate\n * @api\n */\n\n/**\n * A function that takes a {@link module:ol/coordinate~Coordinate} and\n * transforms it into a `{string}`.\n *\n * @typedef {function((Coordinate|undefined)): string} CoordinateFormat\n * @api\n */\n\n/**\n * Add `delta` to `coordinate`. `coordinate` is modified in place and returned\n * by the function.\n *\n * Example:\n *\n *     import {add} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     add(coord, [-2, 4]);\n *     // coord is now [5.85, 51.983333]\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {Coordinate} delta Delta.\n * @return {Coordinate} The input coordinate adjusted by\n * the given delta.\n * @api\n */\nexport function add(coordinate, delta) {\n  coordinate[0] += +delta[0];\n  coordinate[1] += +delta[1];\n  return coordinate;\n}\n\n/**\n * Calculates the point closest to the passed coordinate on the passed circle.\n *\n * @param {Coordinate} coordinate The coordinate.\n * @param {import(\"./geom/Circle.js\").default} circle The circle.\n * @return {Coordinate} Closest point on the circumference.\n */\nexport function closestOnCircle(coordinate, circle) {\n  const r = circle.getRadius();\n  const center = circle.getCenter();\n  const x0 = center[0];\n  const y0 = center[1];\n  const x1 = coordinate[0];\n  const y1 = coordinate[1];\n\n  let dx = x1 - x0;\n  const dy = y1 - y0;\n  if (dx === 0 && dy === 0) {\n    dx = 1;\n  }\n  const d = Math.sqrt(dx * dx + dy * dy);\n\n  const x = x0 + (r * dx) / d;\n  const y = y0 + (r * dy) / d;\n\n  return [x, y];\n}\n\n/**\n * Calculates the point closest to the passed coordinate on the passed segment.\n * This is the foot of the perpendicular of the coordinate to the segment when\n * the foot is on the segment, or the closest segment coordinate when the foot\n * is outside the segment.\n *\n * @param {Coordinate} coordinate The coordinate.\n * @param {Array<Coordinate>} segment The two coordinates\n * of the segment.\n * @return {Coordinate} The foot of the perpendicular of\n * the coordinate to the segment.\n */\nexport function closestOnSegment(coordinate, segment) {\n  const x0 = coordinate[0];\n  const y0 = coordinate[1];\n  const start = segment[0];\n  const end = segment[1];\n  const x1 = start[0];\n  const y1 = start[1];\n  const x2 = end[0];\n  const y2 = end[1];\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  const along =\n    dx === 0 && dy === 0\n      ? 0\n      : (dx * (x0 - x1) + dy * (y0 - y1)) / (dx * dx + dy * dy || 0);\n  let x, y;\n  if (along <= 0) {\n    x = x1;\n    y = y1;\n  } else if (along >= 1) {\n    x = x2;\n    y = y2;\n  } else {\n    x = x1 + along * dx;\n    y = y1 + along * dy;\n  }\n  return [x, y];\n}\n\n/**\n * Returns a {@link module:ol/coordinate~CoordinateFormat} function that can be\n * used to format\n * a {Coordinate} to a string.\n *\n * Example without specifying the fractional digits:\n *\n *     import {createStringXY} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const stringifyFunc = createStringXY();\n *     const out = stringifyFunc(coord);\n *     // out is now '8, 48'\n *\n * Example with explicitly specifying 2 fractional digits:\n *\n *     import {createStringXY} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const stringifyFunc = createStringXY(2);\n *     const out = stringifyFunc(coord);\n *     // out is now '7.85, 47.98'\n *\n * @param {number} [fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {CoordinateFormat} Coordinate format.\n * @api\n */\nexport function createStringXY(fractionDigits) {\n  return (\n    /**\n     * @param {Coordinate} coordinate Coordinate.\n     * @return {string} String XY.\n     */\n    function (coordinate) {\n      return toStringXY(coordinate, fractionDigits);\n    }\n  );\n}\n\n/**\n * @param {string} hemispheres Hemispheres.\n * @param {number} degrees Degrees.\n * @param {number} [fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} String.\n */\nexport function degreesToStringHDMS(hemispheres, degrees, fractionDigits) {\n  const normalizedDegrees = modulo(degrees + 180, 360) - 180;\n  const x = Math.abs(3600 * normalizedDegrees);\n  const decimals = fractionDigits || 0;\n\n  let deg = Math.floor(x / 3600);\n  let min = Math.floor((x - deg * 3600) / 60);\n  let sec = toFixed(x - deg * 3600 - min * 60, decimals);\n\n  if (sec >= 60) {\n    sec = 0;\n    min += 1;\n  }\n\n  if (min >= 60) {\n    min = 0;\n    deg += 1;\n  }\n\n  let hdms = deg + '\\u00b0';\n  if (min !== 0 || sec !== 0) {\n    hdms += ' ' + padNumber(min, 2) + '\\u2032';\n  }\n  if (sec !== 0) {\n    hdms += ' ' + padNumber(sec, 2, decimals) + '\\u2033';\n  }\n  if (normalizedDegrees !== 0) {\n    hdms += ' ' + hemispheres.charAt(normalizedDegrees < 0 ? 1 : 0);\n  }\n\n  return hdms;\n}\n\n/**\n * Transforms the given {@link module:ol/coordinate~Coordinate} to a string\n * using the given string template. The strings `{x}` and `{y}` in the template\n * will be replaced with the first and second coordinate values respectively.\n *\n * Example without specifying the fractional digits:\n *\n *     import {format} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const template = 'Coordinate is ({x}|{y}).';\n *     const out = format(coord, template);\n *     // out is now 'Coordinate is (8|48).'\n *\n * Example explicitly specifying the fractional digits:\n *\n *     import {format} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const template = 'Coordinate is ({x}|{y}).';\n *     const out = format(coord, template, 2);\n *     // out is now 'Coordinate is (7.85|47.98).'\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {string} template A template string with `{x}` and `{y}` placeholders\n *     that will be replaced by first and second coordinate values.\n * @param {number} [fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} Formatted coordinate.\n * @api\n */\nexport function format(coordinate, template, fractionDigits) {\n  if (coordinate) {\n    return template\n      .replace('{x}', coordinate[0].toFixed(fractionDigits))\n      .replace('{y}', coordinate[1].toFixed(fractionDigits));\n  }\n  return '';\n}\n\n/**\n * @param {Coordinate} coordinate1 First coordinate.\n * @param {Coordinate} coordinate2 Second coordinate.\n * @return {boolean} The two coordinates are equal.\n */\nexport function equals(coordinate1, coordinate2) {\n  let equals = true;\n  for (let i = coordinate1.length - 1; i >= 0; --i) {\n    if (coordinate1[i] != coordinate2[i]) {\n      equals = false;\n      break;\n    }\n  }\n  return equals;\n}\n\n/**\n * Rotate `coordinate` by `angle`. `coordinate` is modified in place and\n * returned by the function.\n *\n * Example:\n *\n *     import {rotate} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const rotateRadians = Math.PI / 2; // 90 degrees\n *     rotate(coord, rotateRadians);\n *     // coord is now [-47.983333, 7.85]\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} angle Angle in radian.\n * @return {Coordinate} Coordinate.\n * @api\n */\nexport function rotate(coordinate, angle) {\n  const cosAngle = Math.cos(angle);\n  const sinAngle = Math.sin(angle);\n  const x = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n  const y = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n  coordinate[0] = x;\n  coordinate[1] = y;\n  return coordinate;\n}\n\n/**\n * Scale `coordinate` by `scale`. `coordinate` is modified in place and returned\n * by the function.\n *\n * Example:\n *\n *     import {scale as scaleCoordinate} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const scale = 1.2;\n *     scaleCoordinate(coord, scale);\n *     // coord is now [9.42, 57.5799996]\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} scale Scale factor.\n * @return {Coordinate} Coordinate.\n */\nexport function scale(coordinate, scale) {\n  coordinate[0] *= scale;\n  coordinate[1] *= scale;\n  return coordinate;\n}\n\n/**\n * @param {Coordinate} coord1 First coordinate.\n * @param {Coordinate} coord2 Second coordinate.\n * @return {number} Squared distance between coord1 and coord2.\n */\nexport function squaredDistance(coord1, coord2) {\n  const dx = coord1[0] - coord2[0];\n  const dy = coord1[1] - coord2[1];\n  return dx * dx + dy * dy;\n}\n\n/**\n * @param {Coordinate} coord1 First coordinate.\n * @param {Coordinate} coord2 Second coordinate.\n * @return {number} Distance between coord1 and coord2.\n */\nexport function distance(coord1, coord2) {\n  return Math.sqrt(squaredDistance(coord1, coord2));\n}\n\n/**\n * Calculate the squared distance from a coordinate to a line segment.\n *\n * @param {Coordinate} coordinate Coordinate of the point.\n * @param {Array<Coordinate>} segment Line segment (2\n * coordinates).\n * @return {number} Squared distance from the point to the line segment.\n */\nexport function squaredDistanceToSegment(coordinate, segment) {\n  return squaredDistance(coordinate, closestOnSegment(coordinate, segment));\n}\n\n/**\n * Format a geographic coordinate with the hemisphere, degrees, minutes, and\n * seconds.\n *\n * Example without specifying fractional digits:\n *\n *     import {toStringHDMS} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const out = toStringHDMS(coord);\n *     // out is now '47° 58′ 60″ N 7° 50′ 60″ E'\n *\n * Example explicitly specifying 1 fractional digit:\n *\n *     import {toStringHDMS} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const out = toStringHDMS(coord, 1);\n *     // out is now '47° 58′ 60.0″ N 7° 50′ 60.0″ E'\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} [fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} Hemisphere, degrees, minutes and seconds.\n * @api\n */\nexport function toStringHDMS(coordinate, fractionDigits) {\n  if (coordinate) {\n    return (\n      degreesToStringHDMS('NS', coordinate[1], fractionDigits) +\n      ' ' +\n      degreesToStringHDMS('EW', coordinate[0], fractionDigits)\n    );\n  }\n  return '';\n}\n\n/**\n * Format a coordinate as a comma delimited string.\n *\n * Example without specifying fractional digits:\n *\n *     import {toStringXY} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const out = toStringXY(coord);\n *     // out is now '8, 48'\n *\n * Example explicitly specifying 1 fractional digit:\n *\n *     import {toStringXY} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const out = toStringXY(coord, 1);\n *     // out is now '7.8, 48.0'\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} [fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} XY.\n * @api\n */\nexport function toStringXY(coordinate, fractionDigits) {\n  return format(coordinate, '{x}, {y}', fractionDigits);\n}\n\n/**\n * Modifies the provided coordinate in-place to be within the real world\n * extent. The lower projection extent boundary is inclusive, the upper one\n * exclusive.\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {Coordinate} The coordinate within the real world extent.\n */\nexport function wrapX(coordinate, projection) {\n  if (projection.canWrapX()) {\n    const worldWidth = getWidth(projection.getExtent());\n    const worldsAway = getWorldsAway(coordinate, projection, worldWidth);\n    if (worldsAway) {\n      coordinate[0] -= worldsAway * worldWidth;\n    }\n  }\n  return coordinate;\n}\n/**\n * @param {Coordinate} coordinate Coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @param {number} [sourceExtentWidth] Width of the source extent.\n * @return {number} Offset in world widths.\n */\nexport function getWorldsAway(coordinate, projection, sourceExtentWidth) {\n  const projectionExtent = projection.getExtent();\n  let worldsAway = 0;\n  if (\n    projection.canWrapX() &&\n    (coordinate[0] < projectionExtent[0] || coordinate[0] > projectionExtent[2])\n  ) {\n    sourceExtentWidth = sourceExtentWidth || getWidth(projectionExtent);\n    worldsAway = Math.floor(\n      (coordinate[0] - projectionExtent[0]) / sourceExtentWidth,\n    );\n  }\n  return worldsAway;\n}\n","/**\n * @module ol/math\n */\n\n/**\n * Takes a number and clamps it to within the provided bounds.\n * @param {number} value The input number.\n * @param {number} min The minimum value to return.\n * @param {number} max The maximum value to return.\n * @return {number} The input number if it is within bounds, or the nearest\n *     number within the bounds.\n */\nexport function clamp(value, min, max) {\n  return Math.min(Math.max(value, min), max);\n}\n\n/**\n * Returns the square of the closest distance between the point (x, y) and the\n * line segment (x1, y1) to (x2, y2).\n * @param {number} x X.\n * @param {number} y Y.\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */\nexport function squaredSegmentDistance(x, y, x1, y1, x2, y2) {\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  if (dx !== 0 || dy !== 0) {\n    const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n    if (t > 1) {\n      x1 = x2;\n      y1 = y2;\n    } else if (t > 0) {\n      x1 += dx * t;\n      y1 += dy * t;\n    }\n  }\n  return squaredDistance(x, y, x1, y1);\n}\n\n/**\n * Returns the square of the distance between the points (x1, y1) and (x2, y2).\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */\nexport function squaredDistance(x1, y1, x2, y2) {\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  return dx * dx + dy * dy;\n}\n\n/**\n * Solves system of linear equations using Gaussian elimination method.\n *\n * @param {Array<Array<number>>} mat Augmented matrix (n x n + 1 column)\n *                                     in row-major order.\n * @return {Array<number>|null} The resulting vector.\n */\nexport function solveLinearSystem(mat) {\n  const n = mat.length;\n\n  for (let i = 0; i < n; i++) {\n    // Find max in the i-th column (ignoring i - 1 first rows)\n    let maxRow = i;\n    let maxEl = Math.abs(mat[i][i]);\n    for (let r = i + 1; r < n; r++) {\n      const absValue = Math.abs(mat[r][i]);\n      if (absValue > maxEl) {\n        maxEl = absValue;\n        maxRow = r;\n      }\n    }\n\n    if (maxEl === 0) {\n      return null; // matrix is singular\n    }\n\n    // Swap max row with i-th (current) row\n    const tmp = mat[maxRow];\n    mat[maxRow] = mat[i];\n    mat[i] = tmp;\n\n    // Subtract the i-th row to make all the remaining rows 0 in the i-th column\n    for (let j = i + 1; j < n; j++) {\n      const coef = -mat[j][i] / mat[i][i];\n      for (let k = i; k < n + 1; k++) {\n        if (i == k) {\n          mat[j][k] = 0;\n        } else {\n          mat[j][k] += coef * mat[i][k];\n        }\n      }\n    }\n  }\n\n  // Solve Ax=b for upper triangular matrix A (mat)\n  const x = new Array(n);\n  for (let l = n - 1; l >= 0; l--) {\n    x[l] = mat[l][n] / mat[l][l];\n    for (let m = l - 1; m >= 0; m--) {\n      mat[m][n] -= mat[m][l] * x[l];\n    }\n  }\n  return x;\n}\n\n/**\n * Converts radians to to degrees.\n *\n * @param {number} angleInRadians Angle in radians.\n * @return {number} Angle in degrees.\n */\nexport function toDegrees(angleInRadians) {\n  return (angleInRadians * 180) / Math.PI;\n}\n\n/**\n * Converts degrees to radians.\n *\n * @param {number} angleInDegrees Angle in degrees.\n * @return {number} Angle in radians.\n */\nexport function toRadians(angleInDegrees) {\n  return (angleInDegrees * Math.PI) / 180;\n}\n\n/**\n * Returns the modulo of a / b, depending on the sign of b.\n *\n * @param {number} a Dividend.\n * @param {number} b Divisor.\n * @return {number} Modulo.\n */\nexport function modulo(a, b) {\n  const r = a % b;\n  return r * b < 0 ? r + b : r;\n}\n\n/**\n * Calculates the linearly interpolated value of x between a and b.\n *\n * @param {number} a Number\n * @param {number} b Number\n * @param {number} x Value to be interpolated.\n * @return {number} Interpolated value.\n */\nexport function lerp(a, b, x) {\n  return a + x * (b - a);\n}\n\n/**\n * Returns a number with a limited number of decimal digits.\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The input number with a limited number of decimal digits.\n */\nexport function toFixed(n, decimals) {\n  const factor = Math.pow(10, decimals);\n  return Math.round(n * factor) / factor;\n}\n\n/**\n * Rounds a number to the nearest integer value considering only the given number\n * of decimal digits (with rounding on the final digit).\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The nearest integer.\n */\nexport function round(n, decimals) {\n  return Math.round(toFixed(n, decimals));\n}\n\n/**\n * Rounds a number to the next smaller integer considering only the given number\n * of decimal digits (with rounding on the final digit).\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The next smaller integer.\n */\nexport function floor(n, decimals) {\n  return Math.floor(toFixed(n, decimals));\n}\n\n/**\n * Rounds a number to the next bigger integer considering only the given number\n * of decimal digits (with rounding on the final digit).\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The next bigger integer.\n */\nexport function ceil(n, decimals) {\n  return Math.ceil(toFixed(n, decimals));\n}\n\n/**\n * Wraps a number between some minimum and maximum values.\n * @param {number} n The number to wrap.\n * @param {number} min The minimum of the range (inclusive).\n * @param {number} max The maximum of the range (exclusive).\n * @return {number} The wrapped number.\n */\nexport function wrap(n, min, max) {\n  if (n >= min && n < max) {\n    return n;\n  }\n  const range = max - min;\n  return ((((n - min) % range) + range) % range) + min;\n}\n","/**\n * @module ol/string\n */\n\n/**\n * @param {number} number Number to be formatted\n * @param {number} width The desired width\n * @param {number} [precision] Precision of the output string (i.e. number of decimal places)\n * @return {string} Formatted string\n */\nexport function padNumber(number, width, precision) {\n  const numberString =\n    precision !== undefined ? number.toFixed(precision) : '' + number;\n  let decimal = numberString.indexOf('.');\n  decimal = decimal === -1 ? numberString.length : decimal;\n  return decimal > width\n    ? numberString\n    : new Array(1 + width - decimal).join('0') + numberString;\n}\n\n/**\n * Adapted from https://github.com/omichelsen/compare-versions/blob/master/index.js\n * @param {string|number} v1 First version\n * @param {string|number} v2 Second version\n * @return {number} Value\n */\nexport function compareVersions(v1, v2) {\n  const s1 = ('' + v1).split('.');\n  const s2 = ('' + v2).split('.');\n\n  for (let i = 0; i < Math.max(s1.length, s2.length); i++) {\n    const n1 = parseInt(s1[i] || '0', 10);\n    const n2 = parseInt(s2[i] || '0', 10);\n\n    if (n1 > n2) {\n      return 1;\n    }\n    if (n2 > n1) {\n      return -1;\n    }\n  }\n\n  return 0;\n}\n"],"names":["add","coordinate","delta","closestOnCircle","circle","r","center","x0","y0","x1","y1","dx","dy","d","Math","closestOnSegment","segment","x","y","start","end","x2","y2","along","createStringXY","fractionDigits","toStringXY","degreesToStringHDMS","hemispheres","degrees","normalizedDegrees","decimals","deg","min","sec","hdms","format","template","equals","coordinate1","coordinate2","i","rotate","angle","cosAngle","sinAngle","scale","squaredDistance","coord1","coord2","distance","squaredDistanceToSegment","toStringHDMS","wrapX","projection","worldWidth","worldsAway","getWorldsAway","sourceExtentWidth","projectionExtent","clamp","value","max","squaredSegmentDistance","t","solveLinearSystem","mat","n","maxRow","maxEl","absValue","tmp","j","coef","k","Array","l","m","toDegrees","angleInRadians","toRadians","angleInDegrees","modulo","a","b","lerp","toFixed","factor","round","floor","ceil","wrap","range","padNumber","number","width","precision","numberString","undefined","decimal","compareVersions","v1","v2","s1","s2","n1","parseInt","n2"],"mappings":"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"}