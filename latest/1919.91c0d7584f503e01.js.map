{"version":3,"file":"1919.91c0d7584f503e01.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/ol/format/filter/LogicalNary.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/format/filter/And.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/format/filter/Bbox.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/format/filter/Spatial.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/format/filter/Contains.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/format/filter/DWithin.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/format/filter/Disjoint.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/format/filter/Comparison.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/format/filter/During.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/format/filter/ComparisonBinary.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/format/filter/EqualTo.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/format/filter/GreaterThan.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/format/filter/GreaterThanOrEqualTo.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/format/filter/Intersects.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/format/filter/IsBetween.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/format/filter/IsLike.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/format/filter/IsNull.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/format/filter/LessThan.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/format/filter/LessThanOrEqualTo.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/format/filter/Not.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/format/filter/NotEqualTo.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/format/filter/Or.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/format/filter/ResourceId.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/format/filter/Within.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/format/filter.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/format/filter/Filter.js"],"sourcesContent":["/**\n * @module ol/format/filter/LogicalNary\n */\nimport {assert} from '../../asserts.js';\nimport Filter from './Filter.js';\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature n-ary logical filters.\n *\n * @abstract\n */\nclass LogicalNary extends Filter {\n  /**\n   * @param {!string} tagName The XML tag name for this filter.\n   * @param {Array<import(\"./Filter.js\").default>} conditions Conditions.\n   */\n  constructor(tagName, conditions) {\n    super(tagName);\n\n    /**\n     * @type {Array<import(\"./Filter.js\").default>}\n     */\n    this.conditions = conditions;\n    assert(this.conditions.length >= 2, 'At least 2 conditions are required');\n  }\n}\n\nexport default LogicalNary;\n","/**\n * @module ol/format/filter/And\n */\nimport LogicalNary from './LogicalNary.js';\n\n/**\n * @classdesc\n * Represents a logical `<And>` operator between two or more filter conditions.\n *\n * @abstract\n */\nclass And extends LogicalNary {\n  /**\n   * @param {...import(\"./Filter.js\").default} conditions Conditions.\n   */\n  constructor(conditions) {\n    super('And', Array.prototype.slice.call(arguments));\n  }\n}\n\nexport default And;\n","/**\n * @module ol/format/filter/Bbox\n */\nimport Filter from './Filter.js';\n\n/**\n * @classdesc\n * Represents a `<BBOX>` operator to test whether a geometry-valued property\n * intersects a fixed bounding box\n *\n * @api\n */\nclass Bbox extends Filter {\n  /**\n   * @param {!string} geometryName Geometry name to use.\n   * @param {!import(\"../../extent.js\").Extent} extent Extent.\n   * @param {string} [srsName] SRS name. No srsName attribute will be set\n   * on geometries when this is not provided.\n   */\n  constructor(geometryName, extent, srsName) {\n    super('BBOX');\n\n    /**\n     * @type {!string}\n     */\n    this.geometryName = geometryName;\n\n    /**\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.extent = extent;\n    if (extent.length !== 4) {\n      throw new Error(\n        'Expected an extent with four values ([minX, minY, maxX, maxY])',\n      );\n    }\n\n    /**\n     * @type {string|undefined}\n     */\n    this.srsName = srsName;\n  }\n}\n\nexport default Bbox;\n","/**\n * @module ol/format/filter/Spatial\n */\nimport Filter from './Filter.js';\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Represents a spatial operator to test whether a geometry-valued property\n * relates to a given geometry.\n *\n * @abstract\n */\nclass Spatial extends Filter {\n  /**\n   * @param {!string} tagName The XML tag name for this filter.\n   * @param {!string} geometryName Geometry name to use.\n   * @param {!import(\"../../geom/Geometry.js\").default} geometry Geometry.\n   * @param {string} [srsName] SRS name. No srsName attribute will be\n   *    set on geometries when this is not provided.\n   */\n  constructor(tagName, geometryName, geometry, srsName) {\n    super(tagName);\n\n    /**\n     * @type {!string}\n     */\n    this.geometryName = geometryName || 'the_geom';\n\n    /**\n     * @type {import(\"../../geom/Geometry.js\").default}\n     */\n    this.geometry = geometry;\n\n    /**\n     * @type {string|undefined}\n     */\n    this.srsName = srsName;\n  }\n}\n\nexport default Spatial;\n","/**\n * @module ol/format/filter/Contains\n */\nimport Spatial from './Spatial.js';\n\n/**\n * @classdesc\n * Represents a `<Contains>` operator to test whether a geometry-valued property\n * contains a given geometry.\n * @api\n */\nclass Contains extends Spatial {\n  /**\n   * @param {!string} geometryName Geometry name to use.\n   * @param {!import(\"../../geom/Geometry.js\").default} geometry Geometry.\n   * @param {string} [srsName] SRS name. No srsName attribute will be\n   *    set on geometries when this is not provided.\n   */\n  constructor(geometryName, geometry, srsName) {\n    super('Contains', geometryName, geometry, srsName);\n  }\n}\n\nexport default Contains;\n","/**\n * @module ol/format/filter/DWithin\n */\nimport Spatial from './Spatial.js';\n\n/**\n * @classdesc\n * Represents a `<DWithin>` operator to test whether a geometry-valued property\n * is within a distance to a given geometry.\n * @api\n */\nclass DWithin extends Spatial {\n  /**\n   * @param {!string} geometryName Geometry name to use.\n   * @param {!import(\"../../geom/Geometry.js\").default} geometry Geometry.\n   * @param {!number} distance Distance.\n   * @param {!string} unit Unit.\n   * @param {string} [srsName] SRS name. No srsName attribute will be\n   *    set on geometries when this is not provided.\n   */\n  constructor(geometryName, geometry, distance, unit, srsName) {\n    super('DWithin', geometryName, geometry, srsName);\n\n    /**\n     * @public\n     * @type {!number}\n     */\n    this.distance = distance;\n\n    /**\n     * @public\n     * @type {!string}\n     */\n    this.unit = unit;\n  }\n}\n\nexport default DWithin;\n","/**\n * @module ol/format/filter/Disjoint\n */\nimport Spatial from './Spatial.js';\n\n/**\n * @classdesc\n * Represents a `<Disjoint>` operator to test whether a geometry-valued property\n * is disjoint to a given geometry.\n * @api\n */\nclass Disjoint extends Spatial {\n  /**\n   * @param {!string} geometryName Geometry name to use.\n   * @param {!import(\"../../geom/Geometry.js\").default} geometry Geometry.\n   * @param {string} [srsName] SRS name. No srsName attribute will be\n   *    set on geometries when this is not provided.\n   */\n  constructor(geometryName, geometry, srsName) {\n    super('Disjoint', geometryName, geometry, srsName);\n  }\n}\n\nexport default Disjoint;\n","/**\n * @module ol/format/filter/Comparison\n */\nimport Filter from './Filter.js';\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature property comparison filters.\n *\n * @abstract\n */\nclass Comparison extends Filter {\n  /**\n   * @param {!string} tagName The XML tag name for this filter.\n   * @param {!string} propertyName Name of the context property to compare.\n   */\n  constructor(tagName, propertyName) {\n    super(tagName);\n\n    /**\n     * @type {!string}\n     */\n    this.propertyName = propertyName;\n  }\n}\n\nexport default Comparison;\n","/**\n * @module ol/format/filter/During\n */\nimport Comparison from './Comparison.js';\n\n/**\n * @classdesc\n * Represents a `<During>` comparison operator.\n * @api\n */\nclass During extends Comparison {\n  /**\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!string} begin The begin date in ISO-8601 format.\n   * @param {!string} end The end date in ISO-8601 format.\n   */\n  constructor(propertyName, begin, end) {\n    super('During', propertyName);\n\n    /**\n     * @type {!string}\n     */\n    this.begin = begin;\n\n    /**\n     * @type {!string}\n     */\n    this.end = end;\n  }\n}\n\nexport default During;\n","/**\n * @module ol/format/filter/ComparisonBinary\n */\nimport Comparison from './Comparison.js';\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature property binary comparison filters.\n *\n * @abstract\n */\nclass ComparisonBinary extends Comparison {\n  /**\n   * @param {!string} tagName The XML tag name for this filter.\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!(string|number)} expression The value to compare.\n   * @param {boolean} [matchCase] Case-sensitive?\n   */\n  constructor(tagName, propertyName, expression, matchCase) {\n    super(tagName, propertyName);\n\n    /**\n     * @type {!(string|number)}\n     */\n    this.expression = expression;\n\n    /**\n     * @type {boolean|undefined}\n     */\n    this.matchCase = matchCase;\n  }\n}\n\nexport default ComparisonBinary;\n","/**\n * @module ol/format/filter/EqualTo\n */\nimport ComparisonBinary from './ComparisonBinary.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsEqualTo>` comparison operator.\n * @api\n */\nclass EqualTo extends ComparisonBinary {\n  /**\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!(string|number)} expression The value to compare.\n   * @param {boolean} [matchCase] Case-sensitive?\n   */\n  constructor(propertyName, expression, matchCase) {\n    super('PropertyIsEqualTo', propertyName, expression, matchCase);\n  }\n}\n\nexport default EqualTo;\n","/**\n * @module ol/format/filter/GreaterThan\n */\nimport ComparisonBinary from './ComparisonBinary.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsGreaterThan>` comparison operator.\n * @api\n */\nclass GreaterThan extends ComparisonBinary {\n  /**\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!number} expression The value to compare.\n   */\n  constructor(propertyName, expression) {\n    super('PropertyIsGreaterThan', propertyName, expression);\n  }\n}\n\nexport default GreaterThan;\n","/**\n * @module ol/format/filter/GreaterThanOrEqualTo\n */\nimport ComparisonBinary from './ComparisonBinary.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsGreaterThanOrEqualTo>` comparison operator.\n * @api\n */\nclass GreaterThanOrEqualTo extends ComparisonBinary {\n  /**\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!number} expression The value to compare.\n   */\n  constructor(propertyName, expression) {\n    super('PropertyIsGreaterThanOrEqualTo', propertyName, expression);\n  }\n}\n\nexport default GreaterThanOrEqualTo;\n","/**\n * @module ol/format/filter/Intersects\n */\nimport Spatial from './Spatial.js';\n\n/**\n * @classdesc\n * Represents a `<Intersects>` operator to test whether a geometry-valued property\n * intersects a given geometry.\n * @api\n */\nclass Intersects extends Spatial {\n  /**\n   * @param {!string} geometryName Geometry name to use.\n   * @param {!import(\"../../geom/Geometry.js\").default} geometry Geometry.\n   * @param {string} [srsName] SRS name. No srsName attribute will be\n   *    set on geometries when this is not provided.\n   */\n  constructor(geometryName, geometry, srsName) {\n    super('Intersects', geometryName, geometry, srsName);\n  }\n}\n\nexport default Intersects;\n","/**\n * @module ol/format/filter/IsBetween\n */\nimport Comparison from './Comparison.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsBetween>` comparison operator.\n * @api\n */\nclass IsBetween extends Comparison {\n  /**\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!number} lowerBoundary The lower bound of the range.\n   * @param {!number} upperBoundary The upper bound of the range.\n   */\n  constructor(propertyName, lowerBoundary, upperBoundary) {\n    super('PropertyIsBetween', propertyName);\n\n    /**\n     * @type {!number}\n     */\n    this.lowerBoundary = lowerBoundary;\n\n    /**\n     * @type {!number}\n     */\n    this.upperBoundary = upperBoundary;\n  }\n}\n\nexport default IsBetween;\n","/**\n * @module ol/format/filter/IsLike\n */\nimport Comparison from './Comparison.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsLike>` comparison operator.\n * @api\n */\nclass IsLike extends Comparison {\n  /**\n   * [constructor description]\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!string} pattern Text pattern.\n   * @param {string} [wildCard] Pattern character which matches any sequence of\n   *    zero or more string characters. Default is '*'.\n   * @param {string} [singleChar] pattern character which matches any single\n   *    string character. Default is '.'.\n   * @param {string} [escapeChar] Escape character which can be used to escape\n   *    the pattern characters. Default is '!'.\n   * @param {boolean} [matchCase] Case-sensitive?\n   */\n  constructor(\n    propertyName,\n    pattern,\n    wildCard,\n    singleChar,\n    escapeChar,\n    matchCase,\n  ) {\n    super('PropertyIsLike', propertyName);\n\n    /**\n     * @type {!string}\n     */\n    this.pattern = pattern;\n\n    /**\n     * @type {!string}\n     */\n    this.wildCard = wildCard !== undefined ? wildCard : '*';\n\n    /**\n     * @type {!string}\n     */\n    this.singleChar = singleChar !== undefined ? singleChar : '.';\n\n    /**\n     * @type {!string}\n     */\n    this.escapeChar = escapeChar !== undefined ? escapeChar : '!';\n\n    /**\n     * @type {boolean|undefined}\n     */\n    this.matchCase = matchCase;\n  }\n}\n\nexport default IsLike;\n","/**\n * @module ol/format/filter/IsNull\n */\nimport Comparison from './Comparison.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsNull>` comparison operator.\n * @api\n */\nclass IsNull extends Comparison {\n  /**\n   * @param {!string} propertyName Name of the context property to compare.\n   */\n  constructor(propertyName) {\n    super('PropertyIsNull', propertyName);\n  }\n}\n\nexport default IsNull;\n","/**\n * @module ol/format/filter/LessThan\n */\nimport ComparisonBinary from './ComparisonBinary.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsLessThan>` comparison operator.\n * @api\n */\nclass LessThan extends ComparisonBinary {\n  /**\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!number} expression The value to compare.\n   */\n  constructor(propertyName, expression) {\n    super('PropertyIsLessThan', propertyName, expression);\n  }\n}\n\nexport default LessThan;\n","/**\n * @module ol/format/filter/LessThanOrEqualTo\n */\nimport ComparisonBinary from './ComparisonBinary.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsLessThanOrEqualTo>` comparison operator.\n * @api\n */\nclass LessThanOrEqualTo extends ComparisonBinary {\n  /**\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!number} expression The value to compare.\n   */\n  constructor(propertyName, expression) {\n    super('PropertyIsLessThanOrEqualTo', propertyName, expression);\n  }\n}\n\nexport default LessThanOrEqualTo;\n","/**\n * @module ol/format/filter/Not\n */\nimport Filter from './Filter.js';\n\n/**\n * @classdesc\n * Represents a logical `<Not>` operator for a filter condition.\n * @api\n */\nclass Not extends Filter {\n  /**\n   * @param {!import(\"./Filter.js\").default} condition Filter condition.\n   */\n  constructor(condition) {\n    super('Not');\n\n    /**\n     * @type {!import(\"./Filter.js\").default}\n     */\n    this.condition = condition;\n  }\n}\n\nexport default Not;\n","/**\n * @module ol/format/filter/NotEqualTo\n */\nimport ComparisonBinary from './ComparisonBinary.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsNotEqualTo>` comparison operator.\n * @api\n */\nclass NotEqualTo extends ComparisonBinary {\n  /**\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!(string|number)} expression The value to compare.\n   * @param {boolean} [matchCase] Case-sensitive?\n   */\n  constructor(propertyName, expression, matchCase) {\n    super('PropertyIsNotEqualTo', propertyName, expression, matchCase);\n  }\n}\n\nexport default NotEqualTo;\n","/**\n * @module ol/format/filter/Or\n */\nimport LogicalNary from './LogicalNary.js';\n\n/**\n * @classdesc\n * Represents a logical `<Or>` operator between two or more filter conditions.\n * @api\n */\nclass Or extends LogicalNary {\n  /**\n   * @param {...import(\"./Filter.js\").default} conditions Conditions.\n   */\n  constructor(conditions) {\n    super('Or', Array.prototype.slice.call(arguments));\n  }\n}\n\nexport default Or;\n","/**\n * @module ol/format/filter/ResourceId\n */\nimport Filter from './Filter.js';\n\n/**\n * @classdesc\n *\n * @abstract\n */\nclass ResourceId extends Filter {\n  /**\n   * @param {!string} rid Resource ID.\n   */\n  constructor(rid) {\n    super('ResourceId');\n\n    /**\n     * @type {!string}\n     */\n    this.rid = rid;\n  }\n}\n\nexport default ResourceId;\n","/**\n * @module ol/format/filter/Within\n */\nimport Spatial from './Spatial.js';\n\n/**\n * @classdesc\n * Represents a `<Within>` operator to test whether a geometry-valued property\n * is within a given geometry.\n * @api\n */\nclass Within extends Spatial {\n  /**\n   * @param {!string} geometryName Geometry name to use.\n   * @param {!import(\"../../geom/Geometry.js\").default} geometry Geometry.\n   * @param {string} [srsName] SRS name. No srsName attribute will be\n   *    set on geometries when this is not provided.\n   */\n  constructor(geometryName, geometry, srsName) {\n    super('Within', geometryName, geometry, srsName);\n  }\n}\n\nexport default Within;\n","/**\n * @module ol/format/filter\n */\nimport And from './filter/And.js';\nimport Bbox from './filter/Bbox.js';\nimport Contains from './filter/Contains.js';\nimport DWithin from './filter/DWithin.js';\nimport Disjoint from './filter/Disjoint.js';\nimport During from './filter/During.js';\nimport EqualTo from './filter/EqualTo.js';\nimport GreaterThan from './filter/GreaterThan.js';\nimport GreaterThanOrEqualTo from './filter/GreaterThanOrEqualTo.js';\nimport Intersects from './filter/Intersects.js';\nimport IsBetween from './filter/IsBetween.js';\nimport IsLike from './filter/IsLike.js';\nimport IsNull from './filter/IsNull.js';\nimport LessThan from './filter/LessThan.js';\nimport LessThanOrEqualTo from './filter/LessThanOrEqualTo.js';\nimport Not from './filter/Not.js';\nimport NotEqualTo from './filter/NotEqualTo.js';\nimport Or from './filter/Or.js';\nimport ResourceId from './filter/ResourceId.js';\nimport Within from './filter/Within.js';\n\n/**\n * Create a logical `<And>` operator between two or more filter conditions.\n *\n * @param {...import(\"./filter/Filter.js\").default} conditions Filter conditions.\n * @return {!And} `<And>` operator.\n * @api\n */\nexport function and(conditions) {\n  const params = [null].concat(Array.prototype.slice.call(arguments));\n  return new (Function.prototype.bind.apply(And, params))();\n}\n\n/**\n * Create a logical `<Or>` operator between two or more filter conditions.\n *\n * @param {...import(\"./filter/Filter.js\").default} conditions Filter conditions.\n * @return {!Or} `<Or>` operator.\n * @api\n */\nexport function or(conditions) {\n  const params = [null].concat(Array.prototype.slice.call(arguments));\n  return new (Function.prototype.bind.apply(Or, params))();\n}\n\n/**\n * Represents a logical `<Not>` operator for a filter condition.\n *\n * @param {!import(\"./filter/Filter.js\").default} condition Filter condition.\n * @return {!Not} `<Not>` operator.\n * @api\n */\nexport function not(condition) {\n  return new Not(condition);\n}\n\n/**\n * Create a `<BBOX>` operator to test whether a geometry-valued property\n * intersects a fixed bounding box\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../extent.js\").Extent} extent Extent.\n * @param {string} [srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!Bbox} `<BBOX>` operator.\n * @api\n */\nexport function bbox(geometryName, extent, srsName) {\n  return new Bbox(geometryName, extent, srsName);\n}\n\n/**\n * Create a `<Contains>` operator to test whether a geometry-valued property\n * contains a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {string} [srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!Contains} `<Contains>` operator.\n * @api\n */\nexport function contains(geometryName, geometry, srsName) {\n  return new Contains(geometryName, geometry, srsName);\n}\n\n/**\n * Create a `<Intersects>` operator to test whether a geometry-valued property\n * intersects a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {string} [srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!Intersects} `<Intersects>` operator.\n * @api\n */\nexport function intersects(geometryName, geometry, srsName) {\n  return new Intersects(geometryName, geometry, srsName);\n}\n\n/**\n * Create a `<Disjoint>` operator to test whether a geometry-valued property\n * is disjoint to a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {string} [srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!Disjoint} `<Disjoint>` operator.\n * @api\n */\nexport function disjoint(geometryName, geometry, srsName) {\n  return new Disjoint(geometryName, geometry, srsName);\n}\n\n/**\n * Create a `<Within>` operator to test whether a geometry-valued property\n * is within a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {string} [srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!Within} `<Within>` operator.\n * @api\n */\nexport function within(geometryName, geometry, srsName) {\n  return new Within(geometryName, geometry, srsName);\n}\n\n/**\n * Create a `<DWithin>` operator to test whether a geometry-valued property\n * is within a distance to a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {!number} distance Distance.\n * @param {!string} unit Unit.\n * @param {string} [srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!DWithin} `<DWithin>` operator.\n * @api\n */\nexport function dwithin(geometryName, geometry, distance, unit, srsName) {\n  return new DWithin(geometryName, geometry, distance, unit, srsName);\n}\n\n/**\n * Creates a `<PropertyIsEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!(string|number)} expression The value to compare.\n * @param {boolean} [matchCase] Case-sensitive?\n * @return {!EqualTo} `<PropertyIsEqualTo>` operator.\n * @api\n */\nexport function equalTo(propertyName, expression, matchCase) {\n  return new EqualTo(propertyName, expression, matchCase);\n}\n\n/**\n * Creates a `<PropertyIsNotEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!(string|number)} expression The value to compare.\n * @param {boolean} [matchCase] Case-sensitive?\n * @return {!NotEqualTo} `<PropertyIsNotEqualTo>` operator.\n * @api\n */\nexport function notEqualTo(propertyName, expression, matchCase) {\n  return new NotEqualTo(propertyName, expression, matchCase);\n}\n\n/**\n * Creates a `<PropertyIsLessThan>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @return {!LessThan} `<PropertyIsLessThan>` operator.\n * @api\n */\nexport function lessThan(propertyName, expression) {\n  return new LessThan(propertyName, expression);\n}\n\n/**\n * Creates a `<PropertyIsLessThanOrEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @return {!LessThanOrEqualTo} `<PropertyIsLessThanOrEqualTo>` operator.\n * @api\n */\nexport function lessThanOrEqualTo(propertyName, expression) {\n  return new LessThanOrEqualTo(propertyName, expression);\n}\n\n/**\n * Creates a `<PropertyIsGreaterThan>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @return {!GreaterThan} `<PropertyIsGreaterThan>` operator.\n * @api\n */\nexport function greaterThan(propertyName, expression) {\n  return new GreaterThan(propertyName, expression);\n}\n\n/**\n * Creates a `<PropertyIsGreaterThanOrEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @return {!GreaterThanOrEqualTo} `<PropertyIsGreaterThanOrEqualTo>` operator.\n * @api\n */\nexport function greaterThanOrEqualTo(propertyName, expression) {\n  return new GreaterThanOrEqualTo(propertyName, expression);\n}\n\n/**\n * Creates a `<PropertyIsNull>` comparison operator to test whether a property value\n * is null.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @return {!IsNull} `<PropertyIsNull>` operator.\n * @api\n */\nexport function isNull(propertyName) {\n  return new IsNull(propertyName);\n}\n\n/**\n * Creates a `<PropertyIsBetween>` comparison operator to test whether an expression\n * value lies within a range given by a lower and upper bound (inclusive).\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} lowerBoundary The lower bound of the range.\n * @param {!number} upperBoundary The upper bound of the range.\n * @return {!IsBetween} `<PropertyIsBetween>` operator.\n * @api\n */\nexport function between(propertyName, lowerBoundary, upperBoundary) {\n  return new IsBetween(propertyName, lowerBoundary, upperBoundary);\n}\n\n/**\n * Represents a `<PropertyIsLike>` comparison operator that matches a string property\n * value against a text pattern.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!string} pattern Text pattern.\n * @param {string} [wildCard] Pattern character which matches any sequence of\n *    zero or more string characters. Default is '*'.\n * @param {string} [singleChar] pattern character which matches any single\n *    string character. Default is '.'.\n * @param {string} [escapeChar] Escape character which can be used to escape\n *    the pattern characters. Default is '!'.\n * @param {boolean} [matchCase] Case-sensitive?\n * @return {!IsLike} `<PropertyIsLike>` operator.\n * @api\n */\nexport function like(\n  propertyName,\n  pattern,\n  wildCard,\n  singleChar,\n  escapeChar,\n  matchCase,\n) {\n  return new IsLike(\n    propertyName,\n    pattern,\n    wildCard,\n    singleChar,\n    escapeChar,\n    matchCase,\n  );\n}\n\n/**\n * Create a `<During>` temporal operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!string} begin The begin date in ISO-8601 format.\n * @param {!string} end The end date in ISO-8601 format.\n * @return {!During} `<During>` operator.\n * @api\n */\nexport function during(propertyName, begin, end) {\n  return new During(propertyName, begin, end);\n}\n\nexport function resourceId(rid) {\n  return new ResourceId(rid);\n}\n","/**\n * @module ol/format/filter/Filter\n */\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature filters.\n *\n * @abstract\n */\nclass Filter {\n  /**\n   * @param {!string} tagName The XML tag name for this filter.\n   */\n  constructor(tagName) {\n    /**\n     * @private\n     * @type {!string}\n     */\n    this.tagName_ = tagName;\n  }\n\n  /**\n   * The XML tag name for a filter.\n   * @return {!string} Name.\n   */\n  getTagName() {\n    return this.tagName_;\n  }\n}\n\nexport default Filter;\n"],"names":["LogicalNary","Filter","tagName","conditions","Array","arguments","geometryName","extent","srsName","Error","Spatial","geometry","distance","unit","Comparison","propertyName","begin","end","expression","matchCase","lowerBoundary","upperBoundary","pattern","wildCard","singleChar","escapeChar","undefined","condition","ResourceId","rid","and","params","Function","or","not","bbox","contains","intersects","disjoint","Disjoint","within","dwithin","DWithin","equalTo","notEqualTo","lessThan","lessThanOrEqualTo","greaterThan","greaterThanOrEqualTo","isNull","between","like","IsLike","during","resourceId"],"mappings":"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"}