{"version":3,"file":"9331.d49b417d6950d54a.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/ol/centerconstraint.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/resolutionconstraint.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/View.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/ViewHint.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/ViewProperty.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/rotationconstraint.js","webpack://@terrestris/shogun-gis-client/./node_modules/ol/tilegrid/common.js"],"sourcesContent":["/**\n * @module ol/centerconstraint\n */\nimport {clamp} from './math.js';\n\n/**\n * @typedef {function((import(\"./coordinate.js\").Coordinate|undefined), number, import(\"./size.js\").Size, boolean=, Array<number>=): (import(\"./coordinate.js\").Coordinate|undefined)} Type\n */\n\n/**\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {boolean} onlyCenter If true, the constraint will only apply to the view center.\n * @param {boolean} smooth If true, the view will be able to go slightly out of the given extent\n * (only during interaction and animation).\n * @return {Type} The constraint.\n */\nexport function createExtent(extent, onlyCenter, smooth) {\n  return (\n    /**\n     * @param {import(\"./coordinate.js\").Coordinate|undefined} center Center.\n     * @param {number|undefined} resolution Resolution.\n     * @param {import(\"./size.js\").Size} size Viewport size; unused if `onlyCenter` was specified.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @param {Array<number>} [centerShift] Shift between map center and viewport center.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} Center.\n     */\n    function (center, resolution, size, isMoving, centerShift) {\n      if (!center) {\n        return undefined;\n      }\n      if (!resolution && !onlyCenter) {\n        return center;\n      }\n      const viewWidth = onlyCenter ? 0 : size[0] * resolution;\n      const viewHeight = onlyCenter ? 0 : size[1] * resolution;\n      const shiftX = centerShift ? centerShift[0] : 0;\n      const shiftY = centerShift ? centerShift[1] : 0;\n      let minX = extent[0] + viewWidth / 2 + shiftX;\n      let maxX = extent[2] - viewWidth / 2 + shiftX;\n      let minY = extent[1] + viewHeight / 2 + shiftY;\n      let maxY = extent[3] - viewHeight / 2 + shiftY;\n\n      // note: when zooming out of bounds, min and max values for x and y may\n      // end up inverted (min > max); this has to be accounted for\n      if (minX > maxX) {\n        minX = (maxX + minX) / 2;\n        maxX = minX;\n      }\n      if (minY > maxY) {\n        minY = (maxY + minY) / 2;\n        maxY = minY;\n      }\n\n      let x = clamp(center[0], minX, maxX);\n      let y = clamp(center[1], minY, maxY);\n\n      // during an interaction, allow some overscroll\n      if (isMoving && smooth && resolution) {\n        const ratio = 30 * resolution;\n        x +=\n          -ratio * Math.log(1 + Math.max(0, minX - center[0]) / ratio) +\n          ratio * Math.log(1 + Math.max(0, center[0] - maxX) / ratio);\n        y +=\n          -ratio * Math.log(1 + Math.max(0, minY - center[1]) / ratio) +\n          ratio * Math.log(1 + Math.max(0, center[1] - maxY) / ratio);\n      }\n\n      return [x, y];\n    }\n  );\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} [center] Center.\n * @return {import(\"./coordinate.js\").Coordinate|undefined} Center.\n */\nexport function none(center) {\n  return center;\n}\n","/**\n * @module ol/resolutionconstraint\n */\nimport {linearFindNearest} from './array.js';\nimport {getHeight, getWidth} from './extent.js';\nimport {clamp} from './math.js';\n\n/**\n * @typedef {function((number|undefined), number, import(\"./size.js\").Size, boolean=): (number|undefined)} Type\n */\n\n/**\n * Returns a modified resolution taking into account the viewport size and maximum\n * allowed extent.\n * @param {number} resolution Resolution\n * @param {import(\"./extent.js\").Extent} maxExtent Maximum allowed extent.\n * @param {import(\"./size.js\").Size} viewportSize Viewport size.\n * @param {boolean} showFullExtent Whether to show the full extent.\n * @return {number} Capped resolution.\n */\nfunction getViewportClampedResolution(\n  resolution,\n  maxExtent,\n  viewportSize,\n  showFullExtent,\n) {\n  const xResolution = getWidth(maxExtent) / viewportSize[0];\n  const yResolution = getHeight(maxExtent) / viewportSize[1];\n\n  if (showFullExtent) {\n    return Math.min(resolution, Math.max(xResolution, yResolution));\n  }\n  return Math.min(resolution, Math.min(xResolution, yResolution));\n}\n\n/**\n * Returns a modified resolution to be between maxResolution and minResolution while\n * still allowing the value to be slightly out of bounds.\n * Note: the computation is based on the logarithm function (ln):\n *  - at 1, ln(x) is 0\n *  - above 1, ln(x) keeps increasing but at a much slower pace than x\n * The final result is clamped to prevent getting too far away from bounds.\n * @param {number} resolution Resolution.\n * @param {number} maxResolution Max resolution.\n * @param {number} minResolution Min resolution.\n * @return {number} Smoothed resolution.\n */\nfunction getSmoothClampedResolution(resolution, maxResolution, minResolution) {\n  let result = Math.min(resolution, maxResolution);\n  const ratio = 50;\n\n  result *=\n    Math.log(1 + ratio * Math.max(0, resolution / maxResolution - 1)) / ratio +\n    1;\n  if (minResolution) {\n    result = Math.max(result, minResolution);\n    result /=\n      Math.log(1 + ratio * Math.max(0, minResolution / resolution - 1)) /\n        ratio +\n      1;\n  }\n  return clamp(result, minResolution / 2, maxResolution * 2);\n}\n\n/**\n * @param {Array<number>} resolutions Resolutions.\n * @param {boolean} [smooth] If true, the view will be able to slightly exceed resolution limits. Default: true.\n * @param {import(\"./extent.js\").Extent} [maxExtent] Maximum allowed extent.\n * @param {boolean} [showFullExtent] If true, allows us to show the full extent. Default: false.\n * @return {Type} Zoom function.\n */\nexport function createSnapToResolutions(\n  resolutions,\n  smooth,\n  maxExtent,\n  showFullExtent,\n) {\n  smooth = smooth !== undefined ? smooth : true;\n  return (\n    /**\n     * @param {number|undefined} resolution Resolution.\n     * @param {number} direction Direction.\n     * @param {import(\"./size.js\").Size} size Viewport size.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Resolution.\n     */\n    function (resolution, direction, size, isMoving) {\n      if (resolution !== undefined) {\n        const maxResolution = resolutions[0];\n        const minResolution = resolutions[resolutions.length - 1];\n        const cappedMaxRes = maxExtent\n          ? getViewportClampedResolution(\n              maxResolution,\n              maxExtent,\n              size,\n              showFullExtent,\n            )\n          : maxResolution;\n\n        // during interacting or animating, allow intermediary values\n        if (isMoving) {\n          if (!smooth) {\n            return clamp(resolution, minResolution, cappedMaxRes);\n          }\n          return getSmoothClampedResolution(\n            resolution,\n            cappedMaxRes,\n            minResolution,\n          );\n        }\n\n        const capped = Math.min(cappedMaxRes, resolution);\n        const z = Math.floor(linearFindNearest(resolutions, capped, direction));\n        if (resolutions[z] > cappedMaxRes && z < resolutions.length - 1) {\n          return resolutions[z + 1];\n        }\n        return resolutions[z];\n      }\n      return undefined;\n    }\n  );\n}\n\n/**\n * @param {number} power Power.\n * @param {number} maxResolution Maximum resolution.\n * @param {number} [minResolution] Minimum resolution.\n * @param {boolean} [smooth] If true, the view will be able to slightly exceed resolution limits. Default: true.\n * @param {import(\"./extent.js\").Extent} [maxExtent] Maximum allowed extent.\n * @param {boolean} [showFullExtent] If true, allows us to show the full extent. Default: false.\n * @return {Type} Zoom function.\n */\nexport function createSnapToPower(\n  power,\n  maxResolution,\n  minResolution,\n  smooth,\n  maxExtent,\n  showFullExtent,\n) {\n  smooth = smooth !== undefined ? smooth : true;\n  minResolution = minResolution !== undefined ? minResolution : 0;\n\n  return (\n    /**\n     * @param {number|undefined} resolution Resolution.\n     * @param {number} direction Direction.\n     * @param {import(\"./size.js\").Size} size Viewport size.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Resolution.\n     */\n    function (resolution, direction, size, isMoving) {\n      if (resolution !== undefined) {\n        const cappedMaxRes = maxExtent\n          ? getViewportClampedResolution(\n              maxResolution,\n              maxExtent,\n              size,\n              showFullExtent,\n            )\n          : maxResolution;\n\n        // during interacting or animating, allow intermediary values\n        if (isMoving) {\n          if (!smooth) {\n            return clamp(resolution, minResolution, cappedMaxRes);\n          }\n          return getSmoothClampedResolution(\n            resolution,\n            cappedMaxRes,\n            minResolution,\n          );\n        }\n\n        const tolerance = 1e-9;\n        const minZoomLevel = Math.ceil(\n          Math.log(maxResolution / cappedMaxRes) / Math.log(power) - tolerance,\n        );\n        const offset = -direction * (0.5 - tolerance) + 0.5;\n        const capped = Math.min(cappedMaxRes, resolution);\n        const cappedZoomLevel = Math.floor(\n          Math.log(maxResolution / capped) / Math.log(power) + offset,\n        );\n        const zoomLevel = Math.max(minZoomLevel, cappedZoomLevel);\n        const newResolution = maxResolution / Math.pow(power, zoomLevel);\n        return clamp(newResolution, minResolution, cappedMaxRes);\n      }\n      return undefined;\n    }\n  );\n}\n\n/**\n * @param {number} maxResolution Max resolution.\n * @param {number} minResolution Min resolution.\n * @param {boolean} [smooth] If true, the view will be able to slightly exceed resolution limits. Default: true.\n * @param {import(\"./extent.js\").Extent} [maxExtent] Maximum allowed extent.\n * @param {boolean} [showFullExtent] If true, allows us to show the full extent. Default: false.\n * @return {Type} Zoom function.\n */\nexport function createMinMaxResolution(\n  maxResolution,\n  minResolution,\n  smooth,\n  maxExtent,\n  showFullExtent,\n) {\n  smooth = smooth !== undefined ? smooth : true;\n\n  return (\n    /**\n     * @param {number|undefined} resolution Resolution.\n     * @param {number} direction Direction.\n     * @param {import(\"./size.js\").Size} size Viewport size.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Resolution.\n     */\n    function (resolution, direction, size, isMoving) {\n      if (resolution !== undefined) {\n        const cappedMaxRes = maxExtent\n          ? getViewportClampedResolution(\n              maxResolution,\n              maxExtent,\n              size,\n              showFullExtent,\n            )\n          : maxResolution;\n\n        if (!smooth || !isMoving) {\n          return clamp(resolution, minResolution, cappedMaxRes);\n        }\n        return getSmoothClampedResolution(\n          resolution,\n          cappedMaxRes,\n          minResolution,\n        );\n      }\n      return undefined;\n    }\n  );\n}\n","/**\n * @module ol/View\n */\nimport BaseObject from './Object.js';\nimport ViewHint from './ViewHint.js';\nimport ViewProperty from './ViewProperty.js';\nimport {linearFindNearest} from './array.js';\nimport {assert} from './asserts.js';\nimport {createExtent, none as centerNone} from './centerconstraint.js';\nimport {\n  add as addCoordinate,\n  equals,\n  equals as coordinatesEqual,\n  rotate as rotateCoordinate,\n} from './coordinate.js';\nimport {easeOut, inAndOut} from './easing.js';\nimport {\n  getCenter,\n  getForViewAndSize,\n  getHeight,\n  getWidth,\n  isEmpty,\n} from './extent.js';\nimport {VOID} from './functions.js';\nimport {fromExtent as polygonFromExtent} from './geom/Polygon.js';\nimport {clamp, modulo} from './math.js';\nimport {\n  METERS_PER_UNIT,\n  createProjection,\n  disableCoordinateWarning,\n  fromUserCoordinate,\n  fromUserExtent,\n  getUserProjection,\n  toUserCoordinate,\n  toUserExtent,\n} from './proj.js';\nimport {\n  createMinMaxResolution,\n  createSnapToPower,\n  createSnapToResolutions,\n} from './resolutionconstraint.js';\nimport {\n  createSnapToN,\n  createSnapToZero,\n  disable,\n  none as rotationNone,\n} from './rotationconstraint.js';\nimport {DEFAULT_TILE_SIZE} from './tilegrid/common.js';\n\n/**\n * An animation configuration\n *\n * @typedef {Object} Animation\n * @property {import(\"./coordinate.js\").Coordinate} [sourceCenter] Source center.\n * @property {import(\"./coordinate.js\").Coordinate} [targetCenter] Target center.\n * @property {number} [sourceResolution] Source resolution.\n * @property {number} [targetResolution] Target resolution.\n * @property {number} [sourceRotation] Source rotation.\n * @property {number} [targetRotation] Target rotation.\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Anchor.\n * @property {number} start Start.\n * @property {number} duration Duration.\n * @property {boolean} complete Complete.\n * @property {function(number):number} easing Easing.\n * @property {function(boolean):void} callback Callback.\n */\n\n/**\n * @typedef {Object} Constraints\n * @property {import(\"./centerconstraint.js\").Type} center Center.\n * @property {import(\"./resolutionconstraint.js\").Type} resolution Resolution.\n * @property {import(\"./rotationconstraint.js\").Type} rotation Rotation.\n */\n\n/**\n * @typedef {Object} FitOptions\n * @property {import(\"./size.js\").Size} [size] The size in pixels of the box to\n * fit the extent into. Defaults to the size of the map the view is associated with.\n * If no map or multiple maps are connected to the view, provide the desired box size\n * (e.g. `map.getSize()`).\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in pixels) to be\n * cleared inside the view. Values in the array are top, right, bottom and left\n * padding.\n * @property {boolean} [nearest=false] If the view `constrainResolution` option is `true`,\n * get the nearest extent instead of the closest that actually fits the view.\n * @property {number} [minResolution=0] Minimum resolution that we zoom to.\n * @property {number} [maxZoom] Maximum zoom level that we zoom to. If\n * `minResolution` is given, this property is ignored.\n * @property {number} [duration] The duration of the animation in milliseconds.\n * By default, there is no animation to the target extent.\n * @property {function(number):number} [easing] The easing function used during\n * the animation (defaults to {@link module:ol/easing.inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n * @property {function(boolean):void} [callback] Function called when the view is in\n * its final position. The callback will be called with `true` if the animation\n * series completed on its own or `false` if it was cancelled.\n */\n\n/**\n * @typedef {Object} ViewOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The initial center for\n * the view. If a user projection is not set, the coordinate system for the center is\n * specified with the `projection` option. Layer sources will not be fetched if this\n * is not set, but the center can be set later with {@link #setCenter}.\n * @property {boolean|number} [constrainRotation=true] Rotation constraint.\n * `false` means no constraint. `true` means no constraint, but snap to zero\n * near zero. A number constrains the rotation to that number of values. For\n * example, `4` will constrain the rotation to 0, 90, 180, and 270 degrees.\n * @property {boolean} [enableRotation=true] Enable rotation.\n * If `false`, a rotation constraint that always sets the rotation to zero is\n * used. The `constrainRotation` option has no effect if `enableRotation` is\n * `false`.\n * @property {import(\"./extent.js\").Extent} [extent] The extent that constrains the\n * view, in other words, nothing outside of this extent can be visible on the map.\n * @property {boolean} [constrainOnlyCenter=false] If true, the extent\n * constraint will only apply to the view center and not the whole extent.\n * @property {boolean} [smoothExtentConstraint=true] If true, the extent\n * constraint will be applied smoothly, i.e. allow the view to go slightly outside\n * of the given `extent`.\n * @property {number} [maxResolution] The maximum resolution used to determine\n * the resolution constraint. It is used together with `minResolution` (or\n * `maxZoom`) and `zoomFactor`. If unspecified it is calculated in such a way\n * that the projection's validity extent fits in a 256x256 px tile. If the\n * projection is Spherical Mercator (the default) then `maxResolution` defaults\n * to `40075016.68557849 / 256 = 156543.03392804097`.\n * @property {number} [minResolution] The minimum resolution used to determine\n * the resolution constraint.  It is used together with `maxResolution` (or\n * `minZoom`) and `zoomFactor`.  If unspecified it is calculated assuming 29\n * zoom levels (with a factor of 2). If the projection is Spherical Mercator\n * (the default) then `minResolution` defaults to\n * `40075016.68557849 / 256 / Math.pow(2, 28) = 0.0005831682455839253`.\n * @property {number} [maxZoom=28] The maximum zoom level used to determine the\n * resolution constraint. It is used together with `minZoom` (or\n * `maxResolution`) and `zoomFactor`.  Note that if `minResolution` is also\n * provided, it is given precedence over `maxZoom`.\n * @property {number} [minZoom=0] The minimum zoom level used to determine the\n * resolution constraint. It is used together with `maxZoom` (or\n * `minResolution`) and `zoomFactor`.  Note that if `maxResolution` is also\n * provided, it is given precedence over `minZoom`.\n * @property {boolean} [multiWorld=false] If `false` the view is constrained so\n * only one world is visible, and you cannot pan off the edge.  If `true` the map\n * may show multiple worlds at low zoom levels.  Only used if the `projection` is\n * global.  Note that if `extent` is also provided it is given precedence.\n * @property {boolean} [constrainResolution=false] If true, the view will always\n * animate to the closest zoom level after an interaction; false means\n * intermediary zoom levels are allowed.\n * @property {boolean} [smoothResolutionConstraint=true] If true, the resolution\n * min/max values will be applied smoothly, i. e. allow the view to exceed slightly\n * the given resolution or zoom bounds.\n * @property {boolean} [showFullExtent=false] Allow the view to be zoomed out to\n * show the full configured extent. By default, when a view is configured with an\n * extent, users will not be able to zoom out so the viewport exceeds the extent in\n * either dimension. This means the full extent may not be visible if the viewport\n * is taller or wider than the aspect ratio of the configured extent. If\n * showFullExtent is true, the user will be able to zoom out so that the viewport\n * exceeds the height or width of the configured extent, but not both, allowing the\n * full extent to be shown.\n * @property {import(\"./proj.js\").ProjectionLike} [projection='EPSG:3857'] The\n * projection. The default is Spherical Mercator.\n * @property {number} [resolution] The initial resolution for the view. The\n * units are `projection` units per pixel (e.g. meters per pixel). An\n * alternative to setting this is to set `zoom`. Layer sources will not be\n * fetched if neither this nor `zoom` are defined, but they can be set later\n * with {@link #setZoom} or {@link #setResolution}.\n * @property {Array<number>} [resolutions] Resolutions that determine the\n * zoom levels if specified. The index in the array corresponds to the zoom level,\n * therefore the resolution values have to be in descending order. It also constrains\n * the resolution by the minimum and maximum value. If set the `maxResolution`,\n * `minResolution`, `minZoom`, `maxZoom`, and `zoomFactor` options are ignored.\n * @property {number} [rotation=0] The initial rotation for the view in radians\n * (positive rotation clockwise, 0 means North).\n * @property {number} [zoom] Only used if `resolution` is not defined. Zoom\n * level used to calculate the initial resolution for the view.\n * @property {number} [zoomFactor=2] The zoom factor used to compute the\n * corresponding resolution.\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in css pixels).\n * If the map viewport is partially covered with other content (overlays) along\n * its edges, this setting allows to shift the center of the viewport away from\n * that content. The order of the values is top, right, bottom, left.\n */\n\n/**\n * @typedef {Object} AnimationOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The center of the view at the end of\n * the animation.\n * @property {number} [zoom] The zoom level of the view at the end of the\n * animation. This takes precedence over `resolution`.\n * @property {number} [resolution] The resolution of the view at the end\n * of the animation.  If `zoom` is also provided, this option will be ignored.\n * @property {number} [rotation] The rotation of the view at the end of\n * the animation.\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Optional anchor to remain fixed\n * during a rotation or resolution animation.\n * @property {number} [duration=1000] The duration of the animation in milliseconds.\n * @property {function(number):number} [easing] The easing function used\n * during the animation (defaults to {@link module:ol/easing.inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n */\n\n/**\n * @typedef {Object} State\n * @property {import(\"./coordinate.js\").Coordinate} center Center (in view projection coordinates).\n * @property {import(\"./proj/Projection.js\").default} projection Projection.\n * @property {number} resolution Resolution.\n * @property {import(\"./coordinate.js\").Coordinate} [nextCenter] The next center during an animation series.\n * @property {number} [nextResolution] The next resolution during an animation series.\n * @property {number} [nextRotation] The next rotation during an animation series.\n * @property {number} rotation Rotation.\n * @property {number} zoom Zoom.\n */\n\n/**\n * Like {@link import(\"./Map.js\").FrameState}, but just `viewState` and `extent`.\n * @typedef {Object} ViewStateLayerStateExtent\n * @property {State} viewState View state.\n * @property {import(\"./extent.js\").Extent} extent Extent (in user projection coordinates).\n * @property {Array<import(\"./layer/Layer.js\").State>} [layerStatesArray] Layer states.\n */\n\n/**\n * Default min zoom level for the map view.\n * @type {number}\n */\nconst DEFAULT_MIN_ZOOM = 0;\n\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:center'|'change:resolution'|'change:rotation'} ViewObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<ViewObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|ViewObjectEventTypes, Return>} ViewOnSignature\n */\n\n/**\n * @classdesc\n * A View object represents a simple 2D view of the map.\n *\n * This is the object to act upon to change the center, resolution,\n * and rotation of the map.\n *\n * A View has a `projection`. The projection determines the\n * coordinate system of the center, and its units determine the units of the\n * resolution (projection units per pixel). The default projection is\n * Web Mercator (EPSG:3857).\n *\n * ### The view states\n *\n * A View is determined by three states: `center`, `resolution`,\n * and `rotation`. Each state has a corresponding getter and setter, e.g.\n * `getCenter` and `setCenter` for the `center` state.\n *\n * The `zoom` state is actually not saved on the view: all computations\n * internally use the `resolution` state. Still, the `setZoom` and `getZoom`\n * methods are available, as well as `getResolutionForZoom` and\n * `getZoomForResolution` to switch from one system to the other.\n *\n * ### The constraints\n *\n * `setCenter`, `setResolution` and `setRotation` can be used to change the\n * states of the view, but any constraint defined in the constructor will\n * be applied along the way.\n *\n * A View object can have a *resolution constraint*, a *rotation constraint*\n * and a *center constraint*.\n *\n * The *resolution constraint* typically restricts min/max values and\n * snaps to specific resolutions. It is determined by the following\n * options: `resolutions`, `maxResolution`, `maxZoom` and `zoomFactor`.\n * If `resolutions` is set, the other three options are ignored. See\n * documentation for each option for more information. By default, the view\n * only has a min/max restriction and allow intermediary zoom levels when\n * pinch-zooming for example.\n *\n * The *rotation constraint* snaps to specific angles. It is determined\n * by the following options: `enableRotation` and `constrainRotation`.\n * By default rotation is allowed and its value is snapped to zero when approaching the\n * horizontal.\n *\n * The *center constraint* is determined by the `extent` option. By\n * default the view center is not constrained at all.\n *\n * ### Changing the view state\n *\n * It is important to note that `setZoom`, `setResolution`, `setCenter` and\n * `setRotation` are subject to the above mentioned constraints. As such, it\n * may sometimes not be possible to know in advance the resulting state of the\n * View. For example, calling `setResolution(10)` does not guarantee that\n * `getResolution()` will return `10`.\n *\n * A consequence of this is that, when applying a delta on the view state, one\n * should use `adjustCenter`, `adjustRotation`, `adjustZoom` and `adjustResolution`\n * rather than the corresponding setters. This will let view do its internal\n * computations. Besides, the `adjust*` methods also take an `anchor`\n * argument which allows specifying an origin for the transformation.\n *\n * ### Interacting with the view\n *\n * View constraints are usually only applied when the view is *at rest*, meaning that\n * no interaction or animation is ongoing. As such, if the user puts the view in a\n * state that is not equivalent to a constrained one (e.g. rotating the view when\n * the snap angle is 0), an animation will be triggered at the interaction end to\n * put back the view to a stable state;\n *\n * @api\n */\nclass View extends BaseObject {\n  /**\n   * @param {ViewOptions} [options] View options.\n   */\n  constructor(options) {\n    super();\n\n    /***\n     * @type {ViewOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {ViewOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {ViewOnSignature<void>}\n     */\n    this.un;\n\n    options = Object.assign({}, options);\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.hints_ = [0, 0];\n\n    /**\n     * @private\n     * @type {Array<Array<Animation>>}\n     */\n    this.animations_ = [];\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.updateAnimationKey_;\n\n    /**\n     * @private\n     * @const\n     * @type {import(\"./proj/Projection.js\").default}\n     */\n    this.projection_ = createProjection(options.projection, 'EPSG:3857');\n\n    /**\n     * @private\n     * @type {import(\"./size.js\").Size}\n     */\n    this.viewportSize_ = [100, 100];\n\n    /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate|undefined}\n     */\n    this.targetCenter_ = null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.targetResolution_;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.targetRotation_;\n\n    /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate}\n     */\n    this.nextCenter_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.nextResolution_;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.nextRotation_;\n\n    /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate|undefined}\n     */\n    this.cancelAnchor_ = undefined;\n\n    if (options.projection) {\n      disableCoordinateWarning();\n    }\n    if (options.center) {\n      options.center = fromUserCoordinate(options.center, this.projection_);\n    }\n    if (options.extent) {\n      options.extent = fromUserExtent(options.extent, this.projection_);\n    }\n\n    this.applyOptions_(options);\n  }\n\n  /**\n   * Set up the view with the given options.\n   * @param {ViewOptions} options View options.\n   */\n  applyOptions_(options) {\n    const properties = Object.assign({}, options);\n    for (const key in ViewProperty) {\n      delete properties[key];\n    }\n    this.setProperties(properties, true);\n\n    const resolutionConstraintInfo = createResolutionConstraint(options);\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxResolution_ = resolutionConstraintInfo.maxResolution;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minResolution_ = resolutionConstraintInfo.minResolution;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.zoomFactor_ = resolutionConstraintInfo.zoomFactor;\n\n    /**\n     * @private\n     * @type {Array<number>|undefined}\n     */\n    this.resolutions_ = options.resolutions;\n\n    /**\n     * @type {Array<number>|undefined}\n     * @private\n     */\n    this.padding_ = options.padding;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minZoom_ = resolutionConstraintInfo.minZoom;\n\n    const centerConstraint = createCenterConstraint(options);\n    const resolutionConstraint = resolutionConstraintInfo.constraint;\n    const rotationConstraint = createRotationConstraint(options);\n\n    /**\n     * @private\n     * @type {Constraints}\n     */\n    this.constraints_ = {\n      center: centerConstraint,\n      resolution: resolutionConstraint,\n      rotation: rotationConstraint,\n    };\n\n    this.setRotation(options.rotation !== undefined ? options.rotation : 0);\n    this.setCenterInternal(\n      options.center !== undefined ? options.center : null,\n    );\n    if (options.resolution !== undefined) {\n      this.setResolution(options.resolution);\n    } else if (options.zoom !== undefined) {\n      this.setZoom(options.zoom);\n    }\n  }\n\n  /**\n   * Padding (in css pixels).\n   * If the map viewport is partially covered with other content (overlays) along\n   * its edges, this setting allows to shift the center of the viewport away from that\n   * content. The order of the values in the array is top, right, bottom, left.\n   * The default is no padding, which is equivalent to `[0, 0, 0, 0]`.\n   * @type {Array<number>|undefined}\n   * @api\n   */\n  get padding() {\n    return this.padding_;\n  }\n  set padding(padding) {\n    let oldPadding = this.padding_;\n    this.padding_ = padding;\n    const center = this.getCenterInternal();\n    if (center) {\n      const newPadding = padding || [0, 0, 0, 0];\n      oldPadding = oldPadding || [0, 0, 0, 0];\n      const resolution = this.getResolution();\n      const offsetX =\n        (resolution / 2) *\n        (newPadding[3] - oldPadding[3] + oldPadding[1] - newPadding[1]);\n      const offsetY =\n        (resolution / 2) *\n        (newPadding[0] - oldPadding[0] + oldPadding[2] - newPadding[2]);\n      this.setCenterInternal([center[0] + offsetX, center[1] - offsetY]);\n    }\n  }\n\n  /**\n   * Get an updated version of the view options used to construct the view.  The\n   * current resolution (or zoom), center, and rotation are applied to any stored\n   * options.  The provided options can be used to apply new min/max zoom or\n   * resolution limits.\n   * @param {ViewOptions} newOptions New options to be applied.\n   * @return {ViewOptions} New options updated with the current view state.\n   */\n  getUpdatedOptions_(newOptions) {\n    const options = this.getProperties();\n\n    // preserve resolution (or zoom)\n    if (options.resolution !== undefined) {\n      options.resolution = this.getResolution();\n    } else {\n      options.zoom = this.getZoom();\n    }\n\n    // preserve center\n    options.center = this.getCenterInternal();\n\n    // preserve rotation\n    options.rotation = this.getRotation();\n\n    return Object.assign({}, options, newOptions);\n  }\n\n  /**\n   * Animate the view.  The view's center, zoom (or resolution), and rotation\n   * can be animated for smooth transitions between view states.  For example,\n   * to animate the view to a new zoom level:\n   *\n   *     view.animate({zoom: view.getZoom() + 1});\n   *\n   * By default, the animation lasts one second and uses in-and-out easing.  You\n   * can customize this behavior by including `duration` (in milliseconds) and\n   * `easing` options (see {@link module:ol/easing}).\n   *\n   * To chain together multiple animations, call the method with multiple\n   * animation objects.  For example, to first zoom and then pan:\n   *\n   *     view.animate({zoom: 10}, {center: [0, 0]});\n   *\n   * If you provide a function as the last argument to the animate method, it\n   * will get called at the end of an animation series.  The callback will be\n   * called with `true` if the animation series completed on its own or `false`\n   * if it was cancelled.\n   *\n   * Animations are cancelled by user interactions (e.g. dragging the map) or by\n   * calling `view.setCenter()`, `view.setResolution()`, or `view.setRotation()`\n   * (or another method that calls one of these).\n   *\n   * @param {...(AnimationOptions|function(boolean): void)} var_args Animation\n   *     options.  Multiple animations can be run in series by passing multiple\n   *     options objects.  To run multiple animations in parallel, call the method\n   *     multiple times.  An optional callback can be provided as a final\n   *     argument.  The callback will be called with a boolean indicating whether\n   *     the animation completed without being cancelled.\n   * @api\n   */\n  animate(var_args) {\n    if (this.isDef() && !this.getAnimating()) {\n      this.resolveConstraints(0);\n    }\n    const args = new Array(arguments.length);\n    for (let i = 0; i < args.length; ++i) {\n      let options = arguments[i];\n      if (options.center) {\n        options = Object.assign({}, options);\n        options.center = fromUserCoordinate(\n          options.center,\n          this.getProjection(),\n        );\n      }\n      if (options.anchor) {\n        options = Object.assign({}, options);\n        options.anchor = fromUserCoordinate(\n          options.anchor,\n          this.getProjection(),\n        );\n      }\n      args[i] = options;\n    }\n    this.animateInternal.apply(this, args);\n  }\n\n  /**\n   * @param {...(AnimationOptions|function(boolean): void)} var_args Animation options.\n   */\n  animateInternal(var_args) {\n    let animationCount = arguments.length;\n    let callback;\n    if (\n      animationCount > 1 &&\n      typeof arguments[animationCount - 1] === 'function'\n    ) {\n      callback = arguments[animationCount - 1];\n      --animationCount;\n    }\n\n    let i = 0;\n    for (; i < animationCount && !this.isDef(); ++i) {\n      // if view properties are not yet set, shortcut to the final state\n      const state = arguments[i];\n      if (state.center) {\n        this.setCenterInternal(state.center);\n      }\n      if (state.zoom !== undefined) {\n        this.setZoom(state.zoom);\n      } else if (state.resolution) {\n        this.setResolution(state.resolution);\n      }\n      if (state.rotation !== undefined) {\n        this.setRotation(state.rotation);\n      }\n    }\n    if (i === animationCount) {\n      if (callback) {\n        animationCallback(callback, true);\n      }\n      return;\n    }\n\n    let start = Date.now();\n    let center = this.targetCenter_.slice();\n    let resolution = this.targetResolution_;\n    let rotation = this.targetRotation_;\n    const series = [];\n    for (; i < animationCount; ++i) {\n      const options = /** @type {AnimationOptions} */ (arguments[i]);\n\n      const animation = {\n        start: start,\n        complete: false,\n        anchor: options.anchor,\n        duration: options.duration !== undefined ? options.duration : 1000,\n        easing: options.easing || inAndOut,\n        callback: callback,\n      };\n\n      if (options.center) {\n        animation.sourceCenter = center;\n        animation.targetCenter = options.center.slice();\n        center = animation.targetCenter;\n      }\n\n      if (options.zoom !== undefined) {\n        animation.sourceResolution = resolution;\n        animation.targetResolution = this.getResolutionForZoom(options.zoom);\n        resolution = animation.targetResolution;\n      } else if (options.resolution) {\n        animation.sourceResolution = resolution;\n        animation.targetResolution = options.resolution;\n        resolution = animation.targetResolution;\n      }\n\n      if (options.rotation !== undefined) {\n        animation.sourceRotation = rotation;\n        const delta =\n          modulo(options.rotation - rotation + Math.PI, 2 * Math.PI) - Math.PI;\n        animation.targetRotation = rotation + delta;\n        rotation = animation.targetRotation;\n      }\n\n      // check if animation is a no-op\n      if (isNoopAnimation(animation)) {\n        animation.complete = true;\n        // we still push it onto the series for callback handling\n      } else {\n        start += animation.duration;\n      }\n      series.push(animation);\n    }\n    this.animations_.push(series);\n    this.setHint(ViewHint.ANIMATING, 1);\n    this.updateAnimations_();\n  }\n\n  /**\n   * Determine if the view is being animated.\n   * @return {boolean} The view is being animated.\n   * @api\n   */\n  getAnimating() {\n    return this.hints_[ViewHint.ANIMATING] > 0;\n  }\n\n  /**\n   * Determine if the user is interacting with the view, such as panning or zooming.\n   * @return {boolean} The view is being interacted with.\n   * @api\n   */\n  getInteracting() {\n    return this.hints_[ViewHint.INTERACTING] > 0;\n  }\n\n  /**\n   * Cancel any ongoing animations.\n   * @api\n   */\n  cancelAnimations() {\n    this.setHint(ViewHint.ANIMATING, -this.hints_[ViewHint.ANIMATING]);\n    let anchor;\n    for (let i = 0, ii = this.animations_.length; i < ii; ++i) {\n      const series = this.animations_[i];\n      if (series[0].callback) {\n        animationCallback(series[0].callback, false);\n      }\n      if (!anchor) {\n        for (let j = 0, jj = series.length; j < jj; ++j) {\n          const animation = series[j];\n          if (!animation.complete) {\n            anchor = animation.anchor;\n            break;\n          }\n        }\n      }\n    }\n    this.animations_.length = 0;\n    this.cancelAnchor_ = anchor;\n    this.nextCenter_ = null;\n    this.nextResolution_ = NaN;\n    this.nextRotation_ = NaN;\n  }\n\n  /**\n   * Update all animations.\n   */\n  updateAnimations_() {\n    if (this.updateAnimationKey_ !== undefined) {\n      cancelAnimationFrame(this.updateAnimationKey_);\n      this.updateAnimationKey_ = undefined;\n    }\n    if (!this.getAnimating()) {\n      return;\n    }\n    const now = Date.now();\n    let more = false;\n    for (let i = this.animations_.length - 1; i >= 0; --i) {\n      const series = this.animations_[i];\n      let seriesComplete = true;\n      for (let j = 0, jj = series.length; j < jj; ++j) {\n        const animation = series[j];\n        if (animation.complete) {\n          continue;\n        }\n        const elapsed = now - animation.start;\n        let fraction =\n          animation.duration > 0 ? elapsed / animation.duration : 1;\n        if (fraction >= 1) {\n          animation.complete = true;\n          fraction = 1;\n        } else {\n          seriesComplete = false;\n        }\n        const progress = animation.easing(fraction);\n        if (animation.sourceCenter) {\n          const x0 = animation.sourceCenter[0];\n          const y0 = animation.sourceCenter[1];\n          const x1 = animation.targetCenter[0];\n          const y1 = animation.targetCenter[1];\n          this.nextCenter_ = animation.targetCenter;\n          const x = x0 + progress * (x1 - x0);\n          const y = y0 + progress * (y1 - y0);\n          this.targetCenter_ = [x, y];\n        }\n        if (animation.sourceResolution && animation.targetResolution) {\n          const resolution =\n            progress === 1\n              ? animation.targetResolution\n              : animation.sourceResolution +\n                progress *\n                  (animation.targetResolution - animation.sourceResolution);\n          if (animation.anchor) {\n            const size = this.getViewportSize_(this.getRotation());\n            const constrainedResolution = this.constraints_.resolution(\n              resolution,\n              0,\n              size,\n              true,\n            );\n            this.targetCenter_ = this.calculateCenterZoom(\n              constrainedResolution,\n              animation.anchor,\n            );\n          }\n          this.nextResolution_ = animation.targetResolution;\n          this.targetResolution_ = resolution;\n          this.applyTargetState_(true);\n        }\n        if (\n          animation.sourceRotation !== undefined &&\n          animation.targetRotation !== undefined\n        ) {\n          const rotation =\n            progress === 1\n              ? modulo(animation.targetRotation + Math.PI, 2 * Math.PI) -\n                Math.PI\n              : animation.sourceRotation +\n                progress *\n                  (animation.targetRotation - animation.sourceRotation);\n          if (animation.anchor) {\n            const constrainedRotation = this.constraints_.rotation(\n              rotation,\n              true,\n            );\n            this.targetCenter_ = this.calculateCenterRotate(\n              constrainedRotation,\n              animation.anchor,\n            );\n          }\n          this.nextRotation_ = animation.targetRotation;\n          this.targetRotation_ = rotation;\n        }\n        this.applyTargetState_(true);\n        more = true;\n        if (!animation.complete) {\n          break;\n        }\n      }\n      if (seriesComplete) {\n        this.animations_[i] = null;\n        this.setHint(ViewHint.ANIMATING, -1);\n        this.nextCenter_ = null;\n        this.nextResolution_ = NaN;\n        this.nextRotation_ = NaN;\n        const callback = series[0].callback;\n        if (callback) {\n          animationCallback(callback, true);\n        }\n      }\n    }\n    // prune completed series\n    this.animations_ = this.animations_.filter(Boolean);\n    if (more && this.updateAnimationKey_ === undefined) {\n      this.updateAnimationKey_ = requestAnimationFrame(\n        this.updateAnimations_.bind(this),\n      );\n    }\n  }\n\n  /**\n   * @param {number} rotation Target rotation.\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Rotation anchor.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for rotation and anchor.\n   */\n  calculateCenterRotate(rotation, anchor) {\n    let center;\n    const currentCenter = this.getCenterInternal();\n    if (currentCenter !== undefined) {\n      center = [currentCenter[0] - anchor[0], currentCenter[1] - anchor[1]];\n      rotateCoordinate(center, rotation - this.getRotation());\n      addCoordinate(center, anchor);\n    }\n    return center;\n  }\n\n  /**\n   * @param {number} resolution Target resolution.\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Zoom anchor.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for resolution and anchor.\n   */\n  calculateCenterZoom(resolution, anchor) {\n    let center;\n    const currentCenter = this.getCenterInternal();\n    const currentResolution = this.getResolution();\n    if (currentCenter !== undefined && currentResolution !== undefined) {\n      const x =\n        anchor[0] -\n        (resolution * (anchor[0] - currentCenter[0])) / currentResolution;\n      const y =\n        anchor[1] -\n        (resolution * (anchor[1] - currentCenter[1])) / currentResolution;\n      center = [x, y];\n    }\n    return center;\n  }\n\n  /**\n   * Returns the current viewport size.\n   * @private\n   * @param {number} [rotation] Take into account the rotation of the viewport when giving the size\n   * @return {import(\"./size.js\").Size} Viewport size or `[100, 100]` when no viewport is found.\n   */\n  getViewportSize_(rotation) {\n    const size = this.viewportSize_;\n    if (rotation) {\n      const w = size[0];\n      const h = size[1];\n      return [\n        Math.abs(w * Math.cos(rotation)) + Math.abs(h * Math.sin(rotation)),\n        Math.abs(w * Math.sin(rotation)) + Math.abs(h * Math.cos(rotation)),\n      ];\n    }\n    return size;\n  }\n\n  /**\n   * Stores the viewport size on the view. The viewport size is not read every time from the DOM\n   * to avoid performance hit and layout reflow.\n   * This should be done on map size change.\n   * Note: the constraints are not resolved during an animation to avoid stopping it\n   * @param {import(\"./size.js\").Size} [size] Viewport size; if undefined, [100, 100] is assumed\n   */\n  setViewportSize(size) {\n    this.viewportSize_ = Array.isArray(size) ? size.slice() : [100, 100];\n    if (!this.getAnimating()) {\n      this.resolveConstraints(0);\n    }\n  }\n\n  /**\n   * Get the view center.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\n   * @observable\n   * @api\n   */\n  getCenter() {\n    const center = this.getCenterInternal();\n    if (!center) {\n      return center;\n    }\n    return toUserCoordinate(center, this.getProjection());\n  }\n\n  /**\n   * Get the view center without transforming to user projection.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\n   */\n  getCenterInternal() {\n    return /** @type {import(\"./coordinate.js\").Coordinate|undefined} */ (\n      this.get(ViewProperty.CENTER)\n    );\n  }\n\n  /**\n   * @return {Constraints} Constraints.\n   */\n  getConstraints() {\n    return this.constraints_;\n  }\n\n  /**\n   * @return {boolean} Resolution constraint is set\n   */\n  getConstrainResolution() {\n    return this.get('constrainResolution');\n  }\n\n  /**\n   * @param {Array<number>} [hints] Destination array.\n   * @return {Array<number>} Hint.\n   */\n  getHints(hints) {\n    if (hints !== undefined) {\n      hints[0] = this.hints_[0];\n      hints[1] = this.hints_[1];\n      return hints;\n    }\n    return this.hints_.slice();\n  }\n\n  /**\n   * Calculate the extent for the current view state and the passed box size.\n   * @param {import(\"./size.js\").Size} [size] The pixel dimensions of the box\n   * into which the calculated extent should fit. Defaults to the size of the\n   * map the view is associated with.\n   * If no map or multiple maps are connected to the view, provide the desired\n   * box size (e.g. `map.getSize()`).\n   * @return {import(\"./extent.js\").Extent} Extent.\n   * @api\n   */\n  calculateExtent(size) {\n    const extent = this.calculateExtentInternal(size);\n    return toUserExtent(extent, this.getProjection());\n  }\n\n  /**\n   * @param {import(\"./size.js\").Size} [size] Box pixel size. If not provided,\n   * the map's last known viewport size will be used.\n   * @return {import(\"./extent.js\").Extent} Extent.\n   */\n  calculateExtentInternal(size) {\n    size = size || this.getViewportSizeMinusPadding_();\n    const center = /** @type {!import(\"./coordinate.js\").Coordinate} */ (\n      this.getCenterInternal()\n    );\n    assert(center, 'The view center is not defined');\n    const resolution = /** @type {!number} */ (this.getResolution());\n    assert(resolution !== undefined, 'The view resolution is not defined');\n    const rotation = /** @type {!number} */ (this.getRotation());\n    assert(rotation !== undefined, 'The view rotation is not defined');\n\n    return getForViewAndSize(center, resolution, rotation, size);\n  }\n\n  /**\n   * Get the maximum resolution of the view.\n   * @return {number} The maximum resolution of the view.\n   * @api\n   */\n  getMaxResolution() {\n    return this.maxResolution_;\n  }\n\n  /**\n   * Get the minimum resolution of the view.\n   * @return {number} The minimum resolution of the view.\n   * @api\n   */\n  getMinResolution() {\n    return this.minResolution_;\n  }\n\n  /**\n   * Get the maximum zoom level for the view.\n   * @return {number} The maximum zoom level.\n   * @api\n   */\n  getMaxZoom() {\n    return /** @type {number} */ (\n      this.getZoomForResolution(this.minResolution_)\n    );\n  }\n\n  /**\n   * Set a new maximum zoom level for the view.\n   * @param {number} zoom The maximum zoom level.\n   * @api\n   */\n  setMaxZoom(zoom) {\n    this.applyOptions_(this.getUpdatedOptions_({maxZoom: zoom}));\n  }\n\n  /**\n   * Get the minimum zoom level for the view.\n   * @return {number} The minimum zoom level.\n   * @api\n   */\n  getMinZoom() {\n    return /** @type {number} */ (\n      this.getZoomForResolution(this.maxResolution_)\n    );\n  }\n\n  /**\n   * Set a new minimum zoom level for the view.\n   * @param {number} zoom The minimum zoom level.\n   * @api\n   */\n  setMinZoom(zoom) {\n    this.applyOptions_(this.getUpdatedOptions_({minZoom: zoom}));\n  }\n\n  /**\n   * Set whether the view should allow intermediary zoom levels.\n   * @param {boolean} enabled Whether the resolution is constrained.\n   * @api\n   */\n  setConstrainResolution(enabled) {\n    this.applyOptions_(this.getUpdatedOptions_({constrainResolution: enabled}));\n  }\n\n  /**\n   * Get the view projection.\n   * @return {import(\"./proj/Projection.js\").default} The projection of the view.\n   * @api\n   */\n  getProjection() {\n    return this.projection_;\n  }\n\n  /**\n   * Get the view resolution.\n   * @return {number|undefined} The resolution of the view.\n   * @observable\n   * @api\n   */\n  getResolution() {\n    return /** @type {number|undefined} */ (this.get(ViewProperty.RESOLUTION));\n  }\n\n  /**\n   * Get the resolutions for the view. This returns the array of resolutions\n   * passed to the constructor of the View, or undefined if none were given.\n   * @return {Array<number>|undefined} The resolutions of the view.\n   * @api\n   */\n  getResolutions() {\n    return this.resolutions_;\n  }\n\n  /**\n   * Get the resolution for a provided extent (in map units) and size (in pixels).\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {import(\"./size.js\").Size} [size] Box pixel size.\n   * @return {number} The resolution at which the provided extent will render at\n   *     the given size.\n   * @api\n   */\n  getResolutionForExtent(extent, size) {\n    return this.getResolutionForExtentInternal(\n      fromUserExtent(extent, this.getProjection()),\n      size,\n    );\n  }\n\n  /**\n   * Get the resolution for a provided extent (in map units) and size (in pixels).\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {import(\"./size.js\").Size} [size] Box pixel size.\n   * @return {number} The resolution at which the provided extent will render at\n   *     the given size.\n   */\n  getResolutionForExtentInternal(extent, size) {\n    size = size || this.getViewportSizeMinusPadding_();\n    const xResolution = getWidth(extent) / size[0];\n    const yResolution = getHeight(extent) / size[1];\n    return Math.max(xResolution, yResolution);\n  }\n\n  /**\n   * Return a function that returns a value between 0 and 1 for a\n   * resolution. Exponential scaling is assumed.\n   * @param {number} [power] Power.\n   * @return {function(number): number} Resolution for value function.\n   */\n  getResolutionForValueFunction(power) {\n    power = power || 2;\n    const maxResolution = this.getConstrainedResolution(this.maxResolution_);\n    const minResolution = this.minResolution_;\n    const max = Math.log(maxResolution / minResolution) / Math.log(power);\n    return (\n      /**\n       * @param {number} value Value.\n       * @return {number} Resolution.\n       */\n      function (value) {\n        const resolution = maxResolution / Math.pow(power, value * max);\n        return resolution;\n      }\n    );\n  }\n\n  /**\n   * Get the view rotation.\n   * @return {number} The rotation of the view in radians.\n   * @observable\n   * @api\n   */\n  getRotation() {\n    return /** @type {number} */ (this.get(ViewProperty.ROTATION));\n  }\n\n  /**\n   * Return a function that returns a resolution for a value between\n   * 0 and 1. Exponential scaling is assumed.\n   * @param {number} [power] Power.\n   * @return {function(number): number} Value for resolution function.\n   */\n  getValueForResolutionFunction(power) {\n    const logPower = Math.log(power || 2);\n    const maxResolution = this.getConstrainedResolution(this.maxResolution_);\n    const minResolution = this.minResolution_;\n    const max = Math.log(maxResolution / minResolution) / logPower;\n    return (\n      /**\n       * @param {number} resolution Resolution.\n       * @return {number} Value.\n       */\n      function (resolution) {\n        const value = Math.log(maxResolution / resolution) / logPower / max;\n        return value;\n      }\n    );\n  }\n\n  /**\n   * Returns the size of the viewport minus padding.\n   * @private\n   * @param {number} [rotation] Take into account the rotation of the viewport when giving the size\n   * @return {import(\"./size.js\").Size} Viewport size reduced by the padding.\n   */\n  getViewportSizeMinusPadding_(rotation) {\n    let size = this.getViewportSize_(rotation);\n    const padding = this.padding_;\n    if (padding) {\n      size = [\n        size[0] - padding[1] - padding[3],\n        size[1] - padding[0] - padding[2],\n      ];\n    }\n    return size;\n  }\n\n  /**\n   * @return {State} View state.\n   */\n  getState() {\n    const projection = this.getProjection();\n    const resolution = this.getResolution();\n    const rotation = this.getRotation();\n    let center = /** @type {import(\"./coordinate.js\").Coordinate} */ (\n      this.getCenterInternal()\n    );\n    const padding = this.padding_;\n    if (padding) {\n      const reducedSize = this.getViewportSizeMinusPadding_();\n      center = calculateCenterOn(\n        center,\n        this.getViewportSize_(),\n        [reducedSize[0] / 2 + padding[3], reducedSize[1] / 2 + padding[0]],\n        resolution,\n        rotation,\n      );\n    }\n    return {\n      center: center.slice(0),\n      projection: projection !== undefined ? projection : null,\n      resolution: resolution,\n      nextCenter: this.nextCenter_,\n      nextResolution: this.nextResolution_,\n      nextRotation: this.nextRotation_,\n      rotation: rotation,\n      zoom: this.getZoom(),\n    };\n  }\n\n  /**\n   * @return {ViewStateLayerStateExtent} Like `FrameState`, but just `viewState` and `extent`.\n   */\n  getViewStateAndExtent() {\n    return {\n      viewState: this.getState(),\n      extent: this.calculateExtent(),\n    };\n  }\n\n  /**\n   * Get the current zoom level. This method may return non-integer zoom levels\n   * if the view does not constrain the resolution, or if an interaction or\n   * animation is underway.\n   * @return {number|undefined} Zoom.\n   * @api\n   */\n  getZoom() {\n    let zoom;\n    const resolution = this.getResolution();\n    if (resolution !== undefined) {\n      zoom = this.getZoomForResolution(resolution);\n    }\n    return zoom;\n  }\n\n  /**\n   * Get the zoom level for a resolution.\n   * @param {number} resolution The resolution.\n   * @return {number|undefined} The zoom level for the provided resolution.\n   * @api\n   */\n  getZoomForResolution(resolution) {\n    let offset = this.minZoom_ || 0;\n    let max, zoomFactor;\n    if (this.resolutions_) {\n      const nearest = linearFindNearest(this.resolutions_, resolution, 1);\n      offset = nearest;\n      max = this.resolutions_[nearest];\n      if (nearest == this.resolutions_.length - 1) {\n        zoomFactor = 2;\n      } else {\n        zoomFactor = max / this.resolutions_[nearest + 1];\n      }\n    } else {\n      max = this.maxResolution_;\n      zoomFactor = this.zoomFactor_;\n    }\n    return offset + Math.log(max / resolution) / Math.log(zoomFactor);\n  }\n\n  /**\n   * Get the resolution for a zoom level.\n   * @param {number} zoom Zoom level.\n   * @return {number} The view resolution for the provided zoom level.\n   * @api\n   */\n  getResolutionForZoom(zoom) {\n    if (this.resolutions_?.length) {\n      if (this.resolutions_.length === 1) {\n        return this.resolutions_[0];\n      }\n      const baseLevel = clamp(\n        Math.floor(zoom),\n        0,\n        this.resolutions_.length - 2,\n      );\n      const zoomFactor =\n        this.resolutions_[baseLevel] / this.resolutions_[baseLevel + 1];\n      return (\n        this.resolutions_[baseLevel] /\n        Math.pow(zoomFactor, clamp(zoom - baseLevel, 0, 1))\n      );\n    }\n    return (\n      this.maxResolution_ / Math.pow(this.zoomFactor_, zoom - this.minZoom_)\n    );\n  }\n\n  /**\n   * Fit the given geometry or extent based on the given map size and border.\n   * The size is pixel dimensions of the box to fit the extent into.\n   * In most cases you will want to use the map size, that is `map.getSize()`.\n   * Takes care of the map angle.\n   * @param {import(\"./geom/SimpleGeometry.js\").default|import(\"./extent.js\").Extent} geometryOrExtent The geometry or\n   *     extent to fit the view to.\n   * @param {FitOptions} [options] Options.\n   * @api\n   */\n  fit(geometryOrExtent, options) {\n    /** @type {import(\"./geom/SimpleGeometry.js\").default} */\n    let geometry;\n    assert(\n      Array.isArray(geometryOrExtent) ||\n        typeof (/** @type {?} */ (geometryOrExtent).getSimplifiedGeometry) ===\n          'function',\n      'Invalid extent or geometry provided as `geometry`',\n    );\n    if (Array.isArray(geometryOrExtent)) {\n      assert(\n        !isEmpty(geometryOrExtent),\n        'Cannot fit empty extent provided as `geometry`',\n      );\n      const extent = fromUserExtent(geometryOrExtent, this.getProjection());\n      geometry = polygonFromExtent(extent);\n    } else if (geometryOrExtent.getType() === 'Circle') {\n      const extent = fromUserExtent(\n        geometryOrExtent.getExtent(),\n        this.getProjection(),\n      );\n      geometry = polygonFromExtent(extent);\n      geometry.rotate(this.getRotation(), getCenter(extent));\n    } else {\n      const userProjection = getUserProjection();\n      if (userProjection) {\n        geometry = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (\n          geometryOrExtent\n            .clone()\n            .transform(userProjection, this.getProjection())\n        );\n      } else {\n        geometry = geometryOrExtent;\n      }\n    }\n\n    this.fitInternal(geometry, options);\n  }\n\n  /**\n   * Calculate rotated extent\n   * @param {import(\"./geom/SimpleGeometry.js\").default} geometry The geometry.\n   * @return {import(\"./extent\").Extent} The rotated extent for the geometry.\n   */\n  rotatedExtentForGeometry(geometry) {\n    const rotation = this.getRotation();\n    const cosAngle = Math.cos(rotation);\n    const sinAngle = Math.sin(-rotation);\n    const coords = geometry.getFlatCoordinates();\n    const stride = geometry.getStride();\n    let minRotX = +Infinity;\n    let minRotY = +Infinity;\n    let maxRotX = -Infinity;\n    let maxRotY = -Infinity;\n    for (let i = 0, ii = coords.length; i < ii; i += stride) {\n      const rotX = coords[i] * cosAngle - coords[i + 1] * sinAngle;\n      const rotY = coords[i] * sinAngle + coords[i + 1] * cosAngle;\n      minRotX = Math.min(minRotX, rotX);\n      minRotY = Math.min(minRotY, rotY);\n      maxRotX = Math.max(maxRotX, rotX);\n      maxRotY = Math.max(maxRotY, rotY);\n    }\n    return [minRotX, minRotY, maxRotX, maxRotY];\n  }\n\n  /**\n   * @param {import(\"./geom/SimpleGeometry.js\").default} geometry The geometry.\n   * @param {FitOptions} [options] Options.\n   */\n  fitInternal(geometry, options) {\n    options = options || {};\n    let size = options.size;\n    if (!size) {\n      size = this.getViewportSizeMinusPadding_();\n    }\n    const padding =\n      options.padding !== undefined ? options.padding : [0, 0, 0, 0];\n    const nearest = options.nearest !== undefined ? options.nearest : false;\n    let minResolution;\n    if (options.minResolution !== undefined) {\n      minResolution = options.minResolution;\n    } else if (options.maxZoom !== undefined) {\n      minResolution = this.getResolutionForZoom(options.maxZoom);\n    } else {\n      minResolution = 0;\n    }\n\n    const rotatedExtent = this.rotatedExtentForGeometry(geometry);\n\n    // calculate resolution\n    let resolution = this.getResolutionForExtentInternal(rotatedExtent, [\n      size[0] - padding[1] - padding[3],\n      size[1] - padding[0] - padding[2],\n    ]);\n    resolution = isNaN(resolution)\n      ? minResolution\n      : Math.max(resolution, minResolution);\n    resolution = this.getConstrainedResolution(resolution, nearest ? 0 : 1);\n\n    // calculate center\n    const rotation = this.getRotation();\n    const sinAngle = Math.sin(rotation);\n    const cosAngle = Math.cos(rotation);\n    const centerRot = getCenter(rotatedExtent);\n    centerRot[0] += ((padding[1] - padding[3]) / 2) * resolution;\n    centerRot[1] += ((padding[0] - padding[2]) / 2) * resolution;\n    const centerX = centerRot[0] * cosAngle - centerRot[1] * sinAngle;\n    const centerY = centerRot[1] * cosAngle + centerRot[0] * sinAngle;\n    const center = this.getConstrainedCenter([centerX, centerY], resolution);\n    const callback = options.callback ? options.callback : VOID;\n\n    if (options.duration !== undefined) {\n      this.animateInternal(\n        {\n          resolution: resolution,\n          center: center,\n          duration: options.duration,\n          easing: options.easing,\n        },\n        callback,\n      );\n    } else {\n      this.targetResolution_ = resolution;\n      this.targetCenter_ = center;\n      this.applyTargetState_(false, true);\n      animationCallback(callback, true);\n    }\n  }\n\n  /**\n   * Center on coordinate and view position.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"./size.js\").Size} size Box pixel size.\n   * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n   * @api\n   */\n  centerOn(coordinate, size, position) {\n    this.centerOnInternal(\n      fromUserCoordinate(coordinate, this.getProjection()),\n      size,\n      position,\n    );\n  }\n\n  /**\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"./size.js\").Size} size Box pixel size.\n   * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n   */\n  centerOnInternal(coordinate, size, position) {\n    this.setCenterInternal(\n      calculateCenterOn(\n        coordinate,\n        size,\n        position,\n        this.getResolution(),\n        this.getRotation(),\n      ),\n    );\n  }\n\n  /**\n   * Calculates the shift between map and viewport center.\n   * @param {import(\"./coordinate.js\").Coordinate} center Center.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {import(\"./size.js\").Size} size Size.\n   * @return {Array<number>|undefined} Center shift.\n   */\n  calculateCenterShift(center, resolution, rotation, size) {\n    let centerShift;\n    const padding = this.padding_;\n    if (padding && center) {\n      const reducedSize = this.getViewportSizeMinusPadding_(-rotation);\n      const shiftedCenter = calculateCenterOn(\n        center,\n        size,\n        [reducedSize[0] / 2 + padding[3], reducedSize[1] / 2 + padding[0]],\n        resolution,\n        rotation,\n      );\n      centerShift = [\n        center[0] - shiftedCenter[0],\n        center[1] - shiftedCenter[1],\n      ];\n    }\n    return centerShift;\n  }\n\n  /**\n   * @return {boolean} Is defined.\n   */\n  isDef() {\n    return !!this.getCenterInternal() && this.getResolution() !== undefined;\n  }\n\n  /**\n   * Adds relative coordinates to the center of the view. Any extent constraint will apply.\n   * @param {import(\"./coordinate.js\").Coordinate} deltaCoordinates Relative value to add.\n   * @api\n   */\n  adjustCenter(deltaCoordinates) {\n    const center = toUserCoordinate(this.targetCenter_, this.getProjection());\n    this.setCenter([\n      center[0] + deltaCoordinates[0],\n      center[1] + deltaCoordinates[1],\n    ]);\n  }\n\n  /**\n   * Adds relative coordinates to the center of the view. Any extent constraint will apply.\n   * @param {import(\"./coordinate.js\").Coordinate} deltaCoordinates Relative value to add.\n   */\n  adjustCenterInternal(deltaCoordinates) {\n    const center = this.targetCenter_;\n    this.setCenterInternal([\n      center[0] + deltaCoordinates[0],\n      center[1] + deltaCoordinates[1],\n    ]);\n  }\n\n  /**\n   * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution\n   * constraint will apply.\n   * @param {number} ratio The ratio to apply on the view resolution.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   * @api\n   */\n  adjustResolution(ratio, anchor) {\n    anchor = anchor && fromUserCoordinate(anchor, this.getProjection());\n    this.adjustResolutionInternal(ratio, anchor);\n  }\n\n  /**\n   * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution\n   * constraint will apply.\n   * @param {number} ratio The ratio to apply on the view resolution.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   */\n  adjustResolutionInternal(ratio, anchor) {\n    const isMoving = this.getAnimating() || this.getInteracting();\n    const size = this.getViewportSize_(this.getRotation());\n    const newResolution = this.constraints_.resolution(\n      this.targetResolution_ * ratio,\n      0,\n      size,\n      isMoving,\n    );\n\n    if (anchor) {\n      this.targetCenter_ = this.calculateCenterZoom(newResolution, anchor);\n    }\n\n    this.targetResolution_ *= ratio;\n    this.applyTargetState_();\n  }\n\n  /**\n   * Adds a value to the view zoom level, optionally using an anchor. Any resolution\n   * constraint will apply.\n   * @param {number} delta Relative value to add to the zoom level.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   * @api\n   */\n  adjustZoom(delta, anchor) {\n    this.adjustResolution(Math.pow(this.zoomFactor_, -delta), anchor);\n  }\n\n  /**\n   * Adds a value to the view rotation, optionally using an anchor. Any rotation\n   * constraint will apply.\n   * @param {number} delta Relative value to add to the zoom rotation, in radians.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The rotation center.\n   * @api\n   */\n  adjustRotation(delta, anchor) {\n    if (anchor) {\n      anchor = fromUserCoordinate(anchor, this.getProjection());\n    }\n    this.adjustRotationInternal(delta, anchor);\n  }\n\n  /**\n   * @param {number} delta Relative value to add to the zoom rotation, in radians.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The rotation center.\n   */\n  adjustRotationInternal(delta, anchor) {\n    const isMoving = this.getAnimating() || this.getInteracting();\n    const newRotation = this.constraints_.rotation(\n      this.targetRotation_ + delta,\n      isMoving,\n    );\n    if (anchor) {\n      this.targetCenter_ = this.calculateCenterRotate(newRotation, anchor);\n    }\n    this.targetRotation_ += delta;\n    this.applyTargetState_();\n  }\n\n  /**\n   * Set the center of the current view. Any extent constraint will apply.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\n   * @observable\n   * @api\n   */\n  setCenter(center) {\n    this.setCenterInternal(\n      center ? fromUserCoordinate(center, this.getProjection()) : center,\n    );\n  }\n\n  /**\n   * Set the center using the view projection (not the user projection).\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\n   */\n  setCenterInternal(center) {\n    this.targetCenter_ = center;\n    this.applyTargetState_();\n  }\n\n  /**\n   * @param {import(\"./ViewHint.js\").default} hint Hint.\n   * @param {number} delta Delta.\n   * @return {number} New value.\n   */\n  setHint(hint, delta) {\n    this.hints_[hint] += delta;\n    this.changed();\n    return this.hints_[hint];\n  }\n\n  /**\n   * Set the resolution for this view. Any resolution constraint will apply.\n   * @param {number|undefined} resolution The resolution of the view.\n   * @observable\n   * @api\n   */\n  setResolution(resolution) {\n    this.targetResolution_ = resolution;\n    this.applyTargetState_();\n  }\n\n  /**\n   * Set the rotation for this view. Any rotation constraint will apply.\n   * @param {number} rotation The rotation of the view in radians.\n   * @observable\n   * @api\n   */\n  setRotation(rotation) {\n    this.targetRotation_ = rotation;\n    this.applyTargetState_();\n  }\n\n  /**\n   * Zoom to a specific zoom level. Any resolution constrain will apply.\n   * @param {number} zoom Zoom level.\n   * @api\n   */\n  setZoom(zoom) {\n    this.setResolution(this.getResolutionForZoom(zoom));\n  }\n\n  /**\n   * Recompute rotation/resolution/center based on target values.\n   * Note: we have to compute rotation first, then resolution and center considering that\n   * parameters can influence one another in case a view extent constraint is present.\n   * @param {boolean} [doNotCancelAnims] Do not cancel animations.\n   * @param {boolean} [forceMoving] Apply constraints as if the view is moving.\n   * @private\n   */\n  applyTargetState_(doNotCancelAnims, forceMoving) {\n    const isMoving =\n      this.getAnimating() || this.getInteracting() || forceMoving;\n\n    // compute rotation\n    const newRotation = this.constraints_.rotation(\n      this.targetRotation_,\n      isMoving,\n    );\n    const size = this.getViewportSize_(newRotation);\n    const newResolution = this.constraints_.resolution(\n      this.targetResolution_,\n      0,\n      size,\n      isMoving,\n    );\n    const newCenter = this.constraints_.center(\n      this.targetCenter_,\n      newResolution,\n      size,\n      isMoving,\n      this.calculateCenterShift(\n        this.targetCenter_,\n        newResolution,\n        newRotation,\n        size,\n      ),\n    );\n\n    if (this.get(ViewProperty.ROTATION) !== newRotation) {\n      this.set(ViewProperty.ROTATION, newRotation);\n    }\n    if (this.get(ViewProperty.RESOLUTION) !== newResolution) {\n      this.set(ViewProperty.RESOLUTION, newResolution);\n      this.set('zoom', this.getZoom(), true);\n    }\n    if (\n      !newCenter ||\n      !this.get(ViewProperty.CENTER) ||\n      !equals(this.get(ViewProperty.CENTER), newCenter)\n    ) {\n      this.set(ViewProperty.CENTER, newCenter);\n    }\n\n    if (this.getAnimating() && !doNotCancelAnims) {\n      this.cancelAnimations();\n    }\n    this.cancelAnchor_ = undefined;\n  }\n\n  /**\n   * If any constraints need to be applied, an animation will be triggered.\n   * This is typically done on interaction end.\n   * Note: calling this with a duration of 0 will apply the constrained values straight away,\n   * without animation.\n   * @param {number} [duration] The animation duration in ms.\n   * @param {number} [resolutionDirection] Which direction to zoom.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   */\n  resolveConstraints(duration, resolutionDirection, anchor) {\n    duration = duration !== undefined ? duration : 200;\n    const direction = resolutionDirection || 0;\n\n    const newRotation = this.constraints_.rotation(this.targetRotation_);\n    const size = this.getViewportSize_(newRotation);\n    const newResolution = this.constraints_.resolution(\n      this.targetResolution_,\n      direction,\n      size,\n    );\n    const newCenter = this.constraints_.center(\n      this.targetCenter_,\n      newResolution,\n      size,\n      false,\n      this.calculateCenterShift(\n        this.targetCenter_,\n        newResolution,\n        newRotation,\n        size,\n      ),\n    );\n\n    if (duration === 0 && !this.cancelAnchor_) {\n      this.targetResolution_ = newResolution;\n      this.targetRotation_ = newRotation;\n      this.targetCenter_ = newCenter;\n      this.applyTargetState_();\n      return;\n    }\n\n    anchor = anchor || (duration === 0 ? this.cancelAnchor_ : undefined);\n    this.cancelAnchor_ = undefined;\n\n    if (\n      this.getResolution() !== newResolution ||\n      this.getRotation() !== newRotation ||\n      !this.getCenterInternal() ||\n      !equals(this.getCenterInternal(), newCenter)\n    ) {\n      if (this.getAnimating()) {\n        this.cancelAnimations();\n      }\n\n      this.animateInternal({\n        rotation: newRotation,\n        center: newCenter,\n        resolution: newResolution,\n        duration: duration,\n        easing: easeOut,\n        anchor: anchor,\n      });\n    }\n  }\n\n  /**\n   * Notify the View that an interaction has started.\n   * The view state will be resolved to a stable one if needed\n   * (depending on its constraints).\n   * @api\n   */\n  beginInteraction() {\n    this.resolveConstraints(0);\n\n    this.setHint(ViewHint.INTERACTING, 1);\n  }\n\n  /**\n   * Notify the View that an interaction has ended. The view state will be resolved\n   * to a stable one if needed (depending on its constraints).\n   * @param {number} [duration] Animation duration in ms.\n   * @param {number} [resolutionDirection] Which direction to zoom.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   * @api\n   */\n  endInteraction(duration, resolutionDirection, anchor) {\n    anchor = anchor && fromUserCoordinate(anchor, this.getProjection());\n    this.endInteractionInternal(duration, resolutionDirection, anchor);\n  }\n\n  /**\n   * Notify the View that an interaction has ended. The view state will be resolved\n   * to a stable one if needed (depending on its constraints).\n   * @param {number} [duration] Animation duration in ms.\n   * @param {number} [resolutionDirection] Which direction to zoom.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   */\n  endInteractionInternal(duration, resolutionDirection, anchor) {\n    if (!this.getInteracting()) {\n      return;\n    }\n    this.setHint(ViewHint.INTERACTING, -1);\n    this.resolveConstraints(duration, resolutionDirection, anchor);\n  }\n\n  /**\n   * Get a valid position for the view center according to the current constraints.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} targetCenter Target center position.\n   * @param {number} [targetResolution] Target resolution. If not supplied, the current one will be used.\n   * This is useful to guess a valid center position at a different zoom level.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Valid center position.\n   */\n  getConstrainedCenter(targetCenter, targetResolution) {\n    const size = this.getViewportSize_(this.getRotation());\n    return this.constraints_.center(\n      targetCenter,\n      targetResolution || this.getResolution(),\n      size,\n    );\n  }\n\n  /**\n   * Get a valid zoom level according to the current view constraints.\n   * @param {number|undefined} targetZoom Target zoom.\n   * @param {number} [direction] Indicate which resolution should be used\n   * by a renderer if the view resolution does not match any resolution of the tile source.\n   * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n   * will be used. If -1, the nearest higher resolution will be used.\n   * @return {number|undefined} Valid zoom level.\n   */\n  getConstrainedZoom(targetZoom, direction) {\n    const targetRes = this.getResolutionForZoom(targetZoom);\n    return this.getZoomForResolution(\n      this.getConstrainedResolution(targetRes, direction),\n    );\n  }\n\n  /**\n   * Get a valid resolution according to the current view constraints.\n   * @param {number|undefined} targetResolution Target resolution.\n   * @param {number} [direction] Indicate which resolution should be used\n   * by a renderer if the view resolution does not match any resolution of the tile source.\n   * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n   * will be used. If -1, the nearest higher resolution will be used.\n   * @return {number|undefined} Valid resolution.\n   */\n  getConstrainedResolution(targetResolution, direction) {\n    direction = direction || 0;\n    const size = this.getViewportSize_(this.getRotation());\n\n    return this.constraints_.resolution(targetResolution, direction, size);\n  }\n}\n\n/**\n * @param {Function} callback Callback.\n * @param {*} returnValue Return value.\n */\nfunction animationCallback(callback, returnValue) {\n  setTimeout(function () {\n    callback(returnValue);\n  }, 0);\n}\n\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./centerconstraint.js\").Type} The constraint.\n */\nexport function createCenterConstraint(options) {\n  if (options.extent !== undefined) {\n    const smooth =\n      options.smoothExtentConstraint !== undefined\n        ? options.smoothExtentConstraint\n        : true;\n    return createExtent(options.extent, options.constrainOnlyCenter, smooth);\n  }\n\n  const projection = createProjection(options.projection, 'EPSG:3857');\n  if (options.multiWorld !== true && projection.isGlobal()) {\n    const extent = projection.getExtent().slice();\n    extent[0] = -Infinity;\n    extent[2] = Infinity;\n    return createExtent(extent, false, false);\n  }\n\n  return centerNone;\n}\n\n/**\n * @param {ViewOptions} options View options.\n * @return {{constraint: import(\"./resolutionconstraint.js\").Type, maxResolution: number,\n *     minResolution: number, minZoom: number, zoomFactor: number}} The constraint.\n */\nexport function createResolutionConstraint(options) {\n  let resolutionConstraint;\n  let maxResolution;\n  let minResolution;\n\n  // TODO: move these to be ol constants\n  // see https://github.com/openlayers/openlayers/issues/2076\n  const defaultMaxZoom = 28;\n  const defaultZoomFactor = 2;\n\n  let minZoom =\n    options.minZoom !== undefined ? options.minZoom : DEFAULT_MIN_ZOOM;\n\n  let maxZoom =\n    options.maxZoom !== undefined ? options.maxZoom : defaultMaxZoom;\n\n  const zoomFactor =\n    options.zoomFactor !== undefined ? options.zoomFactor : defaultZoomFactor;\n\n  const multiWorld =\n    options.multiWorld !== undefined ? options.multiWorld : false;\n\n  const smooth =\n    options.smoothResolutionConstraint !== undefined\n      ? options.smoothResolutionConstraint\n      : true;\n\n  const showFullExtent =\n    options.showFullExtent !== undefined ? options.showFullExtent : false;\n\n  const projection = createProjection(options.projection, 'EPSG:3857');\n  const projExtent = projection.getExtent();\n  let constrainOnlyCenter = options.constrainOnlyCenter;\n  let extent = options.extent;\n  if (!multiWorld && !extent && projection.isGlobal()) {\n    constrainOnlyCenter = false;\n    extent = projExtent;\n  }\n\n  if (options.resolutions !== undefined) {\n    const resolutions = options.resolutions;\n    maxResolution = resolutions[minZoom];\n    minResolution =\n      resolutions[maxZoom] !== undefined\n        ? resolutions[maxZoom]\n        : resolutions[resolutions.length - 1];\n\n    if (options.constrainResolution) {\n      resolutionConstraint = createSnapToResolutions(\n        resolutions,\n        smooth,\n        !constrainOnlyCenter && extent,\n        showFullExtent,\n      );\n    } else {\n      resolutionConstraint = createMinMaxResolution(\n        maxResolution,\n        minResolution,\n        smooth,\n        !constrainOnlyCenter && extent,\n        showFullExtent,\n      );\n    }\n  } else {\n    // calculate the default min and max resolution\n    const size = !projExtent\n      ? // use an extent that can fit the whole world if need be\n        (360 * METERS_PER_UNIT.degrees) / projection.getMetersPerUnit()\n      : Math.max(getWidth(projExtent), getHeight(projExtent));\n\n    const defaultMaxResolution =\n      size / DEFAULT_TILE_SIZE / Math.pow(defaultZoomFactor, DEFAULT_MIN_ZOOM);\n\n    const defaultMinResolution =\n      defaultMaxResolution /\n      Math.pow(defaultZoomFactor, defaultMaxZoom - DEFAULT_MIN_ZOOM);\n\n    // user provided maxResolution takes precedence\n    maxResolution = options.maxResolution;\n    if (maxResolution !== undefined) {\n      minZoom = 0;\n    } else {\n      maxResolution = defaultMaxResolution / Math.pow(zoomFactor, minZoom);\n    }\n\n    // user provided minResolution takes precedence\n    minResolution = options.minResolution;\n    if (minResolution === undefined) {\n      if (options.maxZoom !== undefined) {\n        if (options.maxResolution !== undefined) {\n          minResolution = maxResolution / Math.pow(zoomFactor, maxZoom);\n        } else {\n          minResolution = defaultMaxResolution / Math.pow(zoomFactor, maxZoom);\n        }\n      } else {\n        minResolution = defaultMinResolution;\n      }\n    }\n\n    // given discrete zoom levels, minResolution may be different than provided\n    maxZoom =\n      minZoom +\n      Math.floor(\n        Math.log(maxResolution / minResolution) / Math.log(zoomFactor),\n      );\n    minResolution = maxResolution / Math.pow(zoomFactor, maxZoom - minZoom);\n\n    if (options.constrainResolution) {\n      resolutionConstraint = createSnapToPower(\n        zoomFactor,\n        maxResolution,\n        minResolution,\n        smooth,\n        !constrainOnlyCenter && extent,\n        showFullExtent,\n      );\n    } else {\n      resolutionConstraint = createMinMaxResolution(\n        maxResolution,\n        minResolution,\n        smooth,\n        !constrainOnlyCenter && extent,\n        showFullExtent,\n      );\n    }\n  }\n  return {\n    constraint: resolutionConstraint,\n    maxResolution: maxResolution,\n    minResolution: minResolution,\n    minZoom: minZoom,\n    zoomFactor: zoomFactor,\n  };\n}\n\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./rotationconstraint.js\").Type} Rotation constraint.\n */\nexport function createRotationConstraint(options) {\n  const enableRotation =\n    options.enableRotation !== undefined ? options.enableRotation : true;\n  if (enableRotation) {\n    const constrainRotation = options.constrainRotation;\n    if (constrainRotation === undefined || constrainRotation === true) {\n      return createSnapToZero();\n    }\n    if (constrainRotation === false) {\n      return rotationNone;\n    }\n    if (typeof constrainRotation === 'number') {\n      return createSnapToN(constrainRotation);\n    }\n    return rotationNone;\n  }\n  return disable;\n}\n\n/**\n * Determine if an animation involves no view change.\n * @param {Animation} animation The animation.\n * @return {boolean} The animation involves no view change.\n */\nexport function isNoopAnimation(animation) {\n  if (animation.sourceCenter && animation.targetCenter) {\n    if (!coordinatesEqual(animation.sourceCenter, animation.targetCenter)) {\n      return false;\n    }\n  }\n  if (animation.sourceResolution !== animation.targetResolution) {\n    return false;\n  }\n  if (animation.sourceRotation !== animation.targetRotation) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {import(\"./size.js\").Size} size Box pixel size.\n * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @return {import(\"./coordinate.js\").Coordinate} Shifted center.\n */\nfunction calculateCenterOn(coordinate, size, position, resolution, rotation) {\n  // calculate rotated position\n  const cosAngle = Math.cos(-rotation);\n  let sinAngle = Math.sin(-rotation);\n  let rotX = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n  let rotY = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n  rotX += (size[0] / 2 - position[0]) * resolution;\n  rotY += (position[1] - size[1] / 2) * resolution;\n\n  // go back to original angle\n  sinAngle = -sinAngle; // go back to original rotation\n  const centerX = rotX * cosAngle - rotY * sinAngle;\n  const centerY = rotY * cosAngle + rotX * sinAngle;\n\n  return [centerX, centerY];\n}\n\nexport default View;\n","/**\n * @module ol/ViewHint\n */\n\n/**\n * @enum {number}\n */\nexport default {\n  ANIMATING: 0,\n  INTERACTING: 1,\n};\n","/**\n * @module ol/ViewProperty\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  CENTER: 'center',\n  RESOLUTION: 'resolution',\n  ROTATION: 'rotation',\n};\n","/**\n * @module ol/rotationconstraint\n */\nimport {toRadians} from './math.js';\n\n/**\n * @typedef {function((number|undefined), boolean=): (number|undefined)} Type\n */\n\n/**\n * @param {number|undefined} rotation Rotation.\n * @return {number|undefined} Rotation.\n */\nexport function disable(rotation) {\n  if (rotation !== undefined) {\n    return 0;\n  }\n  return undefined;\n}\n\n/**\n * @param {number|undefined} rotation Rotation.\n * @return {number|undefined} Rotation.\n */\nexport function none(rotation) {\n  if (rotation !== undefined) {\n    return rotation;\n  }\n  return undefined;\n}\n\n/**\n * @param {number} n N.\n * @return {Type} Rotation constraint.\n */\nexport function createSnapToN(n) {\n  const theta = (2 * Math.PI) / n;\n  return (\n    /**\n     * @param {number|undefined} rotation Rotation.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Rotation.\n     */\n    function (rotation, isMoving) {\n      if (isMoving) {\n        return rotation;\n      }\n\n      if (rotation !== undefined) {\n        rotation = Math.floor(rotation / theta + 0.5) * theta;\n        return rotation;\n      }\n      return undefined;\n    }\n  );\n}\n\n/**\n * @param {number} [tolerance] Tolerance.\n * @return {Type} Rotation constraint.\n */\nexport function createSnapToZero(tolerance) {\n  const t = tolerance === undefined ? toRadians(5) : tolerance;\n  return (\n    /**\n     * @param {number|undefined} rotation Rotation.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Rotation.\n     */\n    function (rotation, isMoving) {\n      if (isMoving || rotation === undefined) {\n        return rotation;\n      }\n\n      if (Math.abs(rotation) <= t) {\n        return 0;\n      }\n      return rotation;\n    }\n  );\n}\n","/**\n * @module ol/tilegrid/common\n */\n\n/**\n * Default maximum zoom for default tile grids.\n * @type {number}\n */\nexport const DEFAULT_MAX_ZOOM = 42;\n\n/**\n * Default tile size.\n * @type {number}\n */\nexport const DEFAULT_TILE_SIZE = 256;\n"],"names":["createExtent","extent","onlyCenter","smooth","center","resolution","size","isMoving","centerShift","viewWidth","viewHeight","shiftX","shiftY","minX","maxX","minY","maxY","x","y","ratio","Math","none","getViewportClampedResolution","maxExtent","viewportSize","showFullExtent","xResolution","yResolution","getSmoothClampedResolution","maxResolution","minResolution","result","createMinMaxResolution","undefined","direction","cappedMaxRes","View","options","Object","properties","key","ViewProperty","resolutionConstraintInfo","createResolutionConstraint","centerConstraint","createCenterConstraint","resolutionConstraint","rotationConstraint","createRotationConstraint","padding","oldPadding","newPadding","offsetX","offsetY","newOptions","var_args","args","Array","arguments","i","callback","animationCount","state","animationCallback","start","Date","rotation","series","animation","delta","isNoopAnimation","ViewHint","anchor","ii","j","jj","NaN","cancelAnimationFrame","now","more","seriesComplete","elapsed","fraction","progress","x0","y0","x1","y1","constrainedResolution","constrainedRotation","Boolean","requestAnimationFrame","currentCenter","currentResolution","w","h","hints","zoom","enabled","power","max","value","logPower","projection","reducedSize","calculateCenterOn","zoomFactor","offset","nearest","baseLevel","geometryOrExtent","geometry","userProjection","cosAngle","sinAngle","coords","stride","minRotX","minRotY","maxRotX","Infinity","maxRotY","rotX","rotY","rotatedExtent","isNaN","centerRot","centerX","centerY","coordinate","position","shiftedCenter","deltaCoordinates","newResolution","newRotation","hint","doNotCancelAnims","forceMoving","newCenter","duration","resolutionDirection","targetCenter","targetResolution","targetZoom","targetRes","returnValue","setTimeout","minZoom","maxZoom","multiWorld","projExtent","constrainOnlyCenter","resolutions","capped","z","defaultMaxResolution","zoomLevel","constrainRotation","disable","createSnapToN","n","theta","createSnapToZero","tolerance","t","DEFAULT_MAX_ZOOM","DEFAULT_TILE_SIZE"],"mappings":"wbAgBO,SAASA,EAAaC,CAAM,CAAEC,CAAU,CAAEC,CAAM,EACrD,OASE,SAAUC,CAAM,CAAEC,CAAU,CAAEC,CAAI,CAAEC,CAAQ,CAAEC,CAAW,EACvD,GAAI,CAACJ,EACH,OAEF,GAAI,CAACC,GAAc,CAACH,EAClB,OAAOE,EAET,IAAMK,EAAYP,EAAa,EAAII,CAAI,CAAC,EAAE,CAAGD,EACvCK,EAAaR,EAAa,EAAII,CAAI,CAAC,EAAE,CAAGD,EACxCM,EAASH,EAAcA,CAAW,CAAC,EAAE,CAAG,EACxCI,EAASJ,EAAcA,CAAW,CAAC,EAAE,CAAG,EAC1CK,EAAOZ,CAAM,CAAC,EAAE,CAAGQ,EAAY,EAAIE,EACnCG,EAAOb,CAAM,CAAC,EAAE,CAAGQ,EAAY,EAAIE,EACnCI,EAAOd,CAAM,CAAC,EAAE,CAAGS,EAAa,EAAIE,EACpCI,EAAOf,CAAM,CAAC,EAAE,CAAGS,EAAa,EAAIE,EAIpCC,EAAOC,GAETA,CAAAA,EADAD,EAAO,AAACC,CAAAA,EAAOD,CAAG,EAAK,CACb,EAERE,EAAOC,GAETA,CAAAA,EADAD,EAAO,AAACC,CAAAA,EAAOD,CAAG,EAAK,CACb,EAGZ,IAAIE,EAAI,SAAMb,CAAM,CAAC,EAAE,CAAES,EAAMC,GAC3BI,EAAI,SAAMd,CAAM,CAAC,EAAE,CAAEW,EAAMC,GAG/B,GAAIT,GAAYJ,GAAUE,EAAY,CACpC,IAAMc,EAAQ,GAAKd,EACnBY,GACE,CAACE,EAAQC,KAAK,GAAG,CAAC,EAAIA,KAAK,GAAG,CAAC,EAAGP,EAAOT,CAAM,CAAC,EAAE,EAAIe,GACtDA,EAAQC,KAAK,GAAG,CAAC,EAAIA,KAAK,GAAG,CAAC,EAAGhB,CAAM,CAAC,EAAE,CAAGU,GAAQK,GACvDD,GACE,CAACC,EAAQC,KAAK,GAAG,CAAC,EAAIA,KAAK,GAAG,CAAC,EAAGL,EAAOX,CAAM,CAAC,EAAE,EAAIe,GACtDA,EAAQC,KAAK,GAAG,CAAC,EAAIA,KAAK,GAAG,CAAC,EAAGhB,CAAM,CAAC,EAAE,CAAGY,GAAQG,EACzD,CAEA,MAAO,CAACF,EAAGC,EAAE,AACf,CAEJ,CAMO,SAASG,EAAKjB,CAAM,EACzB,OAAOA,CACT,C,qEC1DA,SAASkB,EACPjB,CAAU,CACVkB,CAAS,CACTC,CAAY,CACZC,CAAc,EAEd,IAAMC,EAAc,eAASH,GAAaC,CAAY,CAAC,EAAE,CACnDG,EAAc,gBAAUJ,GAAaC,CAAY,CAAC,EAAE,QAE1D,AAAIC,EACKL,KAAK,GAAG,CAACf,EAAYe,KAAK,GAAG,CAACM,EAAaC,IAE7CP,KAAK,GAAG,CAACf,EAAYe,KAAK,GAAG,CAACM,EAAaC,GACpD,CAcA,SAASC,EAA2BvB,CAAU,CAAEwB,CAAa,CAAEC,CAAa,EAC1E,IAAIC,EAASX,KAAK,GAAG,CAACf,EAAYwB,GAalC,OAVAE,GACEX,KAAK,GAAG,CAAC,EAAID,AAHD,GAGSC,KAAK,GAAG,CAAC,EAAGf,EAAawB,EAAgB,IAHlD,GAIZ,EACEC,GAEFC,CAAAA,EADSX,KAAK,GAAG,CAACW,EAAQD,GAExBV,CAAAA,KAAK,GAAG,CAAC,EAAID,AARH,GAQWC,KAAK,GAAG,CAAC,EAAGU,EAAgBzB,EAAa,IARpD,GAUV,IAEG,SAAM0B,EAAQD,EAAgB,EAAGD,AAAgB,EAAhBA,EAC1C,CA0IO,SAASG,EACdH,CAAa,CACbC,CAAa,CACb3B,CAAM,CACNoB,CAAS,CACTE,CAAc,EAId,OAFAtB,EAASA,AAAW8B,KAAAA,IAAX9B,GAAuBA,EAU9B,SAAUE,CAAU,CAAE6B,CAAS,CAAE5B,CAAI,CAAEC,CAAQ,EAC7C,GAAIF,AAAe4B,KAAAA,IAAf5B,EAA0B,CAC5B,IAAM8B,EAAeZ,EACjBD,EACEO,EACAN,EACAjB,EACAmB,GAEFI,SAEJ,AAAI,AAAC1B,GAAWI,EAGTqB,EACLvB,EACA8B,EACAL,GALO,SAAMzB,EAAYyB,EAAeK,EAO5C,CAEF,CAEJ,C,yBCwEA,OAAMC,UAAa,SAAU,CAI3B,YAAYC,CAAO,CAAE,CACnB,KAAK,GAKL,IAAI,CAAC,EAAE,CAKP,IAAI,CAAC,IAAI,CAKT,IAAI,CAAC,EAAE,CAEPA,EAAUC,OAAO,MAAM,CAAC,CAAC,EAAGD,GAM5B,IAAI,CAAC,MAAM,CAAG,CAAC,EAAG,EAAE,CAMpB,IAAI,CAAC,WAAW,CAAG,EAAE,CAMrB,IAAI,CAAC,mBAAmB,CAOxB,IAAI,CAAC,WAAW,CAAG,uBAAiBA,EAAQ,UAAU,CAAE,aAMxD,IAAI,CAAC,aAAa,CAAG,CAAC,IAAK,IAAI,CAM/B,IAAI,CAAC,aAAa,CAAG,KAMrB,IAAI,CAAC,iBAAiB,CAMtB,IAAI,CAAC,eAAe,CAMpB,IAAI,CAAC,WAAW,CAAG,KAMnB,IAAI,CAAC,eAAe,CAMpB,IAAI,CAAC,aAAa,CAMlB,IAAI,CAAC,aAAa,CAAGJ,KAAAA,EAEjBI,EAAQ,UAAU,EACpB,iCAEEA,EAAQ,MAAM,EAChBA,CAAAA,EAAQ,MAAM,CAAG,yBAAmBA,EAAQ,MAAM,CAAE,IAAI,CAAC,WAAW,GAElEA,EAAQ,MAAM,EAChBA,CAAAA,EAAQ,MAAM,CAAG,qBAAeA,EAAQ,MAAM,CAAE,IAAI,CAAC,WAAW,GAGlE,IAAI,CAAC,aAAa,CAACA,EACrB,CAMA,cAAcA,CAAO,CAAE,CACrB,IAAME,EAAaD,OAAO,MAAM,CAAC,CAAC,EAAGD,GACrC,IAAK,IAAMG,KAAOC,EAAA,CAAY,CAC5B,OAAOF,CAAU,CAACC,EAAI,CAExB,IAAI,CAAC,aAAa,CAACD,EAAY,IAE/B,IAAMG,EAA2BC,EAA2BN,EAM5D,KAAI,CAAC,cAAc,CAAGK,EAAyB,aAAa,CAM5D,IAAI,CAAC,cAAc,CAAGA,EAAyB,aAAa,CAM5D,IAAI,CAAC,WAAW,CAAGA,EAAyB,UAAU,CAMtD,IAAI,CAAC,YAAY,CAAGL,EAAQ,WAAW,CAMvC,IAAI,CAAC,QAAQ,CAAGA,EAAQ,OAAO,CAM/B,IAAI,CAAC,QAAQ,CAAGK,EAAyB,OAAO,CAEhD,IAAME,EAAmBC,EAAuBR,GAC1CS,EAAuBJ,EAAyB,UAAU,CAC1DK,EAAqBC,EAAyBX,EAMpD,KAAI,CAAC,YAAY,CAAG,CAClB,OAAQO,EACR,WAAYE,EACZ,SAAUC,CACZ,EAEA,IAAI,CAAC,WAAW,CAACV,AAAqBJ,KAAAA,IAArBI,EAAQ,QAAQ,CAAiBA,EAAQ,QAAQ,CAAG,GACrE,IAAI,CAAC,iBAAiB,CACpBA,AAAmBJ,KAAAA,IAAnBI,EAAQ,MAAM,CAAiBA,EAAQ,MAAM,CAAG,MAE9CA,AAAuBJ,KAAAA,IAAvBI,EAAQ,UAAU,CACpB,IAAI,CAAC,aAAa,CAACA,EAAQ,UAAU,EACXJ,KAAAA,IAAjBI,EAAQ,IAAI,EACrB,IAAI,CAAC,OAAO,CAACA,EAAQ,IAAI,CAE7B,CAWA,IAAI,SAAU,CACZ,OAAO,IAAI,CAAC,QAAQ,AACtB,CACA,IAAI,QAAQY,CAAO,CAAE,CACnB,IAAIC,EAAa,IAAI,CAAC,QAAQ,AAC9B,KAAI,CAAC,QAAQ,CAAGD,EAChB,IAAM7C,EAAS,IAAI,CAAC,iBAAiB,GACrC,GAAIA,EAAQ,CACV,IAAM+C,EAAaF,GAAW,CAAC,EAAG,EAAG,EAAG,EAAE,CAC1CC,EAAaA,GAAc,CAAC,EAAG,EAAG,EAAG,EAAE,CACvC,IAAM7C,EAAa,IAAI,CAAC,aAAa,GAC/B+C,EACJ,AAAC/C,EAAa,EACb8C,CAAAA,CAAU,CAAC,EAAE,CAAGD,CAAU,CAAC,EAAE,CAAGA,CAAU,CAAC,EAAE,CAAGC,CAAU,CAAC,EAAE,AAAD,EACzDE,EACJ,AAAChD,EAAa,EACb8C,CAAAA,CAAU,CAAC,EAAE,CAAGD,CAAU,CAAC,EAAE,CAAGA,CAAU,CAAC,EAAE,CAAGC,CAAU,CAAC,EAAE,AAAD,EAC/D,IAAI,CAAC,iBAAiB,CAAC,CAAC/C,CAAM,CAAC,EAAE,CAAGgD,EAAShD,CAAM,CAAC,EAAE,CAAGiD,EAAQ,CACnE,CACF,CAUA,mBAAmBC,CAAU,CAAE,CAC7B,IAAMjB,EAAU,IAAI,CAAC,aAAa,GAelC,OAZIA,AAAuBJ,KAAAA,IAAvBI,EAAQ,UAAU,CACpBA,EAAQ,UAAU,CAAG,IAAI,CAAC,aAAa,GAEvCA,EAAQ,IAAI,CAAG,IAAI,CAAC,OAAO,GAI7BA,EAAQ,MAAM,CAAG,IAAI,CAAC,iBAAiB,GAGvCA,EAAQ,QAAQ,CAAG,IAAI,CAAC,WAAW,GAE5BC,OAAO,MAAM,CAAC,CAAC,EAAGD,EAASiB,EACpC,CAmCA,QAAQC,CAAQ,CAAE,CACZ,IAAI,CAAC,KAAK,IAAM,CAAC,IAAI,CAAC,YAAY,IACpC,IAAI,CAAC,kBAAkB,CAAC,GAE1B,IAAMC,EAAO,AAAIC,MAAMC,UAAU,MAAM,EACvC,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAK,MAAM,CAAE,EAAEG,EAAG,CACpC,IAAItB,EAAUqB,SAAS,CAACC,EAAE,AACtBtB,CAAAA,EAAQ,MAAM,EAEhBA,CAAAA,AADAA,CAAAA,EAAUC,OAAO,MAAM,CAAC,CAAC,EAAGD,EAAO,EAC3B,MAAM,CAAG,yBACfA,EAAQ,MAAM,CACd,IAAI,CAAC,aAAa,GACpB,EAEEA,EAAQ,MAAM,EAEhBA,CAAAA,AADAA,CAAAA,EAAUC,OAAO,MAAM,CAAC,CAAC,EAAGD,EAAO,EAC3B,MAAM,CAAG,yBACfA,EAAQ,MAAM,CACd,IAAI,CAAC,aAAa,GACpB,EAEFmB,CAAI,CAACG,EAAE,CAAGtB,CACZ,CACA,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,IAAI,CAAEmB,EACnC,CAKA,gBAAgBD,CAAQ,CAAE,CACxB,IACIK,EADAC,EAAiBH,UAAU,MAAM,CAGnCG,EAAiB,GACjB,AAAyC,YAAzC,OAAOH,SAAS,CAACG,EAAiB,EAAE,GAEpCD,EAAWF,SAAS,CAACG,EAAiB,EAAE,CACxC,EAAEA,GAGJ,IAAIF,EAAI,EACR,KAAOA,EAAIE,GAAkB,CAAC,IAAI,CAAC,KAAK,GAAI,EAAEF,EAAG,CAE/C,IAAMG,EAAQJ,SAAS,CAACC,EAAE,AACtBG,CAAAA,EAAM,MAAM,EACd,IAAI,CAAC,iBAAiB,CAACA,EAAM,MAAM,EAEjCA,AAAe7B,KAAAA,IAAf6B,EAAM,IAAI,CACZ,IAAI,CAAC,OAAO,CAACA,EAAM,IAAI,EACdA,EAAM,UAAU,EACzB,IAAI,CAAC,aAAa,CAACA,EAAM,UAAU,EAEd7B,KAAAA,IAAnB6B,EAAM,QAAQ,EAChB,IAAI,CAAC,WAAW,CAACA,EAAM,QAAQ,CAEnC,CACA,GAAIH,IAAME,EAAgB,CACpBD,GACFG,EAAkBH,EAAU,IAE9B,MACF,CAEA,IAAII,EAAQC,KAAK,GAAG,GAChB7D,EAAS,IAAI,CAAC,aAAa,CAAC,KAAK,GACjCC,EAAa,IAAI,CAAC,iBAAiB,CACnC6D,EAAW,IAAI,CAAC,eAAe,CAC7BC,EAAS,EAAE,CACjB,KAAOR,EAAIE,EAAgB,EAAEF,EAAG,CAC9B,IAAMtB,EAA2CqB,SAAS,CAACC,EAAE,CAEvDS,EAAY,CAChB,MAAOJ,EACP,SAAU,GACV,OAAQ3B,EAAQ,MAAM,CACtB,SAAUA,AAAqBJ,KAAAA,IAArBI,EAAQ,QAAQ,CAAiBA,EAAQ,QAAQ,CAAG,IAC9D,OAAQA,EAAQ,MAAM,EAAI,UAAQ,CAClC,SAAUuB,CACZ,EAkBA,GAhBIvB,EAAQ,MAAM,GAChB+B,EAAU,YAAY,CAAGhE,EACzBgE,EAAU,YAAY,CAAG/B,EAAQ,MAAM,CAAC,KAAK,GAC7CjC,EAASgE,EAAU,YAAY,EAG7B/B,AAAiBJ,KAAAA,IAAjBI,EAAQ,IAAI,EACd+B,EAAU,gBAAgB,CAAG/D,EAC7B+D,EAAU,gBAAgB,CAAG,IAAI,CAAC,oBAAoB,CAAC/B,EAAQ,IAAI,EACnEhC,EAAa+D,EAAU,gBAAgB,EAC9B/B,EAAQ,UAAU,GAC3B+B,EAAU,gBAAgB,CAAG/D,EAC7B+D,EAAU,gBAAgB,CAAG/B,EAAQ,UAAU,CAC/ChC,EAAa+D,EAAU,gBAAgB,EAGrC/B,AAAqBJ,KAAAA,IAArBI,EAAQ,QAAQ,CAAgB,CAClC+B,EAAU,cAAc,CAAGF,EAC3B,IAAMG,EACJ,SAAOhC,EAAQ,QAAQ,CAAG6B,EAAW9C,KAAK,EAAE,CAAE,EAAIA,KAAK,EAAE,EAAIA,KAAK,EAAE,AACtEgD,CAAAA,EAAU,cAAc,CAAGF,EAAWG,EACtCH,EAAWE,EAAU,cAAc,AACrC,CAGIE,EAAgBF,GAClBA,EAAU,QAAQ,CAAG,GAGrBJ,GAASI,EAAU,QAAQ,CAE7BD,EAAO,IAAI,CAACC,EACd,CACA,IAAI,CAAC,WAAW,CAAC,IAAI,CAACD,GACtB,IAAI,CAAC,OAAO,CAACI,EAAA,WAAkB,CAAE,GACjC,IAAI,CAAC,iBAAiB,EACxB,CAOA,cAAe,CACb,OAAO,IAAI,CAAC,MAAM,CAACA,EAAA,WAAkB,CAAC,CAAG,CAC3C,CAOA,gBAAiB,CACf,OAAO,IAAI,CAAC,MAAM,CAACA,EAAA,aAAoB,CAAC,CAAG,CAC7C,CAMA,kBAAmB,KAEbC,EADJ,IAAI,CAAC,OAAO,CAACD,EAAA,WAAkB,CAAE,CAAC,IAAI,CAAC,MAAM,CAACA,EAAA,WAAkB,CAAC,EAEjE,IAAK,IAAIZ,EAAI,EAAGc,EAAK,IAAI,CAAC,WAAW,CAAC,MAAM,CAAEd,EAAIc,EAAI,EAAEd,EAAG,CACzD,IAAMQ,EAAS,IAAI,CAAC,WAAW,CAACR,EAAE,CAIlC,GAHIQ,CAAM,CAAC,EAAE,CAAC,QAAQ,EACpBJ,EAAkBI,CAAM,CAAC,EAAE,CAAC,QAAQ,CAAE,IAEpC,CAACK,EACH,IAAK,IAAIE,EAAI,EAAGC,EAAKR,EAAO,MAAM,CAAEO,EAAIC,EAAI,EAAED,EAAG,CAC/C,IAAMN,EAAYD,CAAM,CAACO,EAAE,CAC3B,GAAI,CAACN,EAAU,QAAQ,CAAE,CACvBI,EAASJ,EAAU,MAAM,CACzB,KACF,CACF,CAEJ,CACA,IAAI,CAAC,WAAW,CAAC,MAAM,CAAG,EAC1B,IAAI,CAAC,aAAa,CAAGI,EACrB,IAAI,CAAC,WAAW,CAAG,KACnB,IAAI,CAAC,eAAe,CAAGI,IACvB,IAAI,CAAC,aAAa,CAAGA,GACvB,CAKA,mBAAoB,CAKlB,GAJiC3C,KAAAA,IAA7B,IAAI,CAAC,mBAAmB,GAC1B4C,qBAAqB,IAAI,CAAC,mBAAmB,EAC7C,IAAI,CAAC,mBAAmB,CAAG5C,KAAAA,GAEzB,CAAC,IAAI,CAAC,YAAY,GACpB,OAEF,IAAM6C,EAAMb,KAAK,GAAG,GAChBc,EAAO,GACX,IAAK,IAAIpB,EAAI,IAAI,CAAC,WAAW,CAAC,MAAM,CAAG,EAAGA,GAAK,EAAG,EAAEA,EAAG,CACrD,IAAMQ,EAAS,IAAI,CAAC,WAAW,CAACR,EAAE,CAC9BqB,EAAiB,GACrB,IAAK,IAAIN,EAAI,EAAGC,EAAKR,EAAO,MAAM,CAAEO,EAAIC,EAAI,EAAED,EAAG,CAC/C,IAAMN,EAAYD,CAAM,CAACO,EAAE,CAC3B,GAAIN,EAAU,QAAQ,CACpB,SAEF,IAAMa,EAAUH,EAAMV,EAAU,KAAK,CACjCc,EACFd,EAAU,QAAQ,CAAG,EAAIa,EAAUb,EAAU,QAAQ,CAAG,CACtDc,CAAAA,GAAY,GACdd,EAAU,QAAQ,CAAG,GACrBc,EAAW,GAEXF,EAAiB,GAEnB,IAAMG,EAAWf,EAAU,MAAM,CAACc,GAClC,GAAId,EAAU,YAAY,CAAE,CAC1B,IAAMgB,EAAKhB,EAAU,YAAY,CAAC,EAAE,CAC9BiB,EAAKjB,EAAU,YAAY,CAAC,EAAE,CAC9BkB,EAAKlB,EAAU,YAAY,CAAC,EAAE,CAC9BmB,EAAKnB,EAAU,YAAY,CAAC,EAAE,AACpC,KAAI,CAAC,WAAW,CAAGA,EAAU,YAAY,CACzC,IAAMnD,EAAImE,EAAKD,EAAYG,CAAAA,EAAKF,CAAC,EAC3BlE,EAAImE,EAAKF,EAAYI,CAAAA,EAAKF,CAAC,CACjC,KAAI,CAAC,aAAa,CAAG,CAACpE,EAAGC,EAAE,AAC7B,CACA,GAAIkD,EAAU,gBAAgB,EAAIA,EAAU,gBAAgB,CAAE,CAC5D,IAAM/D,EACJ8E,AAAa,IAAbA,EACIf,EAAU,gBAAgB,CAC1BA,EAAU,gBAAgB,CAC1Be,EACGf,CAAAA,EAAU,gBAAgB,CAAGA,EAAU,gBAAgB,AAAD,EAC/D,GAAIA,EAAU,MAAM,CAAE,CACpB,IAAM9D,EAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,IAC7CkF,EAAwB,IAAI,CAAC,YAAY,CAAC,UAAU,CACxDnF,EACA,EACAC,EACA,GAEF,KAAI,CAAC,aAAa,CAAG,IAAI,CAAC,mBAAmB,CAC3CkF,EACApB,EAAU,MAAM,CAEpB,CACA,IAAI,CAAC,eAAe,CAAGA,EAAU,gBAAgB,CACjD,IAAI,CAAC,iBAAiB,CAAG/D,EACzB,IAAI,CAAC,iBAAiB,CAAC,GACzB,CACA,GACE+D,AAA6BnC,KAAAA,IAA7BmC,EAAU,cAAc,EACxBA,AAA6BnC,KAAAA,IAA7BmC,EAAU,cAAc,CACxB,CACA,IAAMF,EACJiB,AAAa,IAAbA,EACI,SAAOf,EAAU,cAAc,CAAGhD,KAAK,EAAE,CAAE,EAAIA,KAAK,EAAE,EACtDA,KAAK,EAAE,CACPgD,EAAU,cAAc,CACxBe,EACGf,CAAAA,EAAU,cAAc,CAAGA,EAAU,cAAc,AAAD,EAC3D,GAAIA,EAAU,MAAM,CAAE,CACpB,IAAMqB,EAAsB,IAAI,CAAC,YAAY,CAAC,QAAQ,CACpDvB,EACA,GAEF,KAAI,CAAC,aAAa,CAAG,IAAI,CAAC,qBAAqB,CAC7CuB,EACArB,EAAU,MAAM,CAEpB,CACA,IAAI,CAAC,aAAa,CAAGA,EAAU,cAAc,CAC7C,IAAI,CAAC,eAAe,CAAGF,CACzB,CAGA,GAFA,IAAI,CAAC,iBAAiB,CAAC,IACvBa,EAAO,GACH,CAACX,EAAU,QAAQ,CACrB,KAEJ,CACA,GAAIY,EAAgB,CAClB,IAAI,CAAC,WAAW,CAACrB,EAAE,CAAG,KACtB,IAAI,CAAC,OAAO,CAACY,EAAA,WAAkB,CAAE,IACjC,IAAI,CAAC,WAAW,CAAG,KACnB,IAAI,CAAC,eAAe,CAAGK,IACvB,IAAI,CAAC,aAAa,CAAGA,IACrB,IAAMhB,EAAWO,CAAM,CAAC,EAAE,CAAC,QAAQ,CAC/BP,GACFG,EAAkBH,EAAU,GAEhC,CACF,CAEA,IAAI,CAAC,WAAW,CAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC8B,SACvCX,GAAQ,AAA6B9C,KAAAA,IAA7B,IAAI,CAAC,mBAAmB,EAClC,KAAI,CAAC,mBAAmB,CAAG0D,sBACzB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,EAClC,CAEJ,CAOA,sBAAsBzB,CAAQ,CAAEM,CAAM,CAAE,KAClCpE,EACJ,IAAMwF,EAAgB,IAAI,CAAC,iBAAiB,GAM5C,OALsB3D,KAAAA,IAAlB2D,IACFxF,EAAS,CAACwF,CAAa,CAAC,EAAE,CAAGpB,CAAM,CAAC,EAAE,CAAEoB,CAAa,CAAC,EAAE,CAAGpB,CAAM,CAAC,EAAE,CAAC,CACrE,aAAiBpE,EAAQ8D,EAAW,IAAI,CAAC,WAAW,IACpD,UAAc9D,EAAQoE,IAEjBpE,CACT,CAOA,oBAAoBC,CAAU,CAAEmE,CAAM,CAAE,KAClCpE,EACJ,IAAMwF,EAAgB,IAAI,CAAC,iBAAiB,GACtCC,EAAoB,IAAI,CAAC,aAAa,GAU5C,OATsB5D,KAAAA,IAAlB2D,GAA+BC,AAAsB5D,KAAAA,IAAtB4D,GAOjCzF,CAAAA,EAAS,CALPoE,CAAM,CAAC,EAAE,CACT,AAACnE,EAAcmE,CAAAA,CAAM,CAAC,EAAE,CAAGoB,CAAa,CAAC,EAAE,AAAD,EAAMC,EAEhDrB,CAAM,CAAC,EAAE,CACT,AAACnE,EAAcmE,CAAAA,CAAM,CAAC,EAAE,CAAGoB,CAAa,CAAC,EAAE,AAAD,EAAMC,EACnC,AAAD,EAETzF,CACT,CAQA,iBAAiB8D,CAAQ,CAAE,CACzB,IAAM5D,EAAO,IAAI,CAAC,aAAa,CAC/B,GAAI4D,EAAU,CACZ,IAAM4B,EAAIxF,CAAI,CAAC,EAAE,CACXyF,EAAIzF,CAAI,CAAC,EAAE,CACjB,MAAO,CACLc,KAAK,GAAG,CAAC0E,EAAI1E,KAAK,GAAG,CAAC8C,IAAa9C,KAAK,GAAG,CAAC2E,EAAI3E,KAAK,GAAG,CAAC8C,IACzD9C,KAAK,GAAG,CAAC0E,EAAI1E,KAAK,GAAG,CAAC8C,IAAa9C,KAAK,GAAG,CAAC2E,EAAI3E,KAAK,GAAG,CAAC8C,IAC1D,AACH,CACA,OAAO5D,CACT,CASA,gBAAgBA,CAAI,CAAE,CACpB,IAAI,CAAC,aAAa,CAAGmD,MAAM,OAAO,CAACnD,GAAQA,EAAK,KAAK,GAAK,CAAC,IAAK,IAAI,CAC/D,IAAI,CAAC,YAAY,IACpB,IAAI,CAAC,kBAAkB,CAAC,EAE5B,CAQA,WAAY,CACV,IAAMF,EAAS,IAAI,CAAC,iBAAiB,UACrC,AAAKA,EAGE,uBAAiBA,EAAQ,IAAI,CAAC,aAAa,IAFzCA,CAGX,CAMA,mBAAoB,CAClB,OACE,IAAI,CAAC,GAAG,CAACqC,EAAA,QAAmB,CAEhC,CAKA,gBAAiB,CACf,OAAO,IAAI,CAAC,YAAY,AAC1B,CAKA,wBAAyB,CACvB,OAAO,IAAI,CAAC,GAAG,CAAC,sBAClB,CAMA,SAASuD,CAAK,CAAE,QACd,AAAIA,AAAU/D,KAAAA,IAAV+D,GACFA,CAAK,CAAC,EAAE,CAAG,IAAI,CAAC,MAAM,CAAC,EAAE,CACzBA,CAAK,CAAC,EAAE,CAAG,IAAI,CAAC,MAAM,CAAC,EAAE,CAClBA,GAEF,IAAI,CAAC,MAAM,CAAC,KAAK,EAC1B,CAYA,gBAAgB1F,CAAI,CAAE,CACpB,IAAML,EAAS,IAAI,CAAC,uBAAuB,CAACK,GAC5C,MAAO,mBAAaL,EAAQ,IAAI,CAAC,aAAa,GAChD,CAOA,wBAAwBK,CAAI,CAAE,CAC5BA,EAAOA,GAAQ,IAAI,CAAC,4BAA4B,GAChD,IAAMF,EACJ,IAAI,CAAC,iBAAiB,GAExB,QAAOA,EAAQ,kCACf,IAAMC,EAAqC,IAAI,CAAC,aAAa,GAC7D,QAAOA,AAAe4B,KAAAA,IAAf5B,EAA0B,sCACjC,IAAM6D,EAAmC,IAAI,CAAC,WAAW,GAGzD,MAFA,QAAOA,AAAajC,KAAAA,IAAbiC,EAAwB,oCAExB,wBAAkB9D,EAAQC,EAAY6D,EAAU5D,EACzD,CAOA,kBAAmB,CACjB,OAAO,IAAI,CAAC,cAAc,AAC5B,CAOA,kBAAmB,CACjB,OAAO,IAAI,CAAC,cAAc,AAC5B,CAOA,YAAa,CACX,OACE,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,cAAc,CAEjD,CAOA,WAAW2F,CAAI,CAAE,CACf,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,QAASA,CAAI,GAC3D,CAOA,YAAa,CACX,OACE,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,cAAc,CAEjD,CAOA,WAAWA,CAAI,CAAE,CACf,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,QAASA,CAAI,GAC3D,CAOA,uBAAuBC,CAAO,CAAE,CAC9B,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,oBAAqBA,CAAO,GAC1E,CAOA,eAAgB,CACd,OAAO,IAAI,CAAC,WAAW,AACzB,CAQA,eAAgB,CACd,OAAwC,IAAI,CAAC,GAAG,CAACzD,EAAA,YAAuB,CAC1E,CAQA,gBAAiB,CACf,OAAO,IAAI,CAAC,YAAY,AAC1B,CAUA,uBAAuBxC,CAAM,CAAEK,CAAI,CAAE,CACnC,OAAO,IAAI,CAAC,8BAA8B,CACxC,qBAAeL,EAAQ,IAAI,CAAC,aAAa,IACzCK,EAEJ,CASA,+BAA+BL,CAAM,CAAEK,CAAI,CAAE,CAI3C,OAHAA,EAAOA,GAAQ,IAAI,CAAC,4BAA4B,GAGzCc,KAAK,GAAG,CAFK,eAASnB,GAAUK,CAAI,CAAC,EAAE,CAC1B,gBAAUL,GAAUK,CAAI,CAAC,EAAE,CAEjD,CAQA,8BAA8B6F,CAAK,CAAE,CACnCA,EAAQA,GAAS,EACjB,IAAMtE,EAAgB,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,cAAc,EAEjEuE,EAAMhF,KAAK,GAAG,CAACS,EADC,IAAI,CAAC,cAAc,EACaT,KAAK,GAAG,CAAC+E,GAC/D,OAKE,SAAUE,CAAK,EAEb,OADmBxE,EAAgBT,KAAK,GAAG,CAAC+E,EAAOE,EAAQD,EAE7D,CAEJ,CAQA,aAAc,CACZ,OAA8B,IAAI,CAAC,GAAG,CAAC3D,EAAA,UAAqB,CAC9D,CAQA,8BAA8B0D,CAAK,CAAE,CACnC,IAAMG,EAAWlF,KAAK,GAAG,CAAC+E,GAAS,GAC7BtE,EAAgB,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,cAAc,EAEjEuE,EAAMhF,KAAK,GAAG,CAACS,EADC,IAAI,CAAC,cAAc,EACayE,EACtD,OAKE,SAAUjG,CAAU,EAElB,OADce,KAAK,GAAG,CAACS,EAAgBxB,GAAciG,EAAWF,CAElE,CAEJ,CAQA,6BAA6BlC,CAAQ,CAAE,CACrC,IAAI5D,EAAO,IAAI,CAAC,gBAAgB,CAAC4D,GAC3BjB,EAAU,IAAI,CAAC,QAAQ,CAO7B,OANIA,GACF3C,CAAAA,EAAO,CACLA,CAAI,CAAC,EAAE,CAAG2C,CAAO,CAAC,EAAE,CAAGA,CAAO,CAAC,EAAE,CACjC3C,CAAI,CAAC,EAAE,CAAG2C,CAAO,CAAC,EAAE,CAAGA,CAAO,CAAC,EAAE,CAClC,AAAD,EAEK3C,CACT,CAKA,UAAW,CACT,IAAMiG,EAAa,IAAI,CAAC,aAAa,GAC/BlG,EAAa,IAAI,CAAC,aAAa,GAC/B6D,EAAW,IAAI,CAAC,WAAW,GAC7B9D,EACF,IAAI,CAAC,iBAAiB,GAElB6C,EAAU,IAAI,CAAC,QAAQ,CAC7B,GAAIA,EAAS,CACX,IAAMuD,EAAc,IAAI,CAAC,4BAA4B,GACrDpG,EAASqG,EACPrG,EACA,IAAI,CAAC,gBAAgB,GACrB,CAACoG,CAAW,CAAC,EAAE,CAAG,EAAIvD,CAAO,CAAC,EAAE,CAAEuD,CAAW,CAAC,EAAE,CAAG,EAAIvD,CAAO,CAAC,EAAE,CAAC,CAClE5C,EACA6D,EAEJ,CACA,MAAO,CACL,OAAQ9D,EAAO,KAAK,CAAC,GACrB,WAAYmG,AAAetE,KAAAA,IAAfsE,EAA2BA,EAAa,KACpD,WAAYlG,EACZ,WAAY,IAAI,CAAC,WAAW,CAC5B,eAAgB,IAAI,CAAC,eAAe,CACpC,aAAc,IAAI,CAAC,aAAa,CAChC,SAAU6D,EACV,KAAM,IAAI,CAAC,OAAO,EACpB,CACF,CAKA,uBAAwB,CACtB,MAAO,CACL,UAAW,IAAI,CAAC,QAAQ,GACxB,OAAQ,IAAI,CAAC,eAAe,EAC9B,CACF,CASA,SAAU,KACJ+B,EACJ,IAAM5F,EAAa,IAAI,CAAC,aAAa,GAIrC,OAHmB4B,KAAAA,IAAf5B,GACF4F,CAAAA,EAAO,IAAI,CAAC,oBAAoB,CAAC5F,EAAU,EAEtC4F,CACT,CAQA,qBAAqB5F,CAAU,CAAE,CAC/B,IACI+F,EAAKM,EADLC,EAAS,IAAI,CAAC,QAAQ,EAAI,EAE9B,GAAI,IAAI,CAAC,YAAY,CAAE,CACrB,IAAMC,EAAU,SAAkB,IAAI,CAAC,YAAY,CAAEvG,EAAY,GACjEsG,EAASC,EACTR,EAAM,IAAI,CAAC,YAAY,CAACQ,EAAQ,CAE9BF,EADEE,GAAW,IAAI,CAAC,YAAY,CAAC,MAAM,CAAG,EAC3B,EAEAR,EAAM,IAAI,CAAC,YAAY,CAACQ,EAAU,EAAE,AAErD,MACER,EAAM,IAAI,CAAC,cAAc,CACzBM,EAAa,IAAI,CAAC,WAAW,CAE/B,OAAOC,EAASvF,KAAK,GAAG,CAACgF,EAAM/F,GAAce,KAAK,GAAG,CAACsF,EACxD,CAQA,qBAAqBT,CAAI,CAAE,CACzB,GAAI,IAAI,CAAC,YAAY,EAAE,OAAQ,CAC7B,GAAI,AAA6B,IAA7B,IAAI,CAAC,YAAY,CAAC,MAAM,CAC1B,OAAO,IAAI,CAAC,YAAY,CAAC,EAAE,CAE7B,IAAMY,EAAY,SAChBzF,KAAK,KAAK,CAAC6E,GACX,EACA,IAAI,CAAC,YAAY,CAAC,MAAM,CAAG,GAEvBS,EACJ,IAAI,CAAC,YAAY,CAACG,EAAU,CAAG,IAAI,CAAC,YAAY,CAACA,EAAY,EAAE,CACjE,OACE,IAAI,CAAC,YAAY,CAACA,EAAU,CAC5BzF,KAAK,GAAG,CAACsF,EAAY,SAAMT,EAAOY,EAAW,EAAG,GAEpD,CACA,OACE,IAAI,CAAC,cAAc,CAAGzF,KAAK,GAAG,CAAC,IAAI,CAAC,WAAW,CAAE6E,EAAO,IAAI,CAAC,QAAQ,CAEzE,CAYA,IAAIa,CAAgB,CAAEzE,CAAO,CAAE,CAE7B,IAAI0E,EAOJ,GANA,QACEtD,MAAM,OAAO,CAACqD,IACZ,AACE,YADF,OAAyB,AAACA,EAAkB,qBAAqB,CAEnE,qDAEErD,MAAM,OAAO,CAACqD,GAAmB,CACnC,QACE,CAAC,cAAQA,GACT,kDAEF,IAAM7G,EAAS,qBAAe6G,EAAkB,IAAI,CAAC,aAAa,IAClEC,EAAW,iBAAkB9G,EAC/B,MAAO,GAAI6G,AAA+B,WAA/BA,EAAiB,OAAO,GAAiB,CAClD,IAAM7G,EAAS,qBACb6G,EAAiB,SAAS,GAC1B,IAAI,CAAC,aAAa,IAGpBC,AADAA,CAAAA,EAAW,iBAAkB9G,EAAM,EAC1B,MAAM,CAAC,IAAI,CAAC,WAAW,GAAI,gBAAUA,GAChD,KAAO,CACL,IAAM+G,EAAiB,0BAErBD,EADEC,EAEAF,EACG,KAAK,GACL,SAAS,CAACE,EAAgB,IAAI,CAAC,aAAa,IAGtCF,CAEf,CAEA,IAAI,CAAC,WAAW,CAACC,EAAU1E,EAC7B,CAOA,yBAAyB0E,CAAQ,CAAE,CACjC,IAAM7C,EAAW,IAAI,CAAC,WAAW,GAC3B+C,EAAW7F,KAAK,GAAG,CAAC8C,GACpBgD,EAAW9F,KAAK,GAAG,CAAC,CAAC8C,GACrBiD,EAASJ,EAAS,kBAAkB,GACpCK,EAASL,EAAS,SAAS,GAC7BM,EAAU,QAAS,CACnBC,EAAU,QAAS,CACnBC,EAAU,CAACC,IACXC,EAAU,CAACD,IACf,IAAK,IAAI7D,EAAI,EAAGc,EAAK0C,EAAO,MAAM,CAAExD,EAAIc,EAAId,GAAKyD,EAAQ,CACvD,IAAMM,EAAOP,CAAM,CAACxD,EAAE,CAAGsD,EAAWE,CAAM,CAACxD,EAAI,EAAE,CAAGuD,EAC9CS,EAAOR,CAAM,CAACxD,EAAE,CAAGuD,EAAWC,CAAM,CAACxD,EAAI,EAAE,CAAGsD,EACpDI,EAAUjG,KAAK,GAAG,CAACiG,EAASK,GAC5BJ,EAAUlG,KAAK,GAAG,CAACkG,EAASK,GAC5BJ,EAAUnG,KAAK,GAAG,CAACmG,EAASG,GAC5BD,EAAUrG,KAAK,GAAG,CAACqG,EAASE,EAC9B,CACA,MAAO,CAACN,EAASC,EAASC,EAASE,EAAQ,AAC7C,CAMA,YAAYV,CAAQ,CAAE1E,CAAO,CAAE,KASzBP,EAPJ,IAAIxB,EAAO+B,AADXA,CAAAA,EAAUA,GAAW,CAAC,GACH,IAAI,CAClB/B,GACHA,CAAAA,EAAO,IAAI,CAAC,4BAA4B,EAAC,EAE3C,IAAM2C,EACJZ,AAAoBJ,KAAAA,IAApBI,EAAQ,OAAO,CAAiBA,EAAQ,OAAO,CAAG,CAAC,EAAG,EAAG,EAAG,EAAE,CAC1DuE,EAAUvE,AAAoBJ,KAAAA,IAApBI,EAAQ,OAAO,EAAiBA,EAAQ,OAAO,CAG7DP,EADEO,AAA0BJ,KAAAA,IAA1BI,EAAQ,aAAa,CACPA,EAAQ,aAAa,CAC5BA,AAAoBJ,KAAAA,IAApBI,EAAQ,OAAO,CACR,IAAI,CAAC,oBAAoB,CAACA,EAAQ,OAAO,EAEzC,EAGlB,IAAMuF,EAAgB,IAAI,CAAC,wBAAwB,CAACb,GAGhD1G,EAAa,IAAI,CAAC,8BAA8B,CAACuH,EAAe,CAClEtH,CAAI,CAAC,EAAE,CAAG2C,CAAO,CAAC,EAAE,CAAGA,CAAO,CAAC,EAAE,CACjC3C,CAAI,CAAC,EAAE,CAAG2C,CAAO,CAAC,EAAE,CAAGA,CAAO,CAAC,EAAE,CAClC,EACD5C,EAAawH,MAAMxH,GACfyB,EACAV,KAAK,GAAG,CAACf,EAAYyB,GACzBzB,EAAa,IAAI,CAAC,wBAAwB,CAACA,EAAYuG,EAAAA,GAGvD,IAAM1C,EAAW,IAAI,CAAC,WAAW,GAC3BgD,EAAW9F,KAAK,GAAG,CAAC8C,GACpB+C,EAAW7F,KAAK,GAAG,CAAC8C,GACpB4D,EAAY,gBAAUF,EAC5BE,CAAAA,CAAS,CAAC,EAAE,EAAI,AAAE7E,CAAAA,CAAO,CAAC,EAAE,CAAGA,CAAO,CAAC,EAAE,AAAD,EAAK,EAAK5C,EAClDyH,CAAS,CAAC,EAAE,EAAI,AAAE7E,CAAAA,CAAO,CAAC,EAAE,CAAGA,CAAO,CAAC,EAAE,AAAD,EAAK,EAAK5C,EAClD,IAAM0H,EAAUD,CAAS,CAAC,EAAE,CAAGb,EAAWa,CAAS,CAAC,EAAE,CAAGZ,EACnDc,EAAUF,CAAS,CAAC,EAAE,CAAGb,EAAWa,CAAS,CAAC,EAAE,CAAGZ,EACnD9G,EAAS,IAAI,CAAC,oBAAoB,CAAC,CAAC2H,EAASC,EAAQ,CAAE3H,GACvDuD,EAAWvB,EAAQ,QAAQ,CAAGA,EAAQ,QAAQ,CAAG,MAAI,AAEvDA,AAAqBJ,MAAAA,IAArBI,EAAQ,QAAQ,CAClB,IAAI,CAAC,eAAe,CAClB,CACE,WAAYhC,EACZ,OAAQD,EACR,SAAUiC,EAAQ,QAAQ,CAC1B,OAAQA,EAAQ,MAAM,AACxB,EACAuB,IAGF,IAAI,CAAC,iBAAiB,CAAGvD,EACzB,IAAI,CAAC,aAAa,CAAGD,EACrB,IAAI,CAAC,iBAAiB,CAAC,GAAO,IAC9B2D,EAAkBH,EAAU,IAEhC,CASA,SAASqE,CAAU,CAAE3H,CAAI,CAAE4H,CAAQ,CAAE,CACnC,IAAI,CAAC,gBAAgB,CACnB,yBAAmBD,EAAY,IAAI,CAAC,aAAa,IACjD3H,EACA4H,EAEJ,CAOA,iBAAiBD,CAAU,CAAE3H,CAAI,CAAE4H,CAAQ,CAAE,CAC3C,IAAI,CAAC,iBAAiB,CACpBzB,EACEwB,EACA3H,EACA4H,EACA,IAAI,CAAC,aAAa,GAClB,IAAI,CAAC,WAAW,IAGtB,CAUA,qBAAqB9H,CAAM,CAAEC,CAAU,CAAE6D,CAAQ,CAAE5D,CAAI,CAAE,KACnDE,EACJ,IAAMyC,EAAU,IAAI,CAAC,QAAQ,CAC7B,GAAIA,GAAW7C,EAAQ,CACrB,IAAMoG,EAAc,IAAI,CAAC,4BAA4B,CAAC,CAACtC,GACjDiE,EAAgB1B,EACpBrG,EACAE,EACA,CAACkG,CAAW,CAAC,EAAE,CAAG,EAAIvD,CAAO,CAAC,EAAE,CAAEuD,CAAW,CAAC,EAAE,CAAG,EAAIvD,CAAO,CAAC,EAAE,CAAC,CAClE5C,EACA6D,GAEF1D,EAAc,CACZJ,CAAM,CAAC,EAAE,CAAG+H,CAAa,CAAC,EAAE,CAC5B/H,CAAM,CAAC,EAAE,CAAG+H,CAAa,CAAC,EAAE,CAC7B,AACH,CACA,OAAO3H,CACT,CAKA,OAAQ,CACN,MAAO,CAAC,CAAC,IAAI,CAAC,iBAAiB,IAAM,AAAyByB,KAAAA,IAAzB,IAAI,CAAC,aAAa,EACzD,CAOA,aAAamG,CAAgB,CAAE,CAC7B,IAAMhI,EAAS,uBAAiB,IAAI,CAAC,aAAa,CAAE,IAAI,CAAC,aAAa,IACtE,IAAI,CAAC,SAAS,CAAC,CACbA,CAAM,CAAC,EAAE,CAAGgI,CAAgB,CAAC,EAAE,CAC/BhI,CAAM,CAAC,EAAE,CAAGgI,CAAgB,CAAC,EAAE,CAChC,CACH,CAMA,qBAAqBA,CAAgB,CAAE,CACrC,IAAMhI,EAAS,IAAI,CAAC,aAAa,CACjC,IAAI,CAAC,iBAAiB,CAAC,CACrBA,CAAM,CAAC,EAAE,CAAGgI,CAAgB,CAAC,EAAE,CAC/BhI,CAAM,CAAC,EAAE,CAAGgI,CAAgB,CAAC,EAAE,CAChC,CACH,CASA,iBAAiBjH,CAAK,CAAEqD,CAAM,CAAE,CAC9BA,EAASA,GAAU,yBAAmBA,EAAQ,IAAI,CAAC,aAAa,IAChE,IAAI,CAAC,wBAAwB,CAACrD,EAAOqD,EACvC,CAQA,yBAAyBrD,CAAK,CAAEqD,CAAM,CAAE,CACtC,IAAMjE,EAAW,IAAI,CAAC,YAAY,IAAM,IAAI,CAAC,cAAc,GACrDD,EAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,IAC7C+H,EAAgB,IAAI,CAAC,YAAY,CAAC,UAAU,CAChD,IAAI,CAAC,iBAAiB,CAAGlH,EACzB,EACAb,EACAC,GAGEiE,GACF,KAAI,CAAC,aAAa,CAAG,IAAI,CAAC,mBAAmB,CAAC6D,EAAe7D,EAAM,EAGrE,IAAI,CAAC,iBAAiB,EAAIrD,EAC1B,IAAI,CAAC,iBAAiB,EACxB,CASA,WAAWkD,CAAK,CAAEG,CAAM,CAAE,CACxB,IAAI,CAAC,gBAAgB,CAACpD,KAAK,GAAG,CAAC,IAAI,CAAC,WAAW,CAAE,CAACiD,GAAQG,EAC5D,CASA,eAAeH,CAAK,CAAEG,CAAM,CAAE,CACxBA,GACFA,CAAAA,EAAS,yBAAmBA,EAAQ,IAAI,CAAC,aAAa,GAAE,EAE1D,IAAI,CAAC,sBAAsB,CAACH,EAAOG,EACrC,CAMA,uBAAuBH,CAAK,CAAEG,CAAM,CAAE,CACpC,IAAMjE,EAAW,IAAI,CAAC,YAAY,IAAM,IAAI,CAAC,cAAc,GACrD+H,EAAc,IAAI,CAAC,YAAY,CAAC,QAAQ,CAC5C,IAAI,CAAC,eAAe,CAAGjE,EACvB9D,GAEEiE,GACF,KAAI,CAAC,aAAa,CAAG,IAAI,CAAC,qBAAqB,CAAC8D,EAAa9D,EAAM,EAErE,IAAI,CAAC,eAAe,EAAIH,EACxB,IAAI,CAAC,iBAAiB,EACxB,CAQA,UAAUjE,CAAM,CAAE,CAChB,IAAI,CAAC,iBAAiB,CACpBA,EAAS,yBAAmBA,EAAQ,IAAI,CAAC,aAAa,IAAMA,EAEhE,CAMA,kBAAkBA,CAAM,CAAE,CACxB,IAAI,CAAC,aAAa,CAAGA,EACrB,IAAI,CAAC,iBAAiB,EACxB,CAOA,QAAQmI,CAAI,CAAElE,CAAK,CAAE,CAGnB,OAFA,IAAI,CAAC,MAAM,CAACkE,EAAK,EAAIlE,EACrB,IAAI,CAAC,OAAO,GACL,IAAI,CAAC,MAAM,CAACkE,EAAK,AAC1B,CAQA,cAAclI,CAAU,CAAE,CACxB,IAAI,CAAC,iBAAiB,CAAGA,EACzB,IAAI,CAAC,iBAAiB,EACxB,CAQA,YAAY6D,CAAQ,CAAE,CACpB,IAAI,CAAC,eAAe,CAAGA,EACvB,IAAI,CAAC,iBAAiB,EACxB,CAOA,QAAQ+B,CAAI,CAAE,CACZ,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,oBAAoB,CAACA,GAC/C,CAUA,kBAAkBuC,CAAgB,CAAEC,CAAW,CAAE,CAC/C,IAAMlI,EACJ,IAAI,CAAC,YAAY,IAAM,IAAI,CAAC,cAAc,IAAMkI,EAG5CH,EAAc,IAAI,CAAC,YAAY,CAAC,QAAQ,CAC5C,IAAI,CAAC,eAAe,CACpB/H,GAEID,EAAO,IAAI,CAAC,gBAAgB,CAACgI,GAC7BD,EAAgB,IAAI,CAAC,YAAY,CAAC,UAAU,CAChD,IAAI,CAAC,iBAAiB,CACtB,EACA/H,EACAC,GAEImI,EAAY,IAAI,CAAC,YAAY,CAAC,MAAM,CACxC,IAAI,CAAC,aAAa,CAClBL,EACA/H,EACAC,EACA,IAAI,CAAC,oBAAoB,CACvB,IAAI,CAAC,aAAa,CAClB8H,EACAC,EACAhI,IAIA,IAAI,CAAC,GAAG,CAACmC,EAAA,UAAqB,IAAM6F,GACtC,IAAI,CAAC,GAAG,CAAC7F,EAAA,UAAqB,CAAE6F,GAE9B,IAAI,CAAC,GAAG,CAAC7F,EAAA,YAAuB,IAAM4F,IACxC,IAAI,CAAC,GAAG,CAAC5F,EAAA,YAAuB,CAAE4F,GAClC,IAAI,CAAC,GAAG,CAAC,OAAQ,IAAI,CAAC,OAAO,GAAI,KAGhCK,GACA,IAAI,CAAC,GAAG,CAACjG,EAAA,QAAmB,GAC5B,aAAO,IAAI,CAAC,GAAG,CAACA,EAAA,QAAmB,EAAGiG,IAEvC,IAAI,CAAC,GAAG,CAACjG,EAAA,QAAmB,CAAEiG,GAG5B,IAAI,CAAC,YAAY,IAAM,CAACF,GAC1B,IAAI,CAAC,gBAAgB,GAEvB,IAAI,CAAC,aAAa,CAAGvG,KAAAA,CACvB,CAWA,mBAAmB0G,CAAQ,CAAEC,CAAmB,CAAEpE,CAAM,CAAE,CACxDmE,EAAWA,AAAa1G,KAAAA,IAAb0G,EAAyBA,EAAW,IAG/C,IAAML,EAAc,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAe,EAC7DhI,EAAO,IAAI,CAAC,gBAAgB,CAACgI,GAC7BD,EAAgB,IAAI,CAAC,YAAY,CAAC,UAAU,CAChD,IAAI,CAAC,iBAAiB,CALNO,GAAuB,EAOvCtI,GAEIoI,EAAY,IAAI,CAAC,YAAY,CAAC,MAAM,CACxC,IAAI,CAAC,aAAa,CAClBL,EACA/H,EACA,GACA,IAAI,CAAC,oBAAoB,CACvB,IAAI,CAAC,aAAa,CAClB+H,EACAC,EACAhI,IAIJ,GAAIqI,AAAa,IAAbA,GAAkB,CAAC,IAAI,CAAC,aAAa,CAAE,CACzC,IAAI,CAAC,iBAAiB,CAAGN,EACzB,IAAI,CAAC,eAAe,CAAGC,EACvB,IAAI,CAAC,aAAa,CAAGI,EACrB,IAAI,CAAC,iBAAiB,GACtB,MACF,CAEAlE,EAASA,GAAWmE,CAAAA,AAAa,IAAbA,EAAiB,IAAI,CAAC,aAAa,CAAG1G,KAAAA,CAAQ,EAClE,IAAI,CAAC,aAAa,CAAGA,KAAAA,EAGnB,IAAI,CAAC,aAAa,KAAOoG,GACzB,IAAI,CAAC,WAAW,KAAOC,GACtB,IAAI,CAAC,iBAAiB,IACtB,aAAO,IAAI,CAAC,iBAAiB,GAAII,KAE9B,IAAI,CAAC,YAAY,IACnB,IAAI,CAAC,gBAAgB,GAGvB,IAAI,CAAC,eAAe,CAAC,CACnB,SAAUJ,EACV,OAAQI,EACR,WAAYL,EACZ,SAAUM,EACV,OAAQ,SAAO,CACf,OAAQnE,CACV,GAEJ,CAQA,kBAAmB,CACjB,IAAI,CAAC,kBAAkB,CAAC,GAExB,IAAI,CAAC,OAAO,CAACD,EAAA,aAAoB,CAAE,EACrC,CAUA,eAAeoE,CAAQ,CAAEC,CAAmB,CAAEpE,CAAM,CAAE,CACpDA,EAASA,GAAU,yBAAmBA,EAAQ,IAAI,CAAC,aAAa,IAChE,IAAI,CAAC,sBAAsB,CAACmE,EAAUC,EAAqBpE,EAC7D,CASA,uBAAuBmE,CAAQ,CAAEC,CAAmB,CAAEpE,CAAM,CAAE,CACvD,IAAI,CAAC,cAAc,KAGxB,IAAI,CAAC,OAAO,CAACD,EAAA,aAAoB,CAAE,IACnC,IAAI,CAAC,kBAAkB,CAACoE,EAAUC,EAAqBpE,GACzD,CASA,qBAAqBqE,CAAY,CAAEC,CAAgB,CAAE,CACnD,IAAMxI,EAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,IACnD,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAC7BuI,EACAC,GAAoB,IAAI,CAAC,aAAa,GACtCxI,EAEJ,CAWA,mBAAmByI,CAAU,CAAE7G,CAAS,CAAE,CACxC,IAAM8G,EAAY,IAAI,CAAC,oBAAoB,CAACD,GAC5C,OAAO,IAAI,CAAC,oBAAoB,CAC9B,IAAI,CAAC,wBAAwB,CAACC,EAAW9G,GAE7C,CAWA,yBAAyB4G,CAAgB,CAAE5G,CAAS,CAAE,CACpDA,EAAYA,GAAa,EACzB,IAAM5B,EAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,IAEnD,OAAO,IAAI,CAAC,YAAY,CAAC,UAAU,CAACwI,EAAkB5G,EAAW5B,EACnE,CACF,CAMA,SAASyD,EAAkBH,CAAQ,CAAEqF,CAAW,EAC9CC,WAAW,WACTtF,EAASqF,EACX,EAAG,EACL,CAMO,SAASpG,EAAuBR,CAAO,EAC5C,GAAIA,AAAmBJ,KAAAA,IAAnBI,EAAQ,MAAM,CAAgB,CAChC,IAAMlC,EACJkC,AAAmCJ,KAAAA,IAAnCI,EAAQ,sBAAsB,EAC1BA,EAAQ,sBAAsB,CAEpC,OAAOrC,EAAaqC,EAAQ,MAAM,CAAEA,EAAQ,mBAAmB,CAAElC,EACnE,CAEA,IAAMoG,EAAa,uBAAiBlE,EAAQ,UAAU,CAAE,aACxD,GAAIA,AAAuB,KAAvBA,EAAQ,UAAU,EAAakE,EAAW,QAAQ,GAAI,CACxD,IAAMtG,EAASsG,EAAW,SAAS,GAAG,KAAK,GAG3C,OAFAtG,CAAM,CAAC,EAAE,CAAG,CAACuH,IACbvH,CAAM,CAAC,EAAE,CAAGuH,IACLxH,EAAaC,EAAQ,GAAO,GACrC,CAEA,OAAO,CACT,CAOO,SAAS0C,EAA2BN,CAAO,MD31DhDlC,EACAoB,EA4DAM,EACAC,EACA3B,EACAoB,MC4xDIuB,EACAjB,EACAC,EAOJ,IAAIqH,EACF9G,AAAoBJ,KAAAA,IAApBI,EAAQ,OAAO,CAAiBA,EAAQ,OAAO,CA5sD1B,EA8sDnB+G,EACF/G,AAAoBJ,KAAAA,IAApBI,EAAQ,OAAO,CAAiBA,EAAQ,OAAO,CAP1B,GASjBqE,EACJrE,AAAuBJ,KAAAA,IAAvBI,EAAQ,UAAU,CAAiBA,EAAQ,UAAU,CAT7B,EAWpBgH,EACJhH,AAAuBJ,KAAAA,IAAvBI,EAAQ,UAAU,EAAiBA,EAAQ,UAAU,CAEjDlC,EACJkC,AAAuCJ,KAAAA,IAAvCI,EAAQ,0BAA0B,EAC9BA,EAAQ,0BAA0B,CAGlCZ,EACJY,AAA2BJ,KAAAA,IAA3BI,EAAQ,cAAc,EAAiBA,EAAQ,cAAc,CAEzDkE,EAAa,uBAAiBlE,EAAQ,UAAU,CAAE,aAClDiH,EAAa/C,EAAW,SAAS,GACnCgD,EAAsBlH,EAAQ,mBAAmB,CACjDpC,EAASoC,EAAQ,MAAM,CAM3B,GALI,CAACgH,GAAc,CAACpJ,GAAUsG,EAAW,QAAQ,KAC/CgD,EAAsB,GACtBtJ,EAASqJ,GAGPjH,AAAwBJ,KAAAA,IAAxBI,EAAQ,WAAW,CAAgB,CACrC,IAAMmH,EAAcnH,EAAQ,WAAW,EACvCR,EAAgB2H,CAAW,CAACL,EAAQ,CACpCrH,EACE0H,AAAyBvH,KAAAA,IAAzBuH,CAAW,CAACJ,EAAQ,CAChBI,CAAW,CAACJ,EAAQ,CACpBI,CAAW,CAACA,EAAY,MAAM,CAAG,EAAE,CAErCnH,EAAQ,mBAAmB,GD14DjClC,EC64DMA,ED54DNoB,EC64DM,CAACgI,GAAuBtJ,ED14D9BE,EAASA,AAAW8B,KAAAA,IAAX9B,GAAuBA,ECu4D5B2C,ED93DF,SAAUzC,CAAU,CAAE6B,CAAS,CAAE5B,CAAI,CAAEC,CAAQ,EAC7C,GAAIF,AAAe4B,KAAAA,IAAf5B,EAA0B,CAC5B,IAAMwB,EAAgB2H,AC63DtBA,CD73DiC,CAAC,EAAE,CAC9B1H,EAAgB0H,AC43DtBA,CD53DiC,CAACA,AC43DlCA,ED53D8C,MAAM,CAAG,EAAE,CACnDrH,EAAeZ,EACjBD,EACEO,EACAN,EACAjB,EC03DNmB,GDv3DII,EAGJ,GAAItB,SACF,AAAKJ,EAGEyB,EACLvB,EACA8B,EACAL,GALO,SAAMzB,EAAYyB,EAAeK,GAS5C,IAAMsH,EAASrI,KAAK,GAAG,CAACe,EAAc9B,GAChCqJ,EAAItI,KAAK,KAAK,CAAC,SCq2DrBoI,EDr2DoDC,EAAQvH,WAC5D,AAAIsH,ACo2DJA,CDp2De,CAACE,EAAE,CAAGvH,GAAgBuH,EAAIF,ACo2DzCA,EDp2DqD,MAAM,CAAG,EACrDA,ACm2DTA,CDn2DoB,CAACE,EAAI,EAAE,CAEpBF,ACi2DPA,CDj2DkB,CAACE,EAAE,AACvB,CAEF,GCo2DE5G,EAAuBd,EACrBH,EACAC,EACA3B,EACA,CAACoJ,GAAuBtJ,EACxBwB,EAGN,KAAO,CAOL,IAAMkI,EACJrJ,AANW,CAACgJ,EAGVlI,KAAK,GAAG,CAAC,eAASkI,GAAa,gBAAUA,IADzC,AAAC,IAAM,yBAAuB,CAAI/C,EAAW,gBAAgB,EACT,EAG/C,GAAiB,CAAGnF,GAQzBS,AAAkBI,KAAAA,IADtBJ,CAAAA,EAAgBQ,EAAQ,aAAa,AAAD,EAElC8G,EAAU,EAEVtH,EAAgB8H,EAAuBvI,KAAK,GAAG,CAACsF,EAAYyC,GAKxClH,KAAAA,IADtBH,CAAAA,EAAgBO,EAAQ,aAAa,AAAD,IAI9BP,EAFAO,AAAoBJ,KAAAA,IAApBI,EAAQ,OAAO,CACbA,AAA0BJ,KAAAA,IAA1BI,EAAQ,aAAa,CACPR,EAAgBT,KAAK,GAAG,CAACsF,EAAY0C,GAErCO,EAAuBvI,KAAK,GAAG,CAACsF,EAAY0C,GAlBhEO,EACAvI,YAyBFgI,EACED,EACA/H,KAAK,KAAK,CACRA,KAAK,GAAG,CAACS,EAAgBC,GAAiBV,KAAK,GAAG,CAACsF,IAEvD5E,EAAgBD,EAAgBT,KAAK,GAAG,CAACsF,EAAY0C,EAAUD,GAE3D9G,EAAQ,mBAAmB,GDz4DjCR,EC44DMA,ED34DNC,EC44DMA,ED34DN3B,EC44DMA,ED34DNoB,EC44DM,CAACgI,GAAuBtJ,EDz4D9BE,EAASA,AAAW8B,KAAAA,IAAX9B,GAAuBA,EAChC2B,EAAgBA,AAAkBG,KAAAA,IAAlBH,EAA8BA,EAAgB,ECm4D1DgB,EDz3DF,SAAUzC,CAAU,CAAE6B,CAAS,CAAE5B,CAAI,CAAEC,CAAQ,EAC7C,GAAIF,AAAe4B,KAAAA,IAAf5B,EAA0B,CAC5B,IAAM8B,EAAeZ,EACjBD,EACEO,EACAN,EACAjB,ECy3DNmB,GDt3DII,EAGJ,GAAItB,SACF,AAAKJ,EAGEyB,EACLvB,EACA8B,EACAL,GALO,SAAMzB,EAAYyB,EAAeK,GAU5C,IAQMyH,EAAYxI,KAAK,GAAG,CARLA,KAAK,IAAI,CAC5BA,KAAK,GAAG,CAACS,EAAgBM,GAAgBf,KAAK,GAAG,CCi2DnDsF,GDn2DkB,MAMMtF,KAAK,KAAK,CAChCA,KAAK,GAAG,CAACS,EAFIT,KAAK,GAAG,CAACe,EAAc9B,IAEDe,KAAK,GAAG,CC41D7CsF,GD/1De,GAAc,WAAbxE,CAA4B,EAAI,EAAE,IAM5CmG,EAAgBxG,EAAgBT,KAAK,GAAG,CCy1D9CsF,EDz1DsDkD,GACtD,MAAO,SAAMvB,EAAevG,EAAeK,EAC7C,CAEF,GC61DEW,EAAuBd,EACrBH,EACAC,EACA3B,EACA,CAACoJ,GAAuBtJ,EACxBwB,EAGN,CACA,MAAO,CACL,WAAYqB,EACZ,cAAejB,EACf,cAAeC,EACf,QAASqH,EACT,WAAYzC,CACd,CACF,CAMO,SAAS1D,EAAyBX,CAAO,EAG9C,GADEA,AAA2BJ,KAAAA,IAA3BI,EAAQ,cAAc,EAAiBA,EAAQ,cAAc,CAC3C,CAClB,IAAMwH,EAAoBxH,EAAQ,iBAAiB,QACnD,AAAIwH,AAAsB5H,KAAAA,IAAtB4H,GAAmCA,AAAsB,KAAtBA,EAC9B,WAELA,AAAsB,KAAtBA,EACK,IAAY,CAEjB,AAA6B,UAA7B,OAAOA,EACF,SAAcA,GAEhB,IAAY,AACrB,CACA,OAAO,IAAO,AAChB,CAOO,SAASvF,EAAgBF,CAAS,QACnCA,CAAAA,CAAAA,EAAU,YAAY,GAAIA,EAAU,YAAY,GAC9C,CAAC,aAAiBA,EAAU,YAAY,CAAEA,EAAU,YAAY,CADnB,GAK/CA,EAAU,gBAAgB,GAAKA,EAAU,gBAAgB,EAGzDA,EAAU,cAAc,GAAKA,EAAU,cAAc,AAI3D,CAUA,SAASqC,EAAkBwB,CAAU,CAAE3H,CAAI,CAAE4H,CAAQ,CAAE7H,CAAU,CAAE6D,CAAQ,EAEzE,IAAM+C,EAAW7F,KAAK,GAAG,CAAC,CAAC8C,GACvBgD,EAAW9F,KAAK,GAAG,CAAC,CAAC8C,GACrBwD,EAAOO,CAAU,CAAC,EAAE,CAAGhB,EAAWgB,CAAU,CAAC,EAAE,CAAGf,EAClDS,EAAOM,CAAU,CAAC,EAAE,CAAGhB,EAAWgB,CAAU,CAAC,EAAE,CAAGf,EAStD,OARAQ,GAAQ,AAACpH,CAAAA,CAAI,CAAC,EAAE,CAAG,EAAI4H,CAAQ,CAAC,EAAE,AAAD,EAAK7H,EAQ/B,CAHSqH,EAAOT,EAAWU,AAJlCA,CAAAA,GAAQ,AAACO,CAAAA,CAAQ,CAAC,EAAE,CAAG5H,CAAI,CAAC,EAAE,CAAG,GAAKD,CAAS,EAG/C6G,CAAAA,EAAW,CAACA,CAAO,EAEHS,EAAOV,EAAWS,EAAOR,EAEhB,AAC3B,CAEA,MAAe9E,C,qBCxmEf,IAAe,CACb,UAAW,EACX,YAAa,CACf,C,sBCHA,IAAe,CACb,OAAQ,SACR,WAAY,aACZ,SAAU,UACZ,C,gJCEO,SAAS0H,EAAQ5F,CAAQ,EAC9B,GAAIA,AAAajC,KAAAA,IAAbiC,EACF,OAAO,CAGX,CAMO,SAAS7C,EAAK6C,CAAQ,EAC3B,GAAIA,AAAajC,KAAAA,IAAbiC,EACF,OAAOA,CAGX,CAMO,SAAS6F,EAAcC,CAAC,EAC7B,IAAMC,EAAQ,AAAC,EAAI7I,KAAK,EAAE,CAAI4I,EAC9B,OAME,SAAU9F,CAAQ,CAAE3D,CAAQ,SAC1B,AAAIA,EACK2D,EAGLA,AAAajC,KAAAA,IAAbiC,EACFA,EAAW9C,KAAK,KAAK,CAAC8C,EAAW+F,EAAQ,IAAOA,QAIpD,CAEJ,CAMO,SAASC,EAAiBC,CAAS,EACxC,IAAMC,EAAID,AAAclI,KAAAA,IAAdkI,EAA0B,SAAU,GAAKA,EACnD,OAME,SAAUjG,CAAQ,CAAE3D,CAAQ,SAC1B,AAAIA,GAAY2D,AAAajC,KAAAA,IAAbiC,EACPA,EAGL9C,KAAK,GAAG,CAAC8C,IAAakG,EACjB,EAEFlG,CACT,CAEJ,C,+ECxEO,IAAMmG,EAAmB,GAMnBC,EAAoB,G"}