{"version":3,"file":"2378.76fe43e438afc3c5.js","sources":["webpack://@terrestris/shogun-gis-client/./node_modules/ol/loadingstrategy.js"],"sourcesContent":["/**\n * @module ol/loadingstrategy\n */\n\nimport {fromUserExtent, fromUserResolution, toUserExtent} from './proj.js';\n\n/**\n * Strategy function for loading all features with a single request.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\n * @api\n */\nexport function all(extent, resolution) {\n  return [[-Infinity, -Infinity, Infinity, Infinity]];\n}\n\n/**\n * Strategy function for loading features based on the view's extent and\n * resolution.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\n * @api\n */\nexport function bbox(extent, resolution) {\n  return [extent];\n}\n\n/**\n * Creates a strategy function for loading features based on a tile grid.\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {function(import(\"./extent.js\").Extent, number, import(\"./proj.js\").Projection): Array<import(\"./extent.js\").Extent>} Loading strategy.\n * @api\n */\nexport function tile(tileGrid) {\n  return (\n    /**\n     * @param {import(\"./extent.js\").Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @param {import(\"./proj.js\").Projection} projection Projection.\n     * @return {Array<import(\"./extent.js\").Extent>} Extents.\n     */\n    function (extent, resolution, projection) {\n      const z = tileGrid.getZForResolution(\n        fromUserResolution(resolution, projection),\n      );\n      const tileRange = tileGrid.getTileRangeForExtentAndZ(\n        fromUserExtent(extent, projection),\n        z,\n      );\n      /** @type {Array<import(\"./extent.js\").Extent>} */\n      const extents = [];\n      /** @type {import(\"./tilecoord.js\").TileCoord} */\n      const tileCoord = [z, 0, 0];\n      for (\n        tileCoord[1] = tileRange.minX;\n        tileCoord[1] <= tileRange.maxX;\n        ++tileCoord[1]\n      ) {\n        for (\n          tileCoord[2] = tileRange.minY;\n          tileCoord[2] <= tileRange.maxY;\n          ++tileCoord[2]\n        ) {\n          extents.push(\n            toUserExtent(tileGrid.getTileCoordExtent(tileCoord), projection),\n          );\n        }\n      }\n      return extents;\n    }\n  );\n}\n"],"names":[],"mappings":"kQAaO,SAAS,EAAI,CAAM,CAAE,CAAU,EACpC,MAAO,CAAC,CAAC,CAAC,IAAU,CAAC,IAAU,IAAU,IAAS,CAAC,AACrD,CAUO,SAAS,EAAK,CAAM,CAAE,CAAU,EACrC,MAAO,CAAC,EAAO,AACjB,CAQO,SAAS,EAAK,CAAQ,EAC3B,OAOE,SAAU,CAAM,CAAE,CAAU,CAAE,CAAU,EACtC,IAAM,EAAI,EAAS,iBAAiB,CAClC,yBAAmB,EAAY,IAE3B,EAAY,EAAS,yBAAyB,CAClD,qBAAe,EAAQ,GACvB,GAGI,EAAU,EAAE,CAEZ,EAAY,CAAC,EAAG,EAAG,EAAE,CAC3B,IACE,CAAS,CAAC,EAAE,CAAG,EAAU,IAAI,CAC7B,CAAS,CAAC,EAAE,EAAI,EAAU,IAAI,CAC9B,EAAE,CAAS,CAAC,EAAE,CAEd,IACE,CAAS,CAAC,EAAE,CAAG,EAAU,IAAI,CAC7B,CAAS,CAAC,EAAE,EAAI,EAAU,IAAI,CAC9B,EAAE,CAAS,CAAC,EAAE,CAEd,EAAQ,IAAI,CACV,mBAAa,EAAS,kBAAkB,CAAC,GAAY,IAI3D,OAAO,CACT,CAEJ,C"}