name: Test successful build

on: pull_request

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout sources üî∞
      uses: actions/checkout@v4

    - name: Setup Node.js üßÆ
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Cache Node.js modules üíæ
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.OS }}-node-
          ${{ runner.OS }}-

    - name: Install dependencies ‚è¨
      run: npm ci

    - name: Run typecheck, lint and tests üß™
      run: npm run check

    - name: Build artifacts üèóÔ∏è
      run: npm run build

    - name: Run tests related to current changes ‚úÖ
      run: |
        git fetch origin main
        git diff --name-only origin/main
        npx jest --config=jest.config.js --coverage --coverageReporters json-summary --onlyChanged --coverageDirectory ./coverage/changed

    - name: Check for test results ‚ùì
      id: check-results
      run: |
        if [ -f ./coverage/changed/coverage-summary.json ]; then
          COVERAGE_CONTENT=$(cat ./coverage/changed/coverage-summary.json)
          if echo "$COVERAGE_CONTENT" | jq '.total.lines.pct' | grep -q 'Unknown'; then
            echo "no_tests_found=true" >> $GITHUB_ENV
          else
            echo "no_tests_found=false" >> $GITHUB_ENV
          fi
        else
          echo "no_tests_found=true" >> $GITHUB_ENV
        fi

    - name: Jest Coverage Comment üí¨
      uses: MishaKav/jest-coverage-comment@main
      with:
        hide-comment: false
        create-new-comment: false
        hide-summary: false
        multiple-files: |
          All, ./coverage/all/coverage-summary.json
          only changed, ./coverage/changed/coverage-summary.json

    - name: Post No Tests Found Comment ‚ö†Ô∏è
      if: env.no_tests_found == 'true'
      run: |
        COMMENT="‚ö†Ô∏è No tests were found related to the files changed since the last commit."
        PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
        COVERAGE_COMMENT_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments" | \
          jq -r '.[] | select(.user.login == "github-actions[bot]") | .id')

        if [ -z "$COVERAGE_COMMENT_ID" ]; then
          echo "No existing coverage comment found, creating a new comment."
          curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"body\": \"$COMMENT\"}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments"
        else
          echo "Existing coverage comment found, updating the comment."
          EXISTING_COMMENT=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/comments/$COVERAGE_COMMENT_ID" | \
            jq -r '.body')

          UPDATED_COMMENT="$EXISTING_COMMENT\n\n$COMMENT"
          curl -s -X PATCH \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"body\": \"$UPDATED_COMMENT\"}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/comments/$COVERAGE_COMMENT_ID"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
